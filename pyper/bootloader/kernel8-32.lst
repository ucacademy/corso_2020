
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea008953 	b	2a5b4 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e92d4010 	push	{r4, lr}
    8074:	e24ddd82 	sub	sp, sp, #8320	; 0x2080
    8078:	e28d0004 	add	r0, sp, #4
    807c:	eb00000d 	bl	80b8 <CKernel::CKernel()>
    8080:	e28d0004 	add	r0, sp, #4
    8084:	eb000073 	bl	8258 <CKernel::Initialize()>
    8088:	e2504000 	subs	r4, r0, #0
    808c:	0a000004 	beq	80a4 <main+0x34>
    8090:	e28d0004 	add	r0, sp, #4
    8094:	eb0000a2 	bl	8324 <CKernel::Run()>
    8098:	e2404002 	sub	r4, r0, #2
    809c:	e16f4f14 	clz	r4, r4
    80a0:	e1a042a4 	lsr	r4, r4, #5
    80a4:	e28d0004 	add	r0, sp, #4
    80a8:	eb000046 	bl	81c8 <CKernel::~CKernel()>
    80ac:	e1a00004 	mov	r0, r4
    80b0:	e28ddd82 	add	sp, sp, #8320	; 0x2080
    80b4:	e8bd8010 	pop	{r4, pc}

000080b8 <CKernel::CKernel()>:
    80b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    80bc:	e3a01001 	mov	r1, #1
    80c0:	e28070dc 	add	r7, r0, #220	; 0xdc
    80c4:	e24dd00c 	sub	sp, sp, #12
    80c8:	e1a04000 	mov	r4, r0
    80cc:	eb0091f4 	bl	2c8a4 <CMemorySystem::CMemorySystem(bool)>
    80d0:	e1a00007 	mov	r0, r7
    80d4:	eb007741 	bl	25de0 <CKernelOptions::CKernelOptions()>
    80d8:	e2840e93 	add	r0, r4, #2352	; 0x930
    80dc:	e2800004 	add	r0, r0, #4
    80e0:	e2845d6a 	add	r5, r4, #6784	; 0x1a80
    80e4:	eb007567 	bl	25688 <CDeviceNameService::CDeviceNameService()>
    80e8:	e1a00007 	mov	r0, r7
    80ec:	eb007702 	bl	25cfc <CKernelOptions::GetWidth() const>
    80f0:	e1a06000 	mov	r6, r0
    80f4:	e1a00007 	mov	r0, r7
    80f8:	e2855028 	add	r5, r5, #40	; 0x28
    80fc:	eb007700 	bl	25d04 <CKernelOptions::GetHeight() const>
    8100:	e1a02000 	mov	r2, r0
    8104:	e2840e93 	add	r0, r4, #2352	; 0x930
    8108:	e1a01006 	mov	r1, r6
    810c:	e3a03000 	mov	r3, #0
    8110:	e280000c 	add	r0, r0, #12
    8114:	eb007ce6 	bl	274b4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8118:	e3a03000 	mov	r3, #0
    811c:	e1a02003 	mov	r2, r3
    8120:	e1a01003 	mov	r1, r3
    8124:	e2840d27 	add	r0, r4, #2496	; 0x9c0
    8128:	e2846d75 	add	r6, r4, #7488	; 0x1d40
    812c:	eb008162 	bl	286bc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8130:	e2840d6a 	add	r0, r4, #6784	; 0x1a80
    8134:	e2800024 	add	r0, r0, #36	; 0x24
    8138:	e2866008 	add	r6, r6, #8
    813c:	eb0090e9 	bl	2c4e8 <CExceptionHandler::CExceptionHandler()>
    8140:	e1a00005 	mov	r0, r5
    8144:	eb00930a 	bl	2cd74 <CInterruptSystem::CInterruptSystem()>
    8148:	e1a01005 	mov	r1, r5
    814c:	e1a00006 	mov	r0, r6
    8150:	eb008954 	bl	2a6a8 <CTimer::CTimer(CInterruptSystem*)>
    8154:	e1a00007 	mov	r0, r7
    8158:	eb0076ee 	bl	25d18 <CKernelOptions::GetLogLevel() const>
    815c:	e1a01000 	mov	r1, r0
    8160:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    8164:	e1a02006 	mov	r2, r6
    8168:	e2800004 	add	r0, r0, #4
    816c:	eb007822 	bl	261fc <CLogger::CLogger(unsigned int, CTimer*)>
    8170:	e2840d79 	add	r0, r4, #7744	; 0x1e40
    8174:	e1a02006 	mov	r2, r6
    8178:	e1a01005 	mov	r1, r5
    817c:	e280003c 	add	r0, r0, #60	; 0x3c
    8180:	eb000292 	bl	8bd0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8184:	e2840c1f 	add	r0, r4, #7936	; 0x1f00
    8188:	eb0071a7 	bl	2482c <CScheduler::CScheduler()>
    818c:	e2840d7d 	add	r0, r4, #8000	; 0x1f40
    8190:	e30f1b70 	movw	r1, #64368	; 0xfb70
    8194:	e3401002 	movt	r1, #2
    8198:	e281300c 	add	r3, r1, #12
    819c:	e2800024 	add	r0, r0, #36	; 0x24
    81a0:	e58d3000 	str	r3, [sp]
    81a4:	e30f2b88 	movw	r2, #64392	; 0xfb88
    81a8:	e3402002 	movt	r2, #2
    81ac:	e58d2004 	str	r2, [sp, #4]
    81b0:	e2813008 	add	r3, r1, #8
    81b4:	e2812004 	add	r2, r1, #4
    81b8:	eb004162 	bl	18748 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*)>
    81bc:	e1a00004 	mov	r0, r4
    81c0:	e28dd00c 	add	sp, sp, #12
    81c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000081c8 <CKernel::~CKernel()>:
    81c8:	e92d4010 	push	{r4, lr}
    81cc:	e1a04000 	mov	r4, r0
    81d0:	e2800d7d 	add	r0, r0, #8000	; 0x1f40
    81d4:	e2800024 	add	r0, r0, #36	; 0x24
    81d8:	eb00421c 	bl	18a50 <CNetSubSystem::~CNetSubSystem()>
    81dc:	e2840c1f 	add	r0, r4, #7936	; 0x1f00
    81e0:	eb0071ad 	bl	2489c <CScheduler::~CScheduler()>
    81e4:	e2840d79 	add	r0, r4, #7744	; 0x1e40
    81e8:	e280003c 	add	r0, r0, #60	; 0x3c
    81ec:	eb000b02 	bl	adfc <CDWHCIDevice::~CDWHCIDevice()>
    81f0:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    81f4:	e2800004 	add	r0, r0, #4
    81f8:	eb007815 	bl	26254 <CLogger::~CLogger()>
    81fc:	e2840d75 	add	r0, r4, #7488	; 0x1d40
    8200:	e2800008 	add	r0, r0, #8
    8204:	eb008948 	bl	2a72c <CTimer::~CTimer()>
    8208:	e2840d6a 	add	r0, r4, #6784	; 0x1a80
    820c:	e2800028 	add	r0, r0, #40	; 0x28
    8210:	eb0092e5 	bl	2cdac <CInterruptSystem::~CInterruptSystem()>
    8214:	e2840d6a 	add	r0, r4, #6784	; 0x1a80
    8218:	e2800024 	add	r0, r0, #36	; 0x24
    821c:	eb0090d4 	bl	2c574 <CExceptionHandler::~CExceptionHandler()>
    8220:	e2840d27 	add	r0, r4, #2496	; 0x9c0
    8224:	eb00819c 	bl	2889c <CSerialDevice::~CSerialDevice()>
    8228:	e2840e93 	add	r0, r4, #2352	; 0x930
    822c:	e280000c 	add	r0, r0, #12
    8230:	eb007cc1 	bl	2753c <CScreenDevice::~CScreenDevice()>
    8234:	e2840e93 	add	r0, r4, #2352	; 0x930
    8238:	e2800004 	add	r0, r0, #4
    823c:	eb007522 	bl	256cc <CDeviceNameService::~CDeviceNameService()>
    8240:	e28400dc 	add	r0, r4, #220	; 0xdc
    8244:	eb0076a7 	bl	25ce8 <CKernelOptions::~CKernelOptions()>
    8248:	e1a00004 	mov	r0, r4
    824c:	eb0091e2 	bl	2c9dc <CMemorySystem::~CMemorySystem()>
    8250:	e1a00004 	mov	r0, r4
    8254:	e8bd8010 	pop	{r4, pc}

00008258 <CKernel::Initialize()>:
    8258:	e92d4070 	push	{r4, r5, r6, lr}
    825c:	e2805e93 	add	r5, r0, #2352	; 0x930
    8260:	e285500c 	add	r5, r5, #12
    8264:	e1a04000 	mov	r4, r0
    8268:	e1a00005 	mov	r0, r5
    826c:	eb007cda 	bl	275dc <CScreenDevice::Initialize()>
    8270:	e3500000 	cmp	r0, #0
    8274:	1a000001 	bne	8280 <CKernel::Initialize()+0x28>
    8278:	e3a00000 	mov	r0, #0
    827c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8280:	e3a01cc2 	mov	r1, #49664	; 0xc200
    8284:	e3401001 	movt	r1, #1
    8288:	e2840d27 	add	r0, r4, #2496	; 0x9c0
    828c:	eb0081d7 	bl	289f0 <CSerialDevice::Initialize(unsigned int)>
    8290:	e3500000 	cmp	r0, #0
    8294:	0afffff7 	beq	8278 <CKernel::Initialize()+0x20>
    8298:	e28400dc 	add	r0, r4, #220	; 0xdc
    829c:	eb00769a 	bl	25d0c <CKernelOptions::GetLogDevice() const>
    82a0:	e1a01000 	mov	r1, r0
    82a4:	e2840e93 	add	r0, r4, #2352	; 0x930
    82a8:	e3a02000 	mov	r2, #0
    82ac:	e2800004 	add	r0, r0, #4
    82b0:	eb007597 	bl	25914 <CDeviceNameService::GetDevice(char const*, bool)>
    82b4:	e3500000 	cmp	r0, #0
    82b8:	11a01000 	movne	r1, r0
    82bc:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    82c0:	01a01005 	moveq	r1, r5
    82c4:	e2800004 	add	r0, r0, #4
    82c8:	eb0077fd 	bl	262c4 <CLogger::Initialize(CDevice*)>
    82cc:	e3500000 	cmp	r0, #0
    82d0:	0affffe8 	beq	8278 <CKernel::Initialize()+0x20>
    82d4:	e2840d6a 	add	r0, r4, #6784	; 0x1a80
    82d8:	e2800028 	add	r0, r0, #40	; 0x28
    82dc:	eb0092c2 	bl	2cdec <CInterruptSystem::Initialize()>
    82e0:	e3500000 	cmp	r0, #0
    82e4:	0affffe3 	beq	8278 <CKernel::Initialize()+0x20>
    82e8:	e2840d75 	add	r0, r4, #7488	; 0x1d40
    82ec:	e2800008 	add	r0, r0, #8
    82f0:	eb008bb3 	bl	2b1c4 <CTimer::Initialize()>
    82f4:	e3500000 	cmp	r0, #0
    82f8:	0affffde 	beq	8278 <CKernel::Initialize()+0x20>
    82fc:	e2840d79 	add	r0, r4, #7744	; 0x1e40
    8300:	e280003c 	add	r0, r0, #60	; 0x3c
    8304:	eb000b1b 	bl	af78 <CDWHCIDevice::Initialize()>
    8308:	e3500000 	cmp	r0, #0
    830c:	0affffd9 	beq	8278 <CKernel::Initialize()+0x20>
    8310:	e2840d7d 	add	r0, r4, #8000	; 0x1f40
    8314:	e3a01001 	mov	r1, #1
    8318:	e2800024 	add	r0, r0, #36	; 0x24
    831c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8320:	ea004175 	b	188fc <CNetSubSystem::Initialize(bool)>

00008324 <CKernel::Run()>:
    8324:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8328:	e2807d76 	add	r7, r0, #7552	; 0x1d80
    832c:	e1a05000 	mov	r5, r0
    8330:	e2877004 	add	r7, r7, #4
    8334:	e24dd018 	sub	sp, sp, #24
    8338:	e3a02003 	mov	r2, #3
    833c:	e59f1124 	ldr	r1, [pc, #292]	; 8468 <CKernel::Run()+0x144>
    8340:	e1a00007 	mov	r0, r7
    8344:	e2858d7d 	add	r8, r5, #8000	; 0x1f40
    8348:	e30f3b94 	movw	r3, #64404	; 0xfb94
    834c:	e3403002 	movt	r3, #2
    8350:	eb0077ed 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8354:	e2888024 	add	r8, r8, #36	; 0x24
    8358:	e28d0008 	add	r0, sp, #8
    835c:	e301af90 	movw	sl, #8080	; 0x1f90
    8360:	eb0084a1 	bl	295ec <CString::CString()>
    8364:	e1a00008 	mov	r0, r8
    8368:	eb00414d 	bl	188a4 <CNetSubSystem::GetConfig()>
    836c:	e3a09000 	mov	r9, #0
    8370:	eb005d73 	bl	1f944 <CNetConfig::GetIPAddress() const>
    8374:	e28d1008 	add	r1, sp, #8
    8378:	eb005ecf 	bl	1febc <CIPAddress::Format(CString*) const>
    837c:	e28d0008 	add	r0, sp, #8
    8380:	eb0084b0 	bl	29648 <CString::operator char const*() const>
    8384:	e3a02003 	mov	r2, #3
    8388:	e88d0401 	stm	sp, {r0, sl}
    838c:	e30f3bb8 	movw	r3, #64440	; 0xfbb8
    8390:	e3403002 	movt	r3, #2
    8394:	e1a00007 	mov	r0, r7
    8398:	e59f10c8 	ldr	r1, [pc, #200]	; 8468 <CKernel::Run()+0x144>
    839c:	eb0077da 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    83a0:	e28d0008 	add	r0, sp, #8
    83a4:	eb0084a7 	bl	29648 <CString::operator char const*() const>
    83a8:	e3a02003 	mov	r2, #3
    83ac:	e58d0000 	str	r0, [sp]
    83b0:	e30f3be4 	movw	r3, #64484	; 0xfbe4
    83b4:	e3403002 	movt	r3, #2
    83b8:	e1a00007 	mov	r0, r7
    83bc:	e59f10a4 	ldr	r1, [pc, #164]	; 8468 <CKernel::Run()+0x144>
    83c0:	eb0077d1 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    83c4:	e3010974 	movw	r0, #6516	; 0x1974
    83c8:	eb008ec8 	bl	2bef0 <operator new(unsigned int)>
    83cc:	e1a0200a 	mov	r2, sl
    83d0:	e1a01008 	mov	r1, r8
    83d4:	e58d9000 	str	r9, [sp]
    83d8:	e3a03e7d 	mov	r3, #2000	; 0x7d0
    83dc:	e3403020 	movt	r3, #32
    83e0:	eb000021 	bl	846c <CHTTPBootServer::CHTTPBootServer(CNetSubSystem*, unsigned short, unsigned int, CSocket*)>
    83e4:	e3a000f4 	mov	r0, #244	; 0xf4
    83e8:	eb008ec0 	bl	2bef0 <operator new(unsigned int)>
    83ec:	e2856e93 	add	r6, r5, #2352	; 0x930
    83f0:	e1a01008 	mov	r1, r8
    83f4:	e3a02602 	mov	r2, #2097152	; 0x200000
    83f8:	e1a04009 	mov	r4, r9
    83fc:	e286600c 	add	r6, r6, #12
    8400:	e2855c1f 	add	r5, r5, #7936	; 0x1f00
    8404:	eb0001b9 	bl	8af0 <CTFTPBootServer::CTFTPBootServer(CNetSubSystem*, unsigned int)>
    8408:	ea000003 	b	841c <CKernel::Run()+0xf8>
    840c:	eb008054 	bl	28564 <CScreenDevice::Rotor(unsigned int, unsigned int)>
    8410:	e1a00005 	mov	r0, r5
    8414:	e2844001 	add	r4, r4, #1
    8418:	eb0071ec 	bl	24bd0 <CScheduler::Yield()>
    841c:	eb008de3 	bl	2bbb0 <IsChainBootEnabled>
    8420:	e1a02004 	mov	r2, r4
    8424:	e2501000 	subs	r1, r0, #0
    8428:	e1a00006 	mov	r0, r6
    842c:	0afffff6 	beq	840c <CKernel::Run()+0xe8>
    8430:	e3a02003 	mov	r2, #3
    8434:	e1a00007 	mov	r0, r7
    8438:	e59f1028 	ldr	r1, [pc, #40]	; 8468 <CKernel::Run()+0x144>
    843c:	e30f3c28 	movw	r3, #64552	; 0xfc28
    8440:	e3403002 	movt	r3, #2
    8444:	eb0077b0 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8448:	e1a00005 	mov	r0, r5
    844c:	e3a01001 	mov	r1, #1
    8450:	eb00723c 	bl	24d48 <CScheduler::Sleep(unsigned int)>
    8454:	e28d0008 	add	r0, sp, #8
    8458:	eb008430 	bl	29520 <CString::~CString()>
    845c:	e3a00002 	mov	r0, #2
    8460:	e28dd018 	add	sp, sp, #24
    8464:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8468:	0002fb80 	.word	0x0002fb80

0000846c <CHTTPBootServer::CHTTPBootServer(CNetSubSystem*, unsigned short, unsigned int, CSocket*)>:
    846c:	e92d4070 	push	{r4, r5, r6, lr}
    8470:	e1a04000 	mov	r4, r0
    8474:	e1a05002 	mov	r5, r2
    8478:	e24dd008 	sub	sp, sp, #8
    847c:	e1a06003 	mov	r6, r3
    8480:	e58d2000 	str	r2, [sp]
    8484:	e58d3004 	str	r3, [sp, #4]
    8488:	e3a03efa 	mov	r3, #4000	; 0xfa0
    848c:	e59d2018 	ldr	r2, [sp, #24]
    8490:	eb00653d 	bl	2198c <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)>
    8494:	e2843a01 	add	r3, r4, #4096	; 0x1000
    8498:	e300296c 	movw	r2, #2412	; 0x96c
    849c:	e59f1014 	ldr	r1, [pc, #20]	; 84b8 <CHTTPBootServer::CHTTPBootServer(CNetSubSystem*, unsigned short, unsigned int, CSocket*)+0x4c>
    84a0:	e5841000 	str	r1, [r4]
    84a4:	e1a00004 	mov	r0, r4
    84a8:	e5836970 	str	r6, [r3, #2416]	; 0x970
    84ac:	e18350b2 	strh	r5, [r3, r2]
    84b0:	e28dd008 	add	sp, sp, #8
    84b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    84b8:	000304d0 	.word	0x000304d0

000084bc <CHTTPBootServer::~CHTTPBootServer()>:
    84bc:	e59f3014 	ldr	r3, [pc, #20]	; 84d8 <CHTTPBootServer::~CHTTPBootServer()+0x1c>
    84c0:	e92d4010 	push	{r4, lr}
    84c4:	e1a04000 	mov	r4, r0
    84c8:	e5803000 	str	r3, [r0]
    84cc:	eb00654d 	bl	21a08 <CHTTPDaemon::~CHTTPDaemon()>
    84d0:	e1a00004 	mov	r0, r4
    84d4:	e8bd8010 	pop	{r4, pc}
    84d8:	000304d0 	.word	0x000304d0

000084dc <CHTTPBootServer::~CHTTPBootServer()>:
    84dc:	e59f3020 	ldr	r3, [pc, #32]	; 8504 <CHTTPBootServer::~CHTTPBootServer()+0x28>
    84e0:	e92d4010 	push	{r4, lr}
    84e4:	e1a04000 	mov	r4, r0
    84e8:	e5803000 	str	r3, [r0]
    84ec:	eb006545 	bl	21a08 <CHTTPDaemon::~CHTTPDaemon()>
    84f0:	e1a00004 	mov	r0, r4
    84f4:	e3011974 	movw	r1, #6516	; 0x1974
    84f8:	eb008e8a 	bl	2bf28 <operator delete(void*, unsigned int)>
    84fc:	e1a00004 	mov	r0, r4
    8500:	e8bd8010 	pop	{r4, pc}
    8504:	000304d0 	.word	0x000304d0

00008508 <CHTTPBootServer::CreateWorker(CNetSubSystem*, CSocket*)>:
    8508:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    850c:	e1a04000 	mov	r4, r0
    8510:	e3010974 	movw	r0, #6516	; 0x1974
    8514:	e24dd008 	sub	sp, sp, #8
    8518:	e1a07001 	mov	r7, r1
    851c:	e1a08002 	mov	r8, r2
    8520:	eb008e72 	bl	2bef0 <operator new(unsigned int)>
    8524:	e284ca01 	add	ip, r4, #4096	; 0x1000
    8528:	e300696c 	movw	r6, #2412	; 0x96c
    852c:	e1a01007 	mov	r1, r7
    8530:	e1a05000 	mov	r5, r0
    8534:	e1a02008 	mov	r2, r8
    8538:	e3a03efa 	mov	r3, #4000	; 0xfa0
    853c:	e19c70b6 	ldrh	r7, [ip, r6]
    8540:	e59c4970 	ldr	r4, [ip, #2416]	; 0x970
    8544:	e58d4004 	str	r4, [sp, #4]
    8548:	e58d7000 	str	r7, [sp]
    854c:	eb00650e 	bl	2198c <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)>
    8550:	e2853a01 	add	r3, r5, #4096	; 0x1000
    8554:	e59f2014 	ldr	r2, [pc, #20]	; 8570 <CHTTPBootServer::CreateWorker(CNetSubSystem*, CSocket*)+0x68>
    8558:	e1a00005 	mov	r0, r5
    855c:	e5852000 	str	r2, [r5]
    8560:	e18370b6 	strh	r7, [r3, r6]
    8564:	e5834970 	str	r4, [r3, #2416]	; 0x970
    8568:	e28dd008 	add	sp, sp, #8
    856c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8570:	000304d0 	.word	0x000304d0

00008574 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)>:
    8574:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8578:	e2515000 	subs	r5, r1, #0
    857c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    8580:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
    8584:	e59d6048 	ldr	r6, [sp, #72]	; 0x48
    8588:	0a000065 	beq	8724 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1b0>
    858c:	e3560000 	cmp	r6, #0
    8590:	0a000067 	beq	8734 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1c0>
    8594:	e1a07000 	mov	r7, r0
    8598:	e28d0018 	add	r0, sp, #24
    859c:	eb008412 	bl	295ec <CString::CString()>
    85a0:	e59f125c 	ldr	r1, [pc, #604]	; 8804 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x290>
    85a4:	e1a00005 	mov	r0, r5
    85a8:	eb008bf8 	bl	2b590 <strcmp>
    85ac:	e3500000 	cmp	r0, #0
    85b0:	1a000044 	bne	86c8 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x154>
    85b4:	e1a00007 	mov	r0, r7
    85b8:	e28d3014 	add	r3, sp, #20
    85bc:	e28d2010 	add	r2, sp, #16
    85c0:	e28d100c 	add	r1, sp, #12
    85c4:	eb0066d6 	bl	22124 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)>
    85c8:	e3500000 	cmp	r0, #0
    85cc:	059f5234 	ldreq	r5, [pc, #564]	; 8808 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x294>
    85d0:	0a000014 	beq	8628 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xb4>
    85d4:	e59d000c 	ldr	r0, [sp, #12]
    85d8:	e3500000 	cmp	r0, #0
    85dc:	0a00006c 	beq	8794 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x220>
    85e0:	e59f1224 	ldr	r1, [pc, #548]	; 880c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x298>
    85e4:	eb008c86 	bl	2b804 <strstr>
    85e8:	e3500000 	cmp	r0, #0
    85ec:	0a00000c 	beq	8624 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xb0>
    85f0:	e59f1218 	ldr	r1, [pc, #536]	; 8810 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x29c>
    85f4:	e59d000c 	ldr	r0, [sp, #12]
    85f8:	eb008c81 	bl	2b804 <strstr>
    85fc:	e3500000 	cmp	r0, #0
    8600:	0a000007 	beq	8624 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xb0>
    8604:	e59f1208 	ldr	r1, [pc, #520]	; 8814 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2a0>
    8608:	e59d000c 	ldr	r0, [sp, #12]
    860c:	eb008c7c 	bl	2b804 <strstr>
    8610:	e3500000 	cmp	r0, #0
    8614:	0a000002 	beq	8624 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xb0>
    8618:	e59d0014 	ldr	r0, [sp, #20]
    861c:	e3500000 	cmp	r0, #0
    8620:	1a00004b 	bne	8754 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1e0>
    8624:	e59f51ec 	ldr	r5, [pc, #492]	; 8818 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2a4>
    8628:	eb007ae3 	bl	271bc <CMachineInfo::Get()>
    862c:	eb007a02 	bl	26e3c <CMachineInfo::GetMachineName() const>
    8630:	e1a02005 	mov	r2, r5
    8634:	e59f31e0 	ldr	r3, [pc, #480]	; 881c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2a8>
    8638:	e30f1c38 	movw	r1, #64568	; 0xfc38
    863c:	e3401002 	movt	r1, #2
    8640:	e58d0000 	str	r0, [sp]
    8644:	e28d0018 	add	r0, sp, #24
    8648:	eb0087b7 	bl	2a52c <CString::Format(char const*, ...)>
    864c:	e28d0018 	add	r0, sp, #24
    8650:	eb0083fc 	bl	29648 <CString::operator char const*() const>
    8654:	e1a07000 	mov	r7, r0
    8658:	e28d0018 	add	r0, sp, #24
    865c:	eb008429 	bl	29708 <CString::GetLength() const>
    8660:	e59f31b8 	ldr	r3, [pc, #440]	; 8820 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2ac>
    8664:	e1a05000 	mov	r5, r0
    8668:	e5863000 	str	r3, [r6]
    866c:	e3540000 	cmp	r4, #0
    8670:	0a000033 	beq	8744 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1d0>
    8674:	e5943000 	ldr	r3, [r4]
    8678:	e1530005 	cmp	r3, r5
    867c:	3a000020 	bcc	8704 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x190>
    8680:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    8684:	e3530000 	cmp	r3, #0
    8688:	0a00003d 	beq	8784 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x210>
    868c:	e3570000 	cmp	r7, #0
    8690:	0a00004d 	beq	87cc <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x258>
    8694:	e3550000 	cmp	r5, #0
    8698:	0a00004f 	beq	87dc <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x268>
    869c:	e1a01007 	mov	r1, r7
    86a0:	e1a02005 	mov	r2, r5
    86a4:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
    86a8:	e3a060c8 	mov	r6, #200	; 0xc8
    86ac:	eb008d05 	bl	2bac8 <memcpy>
    86b0:	e5845000 	str	r5, [r4]
    86b4:	e28d0018 	add	r0, sp, #24
    86b8:	eb008398 	bl	29520 <CString::~CString()>
    86bc:	e1a00006 	mov	r0, r6
    86c0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    86c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    86c8:	e59f1154 	ldr	r1, [pc, #340]	; 8824 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2b0>
    86cc:	e1a00005 	mov	r0, r5
    86d0:	eb008bae 	bl	2b590 <strcmp>
    86d4:	e3500000 	cmp	r0, #0
    86d8:	0affffb5 	beq	85b4 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x40>
    86dc:	e59f1144 	ldr	r1, [pc, #324]	; 8828 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2b4>
    86e0:	e1a00005 	mov	r0, r5
    86e4:	eb008ba9 	bl	2b590 <strcmp>
    86e8:	e3500000 	cmp	r0, #0
    86ec:	1a00002c 	bne	87a4 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x230>
    86f0:	e59f3134 	ldr	r3, [pc, #308]	; 882c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2b8>
    86f4:	e3a05f5d 	mov	r5, #372	; 0x174
    86f8:	e5863000 	str	r3, [r6]
    86fc:	e59f712c 	ldr	r7, [pc, #300]	; 8830 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2bc>
    8700:	eaffffd9 	b	866c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xf8>
    8704:	eb0077bf 	bl	26608 <CLogger::Get()>
    8708:	e59f3124 	ldr	r3, [pc, #292]	; 8834 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c0>
    870c:	e58d5000 	str	r5, [sp]
    8710:	e3a02001 	mov	r2, #1
    8714:	e2431f66 	sub	r1, r3, #408	; 0x198
    8718:	e3a06f7d 	mov	r6, #500	; 0x1f4
    871c:	eb0076fa 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8720:	eaffffe3 	b	86b4 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x140>
    8724:	e59f110c 	ldr	r1, [pc, #268]	; 8838 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c4>
    8728:	e3a02047 	mov	r2, #71	; 0x47
    872c:	e2810014 	add	r0, r1, #20
    8730:	eb00720f 	bl	24f74 <assertion_failed>
    8734:	e59f10fc 	ldr	r1, [pc, #252]	; 8838 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c4>
    8738:	e3a02048 	mov	r2, #72	; 0x48
    873c:	e2810020 	add	r0, r1, #32
    8740:	eb00720b 	bl	24f74 <assertion_failed>
    8744:	e59f10ec 	ldr	r1, [pc, #236]	; 8838 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c4>
    8748:	e3a02091 	mov	r2, #145	; 0x91
    874c:	e28100f8 	add	r0, r1, #248	; 0xf8
    8750:	eb007207 	bl	24f74 <assertion_failed>
    8754:	eb008deb 	bl	2bf08 <operator new[](unsigned int)>
    8758:	e59d1010 	ldr	r1, [sp, #16]
    875c:	e1a07000 	mov	r7, r0
    8760:	e3510000 	cmp	r1, #0
    8764:	0a000022 	beq	87f4 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x280>
    8768:	e59d2014 	ldr	r2, [sp, #20]
    876c:	eb008cd5 	bl	2bac8 <memcpy>
    8770:	e1a00007 	mov	r0, r7
    8774:	e59d1014 	ldr	r1, [sp, #20]
    8778:	e59f50bc 	ldr	r5, [pc, #188]	; 883c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c8>
    877c:	eb008cfb 	bl	2bb70 <EnableChainBoot>
    8780:	eaffffa8 	b	8628 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xb4>
    8784:	e59f10ac 	ldr	r1, [pc, #172]	; 8838 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c4>
    8788:	e3a0209a 	mov	r2, #154	; 0x9a
    878c:	e2810f4d 	add	r0, r1, #308	; 0x134
    8790:	eb0071f7 	bl	24f74 <assertion_failed>
    8794:	e59f109c 	ldr	r1, [pc, #156]	; 8838 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c4>
    8798:	e3a02058 	mov	r2, #88	; 0x58
    879c:	e2810050 	add	r0, r1, #80	; 0x50
    87a0:	eb0071f3 	bl	24f74 <assertion_failed>
    87a4:	e1a00005 	mov	r0, r5
    87a8:	e59f1090 	ldr	r1, [pc, #144]	; 8840 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2cc>
    87ac:	eb008b77 	bl	2b590 <strcmp>
    87b0:	e3500000 	cmp	r0, #0
    87b4:	1a00000c 	bne	87ec <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x278>
    87b8:	e59f3084 	ldr	r3, [pc, #132]	; 8844 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2d0>
    87bc:	e300547e 	movw	r5, #1150	; 0x47e
    87c0:	e59f7080 	ldr	r7, [pc, #128]	; 8848 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2d4>
    87c4:	e5863000 	str	r3, [r6]
    87c8:	eaffffa7 	b	866c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xf8>
    87cc:	e59f1064 	ldr	r1, [pc, #100]	; 8838 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c4>
    87d0:	e3a0209b 	mov	r2, #155	; 0x9b
    87d4:	e2810f51 	add	r0, r1, #324	; 0x144
    87d8:	eb0071e5 	bl	24f74 <assertion_failed>
    87dc:	e59f1054 	ldr	r1, [pc, #84]	; 8838 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c4>
    87e0:	e3a0209c 	mov	r2, #156	; 0x9c
    87e4:	e2810f55 	add	r0, r1, #340	; 0x154
    87e8:	eb0071e1 	bl	24f74 <assertion_failed>
    87ec:	e3a06f65 	mov	r6, #404	; 0x194
    87f0:	eaffffaf 	b	86b4 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x140>
    87f4:	e59f103c 	ldr	r1, [pc, #60]	; 8838 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c4>
    87f8:	e3a02061 	mov	r2, #97	; 0x61
    87fc:	e2810094 	add	r0, r1, #148	; 0x94
    8800:	eb0071db 	bl	24f74 <assertion_failed>
    8804:	00030580 	.word	0x00030580
    8808:	000304f4 	.word	0x000304f4
    880c:	000305b0 	.word	0x000305b0
    8810:	000305c4 	.word	0x000305c4
    8814:	000305d8 	.word	0x000305d8
    8818:	000304e4 	.word	0x000304e4
    881c:	000305f0 	.word	0x000305f0
    8820:	000305f8 	.word	0x000305f8
    8824:	00030584 	.word	0x00030584
    8828:	00030590 	.word	0x00030590
    882c:	00030618 	.word	0x00030618
    8830:	0002fec4 	.word	0x0002fec4
    8834:	00030654 	.word	0x00030654
    8838:	0003054c 	.word	0x0003054c
    883c:	0003053c 	.word	0x0003053c
    8840:	00030624 	.word	0x00030624
    8844:	00030634 	.word	0x00030634
    8848:	0003003c 	.word	0x0003003c

0000884c <CTFTPBootServer::FileOpen(char const*)>:
    884c:	e3a00000 	mov	r0, #0
    8850:	e12fff1e 	bx	lr

00008854 <CTFTPBootServer::FileRead(void*, unsigned int)>:
    8854:	e3e00000 	mvn	r0, #0
    8858:	e12fff1e 	bx	lr

0000885c <CTFTPBootServer::~CTFTPBootServer()>:
    885c:	e5d030e8 	ldrb	r3, [r0, #232]	; 0xe8
    8860:	e59f2050 	ldr	r2, [pc, #80]	; 88b8 <CTFTPBootServer::~CTFTPBootServer()+0x5c>
    8864:	e92d4010 	push	{r4, lr}
    8868:	e3530000 	cmp	r3, #0
    886c:	e5802000 	str	r2, [r0]
    8870:	1a00000a 	bne	88a0 <CTFTPBootServer::~CTFTPBootServer()+0x44>
    8874:	e1a04000 	mov	r4, r0
    8878:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
    887c:	e3500000 	cmp	r0, #0
    8880:	0a000000 	beq	8888 <CTFTPBootServer::~CTFTPBootServer()+0x2c>
    8884:	eb008da6 	bl	2bf24 <operator delete[](void*)>
    8888:	e3a03000 	mov	r3, #0
    888c:	e1a00004 	mov	r0, r4
    8890:	e58430ec 	str	r3, [r4, #236]	; 0xec
    8894:	eb006839 	bl	22980 <CTFTPDaemon::~CTFTPDaemon()>
    8898:	e1a00004 	mov	r0, r4
    889c:	e8bd8010 	pop	{r4, pc}
    88a0:	e30016f0 	movw	r1, #1776	; 0x6f0
    88a4:	e3401003 	movt	r1, #3
    88a8:	e3000704 	movw	r0, #1796	; 0x704
    88ac:	e3400003 	movt	r0, #3
    88b0:	e3a02026 	mov	r2, #38	; 0x26
    88b4:	eb0071ae 	bl	24f74 <assertion_failed>
    88b8:	000306b4 	.word	0x000306b4

000088bc <CTFTPBootServer::~CTFTPBootServer()>:
    88bc:	e92d4010 	push	{r4, lr}
    88c0:	e1a04000 	mov	r4, r0
    88c4:	ebffffe4 	bl	885c <CTFTPBootServer::~CTFTPBootServer()>
    88c8:	e1a00004 	mov	r0, r4
    88cc:	e3a010f4 	mov	r1, #244	; 0xf4
    88d0:	eb008d94 	bl	2bf28 <operator delete(void*, unsigned int)>
    88d4:	e1a00004 	mov	r0, r4
    88d8:	e8bd8010 	pop	{r4, pc}

000088dc <CTFTPBootServer::FileCreate(char const*)>:
    88dc:	e5d030e8 	ldrb	r3, [r0, #232]	; 0xe8
    88e0:	e3530000 	cmp	r3, #0
    88e4:	1a00000e 	bne	8924 <CTFTPBootServer::FileCreate(char const*)+0x48>
    88e8:	e92d4030 	push	{r4, r5, lr}
    88ec:	e3510000 	cmp	r1, #0
    88f0:	e1a04001 	mov	r4, r1
    88f4:	e24dd00c 	sub	sp, sp, #12
    88f8:	e1a05000 	mov	r5, r0
    88fc:	0a00000a 	beq	892c <CTFTPBootServer::FileCreate(char const*)+0x50>
    8900:	e3a02006 	mov	r2, #6
    8904:	e59f10c8 	ldr	r1, [pc, #200]	; 89d4 <CTFTPBootServer::FileCreate(char const*)+0xf8>
    8908:	e1a00004 	mov	r0, r4
    890c:	eb008b5a 	bl	2b67c <strncmp>
    8910:	e3500000 	cmp	r0, #0
    8914:	0a00000a 	beq	8944 <CTFTPBootServer::FileCreate(char const*)+0x68>
    8918:	e3a00000 	mov	r0, #0
    891c:	e28dd00c 	add	sp, sp, #12
    8920:	e8bd8030 	pop	{r4, r5, pc}
    8924:	e3a00000 	mov	r0, #0
    8928:	e12fff1e 	bx	lr
    892c:	e30016f0 	movw	r1, #1776	; 0x6f0
    8930:	e3401003 	movt	r1, #3
    8934:	e3000714 	movw	r0, #1812	; 0x714
    8938:	e3400003 	movt	r0, #3
    893c:	e3a02038 	mov	r2, #56	; 0x38
    8940:	eb00718b 	bl	24f74 <assertion_failed>
    8944:	e1a00004 	mov	r0, r4
    8948:	eb008b06 	bl	2b568 <strlen>
    894c:	e3500005 	cmp	r0, #5
    8950:	9a000019 	bls	89bc <CTFTPBootServer::FileCreate(char const*)+0xe0>
    8954:	e2400004 	sub	r0, r0, #4
    8958:	e59f1078 	ldr	r1, [pc, #120]	; 89d8 <CTFTPBootServer::FileCreate(char const*)+0xfc>
    895c:	e0840000 	add	r0, r4, r0
    8960:	eb008b0a 	bl	2b590 <strcmp>
    8964:	e3500000 	cmp	r0, #0
    8968:	1affffea 	bne	8918 <CTFTPBootServer::FileCreate(char const*)+0x3c>
    896c:	eb007725 	bl	26608 <CLogger::Get()>
    8970:	e58d4000 	str	r4, [sp]
    8974:	e300373c 	movw	r3, #1852	; 0x73c
    8978:	e3403003 	movt	r3, #3
    897c:	e3a02004 	mov	r2, #4
    8980:	e59f1054 	ldr	r1, [pc, #84]	; 89dc <CTFTPBootServer::FileCreate(char const*)+0x100>
    8984:	eb007660 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8988:	e59530ec 	ldr	r3, [r5, #236]	; 0xec
    898c:	e3530000 	cmp	r3, #0
    8990:	0a000005 	beq	89ac <CTFTPBootServer::FileCreate(char const*)+0xd0>
    8994:	e3a03001 	mov	r3, #1
    8998:	e3a02000 	mov	r2, #0
    899c:	e1a00003 	mov	r0, r3
    89a0:	e5c530e8 	strb	r3, [r5, #232]	; 0xe8
    89a4:	e58520f0 	str	r2, [r5, #240]	; 0xf0
    89a8:	eaffffdb 	b	891c <CTFTPBootServer::FileCreate(char const*)+0x40>
    89ac:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
    89b0:	eb008d54 	bl	2bf08 <operator new[](unsigned int)>
    89b4:	e58500ec 	str	r0, [r5, #236]	; 0xec
    89b8:	eafffff5 	b	8994 <CTFTPBootServer::FileCreate(char const*)+0xb8>
    89bc:	e30016f0 	movw	r1, #1776	; 0x6f0
    89c0:	e3401003 	movt	r1, #3
    89c4:	e3000724 	movw	r0, #1828	; 0x724
    89c8:	e3400003 	movt	r0, #3
    89cc:	e3a02042 	mov	r2, #66	; 0x42
    89d0:	eb007167 	bl	24f74 <assertion_failed>
    89d4:	000306d4 	.word	0x000306d4
    89d8:	000306dc 	.word	0x000306dc
    89dc:	000306e4 	.word	0x000306e4

000089e0 <CTFTPBootServer::FileClose()>:
    89e0:	e92d4010 	push	{r4, lr}
    89e4:	e5d030e8 	ldrb	r3, [r0, #232]	; 0xe8
    89e8:	e24dd008 	sub	sp, sp, #8
    89ec:	e3530000 	cmp	r3, #0
    89f0:	0a000012 	beq	8a40 <CTFTPBootServer::FileClose()+0x60>
    89f4:	e1a04000 	mov	r4, r0
    89f8:	eb007702 	bl	26608 <CLogger::Get()>
    89fc:	e59f1054 	ldr	r1, [pc, #84]	; 8a58 <CTFTPBootServer::FileClose()+0x78>
    8a00:	e3a02004 	mov	r2, #4
    8a04:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    8a08:	e58d3000 	str	r3, [sp]
    8a0c:	e300375c 	movw	r3, #1884	; 0x75c
    8a10:	e3403003 	movt	r3, #3
    8a14:	eb00763c 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8a18:	e59410f0 	ldr	r1, [r4, #240]	; 0xf0
    8a1c:	e3a03000 	mov	r3, #0
    8a20:	e5c430e8 	strb	r3, [r4, #232]	; 0xe8
    8a24:	e1510003 	cmp	r1, r3
    8a28:	0a000001 	beq	8a34 <CTFTPBootServer::FileClose()+0x54>
    8a2c:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    8a30:	eb008c4e 	bl	2bb70 <EnableChainBoot>
    8a34:	e3a00001 	mov	r0, #1
    8a38:	e28dd008 	add	sp, sp, #8
    8a3c:	e8bd8010 	pop	{r4, pc}
    8a40:	e30016f0 	movw	r1, #1776	; 0x6f0
    8a44:	e3401003 	movt	r1, #3
    8a48:	e3000750 	movw	r0, #1872	; 0x750
    8a4c:	e3400003 	movt	r0, #3
    8a50:	e3a0205b 	mov	r2, #91	; 0x5b
    8a54:	eb007146 	bl	24f74 <assertion_failed>
    8a58:	000306e4 	.word	0x000306e4

00008a5c <CTFTPBootServer::FileWrite(void const*, unsigned int)>:
    8a5c:	e5d030e8 	ldrb	r3, [r0, #232]	; 0xe8
    8a60:	e92d4070 	push	{r4, r5, r6, lr}
    8a64:	e1a04000 	mov	r4, r0
    8a68:	e3530000 	cmp	r3, #0
    8a6c:	0a00000f 	beq	8ab0 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x54>
    8a70:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
    8a74:	e1a05002 	mov	r5, r2
    8a78:	e590c0e4 	ldr	ip, [r0, #228]	; 0xe4
    8a7c:	e083e002 	add	lr, r3, r2
    8a80:	e15e000c 	cmp	lr, ip
    8a84:	8a000015 	bhi	8ae0 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x84>
    8a88:	e3510000 	cmp	r1, #0
    8a8c:	0a00000d 	beq	8ac8 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x6c>
    8a90:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    8a94:	e0800003 	add	r0, r0, r3
    8a98:	eb008c0a 	bl	2bac8 <memcpy>
    8a9c:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    8aa0:	e1a00005 	mov	r0, r5
    8aa4:	e0835005 	add	r5, r3, r5
    8aa8:	e58450f0 	str	r5, [r4, #240]	; 0xf0
    8aac:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ab0:	e30016f0 	movw	r1, #1776	; 0x6f0
    8ab4:	e3401003 	movt	r1, #3
    8ab8:	e3000750 	movw	r0, #1872	; 0x750
    8abc:	e3400003 	movt	r0, #3
    8ac0:	e3a02070 	mov	r2, #112	; 0x70
    8ac4:	eb00712a 	bl	24f74 <assertion_failed>
    8ac8:	e30016f0 	movw	r1, #1776	; 0x6f0
    8acc:	e3401003 	movt	r1, #3
    8ad0:	e3020270 	movw	r0, #8816	; 0x2270
    8ad4:	e3400003 	movt	r0, #3
    8ad8:	e3a02079 	mov	r2, #121	; 0x79
    8adc:	eb007124 	bl	24f74 <assertion_failed>
    8ae0:	e3a03000 	mov	r3, #0
    8ae4:	e3e00000 	mvn	r0, #0
    8ae8:	e5c430e8 	strb	r3, [r4, #232]	; 0xe8
    8aec:	e8bd8070 	pop	{r4, r5, r6, pc}

00008af0 <CTFTPBootServer::CTFTPBootServer(CNetSubSystem*, unsigned int)>:
    8af0:	e92d4070 	push	{r4, r5, r6, lr}
    8af4:	e1a04000 	mov	r4, r0
    8af8:	e1a05002 	mov	r5, r2
    8afc:	eb006791 	bl	22948 <CTFTPDaemon::CTFTPDaemon(CNetSubSystem*)>
    8b00:	e59f1018 	ldr	r1, [pc, #24]	; 8b20 <CTFTPBootServer::CTFTPBootServer(CNetSubSystem*, unsigned int)+0x30>
    8b04:	e3a03000 	mov	r3, #0
    8b08:	e1a00004 	mov	r0, r4
    8b0c:	e58450e4 	str	r5, [r4, #228]	; 0xe4
    8b10:	e5841000 	str	r1, [r4]
    8b14:	e5c430e8 	strb	r3, [r4, #232]	; 0xe8
    8b18:	e58430ec 	str	r3, [r4, #236]	; 0xec
    8b1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b20:	000306b4 	.word	0x000306b4

00008b24 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    8b24:	e92d4010 	push	{r4, lr}
    8b28:	e3520000 	cmp	r2, #0
    8b2c:	0a000005 	beq	8b48 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    8b30:	e351000f 	cmp	r1, #15
    8b34:	8a000009 	bhi	8b60 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x3c>
    8b38:	e0822001 	add	r2, r2, r1
    8b3c:	e3a03000 	mov	r3, #0
    8b40:	e5c2305c 	strb	r3, [r2, #92]	; 0x5c
    8b44:	e8bd8010 	pop	{r4, pc}
    8b48:	e3001794 	movw	r1, #1940	; 0x794
    8b4c:	e3401003 	movt	r1, #3
    8b50:	e30007a4 	movw	r0, #1956	; 0x7a4
    8b54:	e3400003 	movt	r0, #3
    8b58:	e30022a7 	movw	r2, #679	; 0x2a7
    8b5c:	eb007104 	bl	24f74 <assertion_failed>
    8b60:	e3001794 	movw	r1, #1940	; 0x794
    8b64:	e3401003 	movt	r1, #3
    8b68:	e30007b0 	movw	r0, #1968	; 0x7b0
    8b6c:	e3400003 	movt	r0, #3
    8b70:	e30022aa 	movw	r2, #682	; 0x2aa
    8b74:	eb0070fe 	bl	24f74 <assertion_failed>

00008b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>:
    8b78:	e92d4030 	push	{r4, r5, lr}
    8b7c:	e1a05000 	mov	r5, r0
    8b80:	e24dd01c 	sub	sp, sp, #28
    8b84:	e28d000c 	add	r0, sp, #12
    8b88:	eb000c21 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8b8c:	f57ff05f 	dmb	sy
    8b90:	eb00769c 	bl	26608 <CLogger::Get()>
    8b94:	e1a04000 	mov	r4, r0
    8b98:	e28d000c 	add	r0, sp, #12
    8b9c:	eb000c25 	bl	bc38 <CDWHCIRegister::Read()>
    8ba0:	e3a02004 	mov	r2, #4
    8ba4:	e88d0021 	stm	sp, {r0, r5}
    8ba8:	e30037d0 	movw	r3, #2000	; 0x7d0
    8bac:	e3403003 	movt	r3, #3
    8bb0:	e1a00004 	mov	r0, r4
    8bb4:	e3001770 	movw	r1, #1904	; 0x770
    8bb8:	e3401003 	movt	r1, #3
    8bbc:	eb0075d2 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8bc0:	e28d000c 	add	r0, sp, #12
    8bc4:	eb000c1a 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8bc8:	e28dd01c 	add	sp, sp, #28
    8bcc:	e8bd8030 	pop	{r4, r5, pc}

00008bd0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    8bd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8bd4:	e1a04000 	mov	r4, r0
    8bd8:	e1a07001 	mov	r7, r1
    8bdc:	e1a06002 	mov	r6, r2
    8be0:	eb0022b6 	bl	116c0 <CUSBHostController::CUSBHostController()>
    8be4:	e59f00c0 	ldr	r0, [pc, #192]	; 8cac <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xdc>
    8be8:	e3a05000 	mov	r5, #0
    8bec:	e3a03001 	mov	r3, #1
    8bf0:	e5840000 	str	r0, [r4]
    8bf4:	e5845010 	str	r5, [r4, #16]
    8bf8:	e1a01004 	mov	r1, r4
    8bfc:	e5843014 	str	r3, [r4, #20]
    8c00:	e2840074 	add	r0, r4, #116	; 0x74
    8c04:	e5843058 	str	r3, [r4, #88]	; 0x58
    8c08:	e5847004 	str	r7, [r4, #4]
    8c0c:	e5846008 	str	r6, [r4, #8]
    8c10:	e584500c 	str	r5, [r4, #12]
    8c14:	e584506c 	str	r5, [r4, #108]	; 0x6c
    8c18:	e5845070 	str	r5, [r4, #112]	; 0x70
    8c1c:	eb000cf1 	bl	bfe8 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    8c20:	e5943004 	ldr	r3, [r4, #4]
    8c24:	e5c45080 	strb	r5, [r4, #128]	; 0x80
    8c28:	e5c45081 	strb	r5, [r4, #129]	; 0x81
    8c2c:	e1530005 	cmp	r3, r5
    8c30:	0a000011 	beq	8c7c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xac>
    8c34:	e5943008 	ldr	r3, [r4, #8]
    8c38:	e3530000 	cmp	r3, #0
    8c3c:	11a02005 	movne	r2, r5
    8c40:	12843014 	addne	r3, r4, #20
    8c44:	12841054 	addne	r1, r4, #84	; 0x54
    8c48:	0a000011 	beq	8c94 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xc4>
    8c4c:	e5a32004 	str	r2, [r3, #4]!
    8c50:	e1510003 	cmp	r1, r3
    8c54:	1afffffc 	bne	8c4c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x7c>
    8c58:	e3a03000 	mov	r3, #0
    8c5c:	e1a01003 	mov	r1, r3
    8c60:	e0842003 	add	r2, r4, r3
    8c64:	e2833001 	add	r3, r3, #1
    8c68:	e3530010 	cmp	r3, #16
    8c6c:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    8c70:	1afffffa 	bne	8c60 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    8c74:	e1a00004 	mov	r0, r4
    8c78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8c7c:	e3001794 	movw	r1, #1940	; 0x794
    8c80:	e3401003 	movt	r1, #3
    8c84:	e30007dc 	movw	r0, #2012	; 0x7dc
    8c88:	e3400003 	movt	r0, #3
    8c8c:	e3a0204b 	mov	r2, #75	; 0x4b
    8c90:	eb0070b7 	bl	24f74 <assertion_failed>
    8c94:	e3001794 	movw	r1, #1940	; 0x794
    8c98:	e3401003 	movt	r1, #3
    8c9c:	e30007f4 	movw	r0, #2036	; 0x7f4
    8ca0:	e3400003 	movt	r0, #3
    8ca4:	e3a0204c 	mov	r2, #76	; 0x4c
    8ca8:	eb0070b1 	bl	24f74 <assertion_failed>
    8cac:	00030780 	.word	0x00030780

00008cb0 <CDWHCIDevice::GetPortSpeed()>:
    8cb0:	e92d4010 	push	{r4, lr}
    8cb4:	e3a01d11 	mov	r1, #1088	; 0x440
    8cb8:	e3431f98 	movt	r1, #16280	; 0x3f98
    8cbc:	e24dd010 	sub	sp, sp, #16
    8cc0:	e28d0004 	add	r0, sp, #4
    8cc4:	eb000bd2 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8cc8:	e28d0004 	add	r0, sp, #4
    8ccc:	eb000bd9 	bl	bc38 <CDWHCIRegister::Read()>
    8cd0:	e7e108d0 	ubfx	r0, r0, #17, #2
    8cd4:	e3500003 	cmp	r0, #3
    8cd8:	03a04004 	moveq	r4, #4
    8cdc:	13003770 	movwne	r3, #1904	; 0x770
    8ce0:	13403003 	movtne	r3, #3
    8ce4:	10833000 	addne	r3, r3, r0
    8ce8:	e28d0004 	add	r0, sp, #4
    8cec:	15d34020 	ldrbne	r4, [r3, #32]
    8cf0:	eb000bcf 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8cf4:	e1a00004 	mov	r0, r4
    8cf8:	e28dd010 	add	sp, sp, #16
    8cfc:	e8bd8010 	pop	{r4, pc}

00008d00 <CDWHCIDevice::OvercurrentDetected()>:
    8d00:	e92d4010 	push	{r4, lr}
    8d04:	e3a01d11 	mov	r1, #1088	; 0x440
    8d08:	e3431f98 	movt	r1, #16280	; 0x3f98
    8d0c:	e24dd010 	sub	sp, sp, #16
    8d10:	e28d0004 	add	r0, sp, #4
    8d14:	eb000bbe 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8d18:	e28d0004 	add	r0, sp, #4
    8d1c:	eb000bc5 	bl	bc38 <CDWHCIRegister::Read()>
    8d20:	e1a04000 	mov	r4, r0
    8d24:	e28d0004 	add	r0, sp, #4
    8d28:	eb000bc1 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8d2c:	e7e00254 	ubfx	r0, r4, #4, #1
    8d30:	e28dd010 	add	sp, sp, #16
    8d34:	e8bd8010 	pop	{r4, pc}

00008d38 <CDWHCIDevice::DisableRootPort(bool)>:
    8d38:	e92d4010 	push	{r4, lr}
    8d3c:	e1a03000 	mov	r3, r0
    8d40:	e3a02000 	mov	r2, #0
    8d44:	e24dd010 	sub	sp, sp, #16
    8d48:	e1a04001 	mov	r4, r1
    8d4c:	e5c32080 	strb	r2, [r3, #128]	; 0x80
    8d50:	e28d0004 	add	r0, sp, #4
    8d54:	e3a01d11 	mov	r1, #1088	; 0x440
    8d58:	e3431f98 	movt	r1, #16280	; 0x3f98
    8d5c:	eb000bac 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8d60:	e28d0004 	add	r0, sp, #4
    8d64:	eb000bb3 	bl	bc38 <CDWHCIRegister::Read()>
    8d68:	e28d0004 	add	r0, sp, #4
    8d6c:	e3e01004 	mvn	r1, #4
    8d70:	eb000be4 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    8d74:	e3540000 	cmp	r4, #0
    8d78:	0a000002 	beq	8d88 <CDWHCIDevice::DisableRootPort(bool)+0x50>
    8d7c:	e3e01a01 	mvn	r1, #4096	; 0x1000
    8d80:	e28d0004 	add	r0, sp, #4
    8d84:	eb000bdf 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    8d88:	e28d0004 	add	r0, sp, #4
    8d8c:	eb000bb0 	bl	bc54 <CDWHCIRegister::Write()>
    8d90:	e28d0004 	add	r0, sp, #4
    8d94:	eb000ba6 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8d98:	e28dd010 	add	sp, sp, #16
    8d9c:	e8bd8010 	pop	{r4, pc}

00008da0 <CDWHCIDevice::PowerOn()>:
    8da0:	e92d4030 	push	{r4, r5, lr}
    8da4:	e3a01000 	mov	r1, #0
    8da8:	e1a05001 	mov	r5, r1
    8dac:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    8db0:	e28d000c 	add	r0, sp, #12
    8db4:	eb00708f 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    8db8:	e3a03014 	mov	r3, #20
    8dbc:	e28d000c 	add	r0, sp, #12
    8dc0:	e58d5000 	str	r5, [sp]
    8dc4:	e3081001 	movw	r1, #32769	; 0x8001
    8dc8:	e3401002 	movt	r1, #2
    8dcc:	e08d2003 	add	r2, sp, r3
    8dd0:	e3a0c003 	mov	ip, #3
    8dd4:	e58dc020 	str	ip, [sp, #32]
    8dd8:	e58dc024 	str	ip, [sp, #36]	; 0x24
    8ddc:	eb0070ce 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8de0:	e2504000 	subs	r4, r0, #0
    8de4:	0a000003 	beq	8df8 <CDWHCIDevice::PowerOn()+0x58>
    8de8:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    8dec:	e3140002 	tst	r4, #2
    8df0:	02044001 	andeq	r4, r4, #1
    8df4:	11a04005 	movne	r4, r5
    8df8:	e28d000c 	add	r0, sp, #12
    8dfc:	eb007084 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
    8e00:	e1a00004 	mov	r0, r4
    8e04:	e28dd02c 	add	sp, sp, #44	; 0x2c
    8e08:	e8bd8030 	pop	{r4, r5, pc}

00008e0c <CDWHCIDevice::EnableGlobalInterrupts()>:
    8e0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8e10:	e3a01008 	mov	r1, #8
    8e14:	e3431f98 	movt	r1, #16280	; 0x3f98
    8e18:	e24dd014 	sub	sp, sp, #20
    8e1c:	e28d0004 	add	r0, sp, #4
    8e20:	eb000b7b 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8e24:	e28d0004 	add	r0, sp, #4
    8e28:	eb000b82 	bl	bc38 <CDWHCIRegister::Read()>
    8e2c:	e3a01001 	mov	r1, #1
    8e30:	e28d0004 	add	r0, sp, #4
    8e34:	eb000bc1 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    8e38:	e28d0004 	add	r0, sp, #4
    8e3c:	eb000b84 	bl	bc54 <CDWHCIRegister::Write()>
    8e40:	e28d0004 	add	r0, sp, #4
    8e44:	eb000b7a 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8e48:	e28dd014 	add	sp, sp, #20
    8e4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008e50 <CDWHCIDevice::EnableCommonInterrupts()>:
    8e50:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8e54:	e3a01014 	mov	r1, #20
    8e58:	e3431f98 	movt	r1, #16280	; 0x3f98
    8e5c:	e24dd014 	sub	sp, sp, #20
    8e60:	e28d0004 	add	r0, sp, #4
    8e64:	eb000b6a 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8e68:	e28d0004 	add	r0, sp, #4
    8e6c:	eb000bf4 	bl	be44 <CDWHCIRegister::SetAll()>
    8e70:	e28d0004 	add	r0, sp, #4
    8e74:	eb000b76 	bl	bc54 <CDWHCIRegister::Write()>
    8e78:	e28d0004 	add	r0, sp, #4
    8e7c:	eb000b6c 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8e80:	e28dd014 	add	sp, sp, #20
    8e84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008e88 <CDWHCIDevice::EnableHostInterrupts()>:
    8e88:	e92d4010 	push	{r4, lr}
    8e8c:	e3a02000 	mov	r2, #0
    8e90:	e1a04000 	mov	r4, r0
    8e94:	e24dd010 	sub	sp, sp, #16
    8e98:	e3a01018 	mov	r1, #24
    8e9c:	e3431f98 	movt	r1, #16280	; 0x3f98
    8ea0:	e28d0004 	add	r0, sp, #4
    8ea4:	eb000b5e 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8ea8:	e28d0004 	add	r0, sp, #4
    8eac:	eb000b68 	bl	bc54 <CDWHCIRegister::Write()>
    8eb0:	e1a00004 	mov	r0, r4
    8eb4:	ebffffe5 	bl	8e50 <CDWHCIDevice::EnableCommonInterrupts()>
    8eb8:	e28d0004 	add	r0, sp, #4
    8ebc:	eb000b5d 	bl	bc38 <CDWHCIRegister::Read()>
    8ec0:	e3a01402 	mov	r1, #33554432	; 0x2000000
    8ec4:	e28d0004 	add	r0, sp, #4
    8ec8:	eb000b9c 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    8ecc:	e28d0004 	add	r0, sp, #4
    8ed0:	eb000b5f 	bl	bc54 <CDWHCIRegister::Write()>
    8ed4:	e28d0004 	add	r0, sp, #4
    8ed8:	eb000b55 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8edc:	e28dd010 	add	sp, sp, #16
    8ee0:	e8bd8010 	pop	{r4, pc}

00008ee4 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    8ee4:	e92d4030 	push	{r4, r5, lr}
    8ee8:	e1a04000 	mov	r4, r0
    8eec:	e1a05001 	mov	r5, r1
    8ef0:	e24dd014 	sub	sp, sp, #20
    8ef4:	e3001418 	movw	r1, #1048	; 0x418
    8ef8:	e3431f98 	movt	r1, #16280	; 0x3f98
    8efc:	e28d0004 	add	r0, sp, #4
    8f00:	eb000b43 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8f04:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    8f08:	e3500000 	cmp	r0, #0
    8f0c:	1a00000f 	bne	8f50 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x6c>
    8f10:	e28d0004 	add	r0, sp, #4
    8f14:	eb000b47 	bl	bc38 <CDWHCIRegister::Read()>
    8f18:	e3a01001 	mov	r1, #1
    8f1c:	e28d0004 	add	r0, sp, #4
    8f20:	e1a01511 	lsl	r1, r1, r5
    8f24:	eb000b85 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    8f28:	e28d0004 	add	r0, sp, #4
    8f2c:	eb000b48 	bl	bc54 <CDWHCIRegister::Write()>
    8f30:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    8f34:	e3530000 	cmp	r3, #0
    8f38:	0a000000 	beq	8f40 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x5c>
    8f3c:	eb008f6f 	bl	2cd00 <LeaveCritical>
    8f40:	e28d0004 	add	r0, sp, #4
    8f44:	eb000b3a 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8f48:	e28dd014 	add	sp, sp, #20
    8f4c:	e8bd8030 	pop	{r4, r5, pc}
    8f50:	eb008f3d 	bl	2cc4c <EnterCritical>
    8f54:	eaffffed 	b	8f10 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x2c>

00008f58 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    8f58:	e92d4030 	push	{r4, r5, lr}
    8f5c:	e1a04000 	mov	r4, r0
    8f60:	e1a05001 	mov	r5, r1
    8f64:	e24dd014 	sub	sp, sp, #20
    8f68:	e3001418 	movw	r1, #1048	; 0x418
    8f6c:	e3431f98 	movt	r1, #16280	; 0x3f98
    8f70:	e28d0004 	add	r0, sp, #4
    8f74:	eb000b26 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8f78:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    8f7c:	e3500000 	cmp	r0, #0
    8f80:	1a00000f 	bne	8fc4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x6c>
    8f84:	e28d0004 	add	r0, sp, #4
    8f88:	eb000b2a 	bl	bc38 <CDWHCIRegister::Read()>
    8f8c:	e3a01001 	mov	r1, #1
    8f90:	e28d0004 	add	r0, sp, #4
    8f94:	e1e01511 	mvn	r1, r1, lsl r5
    8f98:	eb000b5a 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    8f9c:	e28d0004 	add	r0, sp, #4
    8fa0:	eb000b2b 	bl	bc54 <CDWHCIRegister::Write()>
    8fa4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    8fa8:	e3530000 	cmp	r3, #0
    8fac:	0a000000 	beq	8fb4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x5c>
    8fb0:	eb008f52 	bl	2cd00 <LeaveCritical>
    8fb4:	e28d0004 	add	r0, sp, #4
    8fb8:	eb000b1d 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    8fbc:	e28dd014 	add	sp, sp, #20
    8fc0:	e8bd8030 	pop	{r4, r5, pc}
    8fc4:	eb008f20 	bl	2cc4c <EnterCritical>
    8fc8:	eaffffed 	b	8f84 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x2c>

00008fcc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    8fcc:	e92d4070 	push	{r4, r5, r6, lr}
    8fd0:	e2514000 	subs	r4, r1, #0
    8fd4:	e24dd048 	sub	sp, sp, #72	; 0x48
    8fd8:	0a0000e2 	beq	9368 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x39c>
    8fdc:	e1a06000 	mov	r6, r0
    8fe0:	e1a00004 	mov	r0, r4
    8fe4:	eb000cfa 	bl	c3d4 <CDWHCITransferStageData::GetChannelNumber() const>
    8fe8:	e1a05000 	mov	r5, r0
    8fec:	e596300c 	ldr	r3, [r6, #12]
    8ff0:	e1500003 	cmp	r0, r3
    8ff4:	2a0000e1 	bcs	9380 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    8ff8:	e3a01001 	mov	r1, #1
    8ffc:	e1a00004 	mov	r0, r4
    9000:	eb000ced 	bl	c3bc <CDWHCITransferStageData::SetSubState(unsigned int)>
    9004:	e1a05285 	lsl	r5, r5, #5
    9008:	e3001508 	movw	r1, #1288	; 0x508
    900c:	e3431f98 	movt	r1, #16280	; 0x3f98
    9010:	e0851001 	add	r1, r5, r1
    9014:	e1a0000d 	mov	r0, sp
    9018:	eb000afd 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    901c:	e1a0000d 	mov	r0, sp
    9020:	eb000b87 	bl	be44 <CDWHCIRegister::SetAll()>
    9024:	e1a0000d 	mov	r0, sp
    9028:	eb000b09 	bl	bc54 <CDWHCIRegister::Write()>
    902c:	e3a01e51 	mov	r1, #1296	; 0x510
    9030:	e3431f98 	movt	r1, #16280	; 0x3f98
    9034:	e3a02000 	mov	r2, #0
    9038:	e0851001 	add	r1, r5, r1
    903c:	e28d000c 	add	r0, sp, #12
    9040:	eb000af7 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9044:	e1a00004 	mov	r0, r4
    9048:	eb000e1a 	bl	c8b8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    904c:	e7f21050 	ubfx	r1, r0, #0, #19
    9050:	e28d000c 	add	r0, sp, #12
    9054:	eb000b39 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9058:	e1a00004 	mov	r0, r4
    905c:	eb000e17 	bl	c8c0 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    9060:	e3a01000 	mov	r1, #0
    9064:	e3411ff8 	movt	r1, #8184	; 0x1ff8
    9068:	e0011980 	and	r1, r1, r0, lsl #19
    906c:	e28d000c 	add	r0, sp, #12
    9070:	eb000b32 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9074:	e1a00004 	mov	r0, r4
    9078:	eb000de4 	bl	c810 <CDWHCITransferStageData::GetPID() const>
    907c:	e1a01e80 	lsl	r1, r0, #29
    9080:	e28d000c 	add	r0, sp, #12
    9084:	eb000b2d 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9088:	e28d000c 	add	r0, sp, #12
    908c:	eb000af0 	bl	bc54 <CDWHCIRegister::Write()>
    9090:	e1a00004 	mov	r0, r4
    9094:	eb000dfd 	bl	c890 <CDWHCITransferStageData::GetDMAAddress() const>
    9098:	e3001514 	movw	r1, #1300	; 0x514
    909c:	e3431f98 	movt	r1, #16280	; 0x3f98
    90a0:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
    90a4:	e0851001 	add	r1, r5, r1
    90a8:	e28d0018 	add	r0, sp, #24
    90ac:	eb000adc 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    90b0:	e28d0018 	add	r0, sp, #24
    90b4:	eb000ae6 	bl	bc54 <CDWHCIRegister::Write()>
    90b8:	e1a00004 	mov	r0, r4
    90bc:	eb000df3 	bl	c890 <CDWHCITransferStageData::GetDMAAddress() const>
    90c0:	e1a06000 	mov	r6, r0
    90c4:	e1a00004 	mov	r0, r4
    90c8:	eb000dfa 	bl	c8b8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    90cc:	e1a01000 	mov	r1, r0
    90d0:	e1a00006 	mov	r0, r6
    90d4:	eb008cee 	bl	2c494 <CleanAndInvalidateDataCacheRange>
    90d8:	e3001504 	movw	r1, #1284	; 0x504
    90dc:	e3431f98 	movt	r1, #16280	; 0x3f98
    90e0:	e0851001 	add	r1, r5, r1
    90e4:	e3a02000 	mov	r2, #0
    90e8:	e28d0024 	add	r0, sp, #36	; 0x24
    90ec:	eb000acc 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    90f0:	e1a00004 	mov	r0, r4
    90f4:	eb000df3 	bl	c8c8 <CDWHCITransferStageData::IsSplit() const>
    90f8:	e3500000 	cmp	r0, #0
    90fc:	1a00007a 	bne	92ec <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x320>
    9100:	e28d0024 	add	r0, sp, #36	; 0x24
    9104:	eb000ad2 	bl	bc54 <CDWHCIRegister::Write()>
    9108:	e3a01c05 	mov	r1, #1280	; 0x500
    910c:	e3431f98 	movt	r1, #16280	; 0x3f98
    9110:	e0851001 	add	r1, r5, r1
    9114:	e28d0030 	add	r0, sp, #48	; 0x30
    9118:	eb000abd 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    911c:	e28d0030 	add	r0, sp, #48	; 0x30
    9120:	eb000ac4 	bl	bc38 <CDWHCIRegister::Read()>
    9124:	e28d0030 	add	r0, sp, #48	; 0x30
    9128:	e3a01b3e 	mov	r1, #63488	; 0xf800
    912c:	e34f1fff 	movt	r1, #65535	; 0xffff
    9130:	eb000af4 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    9134:	e1a00004 	mov	r0, r4
    9138:	eb000db0 	bl	c800 <CDWHCITransferStageData::GetMaxPacketSize() const>
    913c:	e7ea1050 	ubfx	r1, r0, #0, #11
    9140:	e28d0030 	add	r0, sp, #48	; 0x30
    9144:	eb000afd 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9148:	e28d0030 	add	r0, sp, #48	; 0x30
    914c:	e3e01603 	mvn	r1, #3145728	; 0x300000
    9150:	eb000aec 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    9154:	e28d0030 	add	r0, sp, #48	; 0x30
    9158:	e3a01601 	mov	r1, #1048576	; 0x100000
    915c:	eb000af7 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9160:	e1a00004 	mov	r0, r4
    9164:	eb000dc5 	bl	c880 <CDWHCITransferStageData::IsDirectionIn() const>
    9168:	e3500000 	cmp	r0, #0
    916c:	1a000053 	bne	92c0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f4>
    9170:	e3e01902 	mvn	r1, #32768	; 0x8000
    9174:	e28d0030 	add	r0, sp, #48	; 0x30
    9178:	eb000ae2 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    917c:	e1a00004 	mov	r0, r4
    9180:	eb000da0 	bl	c808 <CDWHCITransferStageData::GetSpeed() const>
    9184:	e3500000 	cmp	r0, #0
    9188:	1a000053 	bne	92dc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x310>
    918c:	e3a01802 	mov	r1, #131072	; 0x20000
    9190:	e28d0030 	add	r0, sp, #48	; 0x30
    9194:	eb000ae9 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9198:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    919c:	e28d0030 	add	r0, sp, #48	; 0x30
    91a0:	eb000ad8 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    91a4:	e1a00004 	mov	r0, r4
    91a8:	eb000d62 	bl	c738 <CDWHCITransferStageData::GetDeviceAddress() const>
    91ac:	e1a01b00 	lsl	r1, r0, #22
    91b0:	e28d0030 	add	r0, sp, #48	; 0x30
    91b4:	eb000ae1 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    91b8:	e3e01703 	mvn	r1, #786432	; 0xc0000
    91bc:	e28d0030 	add	r0, sp, #48	; 0x30
    91c0:	eb000ad0 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    91c4:	e1a00004 	mov	r0, r4
    91c8:	eb000d65 	bl	c764 <CDWHCITransferStageData::GetEndpointType() const>
    91cc:	e1a01900 	lsl	r1, r0, #18
    91d0:	e28d0030 	add	r0, sp, #48	; 0x30
    91d4:	eb000ad9 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    91d8:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    91dc:	e28d0030 	add	r0, sp, #48	; 0x30
    91e0:	eb000ac8 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    91e4:	e1a00004 	mov	r0, r4
    91e8:	eb000d79 	bl	c7d4 <CDWHCITransferStageData::GetEndpointNumber() const>
    91ec:	e1a01580 	lsl	r1, r0, #11
    91f0:	e28d0030 	add	r0, sp, #48	; 0x30
    91f4:	eb000ad1 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    91f8:	e1a00004 	mov	r0, r4
    91fc:	eb000e23 	bl	ca90 <CDWHCITransferStageData::GetFrameScheduler() const>
    9200:	e2506000 	subs	r6, r0, #0
    9204:	0a00000b 	beq	9238 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x26c>
    9208:	e5963000 	ldr	r3, [r6]
    920c:	e5933014 	ldr	r3, [r3, #20]
    9210:	e12fff33 	blx	r3
    9214:	e5963000 	ldr	r3, [r6]
    9218:	e1a00006 	mov	r0, r6
    921c:	e5933018 	ldr	r3, [r3, #24]
    9220:	e12fff33 	blx	r3
    9224:	e3500000 	cmp	r0, #0
    9228:	1a000046 	bne	9348 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x37c>
    922c:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    9230:	e28d0030 	add	r0, sp, #48	; 0x30
    9234:	eb000ab3 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    9238:	e300150c 	movw	r1, #1292	; 0x50c
    923c:	e3431f98 	movt	r1, #16280	; 0x3f98
    9240:	e0851001 	add	r1, r5, r1
    9244:	e28d003c 	add	r0, sp, #60	; 0x3c
    9248:	eb000a71 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    924c:	e1a00004 	mov	r0, r4
    9250:	eb000dd6 	bl	c9b0 <CDWHCITransferStageData::GetStatusMask() const>
    9254:	e1a01000 	mov	r1, r0
    9258:	e28d003c 	add	r0, sp, #60	; 0x3c
    925c:	eb000a96 	bl	bcbc <CDWHCIRegister::Set(unsigned int)>
    9260:	e28d003c 	add	r0, sp, #60	; 0x3c
    9264:	eb000a7a 	bl	bc54 <CDWHCIRegister::Write()>
    9268:	e28d0030 	add	r0, sp, #48	; 0x30
    926c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    9270:	eb000ab2 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9274:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    9278:	e28d0030 	add	r0, sp, #48	; 0x30
    927c:	eb000aa1 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    9280:	e28d0030 	add	r0, sp, #48	; 0x30
    9284:	eb000a72 	bl	bc54 <CDWHCIRegister::Write()>
    9288:	e28d003c 	add	r0, sp, #60	; 0x3c
    928c:	eb000a68 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9290:	e28d0030 	add	r0, sp, #48	; 0x30
    9294:	eb000a66 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9298:	e28d0024 	add	r0, sp, #36	; 0x24
    929c:	eb000a64 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    92a0:	e28d0018 	add	r0, sp, #24
    92a4:	eb000a62 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    92a8:	e28d000c 	add	r0, sp, #12
    92ac:	eb000a60 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    92b0:	e1a0000d 	mov	r0, sp
    92b4:	eb000a5e 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    92b8:	e28dd048 	add	sp, sp, #72	; 0x48
    92bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    92c0:	e3a01902 	mov	r1, #32768	; 0x8000
    92c4:	e28d0030 	add	r0, sp, #48	; 0x30
    92c8:	eb000a9c 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    92cc:	e1a00004 	mov	r0, r4
    92d0:	eb000d4c 	bl	c808 <CDWHCITransferStageData::GetSpeed() const>
    92d4:	e3500000 	cmp	r0, #0
    92d8:	0affffab 	beq	918c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1c0>
    92dc:	e3e01802 	mvn	r1, #131072	; 0x20000
    92e0:	e28d0030 	add	r0, sp, #48	; 0x30
    92e4:	eb000a87 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    92e8:	eaffffaa 	b	9198 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1cc>
    92ec:	e1a00004 	mov	r0, r4
    92f0:	eb000d97 	bl	c954 <CDWHCITransferStageData::GetHubPortAddress() const>
    92f4:	e1a01000 	mov	r1, r0
    92f8:	e28d0024 	add	r0, sp, #36	; 0x24
    92fc:	eb000a8f 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9300:	e1a00004 	mov	r0, r4
    9304:	eb000d7d 	bl	c900 <CDWHCITransferStageData::GetHubAddress() const>
    9308:	e1a01380 	lsl	r1, r0, #7
    930c:	e28d0024 	add	r0, sp, #36	; 0x24
    9310:	eb000a8a 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9314:	e1a00004 	mov	r0, r4
    9318:	eb000da2 	bl	c9a8 <CDWHCITransferStageData::GetSplitPosition() const>
    931c:	e1a01700 	lsl	r1, r0, #14
    9320:	e28d0024 	add	r0, sp, #36	; 0x24
    9324:	eb000a85 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9328:	e1a00004 	mov	r0, r4
    932c:	eb000d67 	bl	c8d0 <CDWHCITransferStageData::IsSplitComplete() const>
    9330:	e3500000 	cmp	r0, #0
    9334:	1a000007 	bne	9358 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x38c>
    9338:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    933c:	e28d0024 	add	r0, sp, #36	; 0x24
    9340:	eb000a7e 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9344:	eaffff6d 	b	9100 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x134>
    9348:	e3a01202 	mov	r1, #536870912	; 0x20000000
    934c:	e28d0030 	add	r0, sp, #48	; 0x30
    9350:	eb000a7a 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9354:	eaffffb7 	b	9238 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x26c>
    9358:	e3a01801 	mov	r1, #65536	; 0x10000
    935c:	e28d0024 	add	r0, sp, #36	; 0x24
    9360:	eb000a76 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9364:	eafffff3 	b	9338 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x36c>
    9368:	e3001794 	movw	r1, #1940	; 0x794
    936c:	e3401003 	movt	r1, #3
    9370:	e3000804 	movw	r0, #2052	; 0x804
    9374:	e3400003 	movt	r0, #3
    9378:	e300234a 	movw	r2, #842	; 0x34a
    937c:	eb006efc 	bl	24f74 <assertion_failed>
    9380:	e3001794 	movw	r1, #1940	; 0x794
    9384:	e3401003 	movt	r1, #3
    9388:	e3000814 	movw	r0, #2068	; 0x814
    938c:	e3400003 	movt	r0, #3
    9390:	e3a02fd3 	mov	r2, #844	; 0x34c
    9394:	eb006ef6 	bl	24f74 <assertion_failed>

00009398 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    9398:	e92d4070 	push	{r4, r5, r6, lr}
    939c:	e2515000 	subs	r5, r1, #0
    93a0:	e24dd018 	sub	sp, sp, #24
    93a4:	0a000033 	beq	9478 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe0>
    93a8:	e1a06000 	mov	r6, r0
    93ac:	e1a00005 	mov	r0, r5
    93b0:	eb000c07 	bl	c3d4 <CDWHCITransferStageData::GetChannelNumber() const>
    93b4:	e596300c 	ldr	r3, [r6, #12]
    93b8:	e1500003 	cmp	r0, r3
    93bc:	2a000033 	bcs	9490 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xf8>
    93c0:	e30c1028 	movw	r1, #49192	; 0xc028
    93c4:	e34011fc 	movt	r1, #508	; 0x1fc
    93c8:	e0801001 	add	r1, r0, r1
    93cc:	e1a0000d 	mov	r0, sp
    93d0:	e1a04281 	lsl	r4, r1, #5
    93d4:	e1a01004 	mov	r1, r4
    93d8:	eb000a0d 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    93dc:	e1a0000d 	mov	r0, sp
    93e0:	eb000a14 	bl	bc38 <CDWHCIRegister::Read()>
    93e4:	e1a0000d 	mov	r0, sp
    93e8:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    93ec:	eb000a36 	bl	bccc <CDWHCIRegister::IsSet(unsigned int) const>
    93f0:	e3500000 	cmp	r0, #0
    93f4:	1a000006 	bne	9414 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x7c>
    93f8:	e1a01005 	mov	r1, r5
    93fc:	e1a00006 	mov	r0, r6
    9400:	ebfffef1 	bl	8fcc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9404:	e1a0000d 	mov	r0, sp
    9408:	eb000a09 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    940c:	e28dd018 	add	sp, sp, #24
    9410:	e8bd8070 	pop	{r4, r5, r6, pc}
    9414:	e1a00005 	mov	r0, r5
    9418:	e3a01000 	mov	r1, #0
    941c:	eb000be6 	bl	c3bc <CDWHCITransferStageData::SetSubState(unsigned int)>
    9420:	e1a0000d 	mov	r0, sp
    9424:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    9428:	eb000a36 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    942c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    9430:	e1a0000d 	mov	r0, sp
    9434:	eb000a41 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    9438:	e1a0000d 	mov	r0, sp
    943c:	eb000a04 	bl	bc54 <CDWHCIRegister::Write()>
    9440:	e284100c 	add	r1, r4, #12
    9444:	e28d000c 	add	r0, sp, #12
    9448:	eb0009f1 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    944c:	e3a01002 	mov	r1, #2
    9450:	e28d000c 	add	r0, sp, #12
    9454:	eb000a18 	bl	bcbc <CDWHCIRegister::Set(unsigned int)>
    9458:	e28d000c 	add	r0, sp, #12
    945c:	eb0009fc 	bl	bc54 <CDWHCIRegister::Write()>
    9460:	e28d000c 	add	r0, sp, #12
    9464:	eb0009f2 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9468:	e1a0000d 	mov	r0, sp
    946c:	eb0009f0 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9470:	e28dd018 	add	sp, sp, #24
    9474:	e8bd8070 	pop	{r4, r5, r6, pc}
    9478:	e3001794 	movw	r1, #1940	; 0x794
    947c:	e3401003 	movt	r1, #3
    9480:	e3000804 	movw	r0, #2052	; 0x804
    9484:	e3400003 	movt	r0, #3
    9488:	e300232f 	movw	r2, #815	; 0x32f
    948c:	eb006eb8 	bl	24f74 <assertion_failed>
    9490:	e3001794 	movw	r1, #1940	; 0x794
    9494:	e3401003 	movt	r1, #3
    9498:	e3000814 	movw	r0, #2068	; 0x814
    949c:	e3400003 	movt	r0, #3
    94a0:	e3002331 	movw	r2, #817	; 0x331
    94a4:	eb006eb2 	bl	24f74 <assertion_failed>

000094a8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    94a8:	e92d4070 	push	{r4, r5, r6, lr}
    94ac:	e2514000 	subs	r4, r1, #0
    94b0:	0a00001d 	beq	952c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x84>
    94b4:	e1a05000 	mov	r5, r0
    94b8:	e1a00004 	mov	r0, r4
    94bc:	eb000bbc 	bl	c3b4 <CDWHCITransferStageData::GetState() const>
    94c0:	e3500003 	cmp	r0, #3
    94c4:	1a00001e 	bne	9544 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    94c8:	e1a00004 	mov	r0, r4
    94cc:	eb000cfd 	bl	c8c8 <CDWHCITransferStageData::IsSplit() const>
    94d0:	e2501000 	subs	r1, r0, #0
    94d4:	1a000005 	bne	94f0 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x48>
    94d8:	e1a00004 	mov	r0, r4
    94dc:	eb000bb2 	bl	c3ac <CDWHCITransferStageData::SetState(unsigned int)>
    94e0:	e1a01004 	mov	r1, r4
    94e4:	e1a00005 	mov	r0, r5
    94e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    94ec:	eaffffa9 	b	9398 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    94f0:	e1a00004 	mov	r0, r4
    94f4:	e3a01001 	mov	r1, #1
    94f8:	eb000bab 	bl	c3ac <CDWHCITransferStageData::SetState(unsigned int)>
    94fc:	e3a01000 	mov	r1, #0
    9500:	e1a00004 	mov	r0, r4
    9504:	eb000b9c 	bl	c37c <CDWHCITransferStageData::SetSplitComplete(bool)>
    9508:	e1a00004 	mov	r0, r4
    950c:	eb000d5f 	bl	ca90 <CDWHCITransferStageData::GetFrameScheduler() const>
    9510:	e5903000 	ldr	r3, [r0]
    9514:	e5933008 	ldr	r3, [r3, #8]
    9518:	e12fff33 	blx	r3
    951c:	e1a01004 	mov	r1, r4
    9520:	e1a00005 	mov	r0, r5
    9524:	e8bd4070 	pop	{r4, r5, r6, lr}
    9528:	eaffff9a 	b	9398 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    952c:	e3001794 	movw	r1, #1940	; 0x794
    9530:	e3401003 	movt	r1, #3
    9534:	e3000804 	movw	r0, #2052	; 0x804
    9538:	e3400003 	movt	r0, #3
    953c:	e3002539 	movw	r2, #1337	; 0x539
    9540:	eb006e8b 	bl	24f74 <assertion_failed>
    9544:	e3001794 	movw	r1, #1940	; 0x794
    9548:	e3401003 	movt	r1, #3
    954c:	e300082c 	movw	r0, #2092	; 0x82c
    9550:	e3400003 	movt	r0, #3
    9554:	e300253a 	movw	r2, #1338	; 0x53a
    9558:	eb006e85 	bl	24f74 <assertion_failed>

0000955c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    955c:	e92d4010 	push	{r4, lr}
    9560:	e2520000 	subs	r0, r2, #0
    9564:	0a000003 	beq	9578 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x1c>
    9568:	e3510000 	cmp	r1, #0
    956c:	0a000007 	beq	9590 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x34>
    9570:	e8bd4010 	pop	{r4, lr}
    9574:	eaffffcb 	b	94a8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    9578:	e3001794 	movw	r1, #1940	; 0x794
    957c:	e3401003 	movt	r1, #3
    9580:	e30007a4 	movw	r0, #1956	; 0x7a4
    9584:	e3400003 	movt	r0, #3
    9588:	e3a02e55 	mov	r2, #1360	; 0x550
    958c:	eb006e78 	bl	24f74 <assertion_failed>
    9590:	e3001794 	movw	r1, #1940	; 0x794
    9594:	e3401003 	movt	r1, #3
    9598:	e3000860 	movw	r0, #2144	; 0x860
    959c:	e3400003 	movt	r0, #3
    95a0:	e3002553 	movw	r2, #1363	; 0x553
    95a4:	eb006e72 	bl	24f74 <assertion_failed>

000095a8 <CDWHCIDevice::AllocateChannel()>:
    95a8:	e92d4070 	push	{r4, r5, r6, lr}
    95ac:	e1a05000 	mov	r5, r0
    95b0:	e5900014 	ldr	r0, [r0, #20]
    95b4:	e3500000 	cmp	r0, #0
    95b8:	1a000014 	bne	9610 <CDWHCIDevice::AllocateChannel()+0x68>
    95bc:	e595100c 	ldr	r1, [r5, #12]
    95c0:	e3510000 	cmp	r1, #0
    95c4:	0a00000e 	beq	9604 <CDWHCIDevice::AllocateChannel()+0x5c>
    95c8:	e5954010 	ldr	r4, [r5, #16]
    95cc:	e2144001 	ands	r4, r4, #1
    95d0:	0a000022 	beq	9660 <CDWHCIDevice::AllocateChannel()+0xb8>
    95d4:	e3a04000 	mov	r4, #0
    95d8:	e3a03001 	mov	r3, #1
    95dc:	ea000002 	b	95ec <CDWHCIDevice::AllocateChannel()+0x44>
    95e0:	e5952010 	ldr	r2, [r5, #16]
    95e4:	e1120003 	tst	r2, r3
    95e8:	0a000012 	beq	9638 <CDWHCIDevice::AllocateChannel()+0x90>
    95ec:	e2844001 	add	r4, r4, #1
    95f0:	e1a03083 	lsl	r3, r3, #1
    95f4:	e1540001 	cmp	r4, r1
    95f8:	3afffff8 	bcc	95e0 <CDWHCIDevice::AllocateChannel()+0x38>
    95fc:	e3500000 	cmp	r0, #0
    9600:	1a000014 	bne	9658 <CDWHCIDevice::AllocateChannel()+0xb0>
    9604:	e3a04010 	mov	r4, #16
    9608:	e1a00004 	mov	r0, r4
    960c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9610:	eb008d8d 	bl	2cc4c <EnterCritical>
    9614:	e595100c 	ldr	r1, [r5, #12]
    9618:	e3510000 	cmp	r1, #0
    961c:	05950014 	ldreq	r0, [r5, #20]
    9620:	0afffff5 	beq	95fc <CDWHCIDevice::AllocateChannel()+0x54>
    9624:	e5954010 	ldr	r4, [r5, #16]
    9628:	e5950014 	ldr	r0, [r5, #20]
    962c:	e2144001 	ands	r4, r4, #1
    9630:	1affffe7 	bne	95d4 <CDWHCIDevice::AllocateChannel()+0x2c>
    9634:	e3a03001 	mov	r3, #1
    9638:	e5952010 	ldr	r2, [r5, #16]
    963c:	e3500000 	cmp	r0, #0
    9640:	e1823003 	orr	r3, r2, r3
    9644:	e5853010 	str	r3, [r5, #16]
    9648:	0affffee 	beq	9608 <CDWHCIDevice::AllocateChannel()+0x60>
    964c:	eb008dab 	bl	2cd00 <LeaveCritical>
    9650:	e1a00004 	mov	r0, r4
    9654:	e8bd8070 	pop	{r4, r5, r6, pc}
    9658:	eb008da8 	bl	2cd00 <LeaveCritical>
    965c:	eaffffe8 	b	9604 <CDWHCIDevice::AllocateChannel()+0x5c>
    9660:	e5953010 	ldr	r3, [r5, #16]
    9664:	e3833001 	orr	r3, r3, #1
    9668:	e5853010 	str	r3, [r5, #16]
    966c:	eaffffe5 	b	9608 <CDWHCIDevice::AllocateChannel()+0x60>

00009670 <CDWHCIDevice::FreeChannel(unsigned int)>:
    9670:	e590300c 	ldr	r3, [r0, #12]
    9674:	e92d4070 	push	{r4, r5, r6, lr}
    9678:	e1530001 	cmp	r3, r1
    967c:	9a000012 	bls	96cc <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    9680:	e1a04000 	mov	r4, r0
    9684:	e3a05001 	mov	r5, #1
    9688:	e5900014 	ldr	r0, [r0, #20]
    968c:	e1a05115 	lsl	r5, r5, r1
    9690:	e3500000 	cmp	r0, #0
    9694:	1a00000a 	bne	96c4 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    9698:	e5943010 	ldr	r3, [r4, #16]
    969c:	e1130005 	tst	r3, r5
    96a0:	0a00000f 	beq	96e4 <CDWHCIDevice::FreeChannel(unsigned int)+0x74>
    96a4:	e5943014 	ldr	r3, [r4, #20]
    96a8:	e5941010 	ldr	r1, [r4, #16]
    96ac:	e3530000 	cmp	r3, #0
    96b0:	e1c15005 	bic	r5, r1, r5
    96b4:	e5845010 	str	r5, [r4, #16]
    96b8:	08bd8070 	popeq	{r4, r5, r6, pc}
    96bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    96c0:	ea008d8e 	b	2cd00 <LeaveCritical>
    96c4:	eb008d60 	bl	2cc4c <EnterCritical>
    96c8:	eafffff2 	b	9698 <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    96cc:	e3001794 	movw	r1, #1940	; 0x794
    96d0:	e3401003 	movt	r1, #3
    96d4:	e3000814 	movw	r0, #2068	; 0x814
    96d8:	e3400003 	movt	r0, #3
    96dc:	e3002574 	movw	r2, #1396	; 0x574
    96e0:	eb006e23 	bl	24f74 <assertion_failed>
    96e4:	e3001794 	movw	r1, #1940	; 0x794
    96e8:	e3401003 	movt	r1, #3
    96ec:	e300086c 	movw	r0, #2156	; 0x86c
    96f0:	e3400003 	movt	r0, #3
    96f4:	e3002579 	movw	r2, #1401	; 0x579
    96f8:	eb006e1d 	bl	24f74 <assertion_failed>

000096fc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    96fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9700:	e2516000 	subs	r6, r1, #0
    9704:	e24dd008 	sub	sp, sp, #8
    9708:	0a000039 	beq	97f4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf8>
    970c:	e1a05000 	mov	r5, r0
    9710:	e1a08003 	mov	r8, r3
    9714:	e1a09002 	mov	r9, r2
    9718:	ebffffa2 	bl	95a8 <CDWHCIDevice::AllocateChannel()>
    971c:	e1a04000 	mov	r4, r0
    9720:	e595300c 	ldr	r3, [r5, #12]
    9724:	e1530000 	cmp	r3, r0
    9728:	93a06000 	movls	r6, #0
    972c:	8a000002 	bhi	973c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x40>
    9730:	e1a00006 	mov	r0, r6
    9734:	e28dd008 	add	sp, sp, #8
    9738:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    973c:	e085a100 	add	sl, r5, r0, lsl #2
    9740:	e3a00054 	mov	r0, #84	; 0x54
    9744:	eb000cd3 	bl	ca98 <CDWHCITransferStageData::operator new(unsigned int)>
    9748:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    974c:	e58d3004 	str	r3, [sp, #4]
    9750:	e1a02006 	mov	r2, r6
    9754:	e58d8000 	str	r8, [sp]
    9758:	e1a03009 	mov	r3, r9
    975c:	e1a01004 	mov	r1, r4
    9760:	e1a07000 	mov	r7, r0
    9764:	eb000b2d 	bl	c420 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    9768:	e59a8018 	ldr	r8, [sl, #24]
    976c:	e3580000 	cmp	r8, #0
    9770:	1a000032 	bne	9840 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x144>
    9774:	e1a01004 	mov	r1, r4
    9778:	e1a00005 	mov	r0, r5
    977c:	e58a7018 	str	r7, [sl, #24]
    9780:	ebfffdd7 	bl	8ee4 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    9784:	e1a00007 	mov	r0, r7
    9788:	eb000c4e 	bl	c8c8 <CDWHCITransferStageData::IsSplit() const>
    978c:	e2501000 	subs	r1, r0, #0
    9790:	e1a00007 	mov	r0, r7
    9794:	0a000014 	beq	97ec <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    9798:	eb000b0b 	bl	c3cc <CDWHCITransferStageData::BeginSplitCycle()>
    979c:	e2506000 	subs	r6, r0, #0
    97a0:	0a000019 	beq	980c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x110>
    97a4:	e3a01001 	mov	r1, #1
    97a8:	e1a00007 	mov	r0, r7
    97ac:	eb000afe 	bl	c3ac <CDWHCITransferStageData::SetState(unsigned int)>
    97b0:	e1a01008 	mov	r1, r8
    97b4:	e1a00007 	mov	r0, r7
    97b8:	eb000aef 	bl	c37c <CDWHCITransferStageData::SetSplitComplete(bool)>
    97bc:	e1a00007 	mov	r0, r7
    97c0:	eb000cb2 	bl	ca90 <CDWHCITransferStageData::GetFrameScheduler() const>
    97c4:	e5903000 	ldr	r3, [r0]
    97c8:	e5933008 	ldr	r3, [r3, #8]
    97cc:	e12fff33 	blx	r3
    97d0:	e1a00005 	mov	r0, r5
    97d4:	e1a01007 	mov	r1, r7
    97d8:	e3a06001 	mov	r6, #1
    97dc:	ebfffeed 	bl	9398 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    97e0:	e1a00006 	mov	r0, r6
    97e4:	e28dd008 	add	sp, sp, #8
    97e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    97ec:	eb000aee 	bl	c3ac <CDWHCITransferStageData::SetState(unsigned int)>
    97f0:	eafffff6 	b	97d0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    97f4:	e3001794 	movw	r1, #1940	; 0x794
    97f8:	e3401003 	movt	r1, #3
    97fc:	e3000890 	movw	r0, #2192	; 0x890
    9800:	e3400003 	movt	r0, #3
    9804:	e30022b2 	movw	r2, #690	; 0x2b2
    9808:	eb006dd9 	bl	24f74 <assertion_failed>
    980c:	e1a01004 	mov	r1, r4
    9810:	e1a00005 	mov	r0, r5
    9814:	ebfffdcf 	bl	8f58 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9818:	e1a00007 	mov	r0, r7
    981c:	eb000a60 	bl	c1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9820:	e1a00007 	mov	r0, r7
    9824:	e3a01054 	mov	r1, #84	; 0x54
    9828:	eb000cb0 	bl	caf0 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    982c:	e58a6018 	str	r6, [sl, #24]
    9830:	e1a01004 	mov	r1, r4
    9834:	e1a00005 	mov	r0, r5
    9838:	ebffff8c 	bl	9670 <CDWHCIDevice::FreeChannel(unsigned int)>
    983c:	eaffffbb 	b	9730 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x34>
    9840:	e3001794 	movw	r1, #1940	; 0x794
    9844:	e3401003 	movt	r1, #3
    9848:	e300089c 	movw	r0, #2204	; 0x89c
    984c:	e3400003 	movt	r0, #3
    9850:	e30022c3 	movw	r2, #707	; 0x2c3
    9854:	eb006dc6 	bl	24f74 <assertion_failed>

00009858 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    9858:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    985c:	e3530000 	cmp	r3, #0
    9860:	1a00001d 	bne	98dc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x84>
    9864:	e92d4070 	push	{r4, r5, r6, lr}
    9868:	e3510000 	cmp	r1, #0
    986c:	e1a06002 	mov	r6, r2
    9870:	e24dd008 	sub	sp, sp, #8
    9874:	e1a04001 	mov	r4, r1
    9878:	e1a05000 	mov	r5, r0
    987c:	0a000018 	beq	98e4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x8c>
    9880:	e1a00001 	mov	r0, r1
    9884:	eb00279c 	bl	136fc <CUSBRequest::GetEndpoint() const>
    9888:	eb0012a4 	bl	e320 <CUSBEndpoint::GetType() const>
    988c:	e3500001 	cmp	r0, #1
    9890:	1a000019 	bne	98fc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xa4>
    9894:	e1a00004 	mov	r0, r4
    9898:	eb0027d7 	bl	137fc <CUSBRequest::GetBufLen() const>
    989c:	e3500000 	cmp	r0, #0
    98a0:	0a000020 	beq	9928 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xd0>
    98a4:	e3a01000 	mov	r1, #0
    98a8:	e1a00004 	mov	r0, r4
    98ac:	eb00279c 	bl	13724 <CUSBRequest::SetStatus(int)>
    98b0:	e1a00004 	mov	r0, r4
    98b4:	eb002790 	bl	136fc <CUSBRequest::GetEndpoint() const>
    98b8:	eb00129a 	bl	e328 <CUSBEndpoint::IsDirectionIn() const>
    98bc:	e58d6000 	str	r6, [sp]
    98c0:	e1a02000 	mov	r2, r0
    98c4:	e1a01004 	mov	r1, r4
    98c8:	e1a00005 	mov	r0, r5
    98cc:	e3a03000 	mov	r3, #0
    98d0:	ebffff89 	bl	96fc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    98d4:	e28dd008 	add	sp, sp, #8
    98d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    98dc:	e3a00000 	mov	r0, #0
    98e0:	e12fff1e 	bx	lr
    98e4:	e3001794 	movw	r1, #1940	; 0x794
    98e8:	e3401003 	movt	r1, #3
    98ec:	e3000890 	movw	r0, #2192	; 0x890
    98f0:	e3400003 	movt	r0, #3
    98f4:	e3a02f45 	mov	r2, #276	; 0x114
    98f8:	eb006d9d 	bl	24f74 <assertion_failed>
    98fc:	e1a00004 	mov	r0, r4
    9900:	eb00277d 	bl	136fc <CUSBRequest::GetEndpoint() const>
    9904:	eb001285 	bl	e320 <CUSBEndpoint::GetType() const>
    9908:	e3500002 	cmp	r0, #2
    990c:	0affffe0 	beq	9894 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x3c>
    9910:	e3001794 	movw	r1, #1940	; 0x794
    9914:	e3401003 	movt	r1, #3
    9918:	e30008b8 	movw	r0, #2232	; 0x8b8
    991c:	e3400003 	movt	r0, #3
    9920:	e3002116 	movw	r2, #278	; 0x116
    9924:	eb006d92 	bl	24f74 <assertion_failed>
    9928:	e3001794 	movw	r1, #1940	; 0x794
    992c:	e3401003 	movt	r1, #3
    9930:	e300092c 	movw	r0, #2348	; 0x92c
    9934:	e3400003 	movt	r0, #3
    9938:	e3002117 	movw	r2, #279	; 0x117
    993c:	eb006d8c 	bl	24f74 <assertion_failed>

00009940 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>:
    9940:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9944:	e0807101 	add	r7, r0, r1, lsl #2
    9948:	e24dd020 	sub	sp, sp, #32
    994c:	e5974018 	ldr	r4, [r7, #24]
    9950:	e3540000 	cmp	r4, #0
    9954:	0a000092 	beq	9ba4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x264>
    9958:	e1a05000 	mov	r5, r0
    995c:	e1a00004 	mov	r0, r4
    9960:	e1a06001 	mov	r6, r1
    9964:	eb000c3f 	bl	ca68 <CDWHCITransferStageData::GetURB() const>
    9968:	e2509000 	subs	r9, r0, #0
    996c:	0a0000be 	beq	9c6c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x32c>
    9970:	e1a00004 	mov	r0, r4
    9974:	eb000a92 	bl	c3c4 <CDWHCITransferStageData::GetSubState() const>
    9978:	e3500000 	cmp	r0, #0
    997c:	0a000047 	beq	9aa0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x160>
    9980:	e3500001 	cmp	r0, #1
    9984:	1a000131 	bne	9e50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    9988:	e1a00004 	mov	r0, r4
    998c:	e1a08286 	lsl	r8, r6, #5
    9990:	eb000bbe 	bl	c890 <CDWHCITransferStageData::GetDMAAddress() const>
    9994:	e1a0a000 	mov	sl, r0
    9998:	e1a00004 	mov	r0, r4
    999c:	eb000bc5 	bl	c8b8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    99a0:	e1a01000 	mov	r1, r0
    99a4:	e1a0000a 	mov	r0, sl
    99a8:	eb008ab9 	bl	2c494 <CleanAndInvalidateDataCacheRange>
    99ac:	e3a01e51 	mov	r1, #1296	; 0x510
    99b0:	e3431f98 	movt	r1, #16280	; 0x3f98
    99b4:	e0881001 	add	r1, r8, r1
    99b8:	e28d0008 	add	r0, sp, #8
    99bc:	eb000894 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    99c0:	e28d0008 	add	r0, sp, #8
    99c4:	eb00089b 	bl	bc38 <CDWHCIRegister::Read()>
    99c8:	e3001508 	movw	r1, #1288	; 0x508
    99cc:	e3431f98 	movt	r1, #16280	; 0x3f98
    99d0:	e0881001 	add	r1, r8, r1
    99d4:	e28d0014 	add	r0, sp, #20
    99d8:	eb00088d 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    99dc:	e28d0014 	add	r0, sp, #20
    99e0:	eb000894 	bl	bc38 <CDWHCIRegister::Read()>
    99e4:	e3500002 	cmp	r0, #2
    99e8:	0a000064 	beq	9b80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x240>
    99ec:	e1a00004 	mov	r0, r4
    99f0:	eb000a79 	bl	c3dc <CDWHCITransferStageData::IsPeriodic() const>
    99f4:	e3500000 	cmp	r0, #0
    99f8:	1a0000db 	bne	9d6c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x42c>
    99fc:	e28d0014 	add	r0, sp, #20
    9a00:	eb00088c 	bl	bc38 <CDWHCIRegister::Read()>
    9a04:	e1a08000 	mov	r8, r0
    9a08:	e28d0008 	add	r0, sp, #8
    9a0c:	eb00089e 	bl	bc8c <CDWHCIRegister::Get() const>
    9a10:	e1a0a000 	mov	sl, r0
    9a14:	e28d0008 	add	r0, sp, #8
    9a18:	eb00089b 	bl	bc8c <CDWHCIRegister::Get() const>
    9a1c:	e1a01008 	mov	r1, r8
    9a20:	e7f23050 	ubfx	r3, r0, #0, #19
    9a24:	e7e929da 	ubfx	r2, sl, #19, #10
    9a28:	e1a00004 	mov	r0, r4
    9a2c:	eb0009ef 	bl	c1f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    9a30:	e28d0014 	add	r0, sp, #20
    9a34:	eb00087e 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9a38:	e28d0008 	add	r0, sp, #8
    9a3c:	eb00087c 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9a40:	e1a00004 	mov	r0, r4
    9a44:	eb000a5a 	bl	c3b4 <CDWHCITransferStageData::GetState() const>
    9a48:	e1a08000 	mov	r8, r0
    9a4c:	e3500001 	cmp	r0, #1
    9a50:	0a000017 	beq	9ab4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x174>
    9a54:	3a000058 	bcc	9bbc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x27c>
    9a58:	e3500002 	cmp	r0, #2
    9a5c:	1a000101 	bne	9e68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x528>
    9a60:	e1a00004 	mov	r0, r4
    9a64:	eb000bdc 	bl	c9dc <CDWHCITransferStageData::GetTransactionStatus() const>
    9a68:	e300378c 	movw	r3, #1932	; 0x78c
    9a6c:	e1a08000 	mov	r8, r0
    9a70:	e1100003 	tst	r0, r3
    9a74:	0a00008c 	beq	9cac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x36c>
    9a78:	eb0072e2 	bl	26608 <CLogger::Get()>
    9a7c:	e58d8000 	str	r8, [sp]
    9a80:	e30039bc 	movw	r3, #2492	; 0x9bc
    9a84:	e3403003 	movt	r3, #3
    9a88:	e3001770 	movw	r1, #1904	; 0x770
    9a8c:	e3401003 	movt	r1, #3
    9a90:	e3a02001 	mov	r2, #1
    9a94:	eb00721c 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a98:	e3a01000 	mov	r1, #0
    9a9c:	ea00005f 	b	9c20 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2e0>
    9aa0:	e1a01004 	mov	r1, r4
    9aa4:	e1a00005 	mov	r0, r5
    9aa8:	ebfffd47 	bl	8fcc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9aac:	e28dd020 	add	sp, sp, #32
    9ab0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9ab4:	e1a00004 	mov	r0, r4
    9ab8:	eb000bc7 	bl	c9dc <CDWHCITransferStageData::GetTransactionStatus() const>
    9abc:	e30037dc 	movw	r3, #2012	; 0x7dc
    9ac0:	e1a0a000 	mov	sl, r0
    9ac4:	e1100003 	tst	r0, r3
    9ac8:	1a00006d 	bne	9c84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x344>
    9acc:	e1a00004 	mov	r0, r4
    9ad0:	eb000bee 	bl	ca90 <CDWHCITransferStageData::GetFrameScheduler() const>
    9ad4:	e5903000 	ldr	r3, [r0]
    9ad8:	e1a0100a 	mov	r1, sl
    9adc:	e5933010 	ldr	r3, [r3, #16]
    9ae0:	e12fff33 	blx	r3
    9ae4:	e3a01002 	mov	r1, #2
    9ae8:	e1a00004 	mov	r0, r4
    9aec:	eb000a2e 	bl	c3ac <CDWHCITransferStageData::SetState(unsigned int)>
    9af0:	e1a01008 	mov	r1, r8
    9af4:	e1a00004 	mov	r0, r4
    9af8:	eb000a1f 	bl	c37c <CDWHCITransferStageData::SetSplitComplete(bool)>
    9afc:	e1a00004 	mov	r0, r4
    9b00:	eb000be2 	bl	ca90 <CDWHCITransferStageData::GetFrameScheduler() const>
    9b04:	e5903000 	ldr	r3, [r0]
    9b08:	e593300c 	ldr	r3, [r3, #12]
    9b0c:	e12fff33 	blx	r3
    9b10:	e3500000 	cmp	r0, #0
    9b14:	1a00007c 	bne	9d0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3cc>
    9b18:	e1a00004 	mov	r0, r4
    9b1c:	eb000bb8 	bl	ca04 <CDWHCITransferStageData::IsStageComplete() const>
    9b20:	e2508000 	subs	r8, r0, #0
    9b24:	1a00007c 	bne	9d1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3dc>
    9b28:	e1a00004 	mov	r0, r4
    9b2c:	eb000a26 	bl	c3cc <CDWHCITransferStageData::BeginSplitCycle()>
    9b30:	e250a000 	subs	sl, r0, #0
    9b34:	1a000097 	bne	9d98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x458>
    9b38:	e1a0100a 	mov	r1, sl
    9b3c:	e1a00009 	mov	r0, r9
    9b40:	eb0026f7 	bl	13724 <CUSBRequest::SetStatus(int)>
    9b44:	e1a01006 	mov	r1, r6
    9b48:	e1a00005 	mov	r0, r5
    9b4c:	ebfffd01 	bl	8f58 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9b50:	e1a00004 	mov	r0, r4
    9b54:	eb000992 	bl	c1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9b58:	e1a00004 	mov	r0, r4
    9b5c:	e3a01054 	mov	r1, #84	; 0x54
    9b60:	eb000be2 	bl	caf0 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    9b64:	e587a018 	str	sl, [r7, #24]
    9b68:	e1a00005 	mov	r0, r5
    9b6c:	e1a01006 	mov	r1, r6
    9b70:	ebfffebe 	bl	9670 <CDWHCIDevice::FreeChannel(unsigned int)>
    9b74:	e1a00009 	mov	r0, r9
    9b78:	eb00272c 	bl	13830 <CUSBRequest::CallCompletionRoutine()>
    9b7c:	eaffffca 	b	9aac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x16c>
    9b80:	e1a01004 	mov	r1, r4
    9b84:	e1a00005 	mov	r0, r5
    9b88:	ebfffe02 	bl	9398 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9b8c:	e28d0014 	add	r0, sp, #20
    9b90:	eb000827 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9b94:	e28d0008 	add	r0, sp, #8
    9b98:	eb000825 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9b9c:	e28dd020 	add	sp, sp, #32
    9ba0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9ba4:	e3001794 	movw	r1, #1940	; 0x794
    9ba8:	e3401003 	movt	r1, #3
    9bac:	e3000804 	movw	r0, #2052	; 0x804
    9bb0:	e3400003 	movt	r0, #3
    9bb4:	e30023bd 	movw	r2, #957	; 0x3bd
    9bb8:	eb006ced 	bl	24f74 <assertion_failed>
    9bbc:	e1a00004 	mov	r0, r4
    9bc0:	eb000b85 	bl	c9dc <CDWHCITransferStageData::GetTransactionStatus() const>
    9bc4:	e300178c 	movw	r1, #1932	; 0x78c
    9bc8:	e1a0a000 	mov	sl, r0
    9bcc:	e0108001 	ands	r8, r0, r1
    9bd0:	1a00005c 	bne	9d48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x408>
    9bd4:	e3100050 	tst	r0, #80	; 0x50
    9bd8:	0a00000b 	beq	9c0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2cc>
    9bdc:	e1a00004 	mov	r0, r4
    9be0:	eb0009fd 	bl	c3dc <CDWHCITransferStageData::IsPeriodic() const>
    9be4:	e3500000 	cmp	r0, #0
    9be8:	0a000007 	beq	9c0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2cc>
    9bec:	e1a00004 	mov	r0, r4
    9bf0:	eb000b8c 	bl	ca28 <CDWHCITransferStageData::IsTimeout() const>
    9bf4:	e3500000 	cmp	r0, #0
    9bf8:	0a000081 	beq	9e04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4c4>
    9bfc:	e3a01000 	mov	r1, #0
    9c00:	e1a00009 	mov	r0, r9
    9c04:	eb0026c6 	bl	13724 <CUSBRequest::SetStatus(int)>
    9c08:	ea000006 	b	9c28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2e8>
    9c0c:	e1a00004 	mov	r0, r4
    9c10:	eb000b1c 	bl	c888 <CDWHCITransferStageData::IsStatusStage() const>
    9c14:	e3500000 	cmp	r0, #0
    9c18:	0a00002a 	beq	9cc8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x388>
    9c1c:	e3a01001 	mov	r1, #1
    9c20:	e1a00009 	mov	r0, r9
    9c24:	eb0026be 	bl	13724 <CUSBRequest::SetStatus(int)>
    9c28:	e1a01006 	mov	r1, r6
    9c2c:	e1a00005 	mov	r0, r5
    9c30:	ebfffcc8 	bl	8f58 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9c34:	e1a00004 	mov	r0, r4
    9c38:	eb000959 	bl	c1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9c3c:	e1a00004 	mov	r0, r4
    9c40:	e3a01054 	mov	r1, #84	; 0x54
    9c44:	eb000ba9 	bl	caf0 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    9c48:	e3a03000 	mov	r3, #0
    9c4c:	e1a01006 	mov	r1, r6
    9c50:	e1a00005 	mov	r0, r5
    9c54:	e5873018 	str	r3, [r7, #24]
    9c58:	ebfffe84 	bl	9670 <CDWHCIDevice::FreeChannel(unsigned int)>
    9c5c:	e1a00009 	mov	r0, r9
    9c60:	eb0026f2 	bl	13830 <CUSBRequest::CallCompletionRoutine()>
    9c64:	e28dd020 	add	sp, sp, #32
    9c68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9c6c:	e3001794 	movw	r1, #1940	; 0x794
    9c70:	e3401003 	movt	r1, #3
    9c74:	e3000890 	movw	r0, #2192	; 0x890
    9c78:	e3400003 	movt	r0, #3
    9c7c:	e30023bf 	movw	r2, #959	; 0x3bf
    9c80:	eb006cbb 	bl	24f74 <assertion_failed>
    9c84:	eb00725f 	bl	26608 <CLogger::Get()>
    9c88:	e58da000 	str	sl, [sp]
    9c8c:	e1a02008 	mov	r2, r8
    9c90:	e30039bc 	movw	r3, #2492	; 0x9bc
    9c94:	e3403003 	movt	r3, #3
    9c98:	e3001770 	movw	r1, #1904	; 0x770
    9c9c:	e3401003 	movt	r1, #3
    9ca0:	eb007199 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9ca4:	e3a01000 	mov	r1, #0
    9ca8:	eaffffdc 	b	9c20 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2e0>
    9cac:	e1a00004 	mov	r0, r4
    9cb0:	eb000b76 	bl	ca90 <CDWHCITransferStageData::GetFrameScheduler() const>
    9cb4:	e5903000 	ldr	r3, [r0]
    9cb8:	e1a01008 	mov	r1, r8
    9cbc:	e5933010 	ldr	r3, [r3, #16]
    9cc0:	e12fff33 	blx	r3
    9cc4:	eaffff8c 	b	9afc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x1bc>
    9cc8:	e1a00004 	mov	r0, r4
    9ccc:	eb000b50 	bl	ca14 <CDWHCITransferStageData::GetResultLen() const>
    9cd0:	e1a01000 	mov	r1, r0
    9cd4:	e1a00009 	mov	r0, r9
    9cd8:	eb002693 	bl	1372c <CUSBRequest::SetResultLen(unsigned int)>
    9cdc:	eaffffce 	b	9c1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2dc>
    9ce0:	e3a01001 	mov	r1, #1
    9ce4:	e1a00004 	mov	r0, r4
    9ce8:	eb0009af 	bl	c3ac <CDWHCITransferStageData::SetState(unsigned int)>
    9cec:	e1a0100a 	mov	r1, sl
    9cf0:	e1a00004 	mov	r0, r4
    9cf4:	eb0009a0 	bl	c37c <CDWHCITransferStageData::SetSplitComplete(bool)>
    9cf8:	e1a00004 	mov	r0, r4
    9cfc:	eb000b63 	bl	ca90 <CDWHCITransferStageData::GetFrameScheduler() const>
    9d00:	e5903000 	ldr	r3, [r0]
    9d04:	e5933008 	ldr	r3, [r3, #8]
    9d08:	e12fff33 	blx	r3
    9d0c:	e1a01004 	mov	r1, r4
    9d10:	e1a00005 	mov	r0, r5
    9d14:	ebfffd9f 	bl	9398 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9d18:	eaffff63 	b	9aac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x16c>
    9d1c:	e1a01006 	mov	r1, r6
    9d20:	e1a00005 	mov	r0, r5
    9d24:	ebfffc8b 	bl	8f58 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9d28:	e1a00004 	mov	r0, r4
    9d2c:	eb000ad5 	bl	c888 <CDWHCITransferStageData::IsStatusStage() const>
    9d30:	e3500000 	cmp	r0, #0
    9d34:	0a00002c 	beq	9dec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4ac>
    9d38:	e3a01001 	mov	r1, #1
    9d3c:	e1a00009 	mov	r0, r9
    9d40:	eb002677 	bl	13724 <CUSBRequest::SetStatus(int)>
    9d44:	eaffffba 	b	9c34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2f4>
    9d48:	eb00722e 	bl	26608 <CLogger::Get()>
    9d4c:	e58da000 	str	sl, [sp]
    9d50:	e30039bc 	movw	r3, #2492	; 0x9bc
    9d54:	e3403003 	movt	r3, #3
    9d58:	e3001770 	movw	r1, #1904	; 0x770
    9d5c:	e3401003 	movt	r1, #3
    9d60:	e3a02001 	mov	r2, #1
    9d64:	eb007168 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9d68:	eaffffa3 	b	9bfc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2bc>
    9d6c:	e28d0008 	add	r0, sp, #8
    9d70:	eb0007c5 	bl	bc8c <CDWHCIRegister::Get() const>
    9d74:	e7e10ed0 	ubfx	r0, r0, #29, #2
    9d78:	e3500003 	cmp	r0, #3
    9d7c:	1affff1e 	bne	99fc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0xbc>
    9d80:	e3001794 	movw	r1, #1940	; 0x794
    9d84:	e3401003 	movt	r1, #3
    9d88:	e3000944 	movw	r0, #2372	; 0x944
    9d8c:	e3400003 	movt	r0, #3
    9d90:	e30023df 	movw	r2, #991	; 0x3df
    9d94:	eb006c76 	bl	24f74 <assertion_failed>
    9d98:	e1a00004 	mov	r0, r4
    9d9c:	eb00098e 	bl	c3dc <CDWHCITransferStageData::IsPeriodic() const>
    9da0:	e250a000 	subs	sl, r0, #0
    9da4:	0affffcd 	beq	9ce0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3a0>
    9da8:	e1a00004 	mov	r0, r4
    9dac:	eb000b1d 	bl	ca28 <CDWHCITransferStageData::IsTimeout() const>
    9db0:	e3500000 	cmp	r0, #0
    9db4:	0a000012 	beq	9e04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4c4>
    9db8:	e1a01006 	mov	r1, r6
    9dbc:	e1a00005 	mov	r0, r5
    9dc0:	ebfffc64 	bl	8f58 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9dc4:	e1a01008 	mov	r1, r8
    9dc8:	e1a00009 	mov	r0, r9
    9dcc:	eb002654 	bl	13724 <CUSBRequest::SetStatus(int)>
    9dd0:	e1a00004 	mov	r0, r4
    9dd4:	eb0008f2 	bl	c1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9dd8:	e1a00004 	mov	r0, r4
    9ddc:	e3a01054 	mov	r1, #84	; 0x54
    9de0:	eb000b42 	bl	caf0 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    9de4:	e5878018 	str	r8, [r7, #24]
    9de8:	eaffff5e 	b	9b68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x228>
    9dec:	e1a00004 	mov	r0, r4
    9df0:	eb000b07 	bl	ca14 <CDWHCITransferStageData::GetResultLen() const>
    9df4:	e1a01000 	mov	r1, r0
    9df8:	e1a00009 	mov	r0, r9
    9dfc:	eb00264a 	bl	1372c <CUSBRequest::SetResultLen(unsigned int)>
    9e00:	eaffffcc 	b	9d38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3f8>
    9e04:	e3a01003 	mov	r1, #3
    9e08:	e1a00004 	mov	r0, r4
    9e0c:	eb000966 	bl	c3ac <CDWHCITransferStageData::SetState(unsigned int)>
    9e10:	e1a00009 	mov	r0, r9
    9e14:	eb002638 	bl	136fc <CUSBRequest::GetEndpoint() const>
    9e18:	eb001149 	bl	e344 <CUSBEndpoint::GetInterval() const>
    9e1c:	e3a01064 	mov	r1, #100	; 0x64
    9e20:	e304cdd3 	movw	ip, #19923	; 0x4dd3
    9e24:	e341c062 	movt	ip, #4194	; 0x1062
    9e28:	e58d5000 	str	r5, [sp]
    9e2c:	e1a03004 	mov	r3, r4
    9e30:	e0010091 	mul	r1, r1, r0
    9e34:	e309255c 	movw	r2, #38236	; 0x955c
    9e38:	e3402000 	movt	r2, #0
    9e3c:	e5950008 	ldr	r0, [r5, #8]
    9e40:	e081c19c 	umull	ip, r1, ip, r1
    9e44:	e1a01321 	lsr	r1, r1, #6
    9e48:	eb008397 	bl	2acac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    9e4c:	eaffff16 	b	9aac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x16c>
    9e50:	e3001794 	movw	r1, #1940	; 0x794
    9e54:	e3401003 	movt	r1, #3
    9e58:	e3010398 	movw	r0, #5016	; 0x1398
    9e5c:	e3400003 	movt	r0, #3
    9e60:	e30023e7 	movw	r2, #999	; 0x3e7
    9e64:	eb006c42 	bl	24f74 <assertion_failed>
    9e68:	e3001794 	movw	r1, #1940	; 0x794
    9e6c:	e3401003 	movt	r1, #3
    9e70:	e3010398 	movw	r0, #5016	; 0x1398
    9e74:	e3400003 	movt	r0, #3
    9e78:	e30024c8 	movw	r2, #1224	; 0x4c8
    9e7c:	eb006c3c 	bl	24f74 <assertion_failed>

00009e80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    9e80:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    9e84:	e3530000 	cmp	r3, #0
    9e88:	112fff1e 	bxne	lr
    9e8c:	eafffeab 	b	9940 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>

00009e90 <CDWHCIDevice::InterruptHandler()>:
    9e90:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9e94:	e3a01014 	mov	r1, #20
    9e98:	e3431f98 	movt	r1, #16280	; 0x3f98
    9e9c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9ea0:	e1a06000 	mov	r6, r0
    9ea4:	e28d0004 	add	r0, sp, #4
    9ea8:	eb000759 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9eac:	e28d0004 	add	r0, sp, #4
    9eb0:	eb000760 	bl	bc38 <CDWHCIRegister::Read()>
    9eb4:	e28d0004 	add	r0, sp, #4
    9eb8:	eb000773 	bl	bc8c <CDWHCIRegister::Get() const>
    9ebc:	e3100402 	tst	r0, #33554432	; 0x2000000
    9ec0:	1a000005 	bne	9edc <CDWHCIDevice::InterruptHandler()+0x4c>
    9ec4:	e28d0004 	add	r0, sp, #4
    9ec8:	eb000761 	bl	bc54 <CDWHCIRegister::Write()>
    9ecc:	e28d0004 	add	r0, sp, #4
    9ed0:	eb000757 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9ed4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9ed8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9edc:	e3001414 	movw	r1, #1044	; 0x414
    9ee0:	e3431f98 	movt	r1, #16280	; 0x3f98
    9ee4:	e28d0010 	add	r0, sp, #16
    9ee8:	eb000749 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9eec:	e28d0010 	add	r0, sp, #16
    9ef0:	eb000750 	bl	bc38 <CDWHCIRegister::Read()>
    9ef4:	e28d0010 	add	r0, sp, #16
    9ef8:	eb000755 	bl	bc54 <CDWHCIRegister::Write()>
    9efc:	e596300c 	ldr	r3, [r6, #12]
    9f00:	e3530000 	cmp	r3, #0
    9f04:	0a000019 	beq	9f70 <CDWHCIDevice::InterruptHandler()+0xe0>
    9f08:	e300750c 	movw	r7, #1292	; 0x50c
    9f0c:	e3437f98 	movt	r7, #16280	; 0x3f98
    9f10:	e3a04000 	mov	r4, #0
    9f14:	e3a05001 	mov	r5, #1
    9f18:	ea000004 	b	9f30 <CDWHCIDevice::InterruptHandler()+0xa0>
    9f1c:	e596300c 	ldr	r3, [r6, #12]
    9f20:	e2844001 	add	r4, r4, #1
    9f24:	e1a05085 	lsl	r5, r5, #1
    9f28:	e1530004 	cmp	r3, r4
    9f2c:	9a00000f 	bls	9f70 <CDWHCIDevice::InterruptHandler()+0xe0>
    9f30:	e28d0010 	add	r0, sp, #16
    9f34:	eb000754 	bl	bc8c <CDWHCIRegister::Get() const>
    9f38:	e1100005 	tst	r0, r5
    9f3c:	0afffff6 	beq	9f1c <CDWHCIDevice::InterruptHandler()+0x8c>
    9f40:	e3a02000 	mov	r2, #0
    9f44:	e0871284 	add	r1, r7, r4, lsl #5
    9f48:	e28d001c 	add	r0, sp, #28
    9f4c:	eb000734 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9f50:	e28d001c 	add	r0, sp, #28
    9f54:	eb00073e 	bl	bc54 <CDWHCIRegister::Write()>
    9f58:	e5d63081 	ldrb	r3, [r6, #129]	; 0x81
    9f5c:	e3530000 	cmp	r3, #0
    9f60:	0a000005 	beq	9f7c <CDWHCIDevice::InterruptHandler()+0xec>
    9f64:	e28d001c 	add	r0, sp, #28
    9f68:	eb000731 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9f6c:	eaffffea 	b	9f1c <CDWHCIDevice::InterruptHandler()+0x8c>
    9f70:	e28d0010 	add	r0, sp, #16
    9f74:	eb00072e 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    9f78:	eaffffd1 	b	9ec4 <CDWHCIDevice::InterruptHandler()+0x34>
    9f7c:	e1a01004 	mov	r1, r4
    9f80:	e1a00006 	mov	r0, r6
    9f84:	ebfffe6d 	bl	9940 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>
    9f88:	eafffff5 	b	9f64 <CDWHCIDevice::InterruptHandler()+0xd4>

00009f8c <CDWHCIDevice::InterruptStub(void*)>:
    9f8c:	e3500000 	cmp	r0, #0
    9f90:	0a000000 	beq	9f98 <CDWHCIDevice::InterruptStub(void*)+0xc>
    9f94:	eaffffbd 	b	9e90 <CDWHCIDevice::InterruptHandler()>
    9f98:	e3001794 	movw	r1, #1940	; 0x794
    9f9c:	e3401003 	movt	r1, #3
    9fa0:	e30007a4 	movw	r0, #1956	; 0x7a4
    9fa4:	e3400003 	movt	r0, #3
    9fa8:	e92d4010 	push	{r4, lr}
    9fac:	e300252e 	movw	r2, #1326	; 0x52e
    9fb0:	eb006bef 	bl	24f74 <assertion_failed>

00009fb4 <CDWHCIDevice::AllocateWaitBlock()>:
    9fb4:	e92d4070 	push	{r4, r5, r6, lr}
    9fb8:	e1a05000 	mov	r5, r0
    9fbc:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    9fc0:	e3500000 	cmp	r0, #0
    9fc4:	1a000015 	bne	a020 <CDWHCIDevice::AllocateWaitBlock()+0x6c>
    9fc8:	e3a04000 	mov	r4, #0
    9fcc:	e3a03001 	mov	r3, #1
    9fd0:	ea000003 	b	9fe4 <CDWHCIDevice::AllocateWaitBlock()+0x30>
    9fd4:	e2844001 	add	r4, r4, #1
    9fd8:	e1a03083 	lsl	r3, r3, #1
    9fdc:	e3540010 	cmp	r4, #16
    9fe0:	0a000009 	beq	a00c <CDWHCIDevice::AllocateWaitBlock()+0x58>
    9fe4:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    9fe8:	e1120003 	tst	r2, r3
    9fec:	1afffff8 	bne	9fd4 <CDWHCIDevice::AllocateWaitBlock()+0x20>
    9ff0:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    9ff4:	e3500000 	cmp	r0, #0
    9ff8:	e1823003 	orr	r3, r2, r3
    9ffc:	e585306c 	str	r3, [r5, #108]	; 0x6c
    a000:	1a000003 	bne	a014 <CDWHCIDevice::AllocateWaitBlock()+0x60>
    a004:	e1a00004 	mov	r0, r4
    a008:	e8bd8070 	pop	{r4, r5, r6, pc}
    a00c:	e3500000 	cmp	r0, #0
    a010:	0afffffb 	beq	a004 <CDWHCIDevice::AllocateWaitBlock()+0x50>
    a014:	eb008b39 	bl	2cd00 <LeaveCritical>
    a018:	e1a00004 	mov	r0, r4
    a01c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a020:	eb008b09 	bl	2cc4c <EnterCritical>
    a024:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    a028:	eaffffe6 	b	9fc8 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000a02c <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    a02c:	e92d4070 	push	{r4, r5, r6, lr}
    a030:	e351000f 	cmp	r1, #15
    a034:	8a000012 	bhi	a084 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    a038:	e1a04000 	mov	r4, r0
    a03c:	e3a05001 	mov	r5, #1
    a040:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    a044:	e1a05115 	lsl	r5, r5, r1
    a048:	e3500000 	cmp	r0, #0
    a04c:	1a00000a 	bne	a07c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    a050:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    a054:	e1130005 	tst	r3, r5
    a058:	0a00000f 	beq	a09c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x70>
    a05c:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    a060:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
    a064:	e3530000 	cmp	r3, #0
    a068:	e1c15005 	bic	r5, r1, r5
    a06c:	e584506c 	str	r5, [r4, #108]	; 0x6c
    a070:	08bd8070 	popeq	{r4, r5, r6, pc}
    a074:	e8bd4070 	pop	{r4, r5, r6, lr}
    a078:	ea008b20 	b	2cd00 <LeaveCritical>
    a07c:	eb008af2 	bl	2cc4c <EnterCritical>
    a080:	eafffff2 	b	a050 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    a084:	e3001794 	movw	r1, #1940	; 0x794
    a088:	e3401003 	movt	r1, #3
    a08c:	e30007b0 	movw	r0, #1968	; 0x7b0
    a090:	e3400003 	movt	r0, #3
    a094:	e3002599 	movw	r2, #1433	; 0x599
    a098:	eb006bb5 	bl	24f74 <assertion_failed>
    a09c:	e3001794 	movw	r1, #1940	; 0x794
    a0a0:	e3401003 	movt	r1, #3
    a0a4:	e30009e0 	movw	r0, #2528	; 0x9e0
    a0a8:	e3400003 	movt	r0, #3
    a0ac:	e300259e 	movw	r2, #1438	; 0x59e
    a0b0:	eb006baf 	bl	24f74 <assertion_failed>

0000a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    a0b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a0b8:	e1a07001 	mov	r7, r1
    a0bc:	e1a08002 	mov	r8, r2
    a0c0:	e24dd00c 	sub	sp, sp, #12
    a0c4:	e1a09003 	mov	r9, r3
    a0c8:	e1a06000 	mov	r6, r0
    a0cc:	ebffffb8 	bl	9fb4 <CDWHCIDevice::AllocateWaitBlock()>
    a0d0:	e350000f 	cmp	r0, #15
    a0d4:	8a000024 	bhi	a16c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb8>
    a0d8:	e3570000 	cmp	r7, #0
    a0dc:	0a000026 	beq	a17c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc8>
    a0e0:	e0864000 	add	r4, r6, r0
    a0e4:	e1a03006 	mov	r3, r6
    a0e8:	e1a02000 	mov	r2, r0
    a0ec:	e1a05000 	mov	r5, r0
    a0f0:	e3081b24 	movw	r1, #35620	; 0x8b24
    a0f4:	e3401000 	movt	r1, #0
    a0f8:	e1a00007 	mov	r0, r7
    a0fc:	eb0025c0 	bl	13804 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    a100:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    a104:	e3530000 	cmp	r3, #0
    a108:	1a000028 	bne	a1b0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xfc>
    a10c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a110:	e1a02008 	mov	r2, r8
    a114:	e58d3000 	str	r3, [sp]
    a118:	e3a00001 	mov	r0, #1
    a11c:	e1a03009 	mov	r3, r9
    a120:	e5c4005c 	strb	r0, [r4, #92]	; 0x5c
    a124:	e1a01007 	mov	r1, r7
    a128:	e1a00006 	mov	r0, r6
    a12c:	ebfffd72 	bl	96fc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a130:	e2508000 	subs	r8, r0, #0
    a134:	0a000016 	beq	a194 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe0>
    a138:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    a13c:	e3530000 	cmp	r3, #0
    a140:	1afffffc 	bne	a138 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x84>
    a144:	e1a01005 	mov	r1, r5
    a148:	e1a00006 	mov	r0, r6
    a14c:	ebffffb6 	bl	a02c <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    a150:	e1a00007 	mov	r0, r7
    a154:	eb002576 	bl	13734 <CUSBRequest::GetStatus() const>
    a158:	e2908000 	adds	r8, r0, #0
    a15c:	13a08001 	movne	r8, #1
    a160:	e1a00008 	mov	r0, r8
    a164:	e28dd00c 	add	sp, sp, #12
    a168:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a16c:	e3a08000 	mov	r8, #0
    a170:	e1a00008 	mov	r0, r8
    a174:	e28dd00c 	add	sp, sp, #12
    a178:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a17c:	e3001794 	movw	r1, #1940	; 0x794
    a180:	e3401003 	movt	r1, #3
    a184:	e3000890 	movw	r0, #2192	; 0x890
    a188:	e3400003 	movt	r0, #3
    a18c:	e3a02fa3 	mov	r2, #652	; 0x28c
    a190:	eb006b77 	bl	24f74 <assertion_failed>
    a194:	e1a00006 	mov	r0, r6
    a198:	e5c4805c 	strb	r8, [r4, #92]	; 0x5c
    a19c:	e1a01005 	mov	r1, r5
    a1a0:	ebffffa1 	bl	a02c <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    a1a4:	e1a00008 	mov	r0, r8
    a1a8:	e28dd00c 	add	sp, sp, #12
    a1ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a1b0:	e3001794 	movw	r1, #1940	; 0x794
    a1b4:	e3401003 	movt	r1, #3
    a1b8:	e3000a08 	movw	r0, #2568	; 0xa08
    a1bc:	e3400003 	movt	r0, #3
    a1c0:	e300228f 	movw	r2, #655	; 0x28f
    a1c4:	eb006b6a 	bl	24f74 <assertion_failed>

0000a1c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    a1c8:	e5d0c081 	ldrb	ip, [r0, #129]	; 0x81
    a1cc:	e21cc0ff 	ands	ip, ip, #255	; 0xff
    a1d0:	1a000026 	bne	a270 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa8>
    a1d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a1d8:	e3510000 	cmp	r1, #0
    a1dc:	e1a06002 	mov	r6, r2
    a1e0:	e24dd00c 	sub	sp, sp, #12
    a1e4:	e1a04001 	mov	r4, r1
    a1e8:	e1a05000 	mov	r5, r0
    a1ec:	0a00003b 	beq	a2e0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x118>
    a1f0:	e1a0100c 	mov	r1, ip
    a1f4:	e1a00004 	mov	r0, r4
    a1f8:	eb002549 	bl	13724 <CUSBRequest::SetStatus(int)>
    a1fc:	e1a00004 	mov	r0, r4
    a200:	eb00253d 	bl	136fc <CUSBRequest::GetEndpoint() const>
    a204:	eb001045 	bl	e320 <CUSBEndpoint::GetType() const>
    a208:	e3500000 	cmp	r0, #0
    a20c:	1a000039 	bne	a2f8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x130>
    a210:	e3560000 	cmp	r6, #0
    a214:	1a000062 	bne	a3a4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1dc>
    a218:	e1a00004 	mov	r0, r4
    a21c:	eb002552 	bl	1376c <CUSBRequest::GetSetupData()>
    a220:	e3500000 	cmp	r0, #0
    a224:	0a00006b 	beq	a3d8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x210>
    a228:	e1d030d0 	ldrsb	r3, [r0]
    a22c:	e1a00004 	mov	r0, r4
    a230:	e3530000 	cmp	r3, #0
    a234:	ba00000f 	blt	a278 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb0>
    a238:	eb00256f 	bl	137fc <CUSBRequest::GetBufLen() const>
    a23c:	e2507000 	subs	r7, r0, #0
    a240:	1a000040 	bne	a348 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x180>
    a244:	e58d7000 	str	r7, [sp]
    a248:	e1a03007 	mov	r3, r7
    a24c:	e1a02007 	mov	r2, r7
    a250:	e1a01004 	mov	r1, r4
    a254:	e1a00005 	mov	r0, r5
    a258:	ebffff95 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a25c:	e3500000 	cmp	r0, #0
    a260:	1a000055 	bne	a3bc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1f4>
    a264:	e3a00000 	mov	r0, #0
    a268:	e28dd00c 	add	sp, sp, #12
    a26c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a270:	e3a00000 	mov	r0, #0
    a274:	e12fff1e 	bx	lr
    a278:	eb00255f 	bl	137fc <CUSBRequest::GetBufLen() const>
    a27c:	e3500000 	cmp	r0, #0
    a280:	0a00006b 	beq	a434 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    a284:	e58d6000 	str	r6, [sp]
    a288:	e1a03006 	mov	r3, r6
    a28c:	e1a02006 	mov	r2, r6
    a290:	e1a01004 	mov	r1, r4
    a294:	e1a00005 	mov	r0, r5
    a298:	ebffff85 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a29c:	e3500000 	cmp	r0, #0
    a2a0:	0affffef 	beq	a264 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a2a4:	e58d6000 	str	r6, [sp]
    a2a8:	e1a03006 	mov	r3, r6
    a2ac:	e3a02001 	mov	r2, #1
    a2b0:	e1a01004 	mov	r1, r4
    a2b4:	e1a00005 	mov	r0, r5
    a2b8:	ebffff7d 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a2bc:	e3500000 	cmp	r0, #0
    a2c0:	0affffe7 	beq	a264 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a2c4:	e58d6000 	str	r6, [sp]
    a2c8:	e1a02006 	mov	r2, r6
    a2cc:	e1a01004 	mov	r1, r4
    a2d0:	e1a00005 	mov	r0, r5
    a2d4:	e3a03001 	mov	r3, #1
    a2d8:	ebffff75 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a2dc:	eaffffe1 	b	a268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a2e0:	e3001794 	movw	r1, #1940	; 0x794
    a2e4:	e3401003 	movt	r1, #3
    a2e8:	e3000890 	movw	r0, #2192	; 0x890
    a2ec:	e3400003 	movt	r0, #3
    a2f0:	e3a020cf 	mov	r2, #207	; 0xcf
    a2f4:	eb006b1e 	bl	24f74 <assertion_failed>
    a2f8:	e1a00004 	mov	r0, r4
    a2fc:	eb0024fe 	bl	136fc <CUSBRequest::GetEndpoint() const>
    a300:	eb001006 	bl	e320 <CUSBEndpoint::GetType() const>
    a304:	e3500001 	cmp	r0, #1
    a308:	1a000038 	bne	a3f0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x228>
    a30c:	e1a00004 	mov	r0, r4
    a310:	eb002539 	bl	137fc <CUSBRequest::GetBufLen() const>
    a314:	e3500000 	cmp	r0, #0
    a318:	0a00003f 	beq	a41c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x254>
    a31c:	e1a00004 	mov	r0, r4
    a320:	eb0024f5 	bl	136fc <CUSBRequest::GetEndpoint() const>
    a324:	eb000fff 	bl	e328 <CUSBEndpoint::IsDirectionIn() const>
    a328:	e58d6000 	str	r6, [sp]
    a32c:	e1a02000 	mov	r2, r0
    a330:	e1a01004 	mov	r1, r4
    a334:	e1a00005 	mov	r0, r5
    a338:	e3a03000 	mov	r3, #0
    a33c:	ebffff5c 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a340:	e28dd00c 	add	sp, sp, #12
    a344:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a348:	e58d6000 	str	r6, [sp]
    a34c:	e1a03006 	mov	r3, r6
    a350:	e1a02006 	mov	r2, r6
    a354:	e1a01004 	mov	r1, r4
    a358:	e1a00005 	mov	r0, r5
    a35c:	ebffff54 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a360:	e3500000 	cmp	r0, #0
    a364:	0affffbe 	beq	a264 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a368:	e58d6000 	str	r6, [sp]
    a36c:	e1a03006 	mov	r3, r6
    a370:	e1a02006 	mov	r2, r6
    a374:	e1a01004 	mov	r1, r4
    a378:	e1a00005 	mov	r0, r5
    a37c:	ebffff4c 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a380:	e3500000 	cmp	r0, #0
    a384:	0affffb6 	beq	a264 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a388:	e3a03001 	mov	r3, #1
    a38c:	e58d6000 	str	r6, [sp]
    a390:	e1a01004 	mov	r1, r4
    a394:	e1a00005 	mov	r0, r5
    a398:	e1a02003 	mov	r2, r3
    a39c:	ebffff44 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a3a0:	eaffffb0 	b	a268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a3a4:	e3001794 	movw	r1, #1940	; 0x794
    a3a8:	e3401003 	movt	r1, #3
    a3ac:	e3000a20 	movw	r0, #2592	; 0xa20
    a3b0:	e3400003 	movt	r0, #3
    a3b4:	e3a020d5 	mov	r2, #213	; 0xd5
    a3b8:	eb006aed 	bl	24f74 <assertion_failed>
    a3bc:	e3a03001 	mov	r3, #1
    a3c0:	e58d7000 	str	r7, [sp]
    a3c4:	e1a01004 	mov	r1, r4
    a3c8:	e1a00005 	mov	r0, r5
    a3cc:	e1a02003 	mov	r2, r3
    a3d0:	ebffff37 	bl	a0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a3d4:	eaffffa3 	b	a268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    a3d8:	e3001794 	movw	r1, #1940	; 0x794
    a3dc:	e3401003 	movt	r1, #3
    a3e0:	e3000a40 	movw	r0, #2624	; 0xa40
    a3e4:	e3400003 	movt	r0, #3
    a3e8:	e3a020d8 	mov	r2, #216	; 0xd8
    a3ec:	eb006ae0 	bl	24f74 <assertion_failed>
    a3f0:	e1a00004 	mov	r0, r4
    a3f4:	eb0024c0 	bl	136fc <CUSBRequest::GetEndpoint() const>
    a3f8:	eb000fc8 	bl	e320 <CUSBEndpoint::GetType() const>
    a3fc:	e3500002 	cmp	r0, #2
    a400:	0affffc1 	beq	a30c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x144>
    a404:	e3001794 	movw	r1, #1940	; 0x794
    a408:	e3401003 	movt	r1, #3
    a40c:	e30008b8 	movw	r0, #2232	; 0x8b8
    a410:	e3400003 	movt	r0, #3
    a414:	e3a020fd 	mov	r2, #253	; 0xfd
    a418:	eb006ad5 	bl	24f74 <assertion_failed>
    a41c:	e3001794 	movw	r1, #1940	; 0x794
    a420:	e3401003 	movt	r1, #3
    a424:	e300092c 	movw	r0, #2348	; 0x92c
    a428:	e3400003 	movt	r0, #3
    a42c:	e3a020fe 	mov	r2, #254	; 0xfe
    a430:	eb006acf 	bl	24f74 <assertion_failed>
    a434:	e3001794 	movw	r1, #1940	; 0x794
    a438:	e3401003 	movt	r1, #3
    a43c:	e300092c 	movw	r0, #2348	; 0x92c
    a440:	e3400003 	movt	r0, #3
    a444:	e3a020dc 	mov	r2, #220	; 0xdc
    a448:	eb006ac9 	bl	24f74 <assertion_failed>

0000a44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    a44c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a450:	e2516000 	subs	r6, r1, #0
    a454:	e59d4020 	ldr	r4, [sp, #32]
    a458:	0a000020 	beq	a4e0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x94>
    a45c:	e1a05002 	mov	r5, r2
    a460:	e3520000 	cmp	r2, #0
    a464:	0a000023 	beq	a4f8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xac>
    a468:	e3540000 	cmp	r4, #0
    a46c:	0a000027 	beq	a510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    a470:	e1a07000 	mov	r7, r0
    a474:	e1a08003 	mov	r8, r3
    a478:	e2239001 	eor	r9, r3, #1
    a47c:	ea000003 	b	a490 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x44>
    a480:	e3a00001 	mov	r0, #1
    a484:	eb00839e 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
    a488:	e2544001 	subs	r4, r4, #1
    a48c:	0a000011 	beq	a4d8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x8c>
    a490:	e1a00006 	mov	r0, r6
    a494:	eb0005e7 	bl	bc38 <CDWHCIRegister::Read()>
    a498:	e1150000 	tst	r5, r0
    a49c:	11a03009 	movne	r3, r9
    a4a0:	01a03008 	moveq	r3, r8
    a4a4:	e3530000 	cmp	r3, #0
    a4a8:	0a000008 	beq	a4d0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x84>
    a4ac:	e5973008 	ldr	r3, [r7, #8]
    a4b0:	e3530000 	cmp	r3, #0
    a4b4:	1afffff1 	bne	a480 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x34>
    a4b8:	e3001794 	movw	r1, #1940	; 0x794
    a4bc:	e3401003 	movt	r1, #3
    a4c0:	e30007f4 	movw	r0, #2036	; 0x7f4
    a4c4:	e3400003 	movt	r0, #3
    a4c8:	e30025af 	movw	r2, #1455	; 0x5af
    a4cc:	eb006aa8 	bl	24f74 <assertion_failed>
    a4d0:	e3a00001 	mov	r0, #1
    a4d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a4d8:	e1a00004 	mov	r0, r4
    a4dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a4e0:	e3001794 	movw	r1, #1940	; 0x794
    a4e4:	e3401003 	movt	r1, #3
    a4e8:	e3000a4c 	movw	r0, #2636	; 0xa4c
    a4ec:	e3400003 	movt	r0, #3
    a4f0:	e30025a9 	movw	r2, #1449	; 0x5a9
    a4f4:	eb006a9e 	bl	24f74 <assertion_failed>
    a4f8:	e3001794 	movw	r1, #1940	; 0x794
    a4fc:	e3401003 	movt	r1, #3
    a500:	e3000a5c 	movw	r0, #2652	; 0xa5c
    a504:	e3400003 	movt	r0, #3
    a508:	e30025aa 	movw	r2, #1450	; 0x5aa
    a50c:	eb006a98 	bl	24f74 <assertion_failed>
    a510:	e3001794 	movw	r1, #1940	; 0x794
    a514:	e3401003 	movt	r1, #3
    a518:	e3000a68 	movw	r0, #2664	; 0xa68
    a51c:	e3400003 	movt	r0, #3
    a520:	e30025ab 	movw	r2, #1451	; 0x5ab
    a524:	eb006a92 	bl	24f74 <assertion_failed>

0000a528 <CDWHCIDevice::EnableRootPort()>:
    a528:	e92d4030 	push	{r4, r5, lr}
    a52c:	e1a05000 	mov	r5, r0
    a530:	e24dd01c 	sub	sp, sp, #28
    a534:	eb006e06 	bl	25d54 <CKernelOptions::Get()>
    a538:	e3500000 	cmp	r0, #0
    a53c:	0a00002d 	beq	a5f8 <CDWHCIDevice::EnableRootPort()+0xd0>
    a540:	eb006df8 	bl	25d28 <CKernelOptions::GetUSBPowerDelay() const>
    a544:	e2504000 	subs	r4, r0, #0
    a548:	0a00002a 	beq	a5f8 <CDWHCIDevice::EnableRootPort()+0xd0>
    a54c:	e3a01d11 	mov	r1, #1088	; 0x440
    a550:	e3431f98 	movt	r1, #16280	; 0x3f98
    a554:	e28d000c 	add	r0, sp, #12
    a558:	eb0005ad 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a55c:	e3a03001 	mov	r3, #1
    a560:	e58d4000 	str	r4, [sp]
    a564:	e1a00005 	mov	r0, r5
    a568:	e28d100c 	add	r1, sp, #12
    a56c:	e1a02003 	mov	r2, r3
    a570:	ebffffb5 	bl	a44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a574:	e2504000 	subs	r4, r0, #0
    a578:	0a000019 	beq	a5e4 <CDWHCIDevice::EnableRootPort()+0xbc>
    a57c:	e3a00064 	mov	r0, #100	; 0x64
    a580:	eb00835f 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
    a584:	e28d000c 	add	r0, sp, #12
    a588:	eb0005aa 	bl	bc38 <CDWHCIRegister::Read()>
    a58c:	e3e0102e 	mvn	r1, #46	; 0x2e
    a590:	e28d000c 	add	r0, sp, #12
    a594:	eb0005db 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a598:	e3a01c01 	mov	r1, #256	; 0x100
    a59c:	e28d000c 	add	r0, sp, #12
    a5a0:	eb0005e6 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a5a4:	e28d000c 	add	r0, sp, #12
    a5a8:	eb0005a9 	bl	bc54 <CDWHCIRegister::Write()>
    a5ac:	e3a00032 	mov	r0, #50	; 0x32
    a5b0:	eb008353 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
    a5b4:	e28d000c 	add	r0, sp, #12
    a5b8:	eb00059e 	bl	bc38 <CDWHCIRegister::Read()>
    a5bc:	e3e0102e 	mvn	r1, #46	; 0x2e
    a5c0:	e28d000c 	add	r0, sp, #12
    a5c4:	eb0005cf 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a5c8:	e3e01c01 	mvn	r1, #256	; 0x100
    a5cc:	e28d000c 	add	r0, sp, #12
    a5d0:	eb0005cc 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a5d4:	e28d000c 	add	r0, sp, #12
    a5d8:	eb00059d 	bl	bc54 <CDWHCIRegister::Write()>
    a5dc:	e3a00014 	mov	r0, #20
    a5e0:	eb008347 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
    a5e4:	e28d000c 	add	r0, sp, #12
    a5e8:	eb000591 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a5ec:	e1a00004 	mov	r0, r4
    a5f0:	e28dd01c 	add	sp, sp, #28
    a5f4:	e8bd8030 	pop	{r4, r5, pc}
    a5f8:	e30041fe 	movw	r4, #510	; 0x1fe
    a5fc:	eaffffd2 	b	a54c <CDWHCIDevice::EnableRootPort()+0x24>

0000a600 <CDWHCIDevice::Reset()>:
    a600:	e92d4030 	push	{r4, r5, lr}
    a604:	e3a02000 	mov	r2, #0
    a608:	e1a04000 	mov	r4, r0
    a60c:	e24dd01c 	sub	sp, sp, #28
    a610:	e3a01010 	mov	r1, #16
    a614:	e3431f98 	movt	r1, #16280	; 0x3f98
    a618:	e28d000c 	add	r0, sp, #12
    a61c:	e3a05064 	mov	r5, #100	; 0x64
    a620:	eb00057f 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a624:	e28d100c 	add	r1, sp, #12
    a628:	e1a00004 	mov	r0, r4
    a62c:	e58d5000 	str	r5, [sp]
    a630:	e3a03001 	mov	r3, #1
    a634:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    a638:	ebffff83 	bl	a44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a63c:	e3500000 	cmp	r0, #0
    a640:	1a000005 	bne	a65c <CDWHCIDevice::Reset()+0x5c>
    a644:	e3a04000 	mov	r4, #0
    a648:	e28d000c 	add	r0, sp, #12
    a64c:	eb000578 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a650:	e1a00004 	mov	r0, r4
    a654:	e28dd01c 	add	sp, sp, #28
    a658:	e8bd8030 	pop	{r4, r5, pc}
    a65c:	e3a01001 	mov	r1, #1
    a660:	e28d000c 	add	r0, sp, #12
    a664:	eb0005b5 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a668:	e28d000c 	add	r0, sp, #12
    a66c:	eb000578 	bl	bc54 <CDWHCIRegister::Write()>
    a670:	e1a00004 	mov	r0, r4
    a674:	e3a0200a 	mov	r2, #10
    a678:	e3a03000 	mov	r3, #0
    a67c:	e58d2000 	str	r2, [sp]
    a680:	e28d100c 	add	r1, sp, #12
    a684:	e3a02001 	mov	r2, #1
    a688:	ebffff6f 	bl	a44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a68c:	e2504000 	subs	r4, r0, #0
    a690:	0affffeb 	beq	a644 <CDWHCIDevice::Reset()+0x44>
    a694:	e1a00005 	mov	r0, r5
    a698:	eb008319 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
    a69c:	eaffffe9 	b	a648 <CDWHCIDevice::Reset()+0x48>

0000a6a0 <CDWHCIDevice::InitCore()>:
    a6a0:	e92d4030 	push	{r4, r5, lr}
    a6a4:	e3a0100c 	mov	r1, #12
    a6a8:	e3431f98 	movt	r1, #16280	; 0x3f98
    a6ac:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a6b0:	e1a04000 	mov	r4, r0
    a6b4:	e28d0004 	add	r0, sp, #4
    a6b8:	eb000555 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a6bc:	e28d0004 	add	r0, sp, #4
    a6c0:	eb00055c 	bl	bc38 <CDWHCIRegister::Read()>
    a6c4:	e28d0004 	add	r0, sp, #4
    a6c8:	e3e01601 	mvn	r1, #1048576	; 0x100000
    a6cc:	eb00058d 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a6d0:	e3e01501 	mvn	r1, #4194304	; 0x400000
    a6d4:	e28d0004 	add	r0, sp, #4
    a6d8:	eb00058a 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a6dc:	e28d0004 	add	r0, sp, #4
    a6e0:	eb00055b 	bl	bc54 <CDWHCIRegister::Write()>
    a6e4:	e1a00004 	mov	r0, r4
    a6e8:	ebffffc4 	bl	a600 <CDWHCIDevice::Reset()>
    a6ec:	e2505000 	subs	r5, r0, #0
    a6f0:	0a000054 	beq	a848 <CDWHCIDevice::InitCore()+0x1a8>
    a6f4:	e28d0004 	add	r0, sp, #4
    a6f8:	eb00054e 	bl	bc38 <CDWHCIRegister::Read()>
    a6fc:	e3e01010 	mvn	r1, #16
    a700:	e28d0004 	add	r0, sp, #4
    a704:	eb00057f 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a708:	e3e01008 	mvn	r1, #8
    a70c:	e28d0004 	add	r0, sp, #4
    a710:	eb00057c 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a714:	e28d0004 	add	r0, sp, #4
    a718:	eb00054d 	bl	bc54 <CDWHCIRegister::Write()>
    a71c:	e28d0010 	add	r0, sp, #16
    a720:	e3a01048 	mov	r1, #72	; 0x48
    a724:	e3431f98 	movt	r1, #16280	; 0x3f98
    a728:	eb000539 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a72c:	e28d0010 	add	r0, sp, #16
    a730:	eb000540 	bl	bc38 <CDWHCIRegister::Read()>
    a734:	e28d0010 	add	r0, sp, #16
    a738:	eb000553 	bl	bc8c <CDWHCIRegister::Get() const>
    a73c:	e7e101d0 	ubfx	r0, r0, #3, #2
    a740:	e3500002 	cmp	r0, #2
    a744:	1a000047 	bne	a868 <CDWHCIDevice::InitCore()+0x1c8>
    a748:	e28d0004 	add	r0, sp, #4
    a74c:	eb000539 	bl	bc38 <CDWHCIRegister::Read()>
    a750:	e28d0010 	add	r0, sp, #16
    a754:	eb00054c 	bl	bc8c <CDWHCIRegister::Get() const>
    a758:	e7e10350 	ubfx	r0, r0, #6, #2
    a75c:	e3500002 	cmp	r0, #2
    a760:	0a000046 	beq	a880 <CDWHCIDevice::InitCore()+0x1e0>
    a764:	e3e01802 	mvn	r1, #131072	; 0x20000
    a768:	e28d0004 	add	r0, sp, #4
    a76c:	eb000565 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a770:	e3e01702 	mvn	r1, #524288	; 0x80000
    a774:	e28d0004 	add	r0, sp, #4
    a778:	eb000562 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a77c:	e28d0004 	add	r0, sp, #4
    a780:	eb000533 	bl	bc54 <CDWHCIRegister::Write()>
    a784:	e594300c 	ldr	r3, [r4, #12]
    a788:	e3530000 	cmp	r3, #0
    a78c:	1a000047 	bne	a8b0 <CDWHCIDevice::InitCore()+0x210>
    a790:	e28d0010 	add	r0, sp, #16
    a794:	eb00053c 	bl	bc8c <CDWHCIRegister::Get() const>
    a798:	e7e30750 	ubfx	r0, r0, #14, #4
    a79c:	e2403003 	sub	r3, r0, #3
    a7a0:	e2800001 	add	r0, r0, #1
    a7a4:	e353000c 	cmp	r3, #12
    a7a8:	e584000c 	str	r0, [r4, #12]
    a7ac:	8a000045 	bhi	a8c8 <CDWHCIDevice::InitCore()+0x228>
    a7b0:	e3a01008 	mov	r1, #8
    a7b4:	e3431f98 	movt	r1, #16280	; 0x3f98
    a7b8:	e28d001c 	add	r0, sp, #28
    a7bc:	eb000514 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a7c0:	e28d001c 	add	r0, sp, #28
    a7c4:	eb00051b 	bl	bc38 <CDWHCIRegister::Read()>
    a7c8:	e28d001c 	add	r0, sp, #28
    a7cc:	e3a01020 	mov	r1, #32
    a7d0:	eb00055a 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a7d4:	e28d001c 	add	r0, sp, #28
    a7d8:	e3a01010 	mov	r1, #16
    a7dc:	eb000557 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a7e0:	e3e01006 	mvn	r1, #6
    a7e4:	e28d001c 	add	r0, sp, #28
    a7e8:	eb000546 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a7ec:	e28d001c 	add	r0, sp, #28
    a7f0:	eb000517 	bl	bc54 <CDWHCIRegister::Write()>
    a7f4:	e28d0004 	add	r0, sp, #4
    a7f8:	eb00050e 	bl	bc38 <CDWHCIRegister::Read()>
    a7fc:	e3e01c02 	mvn	r1, #512	; 0x200
    a800:	e28d0004 	add	r0, sp, #4
    a804:	eb00053f 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a808:	e3e01c01 	mvn	r1, #256	; 0x100
    a80c:	e28d0004 	add	r0, sp, #4
    a810:	eb00053c 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a814:	e28d0004 	add	r0, sp, #4
    a818:	eb00050d 	bl	bc54 <CDWHCIRegister::Write()>
    a81c:	e1a00004 	mov	r0, r4
    a820:	ebfff98a 	bl	8e50 <CDWHCIDevice::EnableCommonInterrupts()>
    a824:	e28d001c 	add	r0, sp, #28
    a828:	eb000501 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a82c:	e28d0010 	add	r0, sp, #16
    a830:	eb0004ff 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a834:	e28d0004 	add	r0, sp, #4
    a838:	eb0004fd 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a83c:	e1a00005 	mov	r0, r5
    a840:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a844:	e8bd8030 	pop	{r4, r5, pc}
    a848:	eb006f6e 	bl	26608 <CLogger::Get()>
    a84c:	e3003a78 	movw	r3, #2680	; 0xa78
    a850:	e3403003 	movt	r3, #3
    a854:	e3001770 	movw	r1, #1904	; 0x770
    a858:	e3401003 	movt	r1, #3
    a85c:	e3a02001 	mov	r2, #1
    a860:	eb006ea9 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a864:	eafffff2 	b	a834 <CDWHCIDevice::InitCore()+0x194>
    a868:	e3001794 	movw	r1, #1940	; 0x794
    a86c:	e3401003 	movt	r1, #3
    a870:	e3000a88 	movw	r0, #2696	; 0xa88
    a874:	e3400003 	movt	r0, #3
    a878:	e3002171 	movw	r2, #369	; 0x171
    a87c:	eb0069bc 	bl	24f74 <assertion_failed>
    a880:	e28d0010 	add	r0, sp, #16
    a884:	eb000500 	bl	bc8c <CDWHCIRegister::Get() const>
    a888:	e7e10450 	ubfx	r0, r0, #8, #2
    a88c:	e3500001 	cmp	r0, #1
    a890:	1affffb3 	bne	a764 <CDWHCIDevice::InitCore()+0xc4>
    a894:	e28d0004 	add	r0, sp, #4
    a898:	e3a01802 	mov	r1, #131072	; 0x20000
    a89c:	eb000527 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a8a0:	e3a01702 	mov	r1, #524288	; 0x80000
    a8a4:	e28d0004 	add	r0, sp, #4
    a8a8:	eb000524 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a8ac:	eaffffb2 	b	a77c <CDWHCIDevice::InitCore()+0xdc>
    a8b0:	e3001794 	movw	r1, #1940	; 0x794
    a8b4:	e3401003 	movt	r1, #3
    a8b8:	e3000ac0 	movw	r0, #2752	; 0xac0
    a8bc:	e3400003 	movt	r0, #3
    a8c0:	e3002181 	movw	r2, #385	; 0x181
    a8c4:	eb0069aa 	bl	24f74 <assertion_failed>
    a8c8:	e3001794 	movw	r1, #1940	; 0x794
    a8cc:	e3401003 	movt	r1, #3
    a8d0:	e3000ad4 	movw	r0, #2772	; 0xad4
    a8d4:	e3400003 	movt	r0, #3
    a8d8:	e3002183 	movw	r2, #387	; 0x183
    a8dc:	eb0069a4 	bl	24f74 <assertion_failed>

0000a8e0 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    a8e0:	e92d4030 	push	{r4, r5, lr}
    a8e4:	e3a02000 	mov	r2, #0
    a8e8:	e1a05001 	mov	r5, r1
    a8ec:	e24dd01c 	sub	sp, sp, #28
    a8f0:	e1a04000 	mov	r4, r0
    a8f4:	e3a01010 	mov	r1, #16
    a8f8:	e3431f98 	movt	r1, #16280	; 0x3f98
    a8fc:	e28d000c 	add	r0, sp, #12
    a900:	eb0004c7 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a904:	e28d000c 	add	r0, sp, #12
    a908:	e3a01020 	mov	r1, #32
    a90c:	eb00050b 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a910:	e28d000c 	add	r0, sp, #12
    a914:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    a918:	eb0004fa 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    a91c:	e1a01305 	lsl	r1, r5, #6
    a920:	e28d000c 	add	r0, sp, #12
    a924:	eb000505 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a928:	e28d000c 	add	r0, sp, #12
    a92c:	eb0004c8 	bl	bc54 <CDWHCIRegister::Write()>
    a930:	e3a0200a 	mov	r2, #10
    a934:	e1a00004 	mov	r0, r4
    a938:	e58d2000 	str	r2, [sp]
    a93c:	e28d100c 	add	r1, sp, #12
    a940:	e3a03000 	mov	r3, #0
    a944:	e3a02020 	mov	r2, #32
    a948:	ebfffebf 	bl	a44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a94c:	e3500000 	cmp	r0, #0
    a950:	1a000003 	bne	a964 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x84>
    a954:	e28d000c 	add	r0, sp, #12
    a958:	eb0004b5 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a95c:	e28dd01c 	add	sp, sp, #28
    a960:	e8bd8030 	pop	{r4, r5, pc}
    a964:	e3a00001 	mov	r0, #1
    a968:	eb00826c 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
    a96c:	e28d000c 	add	r0, sp, #12
    a970:	eb0004af 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a974:	e28dd01c 	add	sp, sp, #28
    a978:	e8bd8030 	pop	{r4, r5, pc}

0000a97c <CDWHCIDevice::FlushRxFIFO()>:
    a97c:	e92d4010 	push	{r4, lr}
    a980:	e3a02000 	mov	r2, #0
    a984:	e1a04000 	mov	r4, r0
    a988:	e24dd018 	sub	sp, sp, #24
    a98c:	e3a01010 	mov	r1, #16
    a990:	e3431f98 	movt	r1, #16280	; 0x3f98
    a994:	e28d000c 	add	r0, sp, #12
    a998:	eb0004a1 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a99c:	e3a01010 	mov	r1, #16
    a9a0:	e28d000c 	add	r0, sp, #12
    a9a4:	eb0004e5 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    a9a8:	e28d000c 	add	r0, sp, #12
    a9ac:	eb0004a8 	bl	bc54 <CDWHCIRegister::Write()>
    a9b0:	e3a0200a 	mov	r2, #10
    a9b4:	e1a00004 	mov	r0, r4
    a9b8:	e58d2000 	str	r2, [sp]
    a9bc:	e28d100c 	add	r1, sp, #12
    a9c0:	e3a03000 	mov	r3, #0
    a9c4:	e3a02010 	mov	r2, #16
    a9c8:	ebfffe9f 	bl	a44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a9cc:	e3500000 	cmp	r0, #0
    a9d0:	1a000003 	bne	a9e4 <CDWHCIDevice::FlushRxFIFO()+0x68>
    a9d4:	e28d000c 	add	r0, sp, #12
    a9d8:	eb000495 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a9dc:	e28dd018 	add	sp, sp, #24
    a9e0:	e8bd8010 	pop	{r4, pc}
    a9e4:	e3a00001 	mov	r0, #1
    a9e8:	eb00824c 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
    a9ec:	e28d000c 	add	r0, sp, #12
    a9f0:	eb00048f 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    a9f4:	e28dd018 	add	sp, sp, #24
    a9f8:	e8bd8010 	pop	{r4, pc}

0000a9fc <CDWHCIDevice::InitHost()>:
    a9fc:	e92d4030 	push	{r4, r5, lr}
    aa00:	e3a02000 	mov	r2, #0
    aa04:	e1a04000 	mov	r4, r0
    aa08:	e24dd064 	sub	sp, sp, #100	; 0x64
    aa0c:	e3a01c0e 	mov	r1, #3584	; 0xe00
    aa10:	e3431f98 	movt	r1, #16280	; 0x3f98
    aa14:	e1a0000d 	mov	r0, sp
    aa18:	eb000481 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    aa1c:	e1a0000d 	mov	r0, sp
    aa20:	eb00048b 	bl	bc54 <CDWHCIRegister::Write()>
    aa24:	e28d000c 	add	r0, sp, #12
    aa28:	e3a01b01 	mov	r1, #1024	; 0x400
    aa2c:	e3431f98 	movt	r1, #16280	; 0x3f98
    aa30:	eb000477 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aa34:	e28d000c 	add	r0, sp, #12
    aa38:	eb00047e 	bl	bc38 <CDWHCIRegister::Read()>
    aa3c:	e28d000c 	add	r0, sp, #12
    aa40:	e3e01003 	mvn	r1, #3
    aa44:	eb0004af 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    aa48:	e28d0018 	add	r0, sp, #24
    aa4c:	e3a01048 	mov	r1, #72	; 0x48
    aa50:	e3431f98 	movt	r1, #16280	; 0x3f98
    aa54:	eb00046e 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aa58:	e28d0024 	add	r0, sp, #36	; 0x24
    aa5c:	e3a0100c 	mov	r1, #12
    aa60:	e3431f98 	movt	r1, #16280	; 0x3f98
    aa64:	eb00046a 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aa68:	e28d0018 	add	r0, sp, #24
    aa6c:	eb000471 	bl	bc38 <CDWHCIRegister::Read()>
    aa70:	e7e10350 	ubfx	r0, r0, #6, #2
    aa74:	e3500002 	cmp	r0, #2
    aa78:	0a000051 	beq	abc4 <CDWHCIDevice::InitHost()+0x1c8>
    aa7c:	e3a01000 	mov	r1, #0
    aa80:	e28d000c 	add	r0, sp, #12
    aa84:	eb0004ad 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    aa88:	e28d000c 	add	r0, sp, #12
    aa8c:	eb000470 	bl	bc54 <CDWHCIRegister::Write()>
    aa90:	e3a02b01 	mov	r2, #1024	; 0x400
    aa94:	e28d0030 	add	r0, sp, #48	; 0x30
    aa98:	e3a01024 	mov	r1, #36	; 0x24
    aa9c:	e3431f98 	movt	r1, #16280	; 0x3f98
    aaa0:	eb00045f 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    aaa4:	e28d0030 	add	r0, sp, #48	; 0x30
    aaa8:	eb000469 	bl	bc54 <CDWHCIRegister::Write()>
    aaac:	e3a02000 	mov	r2, #0
    aab0:	e28d003c 	add	r0, sp, #60	; 0x3c
    aab4:	e3a01028 	mov	r1, #40	; 0x28
    aab8:	e3431f98 	movt	r1, #16280	; 0x3f98
    aabc:	eb000458 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    aac0:	e28d003c 	add	r0, sp, #60	; 0x3c
    aac4:	e3a01b01 	mov	r1, #1024	; 0x400
    aac8:	eb00049c 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    aacc:	e3a01301 	mov	r1, #67108864	; 0x4000000
    aad0:	e28d003c 	add	r0, sp, #60	; 0x3c
    aad4:	eb000499 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    aad8:	e28d003c 	add	r0, sp, #60	; 0x3c
    aadc:	eb00045c 	bl	bc54 <CDWHCIRegister::Write()>
    aae0:	e3a02000 	mov	r2, #0
    aae4:	e28d0048 	add	r0, sp, #72	; 0x48
    aae8:	e3a01c01 	mov	r1, #256	; 0x100
    aaec:	e3431f98 	movt	r1, #16280	; 0x3f98
    aaf0:	eb00044b 	bl	bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    aaf4:	e28d0048 	add	r0, sp, #72	; 0x48
    aaf8:	e3a01b02 	mov	r1, #2048	; 0x800
    aafc:	eb00048f 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    ab00:	e3a01301 	mov	r1, #67108864	; 0x4000000
    ab04:	e28d0048 	add	r0, sp, #72	; 0x48
    ab08:	eb00048c 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    ab0c:	e28d0048 	add	r0, sp, #72	; 0x48
    ab10:	eb00044f 	bl	bc54 <CDWHCIRegister::Write()>
    ab14:	e3a01010 	mov	r1, #16
    ab18:	e1a00004 	mov	r0, r4
    ab1c:	ebffff6f 	bl	a8e0 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    ab20:	e1a00004 	mov	r0, r4
    ab24:	ebffff94 	bl	a97c <CDWHCIDevice::FlushRxFIFO()>
    ab28:	e28d0054 	add	r0, sp, #84	; 0x54
    ab2c:	e3a01d11 	mov	r1, #1088	; 0x440
    ab30:	e3431f98 	movt	r1, #16280	; 0x3f98
    ab34:	eb000436 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ab38:	e28d0054 	add	r0, sp, #84	; 0x54
    ab3c:	eb00043d 	bl	bc38 <CDWHCIRegister::Read()>
    ab40:	e28d0054 	add	r0, sp, #84	; 0x54
    ab44:	e3e0102e 	mvn	r1, #46	; 0x2e
    ab48:	eb00046e 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    ab4c:	e28d0054 	add	r0, sp, #84	; 0x54
    ab50:	eb00044d 	bl	bc8c <CDWHCIRegister::Get() const>
    ab54:	e3100a01 	tst	r0, #4096	; 0x1000
    ab58:	1a000004 	bne	ab70 <CDWHCIDevice::InitHost()+0x174>
    ab5c:	e28d0054 	add	r0, sp, #84	; 0x54
    ab60:	e3a01a01 	mov	r1, #4096	; 0x1000
    ab64:	eb000475 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    ab68:	e28d0054 	add	r0, sp, #84	; 0x54
    ab6c:	eb000438 	bl	bc54 <CDWHCIRegister::Write()>
    ab70:	e1a00004 	mov	r0, r4
    ab74:	ebfff8c3 	bl	8e88 <CDWHCIDevice::EnableHostInterrupts()>
    ab78:	e28d0054 	add	r0, sp, #84	; 0x54
    ab7c:	eb00042c 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    ab80:	e28d0048 	add	r0, sp, #72	; 0x48
    ab84:	eb00042a 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    ab88:	e28d003c 	add	r0, sp, #60	; 0x3c
    ab8c:	eb000428 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    ab90:	e28d0030 	add	r0, sp, #48	; 0x30
    ab94:	eb000426 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    ab98:	e28d0024 	add	r0, sp, #36	; 0x24
    ab9c:	eb000424 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    aba0:	e28d0018 	add	r0, sp, #24
    aba4:	eb000422 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    aba8:	e28d000c 	add	r0, sp, #12
    abac:	eb000420 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    abb0:	e1a0000d 	mov	r0, sp
    abb4:	eb00041e 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    abb8:	e3a00001 	mov	r0, #1
    abbc:	e28dd064 	add	sp, sp, #100	; 0x64
    abc0:	e8bd8030 	pop	{r4, r5, pc}
    abc4:	e28d0018 	add	r0, sp, #24
    abc8:	eb00042f 	bl	bc8c <CDWHCIRegister::Get() const>
    abcc:	e7e15450 	ubfx	r5, r0, #8, #2
    abd0:	e3550001 	cmp	r5, #1
    abd4:	1affffa8 	bne	aa7c <CDWHCIDevice::InitHost()+0x80>
    abd8:	e28d0024 	add	r0, sp, #36	; 0x24
    abdc:	eb000415 	bl	bc38 <CDWHCIRegister::Read()>
    abe0:	e3100802 	tst	r0, #131072	; 0x20000
    abe4:	0affffa4 	beq	aa7c <CDWHCIDevice::InitHost()+0x80>
    abe8:	e1a01005 	mov	r1, r5
    abec:	e28d000c 	add	r0, sp, #12
    abf0:	eb000452 	bl	bd40 <CDWHCIRegister::Or(unsigned int)>
    abf4:	eaffffa3 	b	aa88 <CDWHCIDevice::InitHost()+0x8c>

0000abf8 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    abf8:	e92d4030 	push	{r4, r5, lr}
    abfc:	e1a05001 	mov	r5, r1
    ac00:	e1a01002 	mov	r1, r2
    ac04:	e24dd01c 	sub	sp, sp, #28
    ac08:	e28d000c 	add	r0, sp, #12
    ac0c:	eb000400 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ac10:	f57ff05f 	dmb	sy
    ac14:	eb006e7b 	bl	26608 <CLogger::Get()>
    ac18:	e1a04000 	mov	r4, r0
    ac1c:	e28d000c 	add	r0, sp, #12
    ac20:	eb000404 	bl	bc38 <CDWHCIRegister::Read()>
    ac24:	e3a02004 	mov	r2, #4
    ac28:	e88d0021 	stm	sp, {r0, r5}
    ac2c:	e30037d0 	movw	r3, #2000	; 0x7d0
    ac30:	e3403003 	movt	r3, #3
    ac34:	e1a00004 	mov	r0, r4
    ac38:	e3001770 	movw	r1, #1904	; 0x770
    ac3c:	e3401003 	movt	r1, #3
    ac40:	eb006db1 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac44:	e28d000c 	add	r0, sp, #12
    ac48:	eb0003f9 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    ac4c:	e28dd01c 	add	sp, sp, #28
    ac50:	e8bd8030 	pop	{r4, r5, pc}

0000ac54 <CDWHCIDevice::DumpStatus(unsigned int)>:
    ac54:	e92d4070 	push	{r4, r5, r6, lr}
    ac58:	e3000b0c 	movw	r0, #2828	; 0xb0c
    ac5c:	e3400003 	movt	r0, #3
    ac60:	e1a05001 	mov	r5, r1
    ac64:	e3a01000 	mov	r1, #0
    ac68:	e3431f98 	movt	r1, #16280	; 0x3f98
    ac6c:	ebfff7c1 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ac70:	e3a01008 	mov	r1, #8
    ac74:	e3431f98 	movt	r1, #16280	; 0x3f98
    ac78:	e3000b18 	movw	r0, #2840	; 0xb18
    ac7c:	e3400003 	movt	r0, #3
    ac80:	ebfff7bc 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ac84:	e3a0100c 	mov	r1, #12
    ac88:	e3431f98 	movt	r1, #16280	; 0x3f98
    ac8c:	e3000b20 	movw	r0, #2848	; 0xb20
    ac90:	e3400003 	movt	r0, #3
    ac94:	ebfff7b7 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ac98:	e3a01010 	mov	r1, #16
    ac9c:	e3431f98 	movt	r1, #16280	; 0x3f98
    aca0:	e3000b28 	movw	r0, #2856	; 0xb28
    aca4:	e3400003 	movt	r0, #3
    aca8:	ebfff7b2 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    acac:	e3a01014 	mov	r1, #20
    acb0:	e3431f98 	movt	r1, #16280	; 0x3f98
    acb4:	e3000b30 	movw	r0, #2864	; 0xb30
    acb8:	e3400003 	movt	r0, #3
    acbc:	ebfff7ad 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    acc0:	e3a01018 	mov	r1, #24
    acc4:	e3431f98 	movt	r1, #16280	; 0x3f98
    acc8:	e3000b3c 	movw	r0, #2876	; 0xb3c
    accc:	e3400003 	movt	r0, #3
    acd0:	ebfff7a8 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    acd4:	e3a01024 	mov	r1, #36	; 0x24
    acd8:	e3431f98 	movt	r1, #16280	; 0x3f98
    acdc:	e3000b48 	movw	r0, #2888	; 0xb48
    ace0:	e3400003 	movt	r0, #3
    ace4:	ebfff7a3 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ace8:	e3a01028 	mov	r1, #40	; 0x28
    acec:	e3431f98 	movt	r1, #16280	; 0x3f98
    acf0:	e3000b54 	movw	r0, #2900	; 0xb54
    acf4:	e3400003 	movt	r0, #3
    acf8:	ebfff79e 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    acfc:	e3a0102c 	mov	r1, #44	; 0x2c
    ad00:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad04:	e3000b68 	movw	r0, #2920	; 0xb68
    ad08:	e3400003 	movt	r0, #3
    ad0c:	ebfff799 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ad10:	e3a01c01 	mov	r1, #256	; 0x100
    ad14:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad18:	e3000b78 	movw	r0, #2936	; 0xb78
    ad1c:	e3400003 	movt	r0, #3
    ad20:	ebfff794 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ad24:	e3a01b01 	mov	r1, #1024	; 0x400
    ad28:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad2c:	e3000b90 	movw	r0, #2960	; 0xb90
    ad30:	e3400003 	movt	r0, #3
    ad34:	ebfff78f 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ad38:	e3a01e41 	mov	r1, #1040	; 0x410
    ad3c:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad40:	e3000b9c 	movw	r0, #2972	; 0xb9c
    ad44:	e3400003 	movt	r0, #3
    ad48:	ebfff78a 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ad4c:	e30c4028 	movw	r4, #49192	; 0xc028
    ad50:	e34041fc 	movt	r4, #508	; 0x1fc
    ad54:	e3001414 	movw	r1, #1044	; 0x414
    ad58:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad5c:	e3000bb4 	movw	r0, #2996	; 0xbb4
    ad60:	e3400003 	movt	r0, #3
    ad64:	ebfff783 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ad68:	e0854004 	add	r4, r5, r4
    ad6c:	e3001418 	movw	r1, #1048	; 0x418
    ad70:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad74:	e3000bc8 	movw	r0, #3016	; 0xbc8
    ad78:	e3400003 	movt	r0, #3
    ad7c:	e1a04284 	lsl	r4, r4, #5
    ad80:	ebfff77c 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ad84:	e3a01d11 	mov	r1, #1088	; 0x440
    ad88:	e3431f98 	movt	r1, #16280	; 0x3f98
    ad8c:	e3000be0 	movw	r0, #3040	; 0xbe0
    ad90:	e3400003 	movt	r0, #3
    ad94:	ebfff777 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ad98:	e1a01004 	mov	r1, r4
    ad9c:	e3000bec 	movw	r0, #3052	; 0xbec
    ada0:	e3400003 	movt	r0, #3
    ada4:	ebfff773 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ada8:	e2841004 	add	r1, r4, #4
    adac:	e3000c04 	movw	r0, #3076	; 0xc04
    adb0:	e3400003 	movt	r0, #3
    adb4:	ebfff76f 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    adb8:	e2841008 	add	r1, r4, #8
    adbc:	e3000c1c 	movw	r0, #3100	; 0xc1c
    adc0:	e3400003 	movt	r0, #3
    adc4:	ebfff76b 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    adc8:	e284100c 	add	r1, r4, #12
    adcc:	e3000c30 	movw	r0, #3120	; 0xc30
    add0:	e3400003 	movt	r0, #3
    add4:	ebfff767 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    add8:	e2841010 	add	r1, r4, #16
    addc:	e3000c48 	movw	r0, #3144	; 0xc48
    ade0:	e3400003 	movt	r0, #3
    ade4:	ebfff763 	bl	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>
    ade8:	e2841014 	add	r1, r4, #20
    adec:	e3000c60 	movw	r0, #3168	; 0xc60
    adf0:	e3400003 	movt	r0, #3
    adf4:	e8bd4070 	pop	{r4, r5, r6, lr}
    adf8:	eafff75e 	b	8b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.15]>

0000adfc <CDWHCIDevice::~CDWHCIDevice()>:
    adfc:	e92d4030 	push	{r4, r5, lr}
    ae00:	e3a02001 	mov	r2, #1
    ae04:	e5903008 	ldr	r3, [r0, #8]
    ae08:	e59f10d0 	ldr	r1, [pc, #208]	; aee0 <CDWHCIDevice::~CDWHCIDevice()+0xe4>
    ae0c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    ae10:	e5801000 	str	r1, [r0]
    ae14:	e3530000 	cmp	r3, #0
    ae18:	e5c02081 	strb	r2, [r0, #129]	; 0x81
    ae1c:	0a000023 	beq	aeb0 <CDWHCIDevice::~CDWHCIDevice()+0xb4>
    ae20:	e1a04000 	mov	r4, r0
    ae24:	e3a000c8 	mov	r0, #200	; 0xc8
    ae28:	eb008135 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
    ae2c:	e5940004 	ldr	r0, [r4, #4]
    ae30:	e3500000 	cmp	r0, #0
    ae34:	0a000023 	beq	aec8 <CDWHCIDevice::~CDWHCIDevice()+0xcc>
    ae38:	e3a01009 	mov	r1, #9
    ae3c:	e3a05000 	mov	r5, #0
    ae40:	eb0088a5 	bl	2d0dc <CInterruptSystem::DisconnectIRQ(unsigned int)>
    ae44:	e1a00004 	mov	r0, r4
    ae48:	ebfffdec 	bl	a600 <CDWHCIDevice::Reset()>
    ae4c:	e28d000c 	add	r0, sp, #12
    ae50:	e3a01000 	mov	r1, #0
    ae54:	eb006867 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    ae58:	e3a03014 	mov	r3, #20
    ae5c:	e08d2003 	add	r2, sp, r3
    ae60:	e28d000c 	add	r0, sp, #12
    ae64:	e58d5000 	str	r5, [sp]
    ae68:	e3081001 	movw	r1, #32769	; 0x8001
    ae6c:	e3401002 	movt	r1, #2
    ae70:	e3a0c003 	mov	ip, #3
    ae74:	e58dc020 	str	ip, [sp, #32]
    ae78:	e3a0c002 	mov	ip, #2
    ae7c:	e58dc024 	str	ip, [sp, #36]	; 0x24
    ae80:	eb0068a5 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ae84:	e5845004 	str	r5, [r4, #4]
    ae88:	e5845008 	str	r5, [r4, #8]
    ae8c:	e28d000c 	add	r0, sp, #12
    ae90:	eb00685f 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
    ae94:	e2840074 	add	r0, r4, #116	; 0x74
    ae98:	eb00040e 	bl	bed8 <CDWHCIRootPort::~CDWHCIRootPort()>
    ae9c:	e1a00004 	mov	r0, r4
    aea0:	eb001a0a 	bl	116d0 <CUSBHostController::~CUSBHostController()>
    aea4:	e1a00004 	mov	r0, r4
    aea8:	e28dd02c 	add	sp, sp, #44	; 0x2c
    aeac:	e8bd8030 	pop	{r4, r5, pc}
    aeb0:	e3001794 	movw	r1, #1940	; 0x794
    aeb4:	e3401003 	movt	r1, #3
    aeb8:	e30007f4 	movw	r0, #2036	; 0x7f4
    aebc:	e3400003 	movt	r0, #3
    aec0:	e3a0205d 	mov	r2, #93	; 0x5d
    aec4:	eb00682a 	bl	24f74 <assertion_failed>
    aec8:	e3001794 	movw	r1, #1940	; 0x794
    aecc:	e3401003 	movt	r1, #3
    aed0:	e30007dc 	movw	r0, #2012	; 0x7dc
    aed4:	e3400003 	movt	r0, #3
    aed8:	e3a02060 	mov	r2, #96	; 0x60
    aedc:	eb006824 	bl	24f74 <assertion_failed>
    aee0:	00030780 	.word	0x00030780

0000aee4 <CDWHCIDevice::~CDWHCIDevice()>:
    aee4:	e92d4010 	push	{r4, lr}
    aee8:	e1a04000 	mov	r4, r0
    aeec:	ebffffc2 	bl	adfc <CDWHCIDevice::~CDWHCIDevice()>
    aef0:	e1a00004 	mov	r0, r4
    aef4:	e3a01084 	mov	r1, #132	; 0x84
    aef8:	eb00840a 	bl	2bf28 <operator delete(void*, unsigned int)>
    aefc:	e1a00004 	mov	r0, r4
    af00:	e8bd8010 	pop	{r4, pc}

0000af04 <CDWHCIDevice::ReScanDevices()>:
    af04:	e5d02080 	ldrb	r2, [r0, #128]	; 0x80
    af08:	e92d4010 	push	{r4, lr}
    af0c:	e1a04000 	mov	r4, r0
    af10:	e3520000 	cmp	r2, #0
    af14:	1a00000c 	bne	af4c <CDWHCIDevice::ReScanDevices()+0x48>
    af18:	ebfffd82 	bl	a528 <CDWHCIDevice::EnableRootPort()>
    af1c:	e3500000 	cmp	r0, #0
    af20:	0a00000c 	beq	af58 <CDWHCIDevice::ReScanDevices()+0x54>
    af24:	e3a03001 	mov	r3, #1
    af28:	e2840074 	add	r0, r4, #116	; 0x74
    af2c:	e5c43080 	strb	r3, [r4, #128]	; 0x80
    af30:	eb00043b 	bl	c024 <CDWHCIRootPort::Initialize()>
    af34:	e3500000 	cmp	r0, #0
    af38:	18bd8010 	popne	{r4, pc}
    af3c:	eb006db1 	bl	26608 <CLogger::Get()>
    af40:	e3003c78 	movw	r3, #3192	; 0xc78
    af44:	e3403003 	movt	r3, #3
    af48:	ea000005 	b	af64 <CDWHCIDevice::ReScanDevices()+0x60>
    af4c:	e2800074 	add	r0, r0, #116	; 0x74
    af50:	e8bd4010 	pop	{r4, lr}
    af54:	ea000413 	b	bfa8 <CDWHCIRootPort::ReScanDevices()>
    af58:	eb006daa 	bl	26608 <CLogger::Get()>
    af5c:	e3003c94 	movw	r3, #3220	; 0xc94
    af60:	e3403003 	movt	r3, #3
    af64:	e3001770 	movw	r1, #1904	; 0x770
    af68:	e3401003 	movt	r1, #3
    af6c:	e3a02002 	mov	r2, #2
    af70:	e8bd4010 	pop	{r4, lr}
    af74:	ea006ce4 	b	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>

0000af78 <CDWHCIDevice::Initialize()>:
    af78:	e92d4030 	push	{r4, r5, lr}
    af7c:	e3a01001 	mov	r1, #1
    af80:	e1a04000 	mov	r4, r0
    af84:	e24dd024 	sub	sp, sp, #36	; 0x24
    af88:	e3a00020 	mov	r0, #32
    af8c:	eb002280 	bl	13994 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    af90:	e3a01001 	mov	r1, #1
    af94:	e3a00010 	mov	r0, #16
    af98:	eb000703 	bl	cbac <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    af9c:	e3a01001 	mov	r1, #1
    afa0:	e3a00010 	mov	r0, #16
    afa4:	eb000142 	bl	b4b4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    afa8:	e3a01001 	mov	r1, #1
    afac:	e3a00010 	mov	r0, #16
    afb0:	eb0002fb 	bl	bba4 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    afb4:	e3a01001 	mov	r1, #1
    afb8:	e3a00010 	mov	r0, #16
    afbc:	eb0001dc 	bl	b734 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    afc0:	e5943004 	ldr	r3, [r4, #4]
    afc4:	e3530000 	cmp	r3, #0
    afc8:	0a00004b 	beq	b0fc <CDWHCIDevice::Initialize()+0x184>
    afcc:	e5943008 	ldr	r3, [r4, #8]
    afd0:	e3530000 	cmp	r3, #0
    afd4:	0a00004e 	beq	b114 <CDWHCIDevice::Initialize()+0x19c>
    afd8:	e3a01040 	mov	r1, #64	; 0x40
    afdc:	e3431f98 	movt	r1, #16280	; 0x3f98
    afe0:	e28d0008 	add	r0, sp, #8
    afe4:	eb00030a 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    afe8:	e28d0008 	add	r0, sp, #8
    afec:	eb000311 	bl	bc38 <CDWHCIRegister::Read()>
    aff0:	e302380a 	movw	r3, #10250	; 0x280a
    aff4:	e3443f54 	movt	r3, #20308	; 0x4f54
    aff8:	e1500003 	cmp	r0, r3
    affc:	0a000011 	beq	b048 <CDWHCIDevice::Initialize()+0xd0>
    b000:	e3a05000 	mov	r5, #0
    b004:	eb006d7f 	bl	26608 <CLogger::Get()>
    b008:	e1a04000 	mov	r4, r0
    b00c:	e28d0008 	add	r0, sp, #8
    b010:	eb00031d 	bl	bc8c <CDWHCIRegister::Get() const>
    b014:	e3003cb8 	movw	r3, #3256	; 0xcb8
    b018:	e3403003 	movt	r3, #3
    b01c:	e58d0000 	str	r0, [sp]
    b020:	e3001770 	movw	r1, #1904	; 0x770
    b024:	e3401003 	movt	r1, #3
    b028:	e1a00004 	mov	r0, r4
    b02c:	e3a02001 	mov	r2, #1
    b030:	eb006cb5 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b034:	e28d0008 	add	r0, sp, #8
    b038:	eb0002fd 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    b03c:	e1a00005 	mov	r0, r5
    b040:	e28dd024 	add	sp, sp, #36	; 0x24
    b044:	e8bd8030 	pop	{r4, r5, pc}
    b048:	e1a00004 	mov	r0, r4
    b04c:	ebfff753 	bl	8da0 <CDWHCIDevice::PowerOn()>
    b050:	e2505000 	subs	r5, r0, #0
    b054:	0a000020 	beq	b0dc <CDWHCIDevice::Initialize()+0x164>
    b058:	e3a01008 	mov	r1, #8
    b05c:	e3431f98 	movt	r1, #16280	; 0x3f98
    b060:	e28d0014 	add	r0, sp, #20
    b064:	eb0002ea 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b068:	e28d0014 	add	r0, sp, #20
    b06c:	eb0002f1 	bl	bc38 <CDWHCIRegister::Read()>
    b070:	e28d0014 	add	r0, sp, #20
    b074:	e3e01001 	mvn	r1, #1
    b078:	eb000322 	bl	bd08 <CDWHCIRegister::And(unsigned int)>
    b07c:	e28d0014 	add	r0, sp, #20
    b080:	eb0002f3 	bl	bc54 <CDWHCIRegister::Write()>
    b084:	e5940004 	ldr	r0, [r4, #4]
    b088:	e3500000 	cmp	r0, #0
    b08c:	0a000037 	beq	b170 <CDWHCIDevice::Initialize()+0x1f8>
    b090:	e1a03004 	mov	r3, r4
    b094:	e3a01009 	mov	r1, #9
    b098:	e3092f8c 	movw	r2, #40844	; 0x9f8c
    b09c:	e3402000 	movt	r2, #0
    b0a0:	eb0087ce 	bl	2cfe0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    b0a4:	e1a00004 	mov	r0, r4
    b0a8:	ebfffd7c 	bl	a6a0 <CDWHCIDevice::InitCore()>
    b0ac:	e2505000 	subs	r5, r0, #0
    b0b0:	1a00001d 	bne	b12c <CDWHCIDevice::Initialize()+0x1b4>
    b0b4:	eb006d53 	bl	26608 <CLogger::Get()>
    b0b8:	e3003ce0 	movw	r3, #3296	; 0xce0
    b0bc:	e3403003 	movt	r3, #3
    b0c0:	e3001770 	movw	r1, #1904	; 0x770
    b0c4:	e3401003 	movt	r1, #3
    b0c8:	e3a02001 	mov	r2, #1
    b0cc:	eb006c8e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b0d0:	e28d0014 	add	r0, sp, #20
    b0d4:	eb0002d6 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    b0d8:	eaffffd5 	b	b034 <CDWHCIDevice::Initialize()+0xbc>
    b0dc:	eb006d49 	bl	26608 <CLogger::Get()>
    b0e0:	e3003cd0 	movw	r3, #3280	; 0xcd0
    b0e4:	e3403003 	movt	r3, #3
    b0e8:	e3001770 	movw	r1, #1904	; 0x770
    b0ec:	e3401003 	movt	r1, #3
    b0f0:	e3a02001 	mov	r2, #1
    b0f4:	eb006c84 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b0f8:	eaffffcd 	b	b034 <CDWHCIDevice::Initialize()+0xbc>
    b0fc:	e3001794 	movw	r1, #1940	; 0x794
    b100:	e3401003 	movt	r1, #3
    b104:	e30007dc 	movw	r0, #2012	; 0x7dc
    b108:	e3400003 	movt	r0, #3
    b10c:	e3a0207a 	mov	r2, #122	; 0x7a
    b110:	eb006797 	bl	24f74 <assertion_failed>
    b114:	e3001794 	movw	r1, #1940	; 0x794
    b118:	e3401003 	movt	r1, #3
    b11c:	e30007f4 	movw	r0, #2036	; 0x7f4
    b120:	e3400003 	movt	r0, #3
    b124:	e3a0207b 	mov	r2, #123	; 0x7b
    b128:	eb006791 	bl	24f74 <assertion_failed>
    b12c:	e1a00004 	mov	r0, r4
    b130:	ebfff735 	bl	8e0c <CDWHCIDevice::EnableGlobalInterrupts()>
    b134:	e1a00004 	mov	r0, r4
    b138:	ebfffe2f 	bl	a9fc <CDWHCIDevice::InitHost()>
    b13c:	e2505000 	subs	r5, r0, #0
    b140:	1a000007 	bne	b164 <CDWHCIDevice::Initialize()+0x1ec>
    b144:	eb006d2f 	bl	26608 <CLogger::Get()>
    b148:	e3003cf8 	movw	r3, #3320	; 0xcf8
    b14c:	e3403003 	movt	r3, #3
    b150:	e3001770 	movw	r1, #1904	; 0x770
    b154:	e3401003 	movt	r1, #3
    b158:	e3a02001 	mov	r2, #1
    b15c:	eb006c6a 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b160:	eaffffda 	b	b0d0 <CDWHCIDevice::Initialize()+0x158>
    b164:	e1a00004 	mov	r0, r4
    b168:	ebffff65 	bl	af04 <CDWHCIDevice::ReScanDevices()>
    b16c:	eaffffd7 	b	b0d0 <CDWHCIDevice::Initialize()+0x158>
    b170:	e3001794 	movw	r1, #1940	; 0x794
    b174:	e3401003 	movt	r1, #3
    b178:	e30007dc 	movw	r0, #2012	; 0x7dc
    b17c:	e3400003 	movt	r0, #3
    b180:	e3a02090 	mov	r2, #144	; 0x90
    b184:	eb00677a 	bl	24f74 <assertion_failed>

0000b188 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    b188:	e12fff1e 	bx	lr

0000b18c <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    b18c:	e3a03000 	mov	r3, #0
    b190:	e5803008 	str	r3, [r0, #8]
    b194:	e12fff1e 	bx	lr

0000b198 <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    b198:	e12fff1e 	bx	lr

0000b19c <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    b19c:	e3a00000 	mov	r0, #0
    b1a0:	e12fff1e 	bx	lr

0000b1a4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    b1a4:	e5903008 	ldr	r3, [r0, #8]
    b1a8:	e92d4010 	push	{r4, lr}
    b1ac:	e2433001 	sub	r3, r3, #1
    b1b0:	e3530004 	cmp	r3, #4
    b1b4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b1b8:	ea000013 	b	b20c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x68>
    b1bc:	0000b1f0 	.word	0x0000b1f0
    b1c0:	0000b1dc 	.word	0x0000b1dc
    b1c4:	0000b1dc 	.word	0x0000b1dc
    b1c8:	0000b1d0 	.word	0x0000b1d0
    b1cc:	0000b1d0 	.word	0x0000b1d0
    b1d0:	e3a03000 	mov	r3, #0
    b1d4:	e1a00003 	mov	r0, r3
    b1d8:	e8bd8010 	pop	{r4, pc}
    b1dc:	e3000271 	movw	r0, #625	; 0x271
    b1e0:	eb00804e 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
    b1e4:	e3a03001 	mov	r3, #1
    b1e8:	e1a00003 	mov	r0, r3
    b1ec:	e8bd8010 	pop	{r4, pc}
    b1f0:	e3a03002 	mov	r3, #2
    b1f4:	e5803008 	str	r3, [r0, #8]
    b1f8:	e3a03001 	mov	r3, #1
    b1fc:	e3a02003 	mov	r2, #3
    b200:	e580200c 	str	r2, [r0, #12]
    b204:	e1a00003 	mov	r0, r3
    b208:	e8bd8010 	pop	{r4, pc}
    b20c:	e3001d34 	movw	r1, #3380	; 0xd34
    b210:	e3401003 	movt	r1, #3
    b214:	e3010398 	movw	r0, #5016	; 0x1398
    b218:	e3400003 	movt	r0, #3
    b21c:	e3a0205f 	mov	r2, #95	; 0x5f
    b220:	eb006753 	bl	24f74 <assertion_failed>

0000b224 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    b224:	e92d4010 	push	{r4, lr}
    b228:	e1a04000 	mov	r4, r0
    b22c:	e5903008 	ldr	r3, [r0, #8]
    b230:	e24dd010 	sub	sp, sp, #16
    b234:	e3530000 	cmp	r3, #0
    b238:	0a000013 	beq	b28c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    b23c:	e2433002 	sub	r3, r3, #2
    b240:	e3530001 	cmp	r3, #1
    b244:	8a000023 	bhi	b2d8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb4>
    b248:	e3110001 	tst	r1, #1
    b24c:	13a03004 	movne	r3, #4
    b250:	15803008 	strne	r3, [r0, #8]
    b254:	1a00000a 	bne	b284 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    b258:	e3110060 	tst	r1, #96	; 0x60
    b25c:	1a000014 	bne	b2b4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x90>
    b260:	e3110010 	tst	r1, #16
    b264:	0a000024 	beq	b2fc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xd8>
    b268:	e590300c 	ldr	r3, [r0, #12]
    b26c:	e3530000 	cmp	r3, #0
    b270:	e2433001 	sub	r3, r3, #1
    b274:	e580300c 	str	r3, [r0, #12]
    b278:	0a00001c 	beq	b2f0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xcc>
    b27c:	e3a03003 	mov	r3, #3
    b280:	e5843008 	str	r3, [r4, #8]
    b284:	e28dd010 	add	sp, sp, #16
    b288:	e8bd8010 	pop	{r4, pc}
    b28c:	e3110020 	tst	r1, #32
    b290:	13a03001 	movne	r3, #1
    b294:	15803008 	strne	r3, [r0, #8]
    b298:	1afffff9 	bne	b284 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    b29c:	e3001d34 	movw	r1, #3380	; 0xd34
    b2a0:	e3401003 	movt	r1, #3
    b2a4:	e3000d4c 	movw	r0, #3404	; 0xd4c
    b2a8:	e3400003 	movt	r0, #3
    b2ac:	e3a0206b 	mov	r2, #107	; 0x6b
    b2b0:	eb00672f 	bl	24f74 <assertion_failed>
    b2b4:	e590300c 	ldr	r3, [r0, #12]
    b2b8:	e3530000 	cmp	r3, #0
    b2bc:	e2433001 	sub	r3, r3, #1
    b2c0:	e580300c 	str	r3, [r0, #12]
    b2c4:	1affffec 	bne	b27c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x58>
    b2c8:	e3a03005 	mov	r3, #5
    b2cc:	e5843008 	str	r3, [r4, #8]
    b2d0:	e28dd010 	add	sp, sp, #16
    b2d4:	e8bd8010 	pop	{r4, pc}
    b2d8:	e3001d34 	movw	r1, #3380	; 0xd34
    b2dc:	e3401003 	movt	r1, #3
    b2e0:	e3010398 	movw	r0, #5016	; 0x1398
    b2e4:	e3400003 	movt	r0, #3
    b2e8:	e3a0209b 	mov	r2, #155	; 0x9b
    b2ec:	eb006720 	bl	24f74 <assertion_failed>
    b2f0:	e3000271 	movw	r0, #625	; 0x271
    b2f4:	eb008009 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
    b2f8:	eafffff2 	b	b2c8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xa4>
    b2fc:	e58d100c 	str	r1, [sp, #12]
    b300:	eb006cc0 	bl	26608 <CLogger::Get()>
    b304:	e59d100c 	ldr	r1, [sp, #12]
    b308:	e3a02001 	mov	r2, #1
    b30c:	e58d1000 	str	r1, [sp]
    b310:	e3003d70 	movw	r3, #3440	; 0xd70
    b314:	e3403003 	movt	r3, #3
    b318:	e3001d84 	movw	r1, #3460	; 0xd84
    b31c:	e3401003 	movt	r1, #3
    b320:	eb006bf9 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b324:	e3001d34 	movw	r1, #3380	; 0xd34
    b328:	e3401003 	movt	r1, #3
    b32c:	e3010398 	movw	r0, #5016	; 0x1398
    b330:	e3400003 	movt	r0, #3
    b334:	e3a02096 	mov	r2, #150	; 0x96
    b338:	eb00670d 	bl	24f74 <assertion_failed>

0000b33c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    b33c:	e92d4010 	push	{r4, lr}
    b340:	e1a04000 	mov	r4, r0
    b344:	e59f3038 	ldr	r3, [pc, #56]	; b384 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x48>
    b348:	e5803000 	str	r3, [r0]
    b34c:	eb008029 	bl	2b3f8 <CTimer::Get()>
    b350:	e3a03006 	mov	r3, #6
    b354:	e3500000 	cmp	r0, #0
    b358:	e5840004 	str	r0, [r4, #4]
    b35c:	e5843008 	str	r3, [r4, #8]
    b360:	0a000001 	beq	b36c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x30>
    b364:	e1a00004 	mov	r0, r4
    b368:	e8bd8010 	pop	{r4, pc}
    b36c:	e3001d34 	movw	r1, #3380	; 0xd34
    b370:	e3401003 	movt	r1, #3
    b374:	e30007f4 	movw	r0, #2036	; 0x7f4
    b378:	e3400003 	movt	r0, #3
    b37c:	e3a0202e 	mov	r2, #46	; 0x2e
    b380:	eb0066fb 	bl	24f74 <assertion_failed>
    b384:	00030d18 	.word	0x00030d18

0000b388 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    b388:	e92d4010 	push	{r4, lr}
    b38c:	e3500010 	cmp	r0, #16
    b390:	1a000006 	bne	b3b0 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x28>
    b394:	e30933e8 	movw	r3, #37864	; 0x93e8
    b398:	e3403003 	movt	r3, #3
    b39c:	e5930000 	ldr	r0, [r3]
    b3a0:	e3500000 	cmp	r0, #0
    b3a4:	0a000007 	beq	b3c8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x40>
    b3a8:	e8bd4010 	pop	{r4, lr}
    b3ac:	ea0067d0 	b	252f4 <CClassAllocator::Allocate()>
    b3b0:	e3001d34 	movw	r1, #3380	; 0xd34
    b3b4:	e3401003 	movt	r1, #3
    b3b8:	e3000d8c 	movw	r0, #3468	; 0xd8c
    b3bc:	e3400003 	movt	r0, #3
    b3c0:	e3a020bd 	mov	r2, #189	; 0xbd
    b3c4:	eb0066ea 	bl	24f74 <assertion_failed>
    b3c8:	e3001d34 	movw	r1, #3380	; 0xd34
    b3cc:	e3401003 	movt	r1, #3
    b3d0:	e3000dc0 	movw	r0, #3520	; 0xdc0
    b3d4:	e3400003 	movt	r0, #3
    b3d8:	e3a020bd 	mov	r2, #189	; 0xbd
    b3dc:	eb0066e4 	bl	24f74 <assertion_failed>

0000b3e0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    b3e0:	e92d4010 	push	{r4, lr}
    b3e4:	e3510010 	cmp	r1, #16
    b3e8:	1a000008 	bne	b410 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x30>
    b3ec:	e30933e8 	movw	r3, #37864	; 0x93e8
    b3f0:	e3403003 	movt	r3, #3
    b3f4:	e5933000 	ldr	r3, [r3]
    b3f8:	e3530000 	cmp	r3, #0
    b3fc:	0a000009 	beq	b428 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x48>
    b400:	e1a01000 	mov	r1, r0
    b404:	e1a00003 	mov	r0, r3
    b408:	e8bd4010 	pop	{r4, lr}
    b40c:	ea0067f3 	b	253e0 <CClassAllocator::Free(void*)>
    b410:	e3001d34 	movw	r1, #3380	; 0xd34
    b414:	e3401003 	movt	r1, #3
    b418:	e3000d8c 	movw	r0, #3468	; 0xd8c
    b41c:	e3400003 	movt	r0, #3
    b420:	e3a020bd 	mov	r2, #189	; 0xbd
    b424:	eb0066d2 	bl	24f74 <assertion_failed>
    b428:	e3001d34 	movw	r1, #3380	; 0xd34
    b42c:	e3401003 	movt	r1, #3
    b430:	e3000dc0 	movw	r0, #3520	; 0xdc0
    b434:	e3400003 	movt	r0, #3
    b438:	e3a020bd 	mov	r2, #189	; 0xbd
    b43c:	eb0066cc 	bl	24f74 <assertion_failed>

0000b440 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    b440:	e92d4010 	push	{r4, lr}
    b444:	e3a01010 	mov	r1, #16
    b448:	e1a04000 	mov	r4, r0
    b44c:	ebffffe3 	bl	b3e0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    b450:	e1a00004 	mov	r0, r4
    b454:	e8bd8010 	pop	{r4, pc}

0000b458 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    b458:	e92d4070 	push	{r4, r5, r6, lr}
    b45c:	e30943e8 	movw	r4, #37864	; 0x93e8
    b460:	e3404003 	movt	r4, #3
    b464:	e5943000 	ldr	r3, [r4]
    b468:	e3530000 	cmp	r3, #0
    b46c:	1a00000a 	bne	b49c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x44>
    b470:	e1a05000 	mov	r5, r0
    b474:	e3a0001c 	mov	r0, #28
    b478:	eb00829c 	bl	2bef0 <operator new(unsigned int)>
    b47c:	e1a02005 	mov	r2, r5
    b480:	e3003de8 	movw	r3, #3560	; 0xde8
    b484:	e3403003 	movt	r3, #3
    b488:	e3a01010 	mov	r1, #16
    b48c:	e1a06000 	mov	r6, r0
    b490:	eb00677e 	bl	25290 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    b494:	e5846000 	str	r6, [r4]
    b498:	e8bd8070 	pop	{r4, r5, r6, pc}
    b49c:	e3001d34 	movw	r1, #3380	; 0xd34
    b4a0:	e3401003 	movt	r1, #3
    b4a4:	e3000dd4 	movw	r0, #3540	; 0xdd4
    b4a8:	e3400003 	movt	r0, #3
    b4ac:	e3a020bd 	mov	r2, #189	; 0xbd
    b4b0:	eb0066af 	bl	24f74 <assertion_failed>

0000b4b4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    b4b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b4b8:	e30943e8 	movw	r4, #37864	; 0x93e8
    b4bc:	e3404003 	movt	r4, #3
    b4c0:	e1a05000 	mov	r5, r0
    b4c4:	e24dd00c 	sub	sp, sp, #12
    b4c8:	e5940000 	ldr	r0, [r4]
    b4cc:	e3500000 	cmp	r0, #0
    b4d0:	1a00000d 	bne	b50c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x58>
    b4d4:	e1a06001 	mov	r6, r1
    b4d8:	e3a0001c 	mov	r0, #28
    b4dc:	eb008283 	bl	2bef0 <operator new(unsigned int)>
    b4e0:	e1a03006 	mov	r3, r6
    b4e4:	e1a02005 	mov	r2, r5
    b4e8:	e3001de8 	movw	r1, #3560	; 0xde8
    b4ec:	e3401003 	movt	r1, #3
    b4f0:	e58d1000 	str	r1, [sp]
    b4f4:	e3a01010 	mov	r1, #16
    b4f8:	e1a07000 	mov	r7, r0
    b4fc:	eb00676f 	bl	252c0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    b500:	e5847000 	str	r7, [r4]
    b504:	e28dd00c 	add	sp, sp, #12
    b508:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b50c:	e3001d34 	movw	r1, #3380	; 0xd34
    b510:	e3401003 	movt	r1, #3
    b514:	e3000dd4 	movw	r0, #3540	; 0xdd4
    b518:	e3400003 	movt	r0, #3
    b51c:	e3a020bd 	mov	r2, #189	; 0xbd
    b520:	eb006693 	bl	24f74 <assertion_failed>

0000b524 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    b524:	e12fff1e 	bx	lr

0000b528 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    b528:	e1d000b6 	ldrh	r0, [r0, #6]
    b52c:	e2000001 	and	r0, r0, #1
    b530:	e12fff1e 	bx	lr

0000b534 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    b534:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b538:	e3401003 	movt	r1, #3
    b53c:	e3010398 	movw	r0, #5016	; 0x1398
    b540:	e3400003 	movt	r0, #3
    b544:	e92d4010 	push	{r4, lr}
    b548:	e3a02026 	mov	r2, #38	; 0x26
    b54c:	eb006688 	bl	24f74 <assertion_failed>

0000b550 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    b550:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b554:	e3401003 	movt	r1, #3
    b558:	e3010398 	movw	r0, #5016	; 0x1398
    b55c:	e3400003 	movt	r0, #3
    b560:	e92d4010 	push	{r4, lr}
    b564:	e3a0202b 	mov	r2, #43	; 0x2b
    b568:	eb006681 	bl	24f74 <assertion_failed>

0000b56c <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    b56c:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b570:	e3401003 	movt	r1, #3
    b574:	e3010398 	movw	r0, #5016	; 0x1398
    b578:	e3400003 	movt	r0, #3
    b57c:	e92d4010 	push	{r4, lr}
    b580:	e3a02031 	mov	r2, #49	; 0x31
    b584:	eb00667a 	bl	24f74 <assertion_failed>

0000b588 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
    b588:	e92d4010 	push	{r4, lr}
    b58c:	e1a04000 	mov	r4, r0
    b590:	e3001408 	movw	r1, #1032	; 0x408
    b594:	e3431f98 	movt	r1, #16280	; 0x3f98
    b598:	e24dd010 	sub	sp, sp, #16
    b59c:	e28d0004 	add	r0, sp, #4
    b5a0:	eb00019b 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b5a4:	e28d0004 	add	r0, sp, #4
    b5a8:	eb0001a2 	bl	bc38 <CDWHCIRegister::Read()>
    b5ac:	e5d43004 	ldrb	r3, [r4, #4]
    b5b0:	e2800001 	add	r0, r0, #1
    b5b4:	e3530000 	cmp	r3, #0
    b5b8:	e7ed0050 	ubfx	r0, r0, #0, #14
    b5bc:	e1c400b6 	strh	r0, [r4, #6]
    b5c0:	1a000005 	bne	b5dc <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
    b5c4:	e28d0004 	add	r0, sp, #4
    b5c8:	eb00019a 	bl	bc38 <CDWHCIRegister::Read()>
    b5cc:	e1d430b6 	ldrh	r3, [r4, #6]
    b5d0:	e7ed0050 	ubfx	r0, r0, #0, #14
    b5d4:	e1500003 	cmp	r0, r3
    b5d8:	1afffff9 	bne	b5c4 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
    b5dc:	e28d0004 	add	r0, sp, #4
    b5e0:	eb000193 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    b5e4:	e28dd010 	add	sp, sp, #16
    b5e8:	e8bd8010 	pop	{r4, pc}

0000b5ec <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    b5ec:	e59fc010 	ldr	ip, [pc, #16]	; b604 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    b5f0:	e3a02901 	mov	r2, #16384	; 0x4000
    b5f4:	e5c01004 	strb	r1, [r0, #4]
    b5f8:	e580c000 	str	ip, [r0]
    b5fc:	e1c020b6 	strh	r2, [r0, #6]
    b600:	e12fff1e 	bx	lr
    b604:	00030e10 	.word	0x00030e10

0000b608 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    b608:	e92d4010 	push	{r4, lr}
    b60c:	e3500008 	cmp	r0, #8
    b610:	1a000006 	bne	b630 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x28>
    b614:	e30933ec 	movw	r3, #37868	; 0x93ec
    b618:	e3403003 	movt	r3, #3
    b61c:	e5930000 	ldr	r0, [r3]
    b620:	e3500000 	cmp	r0, #0
    b624:	0a000007 	beq	b648 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x40>
    b628:	e8bd4010 	pop	{r4, lr}
    b62c:	ea006730 	b	252f4 <CClassAllocator::Allocate()>
    b630:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b634:	e3401003 	movt	r1, #3
    b638:	e3000e48 	movw	r0, #3656	; 0xe48
    b63c:	e3400003 	movt	r0, #3
    b640:	e3a0205a 	mov	r2, #90	; 0x5a
    b644:	eb00664a 	bl	24f74 <assertion_failed>
    b648:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b64c:	e3401003 	movt	r1, #3
    b650:	e3000dc0 	movw	r0, #3520	; 0xdc0
    b654:	e3400003 	movt	r0, #3
    b658:	e3a0205a 	mov	r2, #90	; 0x5a
    b65c:	eb006644 	bl	24f74 <assertion_failed>

0000b660 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    b660:	e92d4010 	push	{r4, lr}
    b664:	e3510008 	cmp	r1, #8
    b668:	1a000008 	bne	b690 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x30>
    b66c:	e30933ec 	movw	r3, #37868	; 0x93ec
    b670:	e3403003 	movt	r3, #3
    b674:	e5933000 	ldr	r3, [r3]
    b678:	e3530000 	cmp	r3, #0
    b67c:	0a000009 	beq	b6a8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x48>
    b680:	e1a01000 	mov	r1, r0
    b684:	e1a00003 	mov	r0, r3
    b688:	e8bd4010 	pop	{r4, lr}
    b68c:	ea006753 	b	253e0 <CClassAllocator::Free(void*)>
    b690:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b694:	e3401003 	movt	r1, #3
    b698:	e3000e48 	movw	r0, #3656	; 0xe48
    b69c:	e3400003 	movt	r0, #3
    b6a0:	e3a0205a 	mov	r2, #90	; 0x5a
    b6a4:	eb006632 	bl	24f74 <assertion_failed>
    b6a8:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b6ac:	e3401003 	movt	r1, #3
    b6b0:	e3000dc0 	movw	r0, #3520	; 0xdc0
    b6b4:	e3400003 	movt	r0, #3
    b6b8:	e3a0205a 	mov	r2, #90	; 0x5a
    b6bc:	eb00662c 	bl	24f74 <assertion_failed>

0000b6c0 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    b6c0:	e92d4010 	push	{r4, lr}
    b6c4:	e3a01008 	mov	r1, #8
    b6c8:	e1a04000 	mov	r4, r0
    b6cc:	ebffffe3 	bl	b660 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    b6d0:	e1a00004 	mov	r0, r4
    b6d4:	e8bd8010 	pop	{r4, pc}

0000b6d8 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    b6d8:	e92d4070 	push	{r4, r5, r6, lr}
    b6dc:	e30943ec 	movw	r4, #37868	; 0x93ec
    b6e0:	e3404003 	movt	r4, #3
    b6e4:	e5943000 	ldr	r3, [r4]
    b6e8:	e3530000 	cmp	r3, #0
    b6ec:	1a00000a 	bne	b71c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x44>
    b6f0:	e1a05000 	mov	r5, r0
    b6f4:	e3a0001c 	mov	r0, #28
    b6f8:	eb0081fc 	bl	2bef0 <operator new(unsigned int)>
    b6fc:	e1a02005 	mov	r2, r5
    b700:	e3003e78 	movw	r3, #3704	; 0xe78
    b704:	e3403003 	movt	r3, #3
    b708:	e3a01008 	mov	r1, #8
    b70c:	e1a06000 	mov	r6, r0
    b710:	eb0066de 	bl	25290 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    b714:	e5846000 	str	r6, [r4]
    b718:	e8bd8070 	pop	{r4, r5, r6, pc}
    b71c:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b720:	e3401003 	movt	r1, #3
    b724:	e3000dd4 	movw	r0, #3540	; 0xdd4
    b728:	e3400003 	movt	r0, #3
    b72c:	e3a0205a 	mov	r2, #90	; 0x5a
    b730:	eb00660f 	bl	24f74 <assertion_failed>

0000b734 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    b734:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b738:	e30943ec 	movw	r4, #37868	; 0x93ec
    b73c:	e3404003 	movt	r4, #3
    b740:	e1a05000 	mov	r5, r0
    b744:	e24dd00c 	sub	sp, sp, #12
    b748:	e5940000 	ldr	r0, [r4]
    b74c:	e3500000 	cmp	r0, #0
    b750:	1a00000d 	bne	b78c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x58>
    b754:	e1a06001 	mov	r6, r1
    b758:	e3a0001c 	mov	r0, #28
    b75c:	eb0081e3 	bl	2bef0 <operator new(unsigned int)>
    b760:	e1a03006 	mov	r3, r6
    b764:	e1a02005 	mov	r2, r5
    b768:	e3001e78 	movw	r1, #3704	; 0xe78
    b76c:	e3401003 	movt	r1, #3
    b770:	e58d1000 	str	r1, [sp]
    b774:	e3a01008 	mov	r1, #8
    b778:	e1a07000 	mov	r7, r0
    b77c:	eb0066cf 	bl	252c0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    b780:	e5847000 	str	r7, [r4]
    b784:	e28dd00c 	add	sp, sp, #12
    b788:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b78c:	e3001e2c 	movw	r1, #3628	; 0xe2c
    b790:	e3401003 	movt	r1, #3
    b794:	e3000dd4 	movw	r0, #3540	; 0xdd4
    b798:	e3400003 	movt	r0, #3
    b79c:	e3a0205a 	mov	r2, #90	; 0x5a
    b7a0:	eb0065f3 	bl	24f74 <assertion_failed>

0000b7a4 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    b7a4:	e12fff1e 	bx	lr

0000b7a8 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    b7a8:	e3a02901 	mov	r2, #16384	; 0x4000
    b7ac:	e3a03000 	mov	r3, #0
    b7b0:	e1c021b0 	strh	r2, [r0, #16]
    b7b4:	e5803008 	str	r3, [r0, #8]
    b7b8:	e12fff1e 	bx	lr

0000b7bc <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    b7bc:	e1d001b0 	ldrh	r0, [r0, #16]
    b7c0:	e2000001 	and	r0, r0, #1
    b7c4:	e12fff1e 	bx	lr

0000b7c8 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    b7c8:	e92d4010 	push	{r4, lr}
    b7cc:	e1a04000 	mov	r4, r0
    b7d0:	e3001408 	movw	r1, #1032	; 0x408
    b7d4:	e3431f98 	movt	r1, #16280	; 0x3f98
    b7d8:	e24dd010 	sub	sp, sp, #16
    b7dc:	e28d0004 	add	r0, sp, #4
    b7e0:	eb00010b 	bl	bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b7e4:	e1d431b0 	ldrh	r3, [r4, #16]
    b7e8:	e3530901 	cmp	r3, #16384	; 0x4000
    b7ec:	0a000009 	beq	b818 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x50>
    b7f0:	e28d0004 	add	r0, sp, #4
    b7f4:	eb00010f 	bl	bc38 <CDWHCIRegister::Read()>
    b7f8:	e1d431b0 	ldrh	r3, [r4, #16]
    b7fc:	e2000007 	and	r0, r0, #7
    b800:	e1500003 	cmp	r0, r3
    b804:	1afffff9 	bne	b7f0 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x28>
    b808:	e28d0004 	add	r0, sp, #4
    b80c:	eb000108 	bl	bc34 <CDWHCIRegister::~CDWHCIRegister()>
    b810:	e28dd010 	add	sp, sp, #16
    b814:	e8bd8010 	pop	{r4, pc}
    b818:	e28d0004 	add	r0, sp, #4
    b81c:	eb000105 	bl	bc38 <CDWHCIRegister::Read()>
    b820:	e2800001 	add	r0, r0, #1
    b824:	e2000007 	and	r0, r0, #7
    b828:	e3500006 	cmp	r0, #6
    b82c:	11c401b0 	strhne	r0, [r4, #16]
    b830:	03a03007 	moveq	r3, #7
    b834:	01c431b0 	strheq	r3, [r4, #16]
    b838:	eaffffec 	b	b7f0 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x28>

0000b83c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    b83c:	e5903008 	ldr	r3, [r0, #8]
    b840:	e92d4010 	push	{r4, lr}
    b844:	e2433001 	sub	r3, r3, #1
    b848:	e3530004 	cmp	r3, #4
    b84c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b850:	ea000023 	b	b8e4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa8>
    b854:	0000b8a8 	.word	0x0000b8a8
    b858:	0000b8e4 	.word	0x0000b8e4
    b85c:	0000b874 	.word	0x0000b874
    b860:	0000b868 	.word	0x0000b868
    b864:	0000b868 	.word	0x0000b868
    b868:	e3a02000 	mov	r2, #0
    b86c:	e1a00002 	mov	r0, r2
    b870:	e8bd8010 	pop	{r4, pc}
    b874:	e1d031b0 	ldrh	r3, [r0, #16]
    b878:	e3530901 	cmp	r3, #16384	; 0x4000
    b87c:	12833001 	addne	r3, r3, #1
    b880:	13a02001 	movne	r2, #1
    b884:	12033007 	andne	r3, r3, #7
    b888:	11c031b0 	strhne	r3, [r0, #16]
    b88c:	1afffff6 	bne	b86c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x30>
    b890:	e3001eb8 	movw	r1, #3768	; 0xeb8
    b894:	e3401003 	movt	r1, #3
    b898:	e3000ed0 	movw	r0, #3792	; 0xed0
    b89c:	e3400003 	movt	r0, #3
    b8a0:	e3a02062 	mov	r2, #98	; 0x62
    b8a4:	eb0065b2 	bl	24f74 <assertion_failed>
    b8a8:	e1d031b0 	ldrh	r3, [r0, #16]
    b8ac:	e3a02002 	mov	r2, #2
    b8b0:	e5802008 	str	r2, [r0, #8]
    b8b4:	e3530901 	cmp	r3, #16384	; 0x4000
    b8b8:	0a00000f 	beq	b8fc <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
    b8bc:	e3530005 	cmp	r3, #5
    b8c0:	e3a02001 	mov	r2, #1
    b8c4:	e2833002 	add	r3, r3, #2
    b8c8:	13a01003 	movne	r1, #3
    b8cc:	e2033007 	and	r3, r3, #7
    b8d0:	03a01002 	moveq	r1, #2
    b8d4:	e1c031b0 	strh	r3, [r0, #16]
    b8d8:	e580100c 	str	r1, [r0, #12]
    b8dc:	e1a00002 	mov	r0, r2
    b8e0:	e8bd8010 	pop	{r4, pc}
    b8e4:	e3001eb8 	movw	r1, #3768	; 0xeb8
    b8e8:	e3401003 	movt	r1, #3
    b8ec:	e3010398 	movw	r0, #5016	; 0x1398
    b8f0:	e3400003 	movt	r0, #3
    b8f4:	e3a0206e 	mov	r2, #110	; 0x6e
    b8f8:	eb00659d 	bl	24f74 <assertion_failed>
    b8fc:	e3001eb8 	movw	r1, #3768	; 0xeb8
    b900:	e3401003 	movt	r1, #3
    b904:	e3000ed0 	movw	r0, #3792	; 0xed0
    b908:	e3400003 	movt	r0, #3
    b90c:	e3a02054 	mov	r2, #84	; 0x54
    b910:	eb006597 	bl	24f74 <assertion_failed>

0000b914 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    b914:	e92d4010 	push	{r4, lr}
    b918:	e1a04000 	mov	r4, r0
    b91c:	e5903008 	ldr	r3, [r0, #8]
    b920:	e24dd010 	sub	sp, sp, #16
    b924:	e3530000 	cmp	r3, #0
    b928:	0a000010 	beq	b970 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x5c>
    b92c:	e2433002 	sub	r3, r3, #2
    b930:	e3530001 	cmp	r3, #1
    b934:	8a000024 	bhi	b9cc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xb8>
    b938:	e3110001 	tst	r1, #1
    b93c:	13a03004 	movne	r3, #4
    b940:	15803008 	strne	r3, [r0, #8]
    b944:	1a000007 	bne	b968 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    b948:	e3110060 	tst	r1, #96	; 0x60
    b94c:	1a000011 	bne	b998 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x84>
    b950:	e3110010 	tst	r1, #16
    b954:	0a000022 	beq	b9e4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xd0>
    b958:	e3000271 	movw	r0, #625	; 0x271
    b95c:	eb007e6f 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
    b960:	e3a03005 	mov	r3, #5
    b964:	e5843008 	str	r3, [r4, #8]
    b968:	e28dd010 	add	sp, sp, #16
    b96c:	e8bd8010 	pop	{r4, pc}
    b970:	e3110020 	tst	r1, #32
    b974:	13a03001 	movne	r3, #1
    b978:	15803008 	strne	r3, [r0, #8]
    b97c:	1afffff9 	bne	b968 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    b980:	e3001eb8 	movw	r1, #3768	; 0xeb8
    b984:	e3401003 	movt	r1, #3
    b988:	e3000d4c 	movw	r0, #3404	; 0xd4c
    b98c:	e3400003 	movt	r0, #3
    b990:	e3a0207a 	mov	r2, #122	; 0x7a
    b994:	eb006576 	bl	24f74 <assertion_failed>
    b998:	e590300c 	ldr	r3, [r0, #12]
    b99c:	e3530000 	cmp	r3, #0
    b9a0:	e2433001 	sub	r3, r3, #1
    b9a4:	e580300c 	str	r3, [r0, #12]
    b9a8:	13a03003 	movne	r3, #3
    b9ac:	15803008 	strne	r3, [r0, #8]
    b9b0:	1affffec 	bne	b968 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    b9b4:	e3a03005 	mov	r3, #5
    b9b8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    b9bc:	e5843008 	str	r3, [r4, #8]
    b9c0:	e28dd010 	add	sp, sp, #16
    b9c4:	e8bd4010 	pop	{r4, lr}
    b9c8:	ea007e54 	b	2b320 <CTimer::SimpleusDelay(unsigned int)>
    b9cc:	e3001eb8 	movw	r1, #3768	; 0xeb8
    b9d0:	e3401003 	movt	r1, #3
    b9d4:	e3010398 	movw	r0, #5016	; 0x1398
    b9d8:	e3400003 	movt	r0, #3
    b9dc:	e3a020a6 	mov	r2, #166	; 0xa6
    b9e0:	eb006563 	bl	24f74 <assertion_failed>
    b9e4:	e58d100c 	str	r1, [sp, #12]
    b9e8:	eb006b06 	bl	26608 <CLogger::Get()>
    b9ec:	e59d100c 	ldr	r1, [sp, #12]
    b9f0:	e3a02001 	mov	r2, #1
    b9f4:	e58d1000 	str	r1, [sp]
    b9f8:	e3003d70 	movw	r3, #3440	; 0xd70
    b9fc:	e3403003 	movt	r3, #3
    ba00:	e3001d84 	movw	r1, #3460	; 0xd84
    ba04:	e3401003 	movt	r1, #3
    ba08:	eb006a3f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ba0c:	e3001eb8 	movw	r1, #3768	; 0xeb8
    ba10:	e3401003 	movt	r1, #3
    ba14:	e3010398 	movw	r0, #5016	; 0x1398
    ba18:	e3400003 	movt	r0, #3
    ba1c:	e3a020a1 	mov	r2, #161	; 0xa1
    ba20:	eb006553 	bl	24f74 <assertion_failed>

0000ba24 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    ba24:	e92d4010 	push	{r4, lr}
    ba28:	e1a04000 	mov	r4, r0
    ba2c:	e59f3040 	ldr	r3, [pc, #64]	; ba74 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x50>
    ba30:	e5803000 	str	r3, [r0]
    ba34:	eb007e6f 	bl	2b3f8 <CTimer::Get()>
    ba38:	e3a02006 	mov	r2, #6
    ba3c:	e3a03901 	mov	r3, #16384	; 0x4000
    ba40:	e3500000 	cmp	r0, #0
    ba44:	e5840004 	str	r0, [r4, #4]
    ba48:	e5842008 	str	r2, [r4, #8]
    ba4c:	e1c431b0 	strh	r3, [r4, #16]
    ba50:	0a000001 	beq	ba5c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x38>
    ba54:	e1a00004 	mov	r0, r4
    ba58:	e8bd8010 	pop	{r4, pc}
    ba5c:	e3001eb8 	movw	r1, #3768	; 0xeb8
    ba60:	e3401003 	movt	r1, #3
    ba64:	e30007f4 	movw	r0, #2036	; 0x7f4
    ba68:	e3400003 	movt	r0, #3
    ba6c:	e3a02034 	mov	r2, #52	; 0x34
    ba70:	eb00653f 	bl	24f74 <assertion_failed>
    ba74:	00030e9c 	.word	0x00030e9c

0000ba78 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    ba78:	e92d4010 	push	{r4, lr}
    ba7c:	e3500014 	cmp	r0, #20
    ba80:	1a000006 	bne	baa0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x28>
    ba84:	e30933f0 	movw	r3, #37872	; 0x93f0
    ba88:	e3403003 	movt	r3, #3
    ba8c:	e5930000 	ldr	r0, [r3]
    ba90:	e3500000 	cmp	r0, #0
    ba94:	0a000007 	beq	bab8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x40>
    ba98:	e8bd4010 	pop	{r4, lr}
    ba9c:	ea006614 	b	252f4 <CClassAllocator::Allocate()>
    baa0:	e3001eb8 	movw	r1, #3768	; 0xeb8
    baa4:	e3401003 	movt	r1, #3
    baa8:	e3000ef0 	movw	r0, #3824	; 0xef0
    baac:	e3400003 	movt	r0, #3
    bab0:	e3a020e2 	mov	r2, #226	; 0xe2
    bab4:	eb00652e 	bl	24f74 <assertion_failed>
    bab8:	e3001eb8 	movw	r1, #3768	; 0xeb8
    babc:	e3401003 	movt	r1, #3
    bac0:	e3000dc0 	movw	r0, #3520	; 0xdc0
    bac4:	e3400003 	movt	r0, #3
    bac8:	e3a020e2 	mov	r2, #226	; 0xe2
    bacc:	eb006528 	bl	24f74 <assertion_failed>

0000bad0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    bad0:	e92d4010 	push	{r4, lr}
    bad4:	e3510014 	cmp	r1, #20
    bad8:	1a000008 	bne	bb00 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x30>
    badc:	e30933f0 	movw	r3, #37872	; 0x93f0
    bae0:	e3403003 	movt	r3, #3
    bae4:	e5933000 	ldr	r3, [r3]
    bae8:	e3530000 	cmp	r3, #0
    baec:	0a000009 	beq	bb18 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x48>
    baf0:	e1a01000 	mov	r1, r0
    baf4:	e1a00003 	mov	r0, r3
    baf8:	e8bd4010 	pop	{r4, lr}
    bafc:	ea006637 	b	253e0 <CClassAllocator::Free(void*)>
    bb00:	e3001eb8 	movw	r1, #3768	; 0xeb8
    bb04:	e3401003 	movt	r1, #3
    bb08:	e3000ef0 	movw	r0, #3824	; 0xef0
    bb0c:	e3400003 	movt	r0, #3
    bb10:	e3a020e2 	mov	r2, #226	; 0xe2
    bb14:	eb006516 	bl	24f74 <assertion_failed>
    bb18:	e3001eb8 	movw	r1, #3768	; 0xeb8
    bb1c:	e3401003 	movt	r1, #3
    bb20:	e3000dc0 	movw	r0, #3520	; 0xdc0
    bb24:	e3400003 	movt	r0, #3
    bb28:	e3a020e2 	mov	r2, #226	; 0xe2
    bb2c:	eb006510 	bl	24f74 <assertion_failed>

0000bb30 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    bb30:	e92d4010 	push	{r4, lr}
    bb34:	e3a01014 	mov	r1, #20
    bb38:	e1a04000 	mov	r4, r0
    bb3c:	ebffffe3 	bl	bad0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    bb40:	e1a00004 	mov	r0, r4
    bb44:	e8bd8010 	pop	{r4, pc}

0000bb48 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    bb48:	e92d4070 	push	{r4, r5, r6, lr}
    bb4c:	e30943f0 	movw	r4, #37872	; 0x93f0
    bb50:	e3404003 	movt	r4, #3
    bb54:	e5943000 	ldr	r3, [r4]
    bb58:	e3530000 	cmp	r3, #0
    bb5c:	1a00000a 	bne	bb8c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x44>
    bb60:	e1a05000 	mov	r5, r0
    bb64:	e3a0001c 	mov	r0, #28
    bb68:	eb0080e0 	bl	2bef0 <operator new(unsigned int)>
    bb6c:	e1a02005 	mov	r2, r5
    bb70:	e3003f20 	movw	r3, #3872	; 0xf20
    bb74:	e3403003 	movt	r3, #3
    bb78:	e3a01014 	mov	r1, #20
    bb7c:	e1a06000 	mov	r6, r0
    bb80:	eb0065c2 	bl	25290 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    bb84:	e5846000 	str	r6, [r4]
    bb88:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb8c:	e3001eb8 	movw	r1, #3768	; 0xeb8
    bb90:	e3401003 	movt	r1, #3
    bb94:	e3000dd4 	movw	r0, #3540	; 0xdd4
    bb98:	e3400003 	movt	r0, #3
    bb9c:	e3a020e2 	mov	r2, #226	; 0xe2
    bba0:	eb0064f3 	bl	24f74 <assertion_failed>

0000bba4 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    bba4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    bba8:	e30943f0 	movw	r4, #37872	; 0x93f0
    bbac:	e3404003 	movt	r4, #3
    bbb0:	e1a05000 	mov	r5, r0
    bbb4:	e24dd00c 	sub	sp, sp, #12
    bbb8:	e5940000 	ldr	r0, [r4]
    bbbc:	e3500000 	cmp	r0, #0
    bbc0:	1a00000d 	bne	bbfc <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x58>
    bbc4:	e1a06001 	mov	r6, r1
    bbc8:	e3a0001c 	mov	r0, #28
    bbcc:	eb0080c7 	bl	2bef0 <operator new(unsigned int)>
    bbd0:	e1a03006 	mov	r3, r6
    bbd4:	e1a02005 	mov	r2, r5
    bbd8:	e3001f20 	movw	r1, #3872	; 0xf20
    bbdc:	e3401003 	movt	r1, #3
    bbe0:	e58d1000 	str	r1, [sp]
    bbe4:	e3a01014 	mov	r1, #20
    bbe8:	e1a07000 	mov	r7, r0
    bbec:	eb0065b3 	bl	252c0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    bbf0:	e5847000 	str	r7, [r4]
    bbf4:	e28dd00c 	add	sp, sp, #12
    bbf8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    bbfc:	e3001eb8 	movw	r1, #3768	; 0xeb8
    bc00:	e3401003 	movt	r1, #3
    bc04:	e3000dd4 	movw	r0, #3540	; 0xdd4
    bc08:	e3400003 	movt	r0, #3
    bc0c:	e3a020e2 	mov	r2, #226	; 0xe2
    bc10:	eb0064d7 	bl	24f74 <assertion_failed>

0000bc14 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    bc14:	e3a02000 	mov	r2, #0
    bc18:	e5801004 	str	r1, [r0, #4]
    bc1c:	e5c02000 	strb	r2, [r0]
    bc20:	e12fff1e 	bx	lr

0000bc24 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    bc24:	e3a0c001 	mov	ip, #1
    bc28:	e9800006 	stmib	r0, {r1, r2}
    bc2c:	e5c0c000 	strb	ip, [r0]
    bc30:	e12fff1e 	bx	lr

0000bc34 <CDWHCIRegister::~CDWHCIRegister()>:
    bc34:	e12fff1e 	bx	lr

0000bc38 <CDWHCIRegister::Read()>:
    bc38:	e5901004 	ldr	r1, [r0, #4]
    bc3c:	e1a03000 	mov	r3, r0
    bc40:	e3a02001 	mov	r2, #1
    bc44:	e5910000 	ldr	r0, [r1]
    bc48:	e5830008 	str	r0, [r3, #8]
    bc4c:	e5c32000 	strb	r2, [r3]
    bc50:	e12fff1e 	bx	lr

0000bc54 <CDWHCIRegister::Write()>:
    bc54:	e5d03000 	ldrb	r3, [r0]
    bc58:	e3530000 	cmp	r3, #0
    bc5c:	0a000003 	beq	bc70 <CDWHCIRegister::Write()+0x1c>
    bc60:	e5903004 	ldr	r3, [r0, #4]
    bc64:	e5902008 	ldr	r2, [r0, #8]
    bc68:	e5832000 	str	r2, [r3]
    bc6c:	e12fff1e 	bx	lr
    bc70:	e3001f40 	movw	r1, #3904	; 0xf40
    bc74:	e3401003 	movt	r1, #3
    bc78:	e3000f54 	movw	r0, #3924	; 0xf54
    bc7c:	e3400003 	movt	r0, #3
    bc80:	e92d4010 	push	{r4, lr}
    bc84:	e3a02035 	mov	r2, #53	; 0x35
    bc88:	eb0064b9 	bl	24f74 <assertion_failed>

0000bc8c <CDWHCIRegister::Get() const>:
    bc8c:	e5d03000 	ldrb	r3, [r0]
    bc90:	e3530000 	cmp	r3, #0
    bc94:	0a000001 	beq	bca0 <CDWHCIRegister::Get() const+0x14>
    bc98:	e5900008 	ldr	r0, [r0, #8]
    bc9c:	e12fff1e 	bx	lr
    bca0:	e3001f40 	movw	r1, #3904	; 0xf40
    bca4:	e3401003 	movt	r1, #3
    bca8:	e3000f54 	movw	r0, #3924	; 0xf54
    bcac:	e3400003 	movt	r0, #3
    bcb0:	e92d4010 	push	{r4, lr}
    bcb4:	e3a0203b 	mov	r2, #59	; 0x3b
    bcb8:	eb0064ad 	bl	24f74 <assertion_failed>

0000bcbc <CDWHCIRegister::Set(unsigned int)>:
    bcbc:	e3a03001 	mov	r3, #1
    bcc0:	e5801008 	str	r1, [r0, #8]
    bcc4:	e5c03000 	strb	r3, [r0]
    bcc8:	e12fff1e 	bx	lr

0000bccc <CDWHCIRegister::IsSet(unsigned int) const>:
    bccc:	e5d03000 	ldrb	r3, [r0]
    bcd0:	e3530000 	cmp	r3, #0
    bcd4:	0a000004 	beq	bcec <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    bcd8:	e5903008 	ldr	r3, [r0, #8]
    bcdc:	e1110003 	tst	r1, r3
    bce0:	13a00001 	movne	r0, #1
    bce4:	03a00000 	moveq	r0, #0
    bce8:	e12fff1e 	bx	lr
    bcec:	e3001f40 	movw	r1, #3904	; 0xf40
    bcf0:	e3401003 	movt	r1, #3
    bcf4:	e3000f54 	movw	r0, #3924	; 0xf54
    bcf8:	e3400003 	movt	r0, #3
    bcfc:	e92d4010 	push	{r4, lr}
    bd00:	e3a02047 	mov	r2, #71	; 0x47
    bd04:	eb00649a 	bl	24f74 <assertion_failed>

0000bd08 <CDWHCIRegister::And(unsigned int)>:
    bd08:	e5d03000 	ldrb	r3, [r0]
    bd0c:	e3530000 	cmp	r3, #0
    bd10:	0a000003 	beq	bd24 <CDWHCIRegister::And(unsigned int)+0x1c>
    bd14:	e5903008 	ldr	r3, [r0, #8]
    bd18:	e0011003 	and	r1, r1, r3
    bd1c:	e5801008 	str	r1, [r0, #8]
    bd20:	e12fff1e 	bx	lr
    bd24:	e3001f40 	movw	r1, #3904	; 0xf40
    bd28:	e3401003 	movt	r1, #3
    bd2c:	e3000f54 	movw	r0, #3924	; 0xf54
    bd30:	e3400003 	movt	r0, #3
    bd34:	e92d4010 	push	{r4, lr}
    bd38:	e3a0204d 	mov	r2, #77	; 0x4d
    bd3c:	eb00648c 	bl	24f74 <assertion_failed>

0000bd40 <CDWHCIRegister::Or(unsigned int)>:
    bd40:	e5d03000 	ldrb	r3, [r0]
    bd44:	e3530000 	cmp	r3, #0
    bd48:	0a000003 	beq	bd5c <CDWHCIRegister::Or(unsigned int)+0x1c>
    bd4c:	e5903008 	ldr	r3, [r0, #8]
    bd50:	e1831001 	orr	r1, r3, r1
    bd54:	e5801008 	str	r1, [r0, #8]
    bd58:	e12fff1e 	bx	lr
    bd5c:	e3001f40 	movw	r1, #3904	; 0xf40
    bd60:	e3401003 	movt	r1, #3
    bd64:	e3000f54 	movw	r0, #3924	; 0xf54
    bd68:	e3400003 	movt	r0, #3
    bd6c:	e92d4010 	push	{r4, lr}
    bd70:	e3a02053 	mov	r2, #83	; 0x53
    bd74:	eb00647e 	bl	24f74 <assertion_failed>

0000bd78 <CDWHCIRegister::ClearBit(unsigned int)>:
    bd78:	e5d03000 	ldrb	r3, [r0]
    bd7c:	e92d4010 	push	{r4, lr}
    bd80:	e3530000 	cmp	r3, #0
    bd84:	0a000006 	beq	bda4 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    bd88:	e351001f 	cmp	r1, #31
    bd8c:	8a00000a 	bhi	bdbc <CDWHCIRegister::ClearBit(unsigned int)+0x44>
    bd90:	e5903008 	ldr	r3, [r0, #8]
    bd94:	e3a02001 	mov	r2, #1
    bd98:	e1c31112 	bic	r1, r3, r2, lsl r1
    bd9c:	e5801008 	str	r1, [r0, #8]
    bda0:	e8bd8010 	pop	{r4, pc}
    bda4:	e3001f40 	movw	r1, #3904	; 0xf40
    bda8:	e3401003 	movt	r1, #3
    bdac:	e3000f54 	movw	r0, #3924	; 0xf54
    bdb0:	e3400003 	movt	r0, #3
    bdb4:	e3a02059 	mov	r2, #89	; 0x59
    bdb8:	eb00646d 	bl	24f74 <assertion_failed>
    bdbc:	e3001f40 	movw	r1, #3904	; 0xf40
    bdc0:	e3401003 	movt	r1, #3
    bdc4:	e3000f60 	movw	r0, #3936	; 0xf60
    bdc8:	e3400003 	movt	r0, #3
    bdcc:	e3a0205a 	mov	r2, #90	; 0x5a
    bdd0:	eb006467 	bl	24f74 <assertion_failed>

0000bdd4 <CDWHCIRegister::SetBit(unsigned int)>:
    bdd4:	e5d03000 	ldrb	r3, [r0]
    bdd8:	e92d4010 	push	{r4, lr}
    bddc:	e3530000 	cmp	r3, #0
    bde0:	0a000006 	beq	be00 <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    bde4:	e351001f 	cmp	r1, #31
    bde8:	8a00000a 	bhi	be18 <CDWHCIRegister::SetBit(unsigned int)+0x44>
    bdec:	e5903008 	ldr	r3, [r0, #8]
    bdf0:	e3a02001 	mov	r2, #1
    bdf4:	e1831112 	orr	r1, r3, r2, lsl r1
    bdf8:	e5801008 	str	r1, [r0, #8]
    bdfc:	e8bd8010 	pop	{r4, pc}
    be00:	e3001f40 	movw	r1, #3904	; 0xf40
    be04:	e3401003 	movt	r1, #3
    be08:	e3000f54 	movw	r0, #3924	; 0xf54
    be0c:	e3400003 	movt	r0, #3
    be10:	e3a02060 	mov	r2, #96	; 0x60
    be14:	eb006456 	bl	24f74 <assertion_failed>
    be18:	e3001f40 	movw	r1, #3904	; 0xf40
    be1c:	e3401003 	movt	r1, #3
    be20:	e3000f60 	movw	r0, #3936	; 0xf60
    be24:	e3400003 	movt	r0, #3
    be28:	e3a02061 	mov	r2, #97	; 0x61
    be2c:	eb006450 	bl	24f74 <assertion_failed>

0000be30 <CDWHCIRegister::ClearAll()>:
    be30:	e3a02000 	mov	r2, #0
    be34:	e3a03001 	mov	r3, #1
    be38:	e5802008 	str	r2, [r0, #8]
    be3c:	e5c03000 	strb	r3, [r0]
    be40:	e12fff1e 	bx	lr

0000be44 <CDWHCIRegister::SetAll()>:
    be44:	e3e02000 	mvn	r2, #0
    be48:	e3a03001 	mov	r3, #1
    be4c:	e5802008 	str	r2, [r0, #8]
    be50:	e5c03000 	strb	r3, [r0]
    be54:	e12fff1e 	bx	lr

0000be58 <CDWHCIRegister::Dump() const>:
    be58:	e92d4010 	push	{r4, lr}
    be5c:	e1a04000 	mov	r4, r0
    be60:	e5d03000 	ldrb	r3, [r0]
    be64:	e24dd008 	sub	sp, sp, #8
    be68:	e3530000 	cmp	r3, #0
    be6c:	1a00000b 	bne	bea0 <CDWHCIRegister::Dump() const+0x48>
    be70:	eb0069e4 	bl	26608 <CLogger::Get()>
    be74:	e594c004 	ldr	ip, [r4, #4]
    be78:	e3a02004 	mov	r2, #4
    be7c:	e3003fa0 	movw	r3, #4000	; 0xfa0
    be80:	e3403003 	movt	r3, #3
    be84:	e7ebc05c 	ubfx	ip, ip, #0, #12
    be88:	e3001f98 	movw	r1, #3992	; 0xf98
    be8c:	e3401003 	movt	r1, #3
    be90:	e58dc000 	str	ip, [sp]
    be94:	eb00691c 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    be98:	e28dd008 	add	sp, sp, #8
    be9c:	e8bd8010 	pop	{r4, pc}
    bea0:	eb0069d8 	bl	26608 <CLogger::Get()>
    bea4:	e5942004 	ldr	r2, [r4, #4]
    bea8:	e5941008 	ldr	r1, [r4, #8]
    beac:	e3003f7c 	movw	r3, #3964	; 0xf7c
    beb0:	e3403003 	movt	r3, #3
    beb4:	e58d1004 	str	r1, [sp, #4]
    beb8:	e7eb2052 	ubfx	r2, r2, #0, #12
    bebc:	e3001f98 	movw	r1, #3992	; 0xf98
    bec0:	e3401003 	movt	r1, #3
    bec4:	e58d2000 	str	r2, [sp]
    bec8:	e3a02004 	mov	r2, #4
    becc:	eb00690e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bed0:	e28dd008 	add	sp, sp, #8
    bed4:	e8bd8010 	pop	{r4, pc}

0000bed8 <CDWHCIRootPort::~CDWHCIRootPort()>:
    bed8:	e92d4010 	push	{r4, lr}
    bedc:	e1a04000 	mov	r4, r0
    bee0:	e5900008 	ldr	r0, [r0, #8]
    bee4:	e59f301c 	ldr	r3, [pc, #28]	; bf08 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    bee8:	e5843000 	str	r3, [r4]
    beec:	e3500000 	cmp	r0, #0
    bef0:	0a000002 	beq	bf00 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    bef4:	e5903000 	ldr	r3, [r0]
    bef8:	e5933004 	ldr	r3, [r3, #4]
    befc:	e12fff33 	blx	r3
    bf00:	e1a00004 	mov	r0, r4
    bf04:	e8bd8010 	pop	{r4, pc}
    bf08:	00030fc8 	.word	0x00030fc8

0000bf0c <CDWHCIRootPort::~CDWHCIRootPort()>:
    bf0c:	e92d4010 	push	{r4, lr}
    bf10:	e1a04000 	mov	r4, r0
    bf14:	e5900008 	ldr	r0, [r0, #8]
    bf18:	e59f3028 	ldr	r3, [pc, #40]	; bf48 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    bf1c:	e5843000 	str	r3, [r4]
    bf20:	e3500000 	cmp	r0, #0
    bf24:	0a000002 	beq	bf34 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    bf28:	e5903000 	ldr	r3, [r0]
    bf2c:	e5933004 	ldr	r3, [r3, #4]
    bf30:	e12fff33 	blx	r3
    bf34:	e1a00004 	mov	r0, r4
    bf38:	e3a0100c 	mov	r1, #12
    bf3c:	eb007ff9 	bl	2bf28 <operator delete(void*, unsigned int)>
    bf40:	e1a00004 	mov	r0, r4
    bf44:	e8bd8010 	pop	{r4, pc}
    bf48:	00030fc8 	.word	0x00030fc8

0000bf4c <CDWHCIRootPort::RemoveDevice()>:
    bf4c:	e92d4010 	push	{r4, lr}
    bf50:	e1a04000 	mov	r4, r0
    bf54:	e5900004 	ldr	r0, [r0, #4]
    bf58:	e3500000 	cmp	r0, #0
    bf5c:	0a00000b 	beq	bf90 <CDWHCIRootPort::RemoveDevice()+0x44>
    bf60:	e3a01000 	mov	r1, #0
    bf64:	ebfff373 	bl	8d38 <CDWHCIDevice::DisableRootPort(bool)>
    bf68:	e5940008 	ldr	r0, [r4, #8]
    bf6c:	e3500000 	cmp	r0, #0
    bf70:	0a000002 	beq	bf80 <CDWHCIRootPort::RemoveDevice()+0x34>
    bf74:	e5903000 	ldr	r3, [r0]
    bf78:	e5933004 	ldr	r3, [r3, #4]
    bf7c:	e12fff33 	blx	r3
    bf80:	e3a03000 	mov	r3, #0
    bf84:	e3a00001 	mov	r0, #1
    bf88:	e5843008 	str	r3, [r4, #8]
    bf8c:	e8bd8010 	pop	{r4, pc}
    bf90:	e3001fe0 	movw	r1, #4064	; 0xfe0
    bf94:	e3401003 	movt	r1, #3
    bf98:	e3000ff4 	movw	r0, #4084	; 0xff4
    bf9c:	e3400003 	movt	r0, #3
    bfa0:	e3a0206d 	mov	r2, #109	; 0x6d
    bfa4:	eb0063f2 	bl	24f74 <assertion_failed>

0000bfa8 <CDWHCIRootPort::ReScanDevices()>:
    bfa8:	e92d4010 	push	{r4, lr}
    bfac:	e5904008 	ldr	r4, [r0, #8]
    bfb0:	e3540000 	cmp	r4, #0
    bfb4:	0a000002 	beq	bfc4 <CDWHCIRootPort::ReScanDevices()+0x1c>
    bfb8:	e1a00004 	mov	r0, r4
    bfbc:	e8bd4010 	pop	{r4, lr}
    bfc0:	ea0003f7 	b	cfa4 <CUSBDevice::ReScanDevices()>
    bfc4:	eb00698f 	bl	26608 <CLogger::Get()>
    bfc8:	e3a02002 	mov	r2, #2
    bfcc:	e59f1010 	ldr	r1, [pc, #16]	; bfe4 <CDWHCIRootPort::ReScanDevices()+0x3c>
    bfd0:	e3013004 	movw	r3, #4100	; 0x1004
    bfd4:	e3403003 	movt	r3, #3
    bfd8:	eb0068cb 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bfdc:	e1a00004 	mov	r0, r4
    bfe0:	e8bd8010 	pop	{r4, pc}
    bfe4:	00030fd8 	.word	0x00030fd8

0000bfe8 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    bfe8:	e3510000 	cmp	r1, #0
    bfec:	e59fc02c 	ldr	ip, [pc, #44]	; c020 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    bff0:	e3a02000 	mov	r2, #0
    bff4:	e5801004 	str	r1, [r0, #4]
    bff8:	e580c000 	str	ip, [r0]
    bffc:	e5802008 	str	r2, [r0, #8]
    c000:	112fff1e 	bxne	lr
    c004:	e3001fe0 	movw	r1, #4064	; 0xfe0
    c008:	e3401003 	movt	r1, #3
    c00c:	e3000ff4 	movw	r0, #4084	; 0xff4
    c010:	e3400003 	movt	r0, #3
    c014:	e92d4010 	push	{r4, lr}
    c018:	e3a0201f 	mov	r2, #31
    c01c:	eb0063d4 	bl	24f74 <assertion_failed>
    c020:	00030fc8 	.word	0x00030fc8

0000c024 <CDWHCIRootPort::Initialize()>:
    c024:	e92d4070 	push	{r4, r5, r6, lr}
    c028:	e1a04000 	mov	r4, r0
    c02c:	e5900004 	ldr	r0, [r0, #4]
    c030:	e3500000 	cmp	r0, #0
    c034:	0a00004d 	beq	c170 <CDWHCIRootPort::Initialize()+0x14c>
    c038:	ebfff31c 	bl	8cb0 <CDWHCIDevice::GetPortSpeed()>
    c03c:	e1a05000 	mov	r5, r0
    c040:	e3500004 	cmp	r0, #4
    c044:	0a000040 	beq	c14c <CDWHCIRootPort::Initialize()+0x128>
    c048:	e5943008 	ldr	r3, [r4, #8]
    c04c:	e3530000 	cmp	r3, #0
    c050:	1a00004c 	bne	c188 <CDWHCIRootPort::Initialize()+0x164>
    c054:	e3a00058 	mov	r0, #88	; 0x58
    c058:	eb007fa4 	bl	2bef0 <operator new(unsigned int)>
    c05c:	e1a03004 	mov	r3, r4
    c060:	e1a06000 	mov	r6, r0
    c064:	e1a02005 	mov	r2, r5
    c068:	e5941004 	ldr	r1, [r4, #4]
    c06c:	eb000341 	bl	cd78 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    c070:	e5846008 	str	r6, [r4, #8]
    c074:	e1a00006 	mov	r0, r6
    c078:	eb0004eb 	bl	d42c <CUSBDevice::Initialize()>
    c07c:	e3500000 	cmp	r0, #0
    c080:	1a000009 	bne	c0ac <CDWHCIRootPort::Initialize()+0x88>
    c084:	e5940008 	ldr	r0, [r4, #8]
    c088:	e3500000 	cmp	r0, #0
    c08c:	0a000002 	beq	c09c <CDWHCIRootPort::Initialize()+0x78>
    c090:	e5903000 	ldr	r3, [r0]
    c094:	e5933004 	ldr	r3, [r3, #4]
    c098:	e12fff33 	blx	r3
    c09c:	e3a05000 	mov	r5, #0
    c0a0:	e5845008 	str	r5, [r4, #8]
    c0a4:	e1a00005 	mov	r0, r5
    c0a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c0ac:	e5943008 	ldr	r3, [r4, #8]
    c0b0:	e1a00003 	mov	r0, r3
    c0b4:	e5933000 	ldr	r3, [r3]
    c0b8:	e593300c 	ldr	r3, [r3, #12]
    c0bc:	e12fff33 	blx	r3
    c0c0:	e2505000 	subs	r5, r0, #0
    c0c4:	0a000016 	beq	c124 <CDWHCIRootPort::Initialize()+0x100>
    c0c8:	eb00694e 	bl	26608 <CLogger::Get()>
    c0cc:	e3a02004 	mov	r2, #4
    c0d0:	e59f10c8 	ldr	r1, [pc, #200]	; c1a0 <CDWHCIRootPort::Initialize()+0x17c>
    c0d4:	e3013078 	movw	r3, #4216	; 0x1078
    c0d8:	e3403003 	movt	r3, #3
    c0dc:	eb00688a 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c0e0:	e5940004 	ldr	r0, [r4, #4]
    c0e4:	ebfff305 	bl	8d00 <CDWHCIDevice::OvercurrentDetected()>
    c0e8:	e3500000 	cmp	r0, #0
    c0ec:	0affffec 	beq	c0a4 <CDWHCIRootPort::Initialize()+0x80>
    c0f0:	eb006944 	bl	26608 <CLogger::Get()>
    c0f4:	e3a02001 	mov	r2, #1
    c0f8:	e59f10a0 	ldr	r1, [pc, #160]	; c1a0 <CDWHCIRootPort::Initialize()+0x17c>
    c0fc:	e301308c 	movw	r3, #4236	; 0x108c
    c100:	e3403003 	movt	r3, #3
    c104:	eb006880 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c108:	e5940004 	ldr	r0, [r4, #4]
    c10c:	e3a01001 	mov	r1, #1
    c110:	ebfff308 	bl	8d38 <CDWHCIDevice::DisableRootPort(bool)>
    c114:	e5940008 	ldr	r0, [r4, #8]
    c118:	e3500000 	cmp	r0, #0
    c11c:	1affffdb 	bne	c090 <CDWHCIRootPort::Initialize()+0x6c>
    c120:	eaffffdd 	b	c09c <CDWHCIRootPort::Initialize()+0x78>
    c124:	eb006937 	bl	26608 <CLogger::Get()>
    c128:	e3013060 	movw	r3, #4192	; 0x1060
    c12c:	e3403003 	movt	r3, #3
    c130:	e3a02002 	mov	r2, #2
    c134:	e59f1064 	ldr	r1, [pc, #100]	; c1a0 <CDWHCIRootPort::Initialize()+0x17c>
    c138:	eb006873 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c13c:	e5940008 	ldr	r0, [r4, #8]
    c140:	e3500000 	cmp	r0, #0
    c144:	1affffd1 	bne	c090 <CDWHCIRootPort::Initialize()+0x6c>
    c148:	eaffffd3 	b	c09c <CDWHCIRootPort::Initialize()+0x78>
    c14c:	eb00692d 	bl	26608 <CLogger::Get()>
    c150:	e3a05000 	mov	r5, #0
    c154:	e3a02001 	mov	r2, #1
    c158:	e59f1040 	ldr	r1, [pc, #64]	; c1a0 <CDWHCIRootPort::Initialize()+0x17c>
    c15c:	e3013034 	movw	r3, #4148	; 0x1034
    c160:	e3403003 	movt	r3, #3
    c164:	eb006868 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c168:	e1a00005 	mov	r0, r5
    c16c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c170:	e3001fe0 	movw	r1, #4064	; 0xfe0
    c174:	e3401003 	movt	r1, #3
    c178:	e3000ff4 	movw	r0, #4084	; 0xff4
    c17c:	e3400003 	movt	r0, #3
    c180:	e3a0202c 	mov	r2, #44	; 0x2c
    c184:	eb00637a 	bl	24f74 <assertion_failed>
    c188:	e3001fe0 	movw	r1, #4064	; 0xfe0
    c18c:	e3401003 	movt	r1, #3
    c190:	e3010050 	movw	r0, #4176	; 0x1050
    c194:	e3400003 	movt	r0, #3
    c198:	e3a02036 	mov	r2, #54	; 0x36
    c19c:	eb006374 	bl	24f74 <assertion_failed>
    c1a0:	00030fd8 	.word	0x00030fd8

0000c1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    c1a4:	e92d4010 	push	{r4, lr}
    c1a8:	e1a04000 	mov	r4, r0
    c1ac:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    c1b0:	e3500000 	cmp	r0, #0
    c1b4:	0a000002 	beq	c1c4 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    c1b8:	e5903000 	ldr	r3, [r0]
    c1bc:	e5933004 	ldr	r3, [r3, #4]
    c1c0:	e12fff33 	blx	r3
    c1c4:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    c1c8:	e3a03000 	mov	r3, #0
    c1cc:	e5843050 	str	r3, [r4, #80]	; 0x50
    c1d0:	e1500003 	cmp	r0, r3
    c1d4:	e5843048 	str	r3, [r4, #72]	; 0x48
    c1d8:	0a000000 	beq	c1e0 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    c1dc:	eb007f50 	bl	2bf24 <operator delete[](void*)>
    c1e0:	e1a00004 	mov	r0, r4
    c1e4:	e8bd8010 	pop	{r4, pc}

0000c1e8 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    c1e8:	e5801000 	str	r1, [r0]
    c1ec:	e12fff1e 	bx	lr

0000c1f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    c1f0:	e92d4070 	push	{r4, r5, r6, lr}
    c1f4:	e1a04000 	mov	r4, r0
    c1f8:	e30007dc 	movw	r0, #2012	; 0x7dc
    c1fc:	e1110000 	tst	r1, r0
    c200:	e5841040 	str	r1, [r4, #64]	; 0x40
    c204:	0a00000f 	beq	c248 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x58>
    c208:	e3110010 	tst	r1, #16
    c20c:	08bd8070 	popeq	{r4, r5, r6, pc}
    c210:	e5940004 	ldr	r0, [r4, #4]
    c214:	eb001d97 	bl	13878 <CUSBRequest::IsCompleteOnNAK() const>
    c218:	e3500000 	cmp	r0, #0
    c21c:	08bd8070 	popeq	{r4, r5, r6, pc}
    c220:	e5940018 	ldr	r0, [r4, #24]
    c224:	eb00083d 	bl	e320 <CUSBEndpoint::GetType() const>
    c228:	e3500001 	cmp	r0, #1
    c22c:	1a000046 	bne	c34c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x15c>
    c230:	e5d43008 	ldrb	r3, [r4, #8]
    c234:	e3530000 	cmp	r3, #0
    c238:	0a000049 	beq	c364 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x174>
    c23c:	e3a03000 	mov	r3, #0
    c240:	e5843028 	str	r3, [r4, #40]	; 0x28
    c244:	e8bd8070 	pop	{r4, r5, r6, pc}
    c248:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    c24c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    c250:	e5d4c010 	ldrb	ip, [r4, #16]
    c254:	e0455002 	sub	r5, r5, r2
    c258:	e0403003 	sub	r3, r0, r3
    c25c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    c260:	e35c0000 	cmp	ip, #0
    c264:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    c268:	1a000016 	bne	c2c8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xd8>
    c26c:	e0811003 	add	r1, r1, r3
    c270:	e0823003 	add	r3, r2, r3
    c274:	e5841034 	str	r1, [r4, #52]	; 0x34
    c278:	e5843048 	str	r3, [r4, #72]	; 0x48
    c27c:	e5d42009 	ldrb	r2, [r4, #9]
    c280:	e1a01005 	mov	r1, r5
    c284:	e5940018 	ldr	r0, [r4, #24]
    c288:	eb000849 	bl	e3b4 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    c28c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    c290:	e1520005 	cmp	r2, r5
    c294:	3a000020 	bcc	c31c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x12c>
    c298:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    c29c:	e0422005 	sub	r2, r2, r5
    c2a0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c2a4:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    c2a8:	e0410003 	sub	r0, r1, r3
    c2ac:	e5842028 	str	r2, [r4, #40]	; 0x28
    c2b0:	e150000c 	cmp	r0, ip
    c2b4:	28bd8070 	popcs	{r4, r5, r6, pc}
    c2b8:	e1510003 	cmp	r1, r3
    c2bc:	3a00001c 	bcc	c334 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    c2c0:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c2c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2c8:	e5d4c011 	ldrb	ip, [r4, #17]
    c2cc:	e3530000 	cmp	r3, #0
    c2d0:	13a0e000 	movne	lr, #0
    c2d4:	020ce001 	andeq	lr, ip, #1
    c2d8:	e35e0000 	cmp	lr, #0
    c2dc:	1a000006 	bne	c2fc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    c2e0:	e0811003 	add	r1, r1, r3
    c2e4:	e35c0000 	cmp	ip, #0
    c2e8:	e0823003 	add	r3, r2, r3
    c2ec:	e5841034 	str	r1, [r4, #52]	; 0x34
    c2f0:	e5843048 	str	r3, [r4, #72]	; 0x48
    c2f4:	0affffe4 	beq	c28c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x9c>
    c2f8:	eaffffdf 	b	c27c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x8c>
    c2fc:	e3500000 	cmp	r0, #0
    c300:	15943020 	ldrne	r3, [r4, #32]
    c304:	10030593 	mulne	r3, r3, r5
    c308:	10811003 	addne	r1, r1, r3
    c30c:	10822003 	addne	r2, r2, r3
    c310:	e5841034 	str	r1, [r4, #52]	; 0x34
    c314:	e5842048 	str	r2, [r4, #72]	; 0x48
    c318:	eaffffd7 	b	c27c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x8c>
    c31c:	e30110a4 	movw	r1, #4260	; 0x10a4
    c320:	e3401003 	movt	r1, #3
    c324:	e30100f0 	movw	r0, #4336	; 0x10f0
    c328:	e3400003 	movt	r0, #3
    c32c:	e3a020d6 	mov	r2, #214	; 0xd6
    c330:	eb00630f 	bl	24f74 <assertion_failed>
    c334:	e30110a4 	movw	r1, #4260	; 0x10a4
    c338:	e3401003 	movt	r1, #3
    c33c:	e3010114 	movw	r0, #4372	; 0x1114
    c340:	e3400003 	movt	r0, #3
    c344:	e3a020dc 	mov	r2, #220	; 0xdc
    c348:	eb006309 	bl	24f74 <assertion_failed>
    c34c:	e30110a4 	movw	r1, #4260	; 0x10a4
    c350:	e3401003 	movt	r1, #3
    c354:	e30100bc 	movw	r0, #4284	; 0x10bc
    c358:	e3400003 	movt	r0, #3
    c35c:	e3a020b9 	mov	r2, #185	; 0xb9
    c360:	eb006303 	bl	24f74 <assertion_failed>
    c364:	e30110a4 	movw	r1, #4260	; 0x10a4
    c368:	e3401003 	movt	r1, #3
    c36c:	e30100e8 	movw	r0, #4328	; 0x10e8
    c370:	e3400003 	movt	r0, #3
    c374:	e3a020ba 	mov	r2, #186	; 0xba
    c378:	eb0062fd 	bl	24f74 <assertion_failed>

0000c37c <CDWHCITransferStageData::SetSplitComplete(bool)>:
    c37c:	e5d03010 	ldrb	r3, [r0, #16]
    c380:	e3530000 	cmp	r3, #0
    c384:	0a000001 	beq	c390 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    c388:	e5c01011 	strb	r1, [r0, #17]
    c38c:	e12fff1e 	bx	lr
    c390:	e30110a4 	movw	r1, #4260	; 0x10a4
    c394:	e3401003 	movt	r1, #3
    c398:	e3010140 	movw	r0, #4416	; 0x1140
    c39c:	e3400003 	movt	r0, #3
    c3a0:	e92d4010 	push	{r4, lr}
    c3a4:	e3a020e3 	mov	r2, #227	; 0xe3
    c3a8:	eb0062f1 	bl	24f74 <assertion_failed>

0000c3ac <CDWHCITransferStageData::SetState(unsigned int)>:
    c3ac:	e5801038 	str	r1, [r0, #56]	; 0x38
    c3b0:	e12fff1e 	bx	lr

0000c3b4 <CDWHCITransferStageData::GetState() const>:
    c3b4:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    c3b8:	e12fff1e 	bx	lr

0000c3bc <CDWHCITransferStageData::SetSubState(unsigned int)>:
    c3bc:	e580103c 	str	r1, [r0, #60]	; 0x3c
    c3c0:	e12fff1e 	bx	lr

0000c3c4 <CDWHCITransferStageData::GetSubState() const>:
    c3c4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    c3c8:	e12fff1e 	bx	lr

0000c3cc <CDWHCITransferStageData::BeginSplitCycle()>:
    c3cc:	e3a00001 	mov	r0, #1
    c3d0:	e12fff1e 	bx	lr

0000c3d4 <CDWHCITransferStageData::GetChannelNumber() const>:
    c3d4:	e5900000 	ldr	r0, [r0]
    c3d8:	e12fff1e 	bx	lr

0000c3dc <CDWHCITransferStageData::IsPeriodic() const>:
    c3dc:	e5900018 	ldr	r0, [r0, #24]
    c3e0:	e92d4010 	push	{r4, lr}
    c3e4:	e3500000 	cmp	r0, #0
    c3e8:	0a000006 	beq	c408 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    c3ec:	eb0007cb 	bl	e320 <CUSBEndpoint::GetType() const>
    c3f0:	e2400002 	sub	r0, r0, #2
    c3f4:	e6ef0070 	uxtb	r0, r0
    c3f8:	e3500001 	cmp	r0, #1
    c3fc:	83a00000 	movhi	r0, #0
    c400:	93a00001 	movls	r0, #1
    c404:	e8bd8010 	pop	{r4, pc}
    c408:	e30110a4 	movw	r1, #4260	; 0x10a4
    c40c:	e3401003 	movt	r1, #3
    c410:	e3010154 	movw	r0, #4436	; 0x1154
    c414:	e3400003 	movt	r0, #3
    c418:	e3a02f42 	mov	r2, #264	; 0x108
    c41c:	eb0062d4 	bl	24f74 <assertion_failed>

0000c420 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    c420:	e92d4070 	push	{r4, r5, r6, lr}
    c424:	e3520000 	cmp	r2, #0
    c428:	e1a05002 	mov	r5, r2
    c42c:	e5dd6010 	ldrb	r6, [sp, #16]
    c430:	e3a02000 	mov	r2, #0
    c434:	e5801000 	str	r1, [r0]
    c438:	e5c03008 	strb	r3, [r0, #8]
    c43c:	e5805004 	str	r5, [r0, #4]
    c440:	e5c06009 	strb	r6, [r0, #9]
    c444:	e580200c 	str	r2, [r0, #12]
    c448:	e5c02011 	strb	r2, [r0, #17]
    c44c:	e5802034 	str	r2, [r0, #52]	; 0x34
    c450:	e5802038 	str	r2, [r0, #56]	; 0x38
    c454:	e580203c 	str	r2, [r0, #60]	; 0x3c
    c458:	e5802040 	str	r2, [r0, #64]	; 0x40
    c45c:	e5802044 	str	r2, [r0, #68]	; 0x44
    c460:	e580204c 	str	r2, [r0, #76]	; 0x4c
    c464:	e5802050 	str	r2, [r0, #80]	; 0x50
    c468:	0a000088 	beq	c690 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x270>
    c46c:	e1a04000 	mov	r4, r0
    c470:	e1a00005 	mov	r0, r5
    c474:	eb001ca0 	bl	136fc <CUSBRequest::GetEndpoint() const>
    c478:	e3500000 	cmp	r0, #0
    c47c:	e5840018 	str	r0, [r4, #24]
    c480:	0a000088 	beq	c6a8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x288>
    c484:	eb000799 	bl	e2f0 <CUSBEndpoint::GetDevice() const>
    c488:	e3500000 	cmp	r0, #0
    c48c:	e5840014 	str	r0, [r4, #20]
    c490:	0a00008a 	beq	c6c0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a0>
    c494:	eb000370 	bl	d25c <CUSBDevice::GetSpeed() const>
    c498:	e5c4001c 	strb	r0, [r4, #28]
    c49c:	e5940018 	ldr	r0, [r4, #24]
    c4a0:	eb0007a5 	bl	e33c <CUSBEndpoint::GetMaxPacketSize() const>
    c4a4:	e5840020 	str	r0, [r4, #32]
    c4a8:	e5940014 	ldr	r0, [r4, #20]
    c4ac:	eb00036c 	bl	d264 <CUSBDevice::IsSplit() const>
    c4b0:	e3560000 	cmp	r6, #0
    c4b4:	e5c40010 	strb	r0, [r4, #16]
    c4b8:	0a00001e 	beq	c538 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x118>
    c4bc:	e5945044 	ldr	r5, [r4, #68]	; 0x44
    c4c0:	e3550000 	cmp	r5, #0
    c4c4:	1a000089 	bne	c6f0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d0>
    c4c8:	e3a00004 	mov	r0, #4
    c4cc:	eb007e8d 	bl	2bf08 <operator new[](unsigned int)>
    c4d0:	e3a03001 	mov	r3, #1
    c4d4:	e5845024 	str	r5, [r4, #36]	; 0x24
    c4d8:	e5840044 	str	r0, [r4, #68]	; 0x44
    c4dc:	e5840048 	str	r0, [r4, #72]	; 0x48
    c4e0:	e584502c 	str	r5, [r4, #44]	; 0x2c
    c4e4:	e5843028 	str	r3, [r4, #40]	; 0x28
    c4e8:	e5843030 	str	r3, [r4, #48]	; 0x30
    c4ec:	e3100003 	tst	r0, #3
    c4f0:	1a000078 	bne	c6d8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    c4f4:	e5d43010 	ldrb	r3, [r4, #16]
    c4f8:	e3530000 	cmp	r3, #0
    c4fc:	0a00002d 	beq	c5b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x198>
    c500:	e1a00004 	mov	r0, r4
    c504:	ebffffb4 	bl	c3dc <CDWHCITransferStageData::IsPeriodic() const>
    c508:	e3500000 	cmp	r0, #0
    c50c:	0a00003a 	beq	c5fc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    c510:	e3a00014 	mov	r0, #20
    c514:	ebfffd57 	bl	ba78 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    c518:	e1a05000 	mov	r5, r0
    c51c:	ebfffd40 	bl	ba24 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    c520:	e5845050 	str	r5, [r4, #80]	; 0x50
    c524:	e59d3014 	ldr	r3, [sp, #20]
    c528:	e3530000 	cmp	r3, #0
    c52c:	1a00003a 	bne	c61c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1fc>
    c530:	e1a00004 	mov	r0, r4
    c534:	e8bd8070 	pop	{r4, r5, r6, pc}
    c538:	e1a01006 	mov	r1, r6
    c53c:	e5940018 	ldr	r0, [r4, #24]
    c540:	eb00078b 	bl	e374 <CUSBEndpoint::GetNextPID(bool)>
    c544:	e3500000 	cmp	r0, #0
    c548:	e1a00005 	mov	r0, r5
    c54c:	0a000045 	beq	c668 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x248>
    c550:	eb001c9a 	bl	137c0 <CUSBRequest::GetBuffer()>
    c554:	e5840048 	str	r0, [r4, #72]	; 0x48
    c558:	e1a00005 	mov	r0, r5
    c55c:	eb001ca6 	bl	137fc <CUSBRequest::GetBufLen() const>
    c560:	e5840024 	str	r0, [r4, #36]	; 0x24
    c564:	e5942020 	ldr	r2, [r4, #32]
    c568:	e5d41010 	ldrb	r1, [r4, #16]
    c56c:	e2423001 	sub	r3, r2, #1
    c570:	e0833000 	add	r3, r3, r0
    c574:	e3510000 	cmp	r1, #0
    c578:	e733f213 	udiv	r3, r3, r2
    c57c:	e5843028 	str	r3, [r4, #40]	; 0x28
    c580:	0a00003e 	beq	c680 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x260>
    c584:	e1520000 	cmp	r2, r0
    c588:	e3a03001 	mov	r3, #1
    c58c:	21a02000 	movcs	r2, r0
    c590:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c594:	e1c422fc 	strd	r2, [r4, #44]	; 0x2c
    c598:	e3500000 	cmp	r0, #0
    c59c:	1affffd2 	bne	c4ec <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xcc>
    c5a0:	e30110a4 	movw	r1, #4260	; 0x10a4
    c5a4:	e3401003 	movt	r1, #3
    c5a8:	e3010198 	movw	r0, #4504	; 0x1198
    c5ac:	e3400003 	movt	r0, #3
    c5b0:	e3a0206c 	mov	r2, #108	; 0x6c
    c5b4:	eb00626e 	bl	24f74 <assertion_failed>
    c5b8:	e5940014 	ldr	r0, [r4, #20]
    c5bc:	eb00032a 	bl	d26c <CUSBDevice::GetHubAddress() const>
    c5c0:	e3500000 	cmp	r0, #0
    c5c4:	1affffd6 	bne	c524 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x104>
    c5c8:	e5d4301c 	ldrb	r3, [r4, #28]
    c5cc:	e3530002 	cmp	r3, #2
    c5d0:	0affffd3 	beq	c524 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x104>
    c5d4:	e1a00004 	mov	r0, r4
    c5d8:	ebffff7f 	bl	c3dc <CDWHCITransferStageData::IsPeriodic() const>
    c5dc:	e1a06000 	mov	r6, r0
    c5e0:	e3a00008 	mov	r0, #8
    c5e4:	ebfffc07 	bl	b608 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    c5e8:	e1a01006 	mov	r1, r6
    c5ec:	e1a05000 	mov	r5, r0
    c5f0:	ebfffbfd 	bl	b5ec <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    c5f4:	e5845050 	str	r5, [r4, #80]	; 0x50
    c5f8:	eaffffc9 	b	c524 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x104>
    c5fc:	e3a00010 	mov	r0, #16
    c600:	ebfffb60 	bl	b388 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    c604:	e1a05000 	mov	r5, r0
    c608:	ebfffb4b 	bl	b33c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    c60c:	e59d3014 	ldr	r3, [sp, #20]
    c610:	e5845050 	str	r5, [r4, #80]	; 0x50
    c614:	e3530000 	cmp	r3, #0
    c618:	0affffc4 	beq	c530 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
    c61c:	e5940018 	ldr	r0, [r4, #24]
    c620:	eb00073e 	bl	e320 <CUSBEndpoint::GetType() const>
    c624:	e3500002 	cmp	r0, #2
    c628:	1a000036 	bne	c708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e8>
    c62c:	e59d1014 	ldr	r1, [sp, #20]
    c630:	e3a03064 	mov	r3, #100	; 0x64
    c634:	e3042dd3 	movw	r2, #19923	; 0x4dd3
    c638:	e3412062 	movt	r2, #4194	; 0x1062
    c63c:	e0030193 	mul	r3, r3, r1
    c640:	e0832392 	umull	r2, r3, r2, r3
    c644:	e1a03323 	lsr	r3, r3, #6
    c648:	e584300c 	str	r3, [r4, #12]
    c64c:	e3530000 	cmp	r3, #0
    c650:	0a000032 	beq	c720 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
    c654:	eb007b67 	bl	2b3f8 <CTimer::Get()>
    c658:	eb00789b 	bl	2a8cc <CTimer::GetTicks() const>
    c65c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c660:	e1a00004 	mov	r0, r4
    c664:	e8bd8070 	pop	{r4, r5, r6, pc}
    c668:	eb001c3f 	bl	1376c <CUSBRequest::GetSetupData()>
    c66c:	e3a03008 	mov	r3, #8
    c670:	e5840048 	str	r0, [r4, #72]	; 0x48
    c674:	e1a00003 	mov	r0, r3
    c678:	e5843024 	str	r3, [r4, #36]	; 0x24
    c67c:	eaffffb8 	b	c564 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x144>
    c680:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c684:	e5843030 	str	r3, [r4, #48]	; 0x30
    c688:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c68c:	eaffffc1 	b	c598 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x178>
    c690:	e30110a4 	movw	r1, #4260	; 0x10a4
    c694:	e3401003 	movt	r1, #3
    c698:	e3010168 	movw	r0, #4456	; 0x1168
    c69c:	e3400003 	movt	r0, #3
    c6a0:	e3a02031 	mov	r2, #49	; 0x31
    c6a4:	eb006232 	bl	24f74 <assertion_failed>
    c6a8:	e30110a4 	movw	r1, #4260	; 0x10a4
    c6ac:	e3401003 	movt	r1, #3
    c6b0:	e3010154 	movw	r0, #4436	; 0x1154
    c6b4:	e3400003 	movt	r0, #3
    c6b8:	e3a02034 	mov	r2, #52	; 0x34
    c6bc:	eb00622c 	bl	24f74 <assertion_failed>
    c6c0:	e30110a4 	movw	r1, #4260	; 0x10a4
    c6c4:	e3401003 	movt	r1, #3
    c6c8:	e3010174 	movw	r0, #4468	; 0x1174
    c6cc:	e3400003 	movt	r0, #3
    c6d0:	e3a02036 	mov	r2, #54	; 0x36
    c6d4:	eb006226 	bl	24f74 <assertion_failed>
    c6d8:	e30110a4 	movw	r1, #4260	; 0x10a4
    c6dc:	e3401003 	movt	r1, #3
    c6e0:	e30101b0 	movw	r0, #4528	; 0x11b0
    c6e4:	e3400003 	movt	r0, #3
    c6e8:	e3a0206d 	mov	r2, #109	; 0x6d
    c6ec:	eb006220 	bl	24f74 <assertion_failed>
    c6f0:	e30110a4 	movw	r1, #4260	; 0x10a4
    c6f4:	e3401003 	movt	r1, #3
    c6f8:	e3010184 	movw	r0, #4484	; 0x1184
    c6fc:	e3400003 	movt	r0, #3
    c700:	e3a02061 	mov	r2, #97	; 0x61
    c704:	eb00621a 	bl	24f74 <assertion_failed>
    c708:	e30110a4 	movw	r1, #4260	; 0x10a4
    c70c:	e3401003 	movt	r1, #3
    c710:	e30101d8 	movw	r0, #4568	; 0x11d8
    c714:	e3400003 	movt	r0, #3
    c718:	e3a02088 	mov	r2, #136	; 0x88
    c71c:	eb006214 	bl	24f74 <assertion_failed>
    c720:	e30110a4 	movw	r1, #4260	; 0x10a4
    c724:	e3401003 	movt	r1, #3
    c728:	e301020c 	movw	r0, #4620	; 0x120c
    c72c:	e3400003 	movt	r0, #3
    c730:	e3a0208b 	mov	r2, #139	; 0x8b
    c734:	eb00620e 	bl	24f74 <assertion_failed>

0000c738 <CDWHCITransferStageData::GetDeviceAddress() const>:
    c738:	e5900014 	ldr	r0, [r0, #20]
    c73c:	e3500000 	cmp	r0, #0
    c740:	0a000000 	beq	c748 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    c744:	ea0002c2 	b	d254 <CUSBDevice::GetAddress() const>
    c748:	e30110a4 	movw	r1, #4260	; 0x10a4
    c74c:	e3401003 	movt	r1, #3
    c750:	e3010174 	movw	r0, #4468	; 0x1174
    c754:	e3400003 	movt	r0, #3
    c758:	e92d4010 	push	{r4, lr}
    c75c:	e3002111 	movw	r2, #273	; 0x111
    c760:	eb006203 	bl	24f74 <assertion_failed>

0000c764 <CDWHCITransferStageData::GetEndpointType() const>:
    c764:	e5900018 	ldr	r0, [r0, #24]
    c768:	e92d4010 	push	{r4, lr}
    c76c:	e3500000 	cmp	r0, #0
    c770:	0a00000b 	beq	c7a4 <CDWHCITransferStageData::GetEndpointType() const+0x40>
    c774:	eb0006e9 	bl	e320 <CUSBEndpoint::GetType() const>
    c778:	e3500001 	cmp	r0, #1
    c77c:	0a000006 	beq	c79c <CDWHCITransferStageData::GetEndpointType() const+0x38>
    c780:	3a000003 	bcc	c794 <CDWHCITransferStageData::GetEndpointType() const+0x30>
    c784:	e3500002 	cmp	r0, #2
    c788:	1a00000b 	bne	c7bc <CDWHCITransferStageData::GetEndpointType() const+0x58>
    c78c:	e3a00003 	mov	r0, #3
    c790:	e8bd8010 	pop	{r4, pc}
    c794:	e3a00000 	mov	r0, #0
    c798:	e8bd8010 	pop	{r4, pc}
    c79c:	e3a00002 	mov	r0, #2
    c7a0:	e8bd8010 	pop	{r4, pc}
    c7a4:	e30110a4 	movw	r1, #4260	; 0x10a4
    c7a8:	e3401003 	movt	r1, #3
    c7ac:	e3010154 	movw	r0, #4436	; 0x1154
    c7b0:	e3400003 	movt	r0, #3
    c7b4:	e3002117 	movw	r2, #279	; 0x117
    c7b8:	eb0061ed 	bl	24f74 <assertion_failed>
    c7bc:	e30110a4 	movw	r1, #4260	; 0x10a4
    c7c0:	e3401003 	movt	r1, #3
    c7c4:	e3010398 	movw	r0, #5016	; 0x1398
    c7c8:	e3400003 	movt	r0, #3
    c7cc:	e300212a 	movw	r2, #298	; 0x12a
    c7d0:	eb0061e7 	bl	24f74 <assertion_failed>

0000c7d4 <CDWHCITransferStageData::GetEndpointNumber() const>:
    c7d4:	e5900018 	ldr	r0, [r0, #24]
    c7d8:	e3500000 	cmp	r0, #0
    c7dc:	0a000000 	beq	c7e4 <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    c7e0:	ea0006cc 	b	e318 <CUSBEndpoint::GetNumber() const>
    c7e4:	e30110a4 	movw	r1, #4260	; 0x10a4
    c7e8:	e3401003 	movt	r1, #3
    c7ec:	e3010154 	movw	r0, #4436	; 0x1154
    c7f0:	e3400003 	movt	r0, #3
    c7f4:	e92d4010 	push	{r4, lr}
    c7f8:	e3002133 	movw	r2, #307	; 0x133
    c7fc:	eb0061dc 	bl	24f74 <assertion_failed>

0000c800 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    c800:	e5900020 	ldr	r0, [r0, #32]
    c804:	e12fff1e 	bx	lr

0000c808 <CDWHCITransferStageData::GetSpeed() const>:
    c808:	e5d0001c 	ldrb	r0, [r0, #28]
    c80c:	e12fff1e 	bx	lr

0000c810 <CDWHCITransferStageData::GetPID() const>:
    c810:	e5903018 	ldr	r3, [r0, #24]
    c814:	e92d4010 	push	{r4, lr}
    c818:	e3530000 	cmp	r3, #0
    c81c:	0a000011 	beq	c868 <CDWHCITransferStageData::GetPID() const+0x58>
    c820:	e5d01009 	ldrb	r1, [r0, #9]
    c824:	e1a00003 	mov	r0, r3
    c828:	eb0006d1 	bl	e374 <CUSBEndpoint::GetNextPID(bool)>
    c82c:	e3500001 	cmp	r0, #1
    c830:	0a00000a 	beq	c860 <CDWHCITransferStageData::GetPID() const+0x50>
    c834:	3a000007 	bcc	c858 <CDWHCITransferStageData::GetPID() const+0x48>
    c838:	e3500002 	cmp	r0, #2
    c83c:	08bd8010 	popeq	{r4, pc}
    c840:	e30110a4 	movw	r1, #4260	; 0x10a4
    c844:	e3401003 	movt	r1, #3
    c848:	e3010398 	movw	r0, #5016	; 0x1398
    c84c:	e3400003 	movt	r0, #3
    c850:	e3002156 	movw	r2, #342	; 0x156
    c854:	eb0061c6 	bl	24f74 <assertion_failed>
    c858:	e3a00003 	mov	r0, #3
    c85c:	e8bd8010 	pop	{r4, pc}
    c860:	e3a00000 	mov	r0, #0
    c864:	e8bd8010 	pop	{r4, pc}
    c868:	e30110a4 	movw	r1, #4260	; 0x10a4
    c86c:	e3401003 	movt	r1, #3
    c870:	e3010154 	movw	r0, #4436	; 0x1154
    c874:	e3400003 	movt	r0, #3
    c878:	e3002143 	movw	r2, #323	; 0x143
    c87c:	eb0061bc 	bl	24f74 <assertion_failed>

0000c880 <CDWHCITransferStageData::IsDirectionIn() const>:
    c880:	e5d00008 	ldrb	r0, [r0, #8]
    c884:	e12fff1e 	bx	lr

0000c888 <CDWHCITransferStageData::IsStatusStage() const>:
    c888:	e5d00009 	ldrb	r0, [r0, #9]
    c88c:	e12fff1e 	bx	lr

0000c890 <CDWHCITransferStageData::GetDMAAddress() const>:
    c890:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    c894:	e3500000 	cmp	r0, #0
    c898:	112fff1e 	bxne	lr
    c89c:	e30110a4 	movw	r1, #4260	; 0x10a4
    c8a0:	e3401003 	movt	r1, #3
    c8a4:	e3010198 	movw	r0, #4504	; 0x1198
    c8a8:	e3400003 	movt	r0, #3
    c8ac:	e92d4010 	push	{r4, lr}
    c8b0:	e3002169 	movw	r2, #361	; 0x169
    c8b4:	eb0061ae 	bl	24f74 <assertion_failed>

0000c8b8 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    c8b8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c8bc:	e12fff1e 	bx	lr

0000c8c0 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    c8c0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    c8c4:	e12fff1e 	bx	lr

0000c8c8 <CDWHCITransferStageData::IsSplit() const>:
    c8c8:	e5d00010 	ldrb	r0, [r0, #16]
    c8cc:	e12fff1e 	bx	lr

0000c8d0 <CDWHCITransferStageData::IsSplitComplete() const>:
    c8d0:	e5d03010 	ldrb	r3, [r0, #16]
    c8d4:	e3530000 	cmp	r3, #0
    c8d8:	0a000001 	beq	c8e4 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    c8dc:	e5d00011 	ldrb	r0, [r0, #17]
    c8e0:	e12fff1e 	bx	lr
    c8e4:	e30110a4 	movw	r1, #4260	; 0x10a4
    c8e8:	e3401003 	movt	r1, #3
    c8ec:	e3010140 	movw	r0, #4416	; 0x1140
    c8f0:	e3400003 	movt	r0, #3
    c8f4:	e92d4010 	push	{r4, lr}
    c8f8:	e300217f 	movw	r2, #383	; 0x17f
    c8fc:	eb00619c 	bl	24f74 <assertion_failed>

0000c900 <CDWHCITransferStageData::GetHubAddress() const>:
    c900:	e5d03010 	ldrb	r3, [r0, #16]
    c904:	e92d4010 	push	{r4, lr}
    c908:	e3530000 	cmp	r3, #0
    c90c:	0a000004 	beq	c924 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    c910:	e5900014 	ldr	r0, [r0, #20]
    c914:	e3500000 	cmp	r0, #0
    c918:	0a000007 	beq	c93c <CDWHCITransferStageData::GetHubAddress() const+0x3c>
    c91c:	e8bd4010 	pop	{r4, lr}
    c920:	ea000251 	b	d26c <CUSBDevice::GetHubAddress() const>
    c924:	e30110a4 	movw	r1, #4260	; 0x10a4
    c928:	e3401003 	movt	r1, #3
    c92c:	e3010140 	movw	r0, #4416	; 0x1140
    c930:	e3400003 	movt	r0, #3
    c934:	e3002186 	movw	r2, #390	; 0x186
    c938:	eb00618d 	bl	24f74 <assertion_failed>
    c93c:	e30110a4 	movw	r1, #4260	; 0x10a4
    c940:	e3401003 	movt	r1, #3
    c944:	e3010174 	movw	r0, #4468	; 0x1174
    c948:	e3400003 	movt	r0, #3
    c94c:	e3a02f62 	mov	r2, #392	; 0x188
    c950:	eb006187 	bl	24f74 <assertion_failed>

0000c954 <CDWHCITransferStageData::GetHubPortAddress() const>:
    c954:	e5d03010 	ldrb	r3, [r0, #16]
    c958:	e92d4010 	push	{r4, lr}
    c95c:	e3530000 	cmp	r3, #0
    c960:	0a000004 	beq	c978 <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    c964:	e5900014 	ldr	r0, [r0, #20]
    c968:	e3500000 	cmp	r0, #0
    c96c:	0a000007 	beq	c990 <CDWHCITransferStageData::GetHubPortAddress() const+0x3c>
    c970:	e8bd4010 	pop	{r4, lr}
    c974:	ea00023e 	b	d274 <CUSBDevice::GetHubPortNumber() const>
    c978:	e30110a4 	movw	r1, #4260	; 0x10a4
    c97c:	e3401003 	movt	r1, #3
    c980:	e3010140 	movw	r0, #4416	; 0x1140
    c984:	e3400003 	movt	r0, #3
    c988:	e300218e 	movw	r2, #398	; 0x18e
    c98c:	eb006178 	bl	24f74 <assertion_failed>
    c990:	e30110a4 	movw	r1, #4260	; 0x10a4
    c994:	e3401003 	movt	r1, #3
    c998:	e3010174 	movw	r0, #4468	; 0x1174
    c99c:	e3400003 	movt	r0, #3
    c9a0:	e3a02e19 	mov	r2, #400	; 0x190
    c9a4:	eb006172 	bl	24f74 <assertion_failed>

0000c9a8 <CDWHCITransferStageData::GetSplitPosition() const>:
    c9a8:	e3a00003 	mov	r0, #3
    c9ac:	e12fff1e 	bx	lr

0000c9b0 <CDWHCITransferStageData::GetStatusMask() const>:
    c9b0:	e5d03010 	ldrb	r3, [r0, #16]
    c9b4:	e3530000 	cmp	r3, #0
    c9b8:	0a000001 	beq	c9c4 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    c9bc:	e30007ff 	movw	r0, #2047	; 0x7ff
    c9c0:	e12fff1e 	bx	lr
    c9c4:	e92d4010 	push	{r4, lr}
    c9c8:	ebfffe83 	bl	c3dc <CDWHCITransferStageData::IsPeriodic() const>
    c9cc:	e3500000 	cmp	r0, #0
    c9d0:	130007ff 	movwne	r0, #2047	; 0x7ff
    c9d4:	0300078f 	movweq	r0, #1935	; 0x78f
    c9d8:	e8bd8010 	pop	{r4, pc}

0000c9dc <CDWHCITransferStageData::GetTransactionStatus() const>:
    c9dc:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    c9e0:	e3500000 	cmp	r0, #0
    c9e4:	112fff1e 	bxne	lr
    c9e8:	e30110a4 	movw	r1, #4260	; 0x10a4
    c9ec:	e3401003 	movt	r1, #3
    c9f0:	e3010220 	movw	r0, #4640	; 0x1220
    c9f4:	e3400003 	movt	r0, #3
    c9f8:	e92d4010 	push	{r4, lr}
    c9fc:	e30021ad 	movw	r2, #429	; 0x1ad
    ca00:	eb00615b 	bl	24f74 <assertion_failed>

0000ca04 <CDWHCITransferStageData::IsStageComplete() const>:
    ca04:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    ca08:	e16f0f10 	clz	r0, r0
    ca0c:	e1a002a0 	lsr	r0, r0, #5
    ca10:	e12fff1e 	bx	lr

0000ca14 <CDWHCITransferStageData::GetResultLen() const>:
    ca14:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    ca18:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    ca1c:	e1520000 	cmp	r2, r0
    ca20:	31a00002 	movcc	r0, r2
    ca24:	e12fff1e 	bx	lr

0000ca28 <CDWHCITransferStageData::IsTimeout() const>:
    ca28:	e590300c 	ldr	r3, [r0, #12]
    ca2c:	e3530000 	cmp	r3, #0
    ca30:	1a000001 	bne	ca3c <CDWHCITransferStageData::IsTimeout() const+0x14>
    ca34:	e1a00003 	mov	r0, r3
    ca38:	e12fff1e 	bx	lr
    ca3c:	e92d4010 	push	{r4, lr}
    ca40:	e1a04000 	mov	r4, r0
    ca44:	eb007a6b 	bl	2b3f8 <CTimer::Get()>
    ca48:	eb00779f 	bl	2a8cc <CTimer::GetTicks() const>
    ca4c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    ca50:	e594200c 	ldr	r2, [r4, #12]
    ca54:	e0400003 	sub	r0, r0, r3
    ca58:	e1500002 	cmp	r0, r2
    ca5c:	33a00000 	movcc	r0, #0
    ca60:	23a00001 	movcs	r0, #1
    ca64:	e8bd8010 	pop	{r4, pc}

0000ca68 <CDWHCITransferStageData::GetURB() const>:
    ca68:	e5900004 	ldr	r0, [r0, #4]
    ca6c:	e3500000 	cmp	r0, #0
    ca70:	112fff1e 	bxne	lr
    ca74:	e30110a4 	movw	r1, #4260	; 0x10a4
    ca78:	e3401003 	movt	r1, #3
    ca7c:	e3010168 	movw	r0, #4456	; 0x1168
    ca80:	e3400003 	movt	r0, #3
    ca84:	e92d4010 	push	{r4, lr}
    ca88:	e3a02f73 	mov	r2, #460	; 0x1cc
    ca8c:	eb006138 	bl	24f74 <assertion_failed>

0000ca90 <CDWHCITransferStageData::GetFrameScheduler() const>:
    ca90:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    ca94:	e12fff1e 	bx	lr

0000ca98 <CDWHCITransferStageData::operator new(unsigned int)>:
    ca98:	e92d4010 	push	{r4, lr}
    ca9c:	e3500054 	cmp	r0, #84	; 0x54
    caa0:	1a000006 	bne	cac0 <CDWHCITransferStageData::operator new(unsigned int)+0x28>
    caa4:	e30933f4 	movw	r3, #37876	; 0x93f4
    caa8:	e3403003 	movt	r3, #3
    caac:	e5930000 	ldr	r0, [r3]
    cab0:	e3500000 	cmp	r0, #0
    cab4:	0a000007 	beq	cad8 <CDWHCITransferStageData::operator new(unsigned int)+0x40>
    cab8:	e8bd4010 	pop	{r4, lr}
    cabc:	ea00620c 	b	252f4 <CClassAllocator::Allocate()>
    cac0:	e30110a4 	movw	r1, #4260	; 0x10a4
    cac4:	e3401003 	movt	r1, #3
    cac8:	e301023c 	movw	r0, #4668	; 0x123c
    cacc:	e3400003 	movt	r0, #3
    cad0:	e30021d5 	movw	r2, #469	; 0x1d5
    cad4:	eb006126 	bl	24f74 <assertion_failed>
    cad8:	e30110a4 	movw	r1, #4260	; 0x10a4
    cadc:	e3401003 	movt	r1, #3
    cae0:	e3000dc0 	movw	r0, #3520	; 0xdc0
    cae4:	e3400003 	movt	r0, #3
    cae8:	e30021d5 	movw	r2, #469	; 0x1d5
    caec:	eb006120 	bl	24f74 <assertion_failed>

0000caf0 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    caf0:	e92d4010 	push	{r4, lr}
    caf4:	e3510054 	cmp	r1, #84	; 0x54
    caf8:	1a000008 	bne	cb20 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x30>
    cafc:	e30933f4 	movw	r3, #37876	; 0x93f4
    cb00:	e3403003 	movt	r3, #3
    cb04:	e5933000 	ldr	r3, [r3]
    cb08:	e3530000 	cmp	r3, #0
    cb0c:	0a000009 	beq	cb38 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x48>
    cb10:	e1a01000 	mov	r1, r0
    cb14:	e1a00003 	mov	r0, r3
    cb18:	e8bd4010 	pop	{r4, lr}
    cb1c:	ea00622f 	b	253e0 <CClassAllocator::Free(void*)>
    cb20:	e30110a4 	movw	r1, #4260	; 0x10a4
    cb24:	e3401003 	movt	r1, #3
    cb28:	e301023c 	movw	r0, #4668	; 0x123c
    cb2c:	e3400003 	movt	r0, #3
    cb30:	e30021d5 	movw	r2, #469	; 0x1d5
    cb34:	eb00610e 	bl	24f74 <assertion_failed>
    cb38:	e30110a4 	movw	r1, #4260	; 0x10a4
    cb3c:	e3401003 	movt	r1, #3
    cb40:	e3000dc0 	movw	r0, #3520	; 0xdc0
    cb44:	e3400003 	movt	r0, #3
    cb48:	e30021d5 	movw	r2, #469	; 0x1d5
    cb4c:	eb006108 	bl	24f74 <assertion_failed>

0000cb50 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    cb50:	e92d4070 	push	{r4, r5, r6, lr}
    cb54:	e30943f4 	movw	r4, #37876	; 0x93f4
    cb58:	e3404003 	movt	r4, #3
    cb5c:	e5943000 	ldr	r3, [r4]
    cb60:	e3530000 	cmp	r3, #0
    cb64:	1a00000a 	bne	cb94 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x44>
    cb68:	e1a05000 	mov	r5, r0
    cb6c:	e3a0001c 	mov	r0, #28
    cb70:	eb007cde 	bl	2bef0 <operator new(unsigned int)>
    cb74:	e1a02005 	mov	r2, r5
    cb78:	e3013268 	movw	r3, #4712	; 0x1268
    cb7c:	e3403003 	movt	r3, #3
    cb80:	e3a01054 	mov	r1, #84	; 0x54
    cb84:	e1a06000 	mov	r6, r0
    cb88:	eb0061c0 	bl	25290 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    cb8c:	e5846000 	str	r6, [r4]
    cb90:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb94:	e30110a4 	movw	r1, #4260	; 0x10a4
    cb98:	e3401003 	movt	r1, #3
    cb9c:	e3000dd4 	movw	r0, #3540	; 0xdd4
    cba0:	e3400003 	movt	r0, #3
    cba4:	e30021d5 	movw	r2, #469	; 0x1d5
    cba8:	eb0060f1 	bl	24f74 <assertion_failed>

0000cbac <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    cbac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cbb0:	e30943f4 	movw	r4, #37876	; 0x93f4
    cbb4:	e3404003 	movt	r4, #3
    cbb8:	e1a05000 	mov	r5, r0
    cbbc:	e24dd00c 	sub	sp, sp, #12
    cbc0:	e5940000 	ldr	r0, [r4]
    cbc4:	e3500000 	cmp	r0, #0
    cbc8:	1a00000d 	bne	cc04 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x58>
    cbcc:	e1a06001 	mov	r6, r1
    cbd0:	e3a0001c 	mov	r0, #28
    cbd4:	eb007cc5 	bl	2bef0 <operator new(unsigned int)>
    cbd8:	e1a03006 	mov	r3, r6
    cbdc:	e1a02005 	mov	r2, r5
    cbe0:	e3011268 	movw	r1, #4712	; 0x1268
    cbe4:	e3401003 	movt	r1, #3
    cbe8:	e58d1000 	str	r1, [sp]
    cbec:	e3a01054 	mov	r1, #84	; 0x54
    cbf0:	e1a07000 	mov	r7, r0
    cbf4:	eb0061b1 	bl	252c0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    cbf8:	e5847000 	str	r7, [r4]
    cbfc:	e28dd00c 	add	sp, sp, #12
    cc00:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cc04:	e30110a4 	movw	r1, #4260	; 0x10a4
    cc08:	e3401003 	movt	r1, #3
    cc0c:	e3000dd4 	movw	r0, #3540	; 0xdd4
    cc10:	e3400003 	movt	r0, #3
    cc14:	e30021d5 	movw	r2, #469	; 0x1d5
    cc18:	eb0060d5 	bl	24f74 <assertion_failed>

0000cc1c <CUSBDevice::~CUSBDevice()>:
    cc1c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc20:	e1a04000 	mov	r4, r0
    cc24:	e59f3128 	ldr	r3, [pc, #296]	; cd54 <CUSBDevice::~CUSBDevice()+0x138>
    cc28:	e1a05000 	mov	r5, r0
    cc2c:	e2807054 	add	r7, r0, #84	; 0x54
    cc30:	e3a06000 	mov	r6, #0
    cc34:	e484302c 	str	r3, [r4], #44	; 0x2c
    cc38:	e5b40004 	ldr	r0, [r4, #4]!
    cc3c:	e3500000 	cmp	r0, #0
    cc40:	0a000002 	beq	cc50 <CUSBDevice::~CUSBDevice()+0x34>
    cc44:	e5903000 	ldr	r3, [r0]
    cc48:	e5933004 	ldr	r3, [r3, #4]
    cc4c:	e12fff33 	blx	r3
    cc50:	e5846000 	str	r6, [r4]
    cc54:	e1540007 	cmp	r4, r7
    cc58:	1afffff6 	bne	cc38 <CUSBDevice::~CUSBDevice()+0x1c>
    cc5c:	e5d53014 	ldrb	r3, [r5, #20]
    cc60:	e3530000 	cmp	r3, #0
    cc64:	0a000018 	beq	cccc <CUSBDevice::~CUSBDevice()+0xb0>
    cc68:	e30923f8 	movw	r2, #37880	; 0x93f8
    cc6c:	e3402003 	movt	r2, #3
    cc70:	e263c020 	rsb	ip, r3, #32
    cc74:	e243e020 	sub	lr, r3, #32
    cc78:	e3a00001 	mov	r0, #1
    cc7c:	e3a01000 	mov	r1, #0
    cc80:	e1c280d0 	ldrd	r8, [r2]
    cc84:	e1a0a338 	lsr	sl, r8, r3
    cc88:	e1a0b339 	lsr	fp, r9, r3
    cc8c:	e18aac19 	orr	sl, sl, r9, lsl ip
    cc90:	e00b7001 	and	r7, fp, r1
    cc94:	e18aae39 	orr	sl, sl, r9, lsr lr
    cc98:	e00a6000 	and	r6, sl, r0
    cc9c:	e196c007 	orrs	ip, r6, r7
    cca0:	0a000025 	beq	cd3c <CUSBDevice::~CUSBDevice()+0x120>
    cca4:	e243c020 	sub	ip, r3, #32
    cca8:	e1a01311 	lsl	r1, r1, r3
    ccac:	e263e020 	rsb	lr, r3, #32
    ccb0:	e1811c10 	orr	r1, r1, r0, lsl ip
    ccb4:	e1811e30 	orr	r1, r1, r0, lsr lr
    ccb8:	e1a00310 	lsl	r0, r0, r3
    ccbc:	e1a07001 	mov	r7, r1
    ccc0:	e1c80000 	bic	r0, r8, r0
    ccc4:	e1c91001 	bic	r1, r9, r1
    ccc8:	e1c200f0 	strd	r0, [r2]
    cccc:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    ccd0:	e3540000 	cmp	r4, #0
    ccd4:	0a000004 	beq	ccec <CUSBDevice::~CUSBDevice()+0xd0>
    ccd8:	e1a00004 	mov	r0, r4
    ccdc:	eb0027d6 	bl	16c3c <CUSBConfigurationParser::~CUSBConfigurationParser()>
    cce0:	e1a00004 	mov	r0, r4
    cce4:	e3a0101c 	mov	r1, #28
    cce8:	eb007c8e 	bl	2bf28 <operator delete(void*, unsigned int)>
    ccec:	e3a04000 	mov	r4, #0
    ccf0:	e3a01009 	mov	r1, #9
    ccf4:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    ccf8:	e585402c 	str	r4, [r5, #44]	; 0x2c
    ccfc:	eb007c89 	bl	2bf28 <operator delete(void*, unsigned int)>
    cd00:	e5854028 	str	r4, [r5, #40]	; 0x28
    cd04:	e3a01012 	mov	r1, #18
    cd08:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    cd0c:	eb007c85 	bl	2bf28 <operator delete(void*, unsigned int)>
    cd10:	e5956018 	ldr	r6, [r5, #24]
    cd14:	e5854024 	str	r4, [r5, #36]	; 0x24
    cd18:	e1560004 	cmp	r6, r4
    cd1c:	0a000004 	beq	cd34 <CUSBDevice::~CUSBDevice()+0x118>
    cd20:	e1a00006 	mov	r0, r6
    cd24:	eb000570 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
    cd28:	e1a00006 	mov	r0, r6
    cd2c:	e3a01014 	mov	r1, #20
    cd30:	eb007c7c 	bl	2bf28 <operator delete(void*, unsigned int)>
    cd34:	e1a00005 	mov	r0, r5
    cd38:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd3c:	e30112a0 	movw	r1, #4768	; 0x12a0
    cd40:	e3401003 	movt	r1, #3
    cd44:	e30102b0 	movw	r0, #4784	; 0x12b0
    cd48:	e3400003 	movt	r0, #3
    cd4c:	e3a02088 	mov	r2, #136	; 0x88
    cd50:	eb006087 	bl	24f74 <assertion_failed>
    cd54:	00031288 	.word	0x00031288

0000cd58 <CUSBDevice::~CUSBDevice()>:
    cd58:	e92d4010 	push	{r4, lr}
    cd5c:	e1a04000 	mov	r4, r0
    cd60:	ebffffad 	bl	cc1c <CUSBDevice::~CUSBDevice()>
    cd64:	e1a00004 	mov	r0, r4
    cd68:	e3a01058 	mov	r1, #88	; 0x58
    cd6c:	eb007c6d 	bl	2bf28 <operator delete(void*, unsigned int)>
    cd70:	e1a00004 	mov	r0, r4
    cd74:	e8bd8010 	pop	{r4, pc}

0000cd78 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    cd78:	e92d4070 	push	{r4, r5, r6, lr}
    cd7c:	e1a05000 	mov	r5, r0
    cd80:	e59fc0ac 	ldr	ip, [pc, #172]	; ce34 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xbc>
    cd84:	e3a04000 	mov	r4, #0
    cd88:	e3a00001 	mov	r0, #1
    cd8c:	e3510000 	cmp	r1, #0
    cd90:	e5c52015 	strb	r2, [r5, #21]
    cd94:	e985000a 	stmib	r5, {r1, r3}
    cd98:	e585c000 	str	ip, [r5]
    cd9c:	e5c5001e 	strb	r0, [r5, #30]
    cda0:	e585400c 	str	r4, [r5, #12]
    cda4:	e5c54014 	strb	r4, [r5, #20]
    cda8:	e5854018 	str	r4, [r5, #24]
    cdac:	e5c5401c 	strb	r4, [r5, #28]
    cdb0:	e5c5401d 	strb	r4, [r5, #29]
    cdb4:	e5854020 	str	r4, [r5, #32]
    cdb8:	e5854024 	str	r4, [r5, #36]	; 0x24
    cdbc:	e5854028 	str	r4, [r5, #40]	; 0x28
    cdc0:	e585402c 	str	r4, [r5, #44]	; 0x2c
    cdc4:	0a00000e 	beq	ce04 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x8c>
    cdc8:	e3530000 	cmp	r3, #0
    cdcc:	0a000012 	beq	ce1c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xa4>
    cdd0:	e3a00014 	mov	r0, #20
    cdd4:	eb007c45 	bl	2bef0 <operator new(unsigned int)>
    cdd8:	e1a01005 	mov	r1, r5
    cddc:	e1a06000 	mov	r6, r0
    cde0:	eb0004ca 	bl	e110 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    cde4:	e285302c 	add	r3, r5, #44	; 0x2c
    cde8:	e2852054 	add	r2, r5, #84	; 0x54
    cdec:	e5856018 	str	r6, [r5, #24]
    cdf0:	e5a34004 	str	r4, [r3, #4]!
    cdf4:	e1520003 	cmp	r2, r3
    cdf8:	1afffffc 	bne	cdf0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x78>
    cdfc:	e1a00005 	mov	r0, r5
    ce00:	e8bd8070 	pop	{r4, r5, r6, pc}
    ce04:	e30112a0 	movw	r1, #4768	; 0x12a0
    ce08:	e3401003 	movt	r1, #3
    ce0c:	e3000ff4 	movw	r0, #4084	; 0xff4
    ce10:	e3400003 	movt	r0, #3
    ce14:	e3a02038 	mov	r2, #56	; 0x38
    ce18:	eb006055 	bl	24f74 <assertion_failed>
    ce1c:	e30112a0 	movw	r1, #4768	; 0x12a0
    ce20:	e3401003 	movt	r1, #3
    ce24:	e30102e0 	movw	r0, #4832	; 0x12e0
    ce28:	e3400003 	movt	r0, #3
    ce2c:	e3a02039 	mov	r2, #57	; 0x39
    ce30:	eb00604f 	bl	24f74 <assertion_failed>
    ce34:	00031288 	.word	0x00031288

0000ce38 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    ce38:	e92d4070 	push	{r4, r5, r6, lr}
    ce3c:	e1a04000 	mov	r4, r0
    ce40:	e59fc158 	ldr	ip, [pc, #344]	; cfa0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x168>
    ce44:	e59d0010 	ldr	r0, [sp, #16]
    ce48:	e3510000 	cmp	r1, #0
    ce4c:	e5c42015 	strb	r2, [r4, #21]
    ce50:	e3a02000 	mov	r2, #0
    ce54:	e5841004 	str	r1, [r4, #4]
    ce58:	e584300c 	str	r3, [r4, #12]
    ce5c:	e584c000 	str	ip, [r4]
    ce60:	e5840010 	str	r0, [r4, #16]
    ce64:	e5842008 	str	r2, [r4, #8]
    ce68:	e5c42014 	strb	r2, [r4, #20]
    ce6c:	e5842018 	str	r2, [r4, #24]
    ce70:	e5842024 	str	r2, [r4, #36]	; 0x24
    ce74:	e5842028 	str	r2, [r4, #40]	; 0x28
    ce78:	e584202c 	str	r2, [r4, #44]	; 0x2c
    ce7c:	0a00002f 	beq	cf40 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
    ce80:	e3530000 	cmp	r3, #0
    ce84:	0a000033 	beq	cf58 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x120>
    ce88:	e1a00003 	mov	r0, r3
    ce8c:	eb00067c 	bl	e884 <CUSBFunction::GetDevice() const>
    ce90:	e3500000 	cmp	r0, #0
    ce94:	0a000035 	beq	cf70 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
    ce98:	e5d0301c 	ldrb	r3, [r0, #28]
    ce9c:	e5c4301c 	strb	r3, [r4, #28]
    cea0:	e3530000 	cmp	r3, #0
    cea4:	e5d0301d 	ldrb	r3, [r0, #29]
    cea8:	e5c4301d 	strb	r3, [r4, #29]
    ceac:	e5d0301e 	ldrb	r3, [r0, #30]
    ceb0:	e5c4301e 	strb	r3, [r4, #30]
    ceb4:	e5903020 	ldr	r3, [r0, #32]
    ceb8:	e5843020 	str	r3, [r4, #32]
    cebc:	0a000010 	beq	cf04 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
    cec0:	e5945018 	ldr	r5, [r4, #24]
    cec4:	e3550000 	cmp	r5, #0
    cec8:	1a00002e 	bne	cf88 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
    cecc:	e3a00014 	mov	r0, #20
    ced0:	eb007c06 	bl	2bef0 <operator new(unsigned int)>
    ced4:	e1a01004 	mov	r1, r4
    ced8:	e1a06000 	mov	r6, r0
    cedc:	eb00048b 	bl	e110 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    cee0:	e1a02005 	mov	r2, r5
    cee4:	e284302c 	add	r3, r4, #44	; 0x2c
    cee8:	e2841054 	add	r1, r4, #84	; 0x54
    ceec:	e5846018 	str	r6, [r4, #24]
    cef0:	e5a32004 	str	r2, [r3, #4]!
    cef4:	e1510003 	cmp	r1, r3
    cef8:	1afffffc 	bne	cef0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
    cefc:	e1a00004 	mov	r0, r4
    cf00:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf04:	e5d03015 	ldrb	r3, [r0, #21]
    cf08:	e3530002 	cmp	r3, #2
    cf0c:	1affffeb 	bne	cec0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    cf10:	e5d43015 	ldrb	r3, [r4, #21]
    cf14:	e3530001 	cmp	r3, #1
    cf18:	8affffe8 	bhi	cec0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    cf1c:	e3a03001 	mov	r3, #1
    cf20:	e5c4301c 	strb	r3, [r4, #28]
    cf24:	e5943010 	ldr	r3, [r4, #16]
    cf28:	e5d02014 	ldrb	r2, [r0, #20]
    cf2c:	e2833001 	add	r3, r3, #1
    cf30:	e5c4201d 	strb	r2, [r4, #29]
    cf34:	e5840020 	str	r0, [r4, #32]
    cf38:	e5c4301e 	strb	r3, [r4, #30]
    cf3c:	eaffffdf 	b	cec0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    cf40:	e30112a0 	movw	r1, #4768	; 0x12a0
    cf44:	e3401003 	movt	r1, #3
    cf48:	e3000ff4 	movw	r0, #4084	; 0xff4
    cf4c:	e3400003 	movt	r0, #3
    cf50:	e3a02057 	mov	r2, #87	; 0x57
    cf54:	eb006006 	bl	24f74 <assertion_failed>
    cf58:	e30112a0 	movw	r1, #4768	; 0x12a0
    cf5c:	e3401003 	movt	r1, #3
    cf60:	e30102f4 	movw	r0, #4852	; 0x12f4
    cf64:	e3400003 	movt	r0, #3
    cf68:	e3a02058 	mov	r2, #88	; 0x58
    cf6c:	eb006000 	bl	24f74 <assertion_failed>
    cf70:	e30112a0 	movw	r1, #4768	; 0x12a0
    cf74:	e3401003 	movt	r1, #3
    cf78:	e3010300 	movw	r0, #4864	; 0x1300
    cf7c:	e3400003 	movt	r0, #3
    cf80:	e3a0205b 	mov	r2, #91	; 0x5b
    cf84:	eb005ffa 	bl	24f74 <assertion_failed>
    cf88:	e30112a0 	movw	r1, #4768	; 0x12a0
    cf8c:	e3401003 	movt	r1, #3
    cf90:	e3010310 	movw	r0, #4880	; 0x1310
    cf94:	e3400003 	movt	r0, #3
    cf98:	e3a02073 	mov	r2, #115	; 0x73
    cf9c:	eb005ff4 	bl	24f74 <assertion_failed>
    cfa0:	00031288 	.word	0x00031288

0000cfa4 <CUSBDevice::ReScanDevices()>:
    cfa4:	e92d4070 	push	{r4, r5, r6, lr}
    cfa8:	e3a05000 	mov	r5, #0
    cfac:	e280402c 	add	r4, r0, #44	; 0x2c
    cfb0:	e2806054 	add	r6, r0, #84	; 0x54
    cfb4:	e5b43004 	ldr	r3, [r4, #4]!
    cfb8:	e2530000 	subs	r0, r3, #0
    cfbc:	0a000004 	beq	cfd4 <CUSBDevice::ReScanDevices()+0x30>
    cfc0:	e5933000 	ldr	r3, [r3]
    cfc4:	e5933020 	ldr	r3, [r3, #32]
    cfc8:	e12fff33 	blx	r3
    cfcc:	e3500000 	cmp	r0, #0
    cfd0:	11a05000 	movne	r5, r0
    cfd4:	e1540006 	cmp	r4, r6
    cfd8:	1afffff5 	bne	cfb4 <CUSBDevice::ReScanDevices()+0x10>
    cfdc:	e1a00005 	mov	r0, r5
    cfe0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cfe4 <CUSBDevice::RemoveDevice()>:
    cfe4:	e5903008 	ldr	r3, [r0, #8]
    cfe8:	e3530000 	cmp	r3, #0
    cfec:	0a000003 	beq	d000 <CUSBDevice::RemoveDevice()+0x1c>
    cff0:	e5932000 	ldr	r2, [r3]
    cff4:	e1a00003 	mov	r0, r3
    cff8:	e592300c 	ldr	r3, [r2, #12]
    cffc:	e12fff13 	bx	r3
    d000:	e590300c 	ldr	r3, [r0, #12]
    d004:	e3530000 	cmp	r3, #0
    d008:	0a000002 	beq	d018 <CUSBDevice::RemoveDevice()+0x34>
    d00c:	e5901010 	ldr	r1, [r0, #16]
    d010:	e1a00003 	mov	r0, r3
    d014:	ea001af8 	b	13bfc <CUSBStandardHub::RemoveDevice(unsigned int)>
    d018:	e30112a0 	movw	r1, #4768	; 0x12a0
    d01c:	e3401003 	movt	r1, #3
    d020:	e30102f4 	movw	r0, #4852	; 0x12f4
    d024:	e3400003 	movt	r0, #3
    d028:	e92d4010 	push	{r4, lr}
    d02c:	e3a02f7e 	mov	r2, #504	; 0x1f8
    d030:	eb005fcf 	bl	24f74 <assertion_failed>

0000d034 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    d034:	e92d4070 	push	{r4, r5, r6, lr}
    d038:	e1a06000 	mov	r6, r0
    d03c:	e3a00010 	mov	r0, #16
    d040:	e24dd008 	sub	sp, sp, #8
    d044:	e1a05001 	mov	r5, r1
    d048:	eb007ba8 	bl	2bef0 <operator new(unsigned int)>
    d04c:	e1a04000 	mov	r4, r0
    d050:	eb007165 	bl	295ec <CString::CString()>
    d054:	e3550000 	cmp	r5, #0
    d058:	0a000010 	beq	d0a0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x6c>
    d05c:	e3550001 	cmp	r5, #1
    d060:	1a000030 	bne	d128 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf4>
    d064:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    d068:	e3510000 	cmp	r1, #0
    d06c:	0a000021 	beq	d0f8 <CUSBDevice::GetName(TDeviceNameSelector) const+0xc4>
    d070:	e5d12004 	ldrb	r2, [r1, #4]
    d074:	e2423001 	sub	r3, r2, #1
    d078:	e6ef3073 	uxtb	r3, r3
    d07c:	e35300fd 	cmp	r3, #253	; 0xfd
    d080:	9a000012 	bls	d0d0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x9c>
    d084:	e1a00004 	mov	r0, r4
    d088:	e3011350 	movw	r1, #4944	; 0x1350
    d08c:	e3401003 	movt	r1, #3
    d090:	eb007172 	bl	29660 <CString::operator=(char const*)>
    d094:	e1a00004 	mov	r0, r4
    d098:	e28dd008 	add	sp, sp, #8
    d09c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0a0:	e5962024 	ldr	r2, [r6, #36]	; 0x24
    d0a4:	e3520000 	cmp	r2, #0
    d0a8:	0a000018 	beq	d110 <CUSBDevice::GetName(TDeviceNameSelector) const+0xdc>
    d0ac:	e1d230ba 	ldrh	r3, [r2, #10]
    d0b0:	e1a00004 	mov	r0, r4
    d0b4:	e1d220b8 	ldrh	r2, [r2, #8]
    d0b8:	e3011338 	movw	r1, #4920	; 0x1338
    d0bc:	e3401003 	movt	r1, #3
    d0c0:	eb007519 	bl	2a52c <CString::Format(char const*, ...)>
    d0c4:	e1a00004 	mov	r0, r4
    d0c8:	e28dd008 	add	sp, sp, #8
    d0cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0d0:	e5d10006 	ldrb	r0, [r1, #6]
    d0d4:	e5d13005 	ldrb	r3, [r1, #5]
    d0d8:	e3011344 	movw	r1, #4932	; 0x1344
    d0dc:	e3401003 	movt	r1, #3
    d0e0:	e58d0000 	str	r0, [sp]
    d0e4:	e1a00004 	mov	r0, r4
    d0e8:	eb00750f 	bl	2a52c <CString::Format(char const*, ...)>
    d0ec:	e1a00004 	mov	r0, r4
    d0f0:	e28dd008 	add	sp, sp, #8
    d0f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0f8:	e30112a0 	movw	r1, #4768	; 0x12a0
    d0fc:	e3401003 	movt	r1, #3
    d100:	e3010324 	movw	r0, #4900	; 0x1324
    d104:	e3400003 	movt	r0, #3
    d108:	e300220b 	movw	r2, #523	; 0x20b
    d10c:	eb005f98 	bl	24f74 <assertion_failed>
    d110:	e30112a0 	movw	r1, #4768	; 0x12a0
    d114:	e3401003 	movt	r1, #3
    d118:	e3010324 	movw	r0, #4900	; 0x1324
    d11c:	e3400003 	movt	r0, #3
    d120:	e3a02f81 	mov	r2, #516	; 0x204
    d124:	eb005f92 	bl	24f74 <assertion_failed>
    d128:	e30112a0 	movw	r1, #4768	; 0x12a0
    d12c:	e3401003 	movt	r1, #3
    d130:	e3010398 	movw	r0, #5016	; 0x1398
    d134:	e3400003 	movt	r0, #3
    d138:	e3a02f86 	mov	r2, #536	; 0x218
    d13c:	eb005f8c 	bl	24f74 <assertion_failed>

0000d140 <CUSBDevice::GetNames() const>:
    d140:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d144:	e3016350 	movw	r6, #4944	; 0x1350
    d148:	e3406003 	movt	r6, #3
    d14c:	e3018364 	movw	r8, #4964	; 0x1364
    d150:	e3408003 	movt	r8, #3
    d154:	e3a05000 	mov	r5, #0
    d158:	e1a09000 	mov	r9, r0
    d15c:	e3a00010 	mov	r0, #16
    d160:	eb007b62 	bl	2bef0 <operator new(unsigned int)>
    d164:	e1a07000 	mov	r7, r0
    d168:	eb00711f 	bl	295ec <CString::CString()>
    d16c:	e1a01005 	mov	r1, r5
    d170:	e1a00009 	mov	r0, r9
    d174:	ebffffae 	bl	d034 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d178:	e2504000 	subs	r4, r0, #0
    d17c:	0a00001f 	beq	d200 <CUSBDevice::GetNames() const+0xc0>
    d180:	e1a01006 	mov	r1, r6
    d184:	eb007184 	bl	2979c <CString::Compare(char const*) const>
    d188:	e3500000 	cmp	r0, #0
    d18c:	1a000011 	bne	d1d8 <CUSBDevice::GetNames() const+0x98>
    d190:	e5943000 	ldr	r3, [r4]
    d194:	e1a00004 	mov	r0, r4
    d198:	e5933004 	ldr	r3, [r3, #4]
    d19c:	e12fff33 	blx	r3
    d1a0:	e3550001 	cmp	r5, #1
    d1a4:	1a000009 	bne	d1d0 <CUSBDevice::GetNames() const+0x90>
    d1a8:	e1a00007 	mov	r0, r7
    d1ac:	eb007155 	bl	29708 <CString::GetLength() const>
    d1b0:	e3500000 	cmp	r0, #0
    d1b4:	1a000003 	bne	d1c8 <CUSBDevice::GetNames() const+0x88>
    d1b8:	e3011350 	movw	r1, #4944	; 0x1350
    d1bc:	e3401003 	movt	r1, #3
    d1c0:	e1a00007 	mov	r0, r7
    d1c4:	eb007125 	bl	29660 <CString::operator=(char const*)>
    d1c8:	e1a00007 	mov	r0, r7
    d1cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d1d0:	e3a05001 	mov	r5, #1
    d1d4:	eaffffe4 	b	d16c <CUSBDevice::GetNames() const+0x2c>
    d1d8:	e1a00007 	mov	r0, r7
    d1dc:	eb007149 	bl	29708 <CString::GetLength() const>
    d1e0:	e3500000 	cmp	r0, #0
    d1e4:	1a00000b 	bne	d218 <CUSBDevice::GetNames() const+0xd8>
    d1e8:	e1a00004 	mov	r0, r4
    d1ec:	eb007115 	bl	29648 <CString::operator char const*() const>
    d1f0:	e1a01000 	mov	r1, r0
    d1f4:	e1a00007 	mov	r0, r7
    d1f8:	eb007146 	bl	29718 <CString::Append(char const*)>
    d1fc:	eaffffe3 	b	d190 <CUSBDevice::GetNames() const+0x50>
    d200:	e30112a0 	movw	r1, #4768	; 0x12a0
    d204:	e3401003 	movt	r1, #3
    d208:	e3010358 	movw	r0, #4952	; 0x1358
    d20c:	e3400003 	movt	r0, #3
    d210:	e3002229 	movw	r2, #553	; 0x229
    d214:	eb005f56 	bl	24f74 <assertion_failed>
    d218:	e1a01008 	mov	r1, r8
    d21c:	e1a00007 	mov	r0, r7
    d220:	eb00713c 	bl	29718 <CString::Append(char const*)>
    d224:	eaffffef 	b	d1e8 <CUSBDevice::GetNames() const+0xa8>

0000d228 <CUSBDevice::SetAddress(unsigned char)>:
    d228:	e351003f 	cmp	r1, #63	; 0x3f
    d22c:	8a000001 	bhi	d238 <CUSBDevice::SetAddress(unsigned char)+0x10>
    d230:	e5c01014 	strb	r1, [r0, #20]
    d234:	e12fff1e 	bx	lr
    d238:	e30112a0 	movw	r1, #4768	; 0x12a0
    d23c:	e3401003 	movt	r1, #3
    d240:	e3010368 	movw	r0, #4968	; 0x1368
    d244:	e3400003 	movt	r0, #3
    d248:	e92d4010 	push	{r4, lr}
    d24c:	e3002243 	movw	r2, #579	; 0x243
    d250:	eb005f47 	bl	24f74 <assertion_failed>

0000d254 <CUSBDevice::GetAddress() const>:
    d254:	e5d00014 	ldrb	r0, [r0, #20]
    d258:	e12fff1e 	bx	lr

0000d25c <CUSBDevice::GetSpeed() const>:
    d25c:	e5d00015 	ldrb	r0, [r0, #21]
    d260:	e12fff1e 	bx	lr

0000d264 <CUSBDevice::IsSplit() const>:
    d264:	e5d0001c 	ldrb	r0, [r0, #28]
    d268:	e12fff1e 	bx	lr

0000d26c <CUSBDevice::GetHubAddress() const>:
    d26c:	e5d0001d 	ldrb	r0, [r0, #29]
    d270:	e12fff1e 	bx	lr

0000d274 <CUSBDevice::GetHubPortNumber() const>:
    d274:	e5d0001e 	ldrb	r0, [r0, #30]
    d278:	e12fff1e 	bx	lr

0000d27c <CUSBDevice::GetTTHubDevice() const>:
    d27c:	e5900020 	ldr	r0, [r0, #32]
    d280:	e12fff1e 	bx	lr

0000d284 <CUSBDevice::GetEndpoint0() const>:
    d284:	e5900018 	ldr	r0, [r0, #24]
    d288:	e3500000 	cmp	r0, #0
    d28c:	112fff1e 	bxne	lr
    d290:	e30112a0 	movw	r1, #4768	; 0x12a0
    d294:	e3401003 	movt	r1, #3
    d298:	e3010388 	movw	r0, #5000	; 0x1388
    d29c:	e3400003 	movt	r0, #3
    d2a0:	e92d4010 	push	{r4, lr}
    d2a4:	e3a02f9b 	mov	r2, #620	; 0x26c
    d2a8:	eb005f31 	bl	24f74 <assertion_failed>

0000d2ac <CUSBDevice::GetHost() const>:
    d2ac:	e5900004 	ldr	r0, [r0, #4]
    d2b0:	e3500000 	cmp	r0, #0
    d2b4:	112fff1e 	bxne	lr
    d2b8:	e30112a0 	movw	r1, #4768	; 0x12a0
    d2bc:	e3401003 	movt	r1, #3
    d2c0:	e3000ff4 	movw	r0, #4084	; 0xff4
    d2c4:	e3400003 	movt	r0, #3
    d2c8:	e92d4010 	push	{r4, lr}
    d2cc:	e3002272 	movw	r2, #626	; 0x272
    d2d0:	eb005f27 	bl	24f74 <assertion_failed>

0000d2d4 <CUSBDevice::GetDeviceDescriptor() const>:
    d2d4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    d2d8:	e3500000 	cmp	r0, #0
    d2dc:	112fff1e 	bxne	lr
    d2e0:	e30112a0 	movw	r1, #4768	; 0x12a0
    d2e4:	e3401003 	movt	r1, #3
    d2e8:	e3010324 	movw	r0, #4900	; 0x1324
    d2ec:	e3400003 	movt	r0, #3
    d2f0:	e92d4010 	push	{r4, lr}
    d2f4:	e3a02f9e 	mov	r2, #632	; 0x278
    d2f8:	eb005f1d 	bl	24f74 <assertion_failed>

0000d2fc <CUSBDevice::GetConfigurationDescriptor() const>:
    d2fc:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    d300:	e3500000 	cmp	r0, #0
    d304:	112fff1e 	bxne	lr
    d308:	e30112a0 	movw	r1, #4768	; 0x12a0
    d30c:	e3401003 	movt	r1, #3
    d310:	e301039c 	movw	r0, #5020	; 0x139c
    d314:	e3400003 	movt	r0, #3
    d318:	e92d4010 	push	{r4, lr}
    d31c:	e300227e 	movw	r2, #638	; 0x27e
    d320:	eb005f13 	bl	24f74 <assertion_failed>

0000d324 <CUSBDevice::GetDescriptor(unsigned char)>:
    d324:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d328:	e3500000 	cmp	r0, #0
    d32c:	0a000000 	beq	d334 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    d330:	ea002644 	b	16c48 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d334:	e30112a0 	movw	r1, #4768	; 0x12a0
    d338:	e3401003 	movt	r1, #3
    d33c:	e30103b0 	movw	r0, #5040	; 0x13b0
    d340:	e3400003 	movt	r0, #3
    d344:	e92d4010 	push	{r4, lr}
    d348:	e3a02fa1 	mov	r2, #644	; 0x284
    d34c:	eb005f08 	bl	24f74 <assertion_failed>

0000d350 <CUSBDevice::ConfigurationError(char const*) const>:
    d350:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d354:	e3500000 	cmp	r0, #0
    d358:	0a000000 	beq	d360 <CUSBDevice::ConfigurationError(char const*) const+0x10>
    d35c:	ea002687 	b	16d80 <CUSBConfigurationParser::Error(char const*) const>
    d360:	e30112a0 	movw	r1, #4768	; 0x12a0
    d364:	e3401003 	movt	r1, #3
    d368:	e30103b0 	movw	r0, #5040	; 0x13b0
    d36c:	e3400003 	movt	r0, #3
    d370:	e92d4010 	push	{r4, lr}
    d374:	e300228a 	movw	r2, #650	; 0x28a
    d378:	eb005efd 	bl	24f74 <assertion_failed>

0000d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    d37c:	e92d000c 	push	{r2, r3}
    d380:	e92d4070 	push	{r4, r5, r6, lr}
    d384:	e24dd020 	sub	sp, sp, #32
    d388:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    d38c:	e3540000 	cmp	r4, #0
    d390:	0a00001e 	beq	d410 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x94>
    d394:	e1a05000 	mov	r5, r0
    d398:	e28d0010 	add	r0, sp, #16
    d39c:	e1a06001 	mov	r6, r1
    d3a0:	eb007091 	bl	295ec <CString::CString()>
    d3a4:	e28d0010 	add	r0, sp, #16
    d3a8:	e30113d8 	movw	r1, #5080	; 0x13d8
    d3ac:	e3401003 	movt	r1, #3
    d3b0:	e5d5201e 	ldrb	r2, [r5, #30]
    d3b4:	e5d5301d 	ldrb	r3, [r5, #29]
    d3b8:	e58d2000 	str	r2, [sp]
    d3bc:	e59f2064 	ldr	r2, [pc, #100]	; d428 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    d3c0:	eb007459 	bl	2a52c <CString::Format(char const*, ...)>
    d3c4:	e28d3034 	add	r3, sp, #52	; 0x34
    d3c8:	e58d300c 	str	r3, [sp, #12]
    d3cc:	eb00648d 	bl	26608 <CLogger::Get()>
    d3d0:	e1a05000 	mov	r5, r0
    d3d4:	e28d0010 	add	r0, sp, #16
    d3d8:	eb00709a 	bl	29648 <CString::operator char const*() const>
    d3dc:	e59dc00c 	ldr	ip, [sp, #12]
    d3e0:	e1a01000 	mov	r1, r0
    d3e4:	e1a03004 	mov	r3, r4
    d3e8:	e1a00005 	mov	r0, r5
    d3ec:	e1a02006 	mov	r2, r6
    d3f0:	e58dc000 	str	ip, [sp]
    d3f4:	eb0063d0 	bl	2633c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d3f8:	e28d0010 	add	r0, sp, #16
    d3fc:	eb007047 	bl	29520 <CString::~CString()>
    d400:	e28dd020 	add	sp, sp, #32
    d404:	e8bd4070 	pop	{r4, r5, r6, lr}
    d408:	e28dd008 	add	sp, sp, #8
    d40c:	e12fff1e 	bx	lr
    d410:	e30112a0 	movw	r1, #4768	; 0x12a0
    d414:	e3401003 	movt	r1, #3
    d418:	e30103c8 	movw	r0, #5064	; 0x13c8
    d41c:	e3400003 	movt	r0, #3
    d420:	e3a02e29 	mov	r2, #656	; 0x290
    d424:	eb005ed2 	bl	24f74 <assertion_failed>
    d428:	00031298 	.word	0x00031298

0000d42c <CUSBDevice::Initialize()>:
    d42c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d430:	e5906024 	ldr	r6, [r0, #36]	; 0x24
    d434:	e24dd01c 	sub	sp, sp, #28
    d438:	e3560000 	cmp	r6, #0
    d43c:	1a00009e 	bne	d6bc <CUSBDevice::Initialize()+0x290>
    d440:	e1a04000 	mov	r4, r0
    d444:	e3a00012 	mov	r0, #18
    d448:	eb007aa8 	bl	2bef0 <operator new(unsigned int)>
    d44c:	e5943004 	ldr	r3, [r4, #4]
    d450:	e5840024 	str	r0, [r4, #36]	; 0x24
    d454:	e3530000 	cmp	r3, #0
    d458:	0a00009d 	beq	d6d4 <CUSBDevice::Initialize()+0x2a8>
    d45c:	e5941018 	ldr	r1, [r4, #24]
    d460:	e3510000 	cmp	r1, #0
    d464:	0a0000a0 	beq	d6ec <CUSBDevice::Initialize()+0x2c0>
    d468:	e58d0000 	str	r0, [sp]
    d46c:	e3a02008 	mov	r2, #8
    d470:	e1a00003 	mov	r0, r3
    d474:	e58d2004 	str	r2, [sp, #4]
    d478:	e58d600c 	str	r6, [sp, #12]
    d47c:	e3a08080 	mov	r8, #128	; 0x80
    d480:	e1a03006 	mov	r3, r6
    d484:	e58d8008 	str	r8, [sp, #8]
    d488:	e3a02001 	mov	r2, #1
    d48c:	eb0010c2 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d490:	e3500008 	cmp	r0, #8
    d494:	1a000014 	bne	d4ec <CUSBDevice::Initialize()+0xc0>
    d498:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d49c:	e5d39000 	ldrb	r9, [r3]
    d4a0:	e3590012 	cmp	r9, #18
    d4a4:	1a000002 	bne	d4b4 <CUSBDevice::Initialize()+0x88>
    d4a8:	e5d35001 	ldrb	r5, [r3, #1]
    d4ac:	e3550001 	cmp	r5, #1
    d4b0:	0a00001a 	beq	d520 <CUSBDevice::Initialize()+0xf4>
    d4b4:	e1a00004 	mov	r0, r4
    d4b8:	e3a01001 	mov	r1, #1
    d4bc:	e301241c 	movw	r2, #5148	; 0x141c
    d4c0:	e3402003 	movt	r2, #3
    d4c4:	ebffffac 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d4c8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    d4cc:	e3a01012 	mov	r1, #18
    d4d0:	eb007a94 	bl	2bf28 <operator delete(void*, unsigned int)>
    d4d4:	e3a03000 	mov	r3, #0
    d4d8:	e1a07003 	mov	r7, r3
    d4dc:	e5843024 	str	r3, [r4, #36]	; 0x24
    d4e0:	e1a00007 	mov	r0, r7
    d4e4:	e28dd01c 	add	sp, sp, #28
    d4e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4ec:	e3a01001 	mov	r1, #1
    d4f0:	e1a00004 	mov	r0, r4
    d4f4:	e30123f4 	movw	r2, #5108	; 0x13f4
    d4f8:	e3402003 	movt	r2, #3
    d4fc:	ebffff9e 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d500:	e1a07006 	mov	r7, r6
    d504:	e3a01012 	mov	r1, #18
    d508:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    d50c:	eb007a85 	bl	2bf28 <operator delete(void*, unsigned int)>
    d510:	e5846024 	str	r6, [r4, #36]	; 0x24
    d514:	e1a00007 	mov	r0, r7
    d518:	e28dd01c 	add	sp, sp, #28
    d51c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d520:	e5d31007 	ldrb	r1, [r3, #7]
    d524:	e5940018 	ldr	r0, [r4, #24]
    d528:	eb000380 	bl	e330 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    d52c:	e2507000 	subs	r7, r0, #0
    d530:	0a000073 	beq	d704 <CUSBDevice::Initialize()+0x2d8>
    d534:	e5941018 	ldr	r1, [r4, #24]
    d538:	e1a03006 	mov	r3, r6
    d53c:	e5940004 	ldr	r0, [r4, #4]
    d540:	e1a02005 	mov	r2, r5
    d544:	e58d600c 	str	r6, [sp, #12]
    d548:	e58d8008 	str	r8, [sp, #8]
    d54c:	e594c024 	ldr	ip, [r4, #36]	; 0x24
    d550:	e58dc000 	str	ip, [sp]
    d554:	e58d9004 	str	r9, [sp, #4]
    d558:	eb00108f 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d55c:	e3500012 	cmp	r0, #18
    d560:	1a000071 	bne	d72c <CUSBDevice::Initialize()+0x300>
    d564:	e309c3f8 	movw	ip, #37880	; 0x93f8
    d568:	e340c003 	movt	ip, #3
    d56c:	e3a08001 	mov	r8, #1
    d570:	e3a09000 	mov	r9, #0
    d574:	e1cc00d0 	ldrd	r0, [ip]
    d578:	ea000002 	b	d588 <CUSBDevice::Initialize()+0x15c>
    d57c:	e2855001 	add	r5, r5, #1
    d580:	e3550040 	cmp	r5, #64	; 0x40
    d584:	0a000073 	beq	d758 <CUSBDevice::Initialize()+0x32c>
    d588:	e2653020 	rsb	r3, r5, #32
    d58c:	e1a06530 	lsr	r6, r0, r5
    d590:	e2452020 	sub	r2, r5, #32
    d594:	e1866311 	orr	r6, r6, r1, lsl r3
    d598:	e3a03000 	mov	r3, #0
    d59c:	e1866231 	orr	r6, r6, r1, lsr r2
    d5a0:	e2062001 	and	r2, r6, #1
    d5a4:	e6ef6075 	uxtb	r6, r5
    d5a8:	e1923003 	orrs	r3, r2, r3
    d5ac:	1afffff2 	bne	d57c <CUSBDevice::Initialize()+0x150>
    d5b0:	e2453020 	sub	r3, r5, #32
    d5b4:	e1a09519 	lsl	r9, r9, r5
    d5b8:	e2652020 	rsb	r2, r5, #32
    d5bc:	e1899318 	orr	r9, r9, r8, lsl r3
    d5c0:	e1899238 	orr	r9, r9, r8, lsr r2
    d5c4:	e1a02006 	mov	r2, r6
    d5c8:	e1a08518 	lsl	r8, r8, r5
    d5cc:	e1899001 	orr	r9, r9, r1
    d5d0:	e1888000 	orr	r8, r8, r0
    d5d4:	e5941018 	ldr	r1, [r4, #24]
    d5d8:	e5940004 	ldr	r0, [r4, #4]
    d5dc:	e1cc80f0 	strd	r8, [ip]
    d5e0:	eb00107b 	bl	117d4 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    d5e4:	e2507000 	subs	r7, r0, #0
    d5e8:	0a00006c 	beq	d7a0 <CUSBDevice::Initialize()+0x374>
    d5ec:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    d5f0:	e5c46014 	strb	r6, [r4, #20]
    d5f4:	e3550000 	cmp	r5, #0
    d5f8:	1a00006f 	bne	d7bc <CUSBDevice::Initialize()+0x390>
    d5fc:	e3a00009 	mov	r0, #9
    d600:	e3a07009 	mov	r7, #9
    d604:	eb007a39 	bl	2bef0 <operator new(unsigned int)>
    d608:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    d60c:	e5840028 	str	r0, [r4, #40]	; 0x28
    d610:	e1a02000 	mov	r2, r0
    d614:	e3001525 	movw	r1, #1317	; 0x525
    d618:	e3a06000 	mov	r6, #0
    d61c:	e3a08080 	mov	r8, #128	; 0x80
    d620:	e1d300b8 	ldrh	r0, [r3, #8]
    d624:	e1500001 	cmp	r0, r1
    d628:	e5941018 	ldr	r1, [r4, #24]
    d62c:	e5940004 	ldr	r0, [r4, #4]
    d630:	01d350ba 	ldrheq	r5, [r3, #10]
    d634:	030a34a2 	movweq	r3, #42146	; 0xa4a2
    d638:	e58d2000 	str	r2, [sp]
    d63c:	e3a02002 	mov	r2, #2
    d640:	00455003 	subeq	r5, r5, r3
    d644:	e58d600c 	str	r6, [sp, #12]
    d648:	016f5f15 	clzeq	r5, r5
    d64c:	e58d8008 	str	r8, [sp, #8]
    d650:	01a052a5 	lsreq	r5, r5, #5
    d654:	e58d7004 	str	r7, [sp, #4]
    d658:	e1a03005 	mov	r3, r5
    d65c:	eb00104e 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d660:	e1500007 	cmp	r0, r7
    d664:	130124ac 	movwne	r2, #5292	; 0x14ac
    d668:	13402003 	movtne	r2, #3
    d66c:	1a000042 	bne	d77c <CUSBDevice::Initialize()+0x350>
    d670:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    d674:	e5d07000 	ldrb	r7, [r0]
    d678:	e3570009 	cmp	r7, #9
    d67c:	1a000002 	bne	d68c <CUSBDevice::Initialize()+0x260>
    d680:	e5d0a001 	ldrb	sl, [r0, #1]
    d684:	e35a0002 	cmp	sl, #2
    d688:	0a000051 	beq	d7d4 <CUSBDevice::Initialize()+0x3a8>
    d68c:	e3a01001 	mov	r1, #1
    d690:	e1a00004 	mov	r0, r4
    d694:	e30124d8 	movw	r2, #5336	; 0x14d8
    d698:	e3402003 	movt	r2, #3
    d69c:	ebffff36 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d6a0:	e3a01009 	mov	r1, #9
    d6a4:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    d6a8:	eb007a1e 	bl	2bf28 <operator delete(void*, unsigned int)>
    d6ac:	e3a03000 	mov	r3, #0
    d6b0:	e1a07003 	mov	r7, r3
    d6b4:	e5843028 	str	r3, [r4, #40]	; 0x28
    d6b8:	eaffff95 	b	d514 <CUSBDevice::Initialize()+0xe8>
    d6bc:	e30112a0 	movw	r1, #4768	; 0x12a0
    d6c0:	e3401003 	movt	r1, #3
    d6c4:	e30103e0 	movw	r0, #5088	; 0x13e0
    d6c8:	e3400003 	movt	r0, #3
    d6cc:	e3a020a7 	mov	r2, #167	; 0xa7
    d6d0:	eb005e27 	bl	24f74 <assertion_failed>
    d6d4:	e30112a0 	movw	r1, #4768	; 0x12a0
    d6d8:	e3401003 	movt	r1, #3
    d6dc:	e3000ff4 	movw	r0, #4084	; 0xff4
    d6e0:	e3400003 	movt	r0, #3
    d6e4:	e3a020ab 	mov	r2, #171	; 0xab
    d6e8:	eb005e21 	bl	24f74 <assertion_failed>
    d6ec:	e30112a0 	movw	r1, #4768	; 0x12a0
    d6f0:	e3401003 	movt	r1, #3
    d6f4:	e3010388 	movw	r0, #5000	; 0x1388
    d6f8:	e3400003 	movt	r0, #3
    d6fc:	e3a020ac 	mov	r2, #172	; 0xac
    d700:	eb005e1b 	bl	24f74 <assertion_failed>
    d704:	e1a01005 	mov	r1, r5
    d708:	e1a00004 	mov	r0, r4
    d70c:	e3012438 	movw	r2, #5176	; 0x1438
    d710:	e3402003 	movt	r2, #3
    d714:	ebffff18 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d718:	e1a01009 	mov	r1, r9
    d71c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    d720:	eb007a00 	bl	2bf28 <operator delete(void*, unsigned int)>
    d724:	e5847024 	str	r7, [r4, #36]	; 0x24
    d728:	eaffff79 	b	d514 <CUSBDevice::Initialize()+0xe8>
    d72c:	e1a01005 	mov	r1, r5
    d730:	e1a00004 	mov	r0, r4
    d734:	e3012460 	movw	r2, #5216	; 0x1460
    d738:	e3402003 	movt	r2, #3
    d73c:	ebffff0e 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d740:	e1a01009 	mov	r1, r9
    d744:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    d748:	e1a07006 	mov	r7, r6
    d74c:	eb0079f5 	bl	2bf28 <operator delete(void*, unsigned int)>
    d750:	e5846024 	str	r6, [r4, #36]	; 0x24
    d754:	eaffff6e 	b	d514 <CUSBDevice::Initialize()+0xe8>
    d758:	e1a00004 	mov	r0, r4
    d75c:	e3012620 	movw	r2, #5664	; 0x1620
    d760:	e3402003 	movt	r2, #3
    d764:	e3a01001 	mov	r1, #1
    d768:	e3a07000 	mov	r7, #0
    d76c:	ebffff02 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d770:	eaffff67 	b	d514 <CUSBDevice::Initialize()+0xe8>
    d774:	e30124fc 	movw	r2, #5372	; 0x14fc
    d778:	e3402003 	movt	r2, #3
    d77c:	e3a01001 	mov	r1, #1
    d780:	e1a00004 	mov	r0, r4
    d784:	ebfffefc 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d788:	e1a01007 	mov	r1, r7
    d78c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    d790:	e1a07006 	mov	r7, r6
    d794:	eb0079e3 	bl	2bf28 <operator delete(void*, unsigned int)>
    d798:	e5846028 	str	r6, [r4, #40]	; 0x28
    d79c:	eaffff5c 	b	d514 <CUSBDevice::Initialize()+0xe8>
    d7a0:	e1a03005 	mov	r3, r5
    d7a4:	e1a00004 	mov	r0, r4
    d7a8:	e3012480 	movw	r2, #5248	; 0x1480
    d7ac:	e3402003 	movt	r2, #3
    d7b0:	e3a01001 	mov	r1, #1
    d7b4:	ebfffef0 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d7b8:	eaffff55 	b	d514 <CUSBDevice::Initialize()+0xe8>
    d7bc:	e30112a0 	movw	r1, #4768	; 0x12a0
    d7c0:	e3401003 	movt	r1, #3
    d7c4:	e3010498 	movw	r0, #5272	; 0x1498
    d7c8:	e3400003 	movt	r0, #3
    d7cc:	e3a02c01 	mov	r2, #256	; 0x100
    d7d0:	eb005de7 	bl	24f74 <assertion_failed>
    d7d4:	e1d090b2 	ldrh	r9, [r0, #2]
    d7d8:	e3590c02 	cmp	r9, #512	; 0x200
    d7dc:	8affffaa 	bhi	d68c <CUSBDevice::Initialize()+0x260>
    d7e0:	e1a01007 	mov	r1, r7
    d7e4:	eb0079cf 	bl	2bf28 <operator delete(void*, unsigned int)>
    d7e8:	e1a00009 	mov	r0, r9
    d7ec:	eb0079c5 	bl	2bf08 <operator new[](unsigned int)>
    d7f0:	e58d600c 	str	r6, [sp, #12]
    d7f4:	e5840028 	str	r0, [r4, #40]	; 0x28
    d7f8:	e1a03005 	mov	r3, r5
    d7fc:	e58d8008 	str	r8, [sp, #8]
    d800:	e1a0200a 	mov	r2, sl
    d804:	e58d0000 	str	r0, [sp]
    d808:	e58d9004 	str	r9, [sp, #4]
    d80c:	e5941018 	ldr	r1, [r4, #24]
    d810:	e5940004 	ldr	r0, [r4, #4]
    d814:	eb000fe0 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d818:	e1a08000 	mov	r8, r0
    d81c:	e1500009 	cmp	r0, r9
    d820:	1affffd3 	bne	d774 <CUSBDevice::Initialize()+0x348>
    d824:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
    d828:	e3550000 	cmp	r5, #0
    d82c:	1a0000d2 	bne	db7c <CUSBDevice::Initialize()+0x750>
    d830:	e3a0001c 	mov	r0, #28
    d834:	eb0079ad 	bl	2bef0 <operator new(unsigned int)>
    d838:	e1a02008 	mov	r2, r8
    d83c:	e1a06000 	mov	r6, r0
    d840:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    d844:	eb002497 	bl	16aa8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    d848:	e584602c 	str	r6, [r4, #44]	; 0x2c
    d84c:	e1a00006 	mov	r0, r6
    d850:	eb0024fa 	bl	16c40 <CUSBConfigurationParser::IsValid() const>
    d854:	e2507000 	subs	r7, r0, #0
    d858:	1a00000b 	bne	d88c <CUSBDevice::Initialize()+0x460>
    d85c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d860:	e3500000 	cmp	r0, #0
    d864:	0a000002 	beq	d874 <CUSBDevice::Initialize()+0x448>
    d868:	e59f1344 	ldr	r1, [pc, #836]	; dbb4 <CUSBDevice::Initialize()+0x788>
    d86c:	eb002543 	bl	16d80 <CUSBConfigurationParser::Error(char const*) const>
    d870:	eaffff27 	b	d514 <CUSBDevice::Initialize()+0xe8>
    d874:	e30112a0 	movw	r1, #4768	; 0x12a0
    d878:	e3401003 	movt	r1, #3
    d87c:	e30103b0 	movw	r0, #5040	; 0x13b0
    d880:	e3400003 	movt	r0, #3
    d884:	e300228a 	movw	r2, #650	; 0x28a
    d888:	eb005db9 	bl	24f74 <assertion_failed>
    d88c:	e1a00004 	mov	r0, r4
    d890:	ebfffe2a 	bl	d140 <CUSBDevice::GetNames() const>
    d894:	e2506000 	subs	r6, r0, #0
    d898:	0a00009c 	beq	db10 <CUSBDevice::Initialize()+0x6e4>
    d89c:	eb006f69 	bl	29648 <CString::operator char const*() const>
    d8a0:	e3012544 	movw	r2, #5444	; 0x1544
    d8a4:	e3402003 	movt	r2, #3
    d8a8:	e1a03000 	mov	r3, r0
    d8ac:	e3a01003 	mov	r1, #3
    d8b0:	e1a00004 	mov	r0, r4
    d8b4:	e301b5c0 	movw	fp, #5568	; 0x15c0
    d8b8:	e340b003 	movt	fp, #3
    d8bc:	ebfffeae 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d8c0:	e5963000 	ldr	r3, [r6]
    d8c4:	e3012350 	movw	r2, #4944	; 0x1350
    d8c8:	e3402003 	movt	r2, #3
    d8cc:	e1a00006 	mov	r0, r6
    d8d0:	e58d2010 	str	r2, [sp, #16]
    d8d4:	e301a5a4 	movw	sl, #5540	; 0x15a4
    d8d8:	e340a003 	movt	sl, #3
    d8dc:	e5933004 	ldr	r3, [r3, #4]
    d8e0:	e1a08005 	mov	r8, r5
    d8e4:	e12fff33 	blx	r3
    d8e8:	e3a01004 	mov	r1, #4
    d8ec:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d8f0:	eb0024d4 	bl	16c48 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d8f4:	e3500000 	cmp	r0, #0
    d8f8:	0a00007b 	beq	daec <CUSBDevice::Initialize()+0x6c0>
    d8fc:	e5d03002 	ldrb	r3, [r0, #2]
    d900:	e1530005 	cmp	r3, r5
    d904:	8a000007 	bhi	d928 <CUSBDevice::Initialize()+0x4fc>
    d908:	0a000007 	beq	d92c <CUSBDevice::Initialize()+0x500>
    d90c:	e5d03003 	ldrb	r3, [r0, #3]
    d910:	e3012554 	movw	r2, #5460	; 0x1554
    d914:	e3402003 	movt	r2, #3
    d918:	e3a01004 	mov	r1, #4
    d91c:	e1a00004 	mov	r0, r4
    d920:	ebfffe95 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d924:	eaffffef 	b	d8e8 <CUSBDevice::Initialize()+0x4bc>
    d928:	e1a05003 	mov	r5, r3
    d92c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    d930:	e3530000 	cmp	r3, #0
    d934:	0a000066 	beq	dad4 <CUSBDevice::Initialize()+0x6a8>
    d938:	e0849108 	add	r9, r4, r8, lsl #2
    d93c:	e5993030 	ldr	r3, [r9, #48]	; 0x30
    d940:	e3530000 	cmp	r3, #0
    d944:	1a00005c 	bne	dabc <CUSBDevice::Initialize()+0x690>
    d948:	e3a00010 	mov	r0, #16
    d94c:	eb007967 	bl	2bef0 <operator new(unsigned int)>
    d950:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    d954:	e1a01004 	mov	r1, r4
    d958:	e1a06000 	mov	r6, r0
    d95c:	eb000337 	bl	e640 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    d960:	e5896030 	str	r6, [r9, #48]	; 0x30
    d964:	e3580000 	cmp	r8, #0
    d968:	1a000026 	bne	da08 <CUSBDevice::Initialize()+0x5dc>
    d96c:	e1a01008 	mov	r1, r8
    d970:	e1a00004 	mov	r0, r4
    d974:	ebfffdae 	bl	d034 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d978:	e1a01000 	mov	r1, r0
    d97c:	e1a00006 	mov	r0, r6
    d980:	eb0000c8 	bl	dca8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    d984:	e2506000 	subs	r6, r0, #0
    d988:	0a000015 	beq	d9e4 <CUSBDevice::Initialize()+0x5b8>
    d98c:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    d990:	e3500000 	cmp	r0, #0
    d994:	0a000063 	beq	db28 <CUSBDevice::Initialize()+0x6fc>
    d998:	e5903000 	ldr	r3, [r0]
    d99c:	e5933004 	ldr	r3, [r3, #4]
    d9a0:	e12fff33 	blx	r3
    d9a4:	e3560000 	cmp	r6, #0
    d9a8:	05896030 	streq	r6, [r9, #48]	; 0x30
    d9ac:	0a000027 	beq	da50 <CUSBDevice::Initialize()+0x624>
    d9b0:	e5963000 	ldr	r3, [r6]
    d9b4:	e1a00006 	mov	r0, r6
    d9b8:	e5896030 	str	r6, [r9, #48]	; 0x30
    d9bc:	e5933018 	ldr	r3, [r3, #24]
    d9c0:	e12fff33 	blx	r3
    d9c4:	e3500000 	cmp	r0, #0
    d9c8:	0a00005e 	beq	db48 <CUSBDevice::Initialize()+0x71c>
    d9cc:	e2888001 	add	r8, r8, #1
    d9d0:	e358000a 	cmp	r8, #10
    d9d4:	0a00006e 	beq	db94 <CUSBDevice::Initialize()+0x768>
    d9d8:	e2855001 	add	r5, r5, #1
    d9dc:	e6ef5075 	uxtb	r5, r5
    d9e0:	eaffffc0 	b	d8e8 <CUSBDevice::Initialize()+0x4bc>
    d9e4:	e5946030 	ldr	r6, [r4, #48]	; 0x30
    d9e8:	e3a01001 	mov	r1, #1
    d9ec:	e1a00004 	mov	r0, r4
    d9f0:	ebfffd8f 	bl	d034 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d9f4:	e1a01000 	mov	r1, r0
    d9f8:	e1a00006 	mov	r0, r6
    d9fc:	eb0000a9 	bl	dca8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    da00:	e2506000 	subs	r6, r0, #0
    da04:	1affffe0 	bne	d98c <CUSBDevice::Initialize()+0x560>
    da08:	e5990030 	ldr	r0, [r9, #48]	; 0x30
    da0c:	eb000372 	bl	e7dc <CUSBFunction::GetInterfaceName() const>
    da10:	e2506000 	subs	r6, r0, #0
    da14:	0a000022 	beq	daa4 <CUSBDevice::Initialize()+0x678>
    da18:	e59d1010 	ldr	r1, [sp, #16]
    da1c:	eb006f5e 	bl	2979c <CString::Compare(char const*) const>
    da20:	e2503000 	subs	r3, r0, #0
    da24:	1a00000e 	bne	da64 <CUSBDevice::Initialize()+0x638>
    da28:	e5962000 	ldr	r2, [r6]
    da2c:	e1a00006 	mov	r0, r6
    da30:	e58d3014 	str	r3, [sp, #20]
    da34:	e5922004 	ldr	r2, [r2, #4]
    da38:	e12fff32 	blx	r2
    da3c:	e5990030 	ldr	r0, [r9, #48]	; 0x30
    da40:	e59d3014 	ldr	r3, [sp, #20]
    da44:	e3500000 	cmp	r0, #0
    da48:	11a06003 	movne	r6, r3
    da4c:	1affffd1 	bne	d998 <CUSBDevice::Initialize()+0x56c>
    da50:	e1a0200a 	mov	r2, sl
    da54:	e3a01002 	mov	r1, #2
    da58:	e1a00004 	mov	r0, r4
    da5c:	ebfffe46 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    da60:	eaffffa0 	b	d8e8 <CUSBDevice::Initialize()+0x4bc>
    da64:	e1a00006 	mov	r0, r6
    da68:	eb006ef6 	bl	29648 <CString::operator char const*() const>
    da6c:	e3a01003 	mov	r1, #3
    da70:	e1a03000 	mov	r3, r0
    da74:	e3012590 	movw	r2, #5520	; 0x1590
    da78:	e3402003 	movt	r2, #3
    da7c:	e1a00004 	mov	r0, r4
    da80:	ebfffe3d 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    da84:	e1a01006 	mov	r1, r6
    da88:	e5990030 	ldr	r0, [r9, #48]	; 0x30
    da8c:	eb000085 	bl	dca8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    da90:	e1a06000 	mov	r6, r0
    da94:	e5990030 	ldr	r0, [r9, #48]	; 0x30
    da98:	e3500000 	cmp	r0, #0
    da9c:	1affffbd 	bne	d998 <CUSBDevice::Initialize()+0x56c>
    daa0:	eaffffbf 	b	d9a4 <CUSBDevice::Initialize()+0x578>
    daa4:	e30112a0 	movw	r1, #4768	; 0x12a0
    daa8:	e3401003 	movt	r1, #3
    daac:	e3010358 	movw	r0, #4952	; 0x1358
    dab0:	e3400003 	movt	r0, #3
    dab4:	e3a02d06 	mov	r2, #384	; 0x180
    dab8:	eb005d2d 	bl	24f74 <assertion_failed>
    dabc:	e30112a0 	movw	r1, #4768	; 0x12a0
    dac0:	e3401003 	movt	r1, #3
    dac4:	e3010574 	movw	r0, #5492	; 0x1574
    dac8:	e3400003 	movt	r0, #3
    dacc:	e300216e 	movw	r2, #366	; 0x16e
    dad0:	eb005d27 	bl	24f74 <assertion_failed>
    dad4:	e30112a0 	movw	r1, #4768	; 0x12a0
    dad8:	e3401003 	movt	r1, #3
    dadc:	e30103b0 	movw	r0, #5040	; 0x13b0
    dae0:	e3400003 	movt	r0, #3
    dae4:	e300216d 	movw	r2, #365	; 0x16d
    dae8:	eb005d21 	bl	24f74 <assertion_failed>
    daec:	e3580000 	cmp	r8, #0
    daf0:	1afffe87 	bne	d514 <CUSBDevice::Initialize()+0xe8>
    daf4:	e1a00004 	mov	r0, r4
    daf8:	e30125fc 	movw	r2, #5628	; 0x15fc
    dafc:	e3402003 	movt	r2, #3
    db00:	e3a01002 	mov	r1, #2
    db04:	e1a07008 	mov	r7, r8
    db08:	ebfffe1b 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    db0c:	eafffe80 	b	d514 <CUSBDevice::Initialize()+0xe8>
    db10:	e30112a0 	movw	r1, #4768	; 0x12a0
    db14:	e3401003 	movt	r1, #3
    db18:	e3010538 	movw	r0, #5432	; 0x1538
    db1c:	e3400003 	movt	r0, #3
    db20:	e300214a 	movw	r2, #330	; 0x14a
    db24:	eb005d12 	bl	24f74 <assertion_failed>
    db28:	e5963000 	ldr	r3, [r6]
    db2c:	e1a00006 	mov	r0, r6
    db30:	e5846030 	str	r6, [r4, #48]	; 0x30
    db34:	e5933018 	ldr	r3, [r3, #24]
    db38:	e12fff33 	blx	r3
    db3c:	e3500000 	cmp	r0, #0
    db40:	13a08001 	movne	r8, #1
    db44:	1affffa3 	bne	d9d8 <CUSBDevice::Initialize()+0x5ac>
    db48:	e1a00004 	mov	r0, r4
    db4c:	e1a0200b 	mov	r2, fp
    db50:	e3a01001 	mov	r1, #1
    db54:	ebfffe08 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    db58:	e5990030 	ldr	r0, [r9, #48]	; 0x30
    db5c:	e3500000 	cmp	r0, #0
    db60:	0a000002 	beq	db70 <CUSBDevice::Initialize()+0x744>
    db64:	e5903000 	ldr	r3, [r0]
    db68:	e5933004 	ldr	r3, [r3, #4]
    db6c:	e12fff33 	blx	r3
    db70:	e3a03000 	mov	r3, #0
    db74:	e5893030 	str	r3, [r9, #48]	; 0x30
    db78:	eaffff5a 	b	d8e8 <CUSBDevice::Initialize()+0x4bc>
    db7c:	e30112a0 	movw	r1, #4768	; 0x12a0
    db80:	e3401003 	movt	r1, #3
    db84:	e3010520 	movw	r0, #5408	; 0x1520
    db88:	e3400003 	movt	r0, #3
    db8c:	e300213e 	movw	r2, #318	; 0x13e
    db90:	eb005cf7 	bl	24f74 <assertion_failed>
    db94:	e1a03000 	mov	r3, r0
    db98:	e30125dc 	movw	r2, #5596	; 0x15dc
    db9c:	e3402003 	movt	r2, #3
    dba0:	e1a00004 	mov	r0, r4
    dba4:	e3a01002 	mov	r1, #2
    dba8:	e1a07003 	mov	r7, r3
    dbac:	ebfffdf2 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dbb0:	eafffe57 	b	d514 <CUSBDevice::Initialize()+0xe8>
    dbb4:	00031298 	.word	0x00031298

0000dbb8 <CUSBDevice::Configure()>:
    dbb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dbbc:	e1a05000 	mov	r5, r0
    dbc0:	e5900004 	ldr	r0, [r0, #4]
    dbc4:	e3500000 	cmp	r0, #0
    dbc8:	0a00002a 	beq	dc78 <CUSBDevice::Configure()+0xc0>
    dbcc:	e5951018 	ldr	r1, [r5, #24]
    dbd0:	e3510000 	cmp	r1, #0
    dbd4:	0a00002d 	beq	dc90 <CUSBDevice::Configure()+0xd8>
    dbd8:	e5956028 	ldr	r6, [r5, #40]	; 0x28
    dbdc:	e3560000 	cmp	r6, #0
    dbe0:	0a000019 	beq	dc4c <CUSBDevice::Configure()+0x94>
    dbe4:	e5d62005 	ldrb	r2, [r6, #5]
    dbe8:	eb000f0c 	bl	11820 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    dbec:	e2506000 	subs	r6, r0, #0
    dbf0:	0a000017 	beq	dc54 <CUSBDevice::Configure()+0x9c>
    dbf4:	e3a06000 	mov	r6, #0
    dbf8:	e285402c 	add	r4, r5, #44	; 0x2c
    dbfc:	e1a07006 	mov	r7, r6
    dc00:	e2855054 	add	r5, r5, #84	; 0x54
    dc04:	e5b40004 	ldr	r0, [r4, #4]!
    dc08:	e3500000 	cmp	r0, #0
    dc0c:	0a00000c 	beq	dc44 <CUSBDevice::Configure()+0x8c>
    dc10:	e5903000 	ldr	r3, [r0]
    dc14:	e593301c 	ldr	r3, [r3, #28]
    dc18:	e12fff33 	blx	r3
    dc1c:	e3500000 	cmp	r0, #0
    dc20:	11a06000 	movne	r6, r0
    dc24:	1a000006 	bne	dc44 <CUSBDevice::Configure()+0x8c>
    dc28:	e5940000 	ldr	r0, [r4]
    dc2c:	e3500000 	cmp	r0, #0
    dc30:	0a000002 	beq	dc40 <CUSBDevice::Configure()+0x88>
    dc34:	e5903000 	ldr	r3, [r0]
    dc38:	e5933004 	ldr	r3, [r3, #4]
    dc3c:	e12fff33 	blx	r3
    dc40:	e5847000 	str	r7, [r4]
    dc44:	e1550004 	cmp	r5, r4
    dc48:	1affffed 	bne	dc04 <CUSBDevice::Configure()+0x4c>
    dc4c:	e1a00006 	mov	r0, r6
    dc50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc54:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    dc58:	e1a00005 	mov	r0, r5
    dc5c:	e3a01001 	mov	r1, #1
    dc60:	e3012634 	movw	r2, #5684	; 0x1634
    dc64:	e3402003 	movt	r2, #3
    dc68:	e5d33005 	ldrb	r3, [r3, #5]
    dc6c:	ebfffdc2 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dc70:	e1a00006 	mov	r0, r6
    dc74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    dc78:	e30112a0 	movw	r1, #4768	; 0x12a0
    dc7c:	e3401003 	movt	r1, #3
    dc80:	e3000ff4 	movw	r0, #4084	; 0xff4
    dc84:	e3400003 	movt	r0, #3
    dc88:	e30021b9 	movw	r2, #441	; 0x1b9
    dc8c:	eb005cb8 	bl	24f74 <assertion_failed>
    dc90:	e30112a0 	movw	r1, #4768	; 0x12a0
    dc94:	e3401003 	movt	r1, #3
    dc98:	e3010388 	movw	r0, #5000	; 0x1388
    dc9c:	e3400003 	movt	r0, #3
    dca0:	e30021ba 	movw	r2, #442	; 0x1ba
    dca4:	eb005cb2 	bl	24f74 <assertion_failed>

0000dca8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    dca8:	e92d4070 	push	{r4, r5, r6, lr}
    dcac:	e2506000 	subs	r6, r0, #0
    dcb0:	0a000030 	beq	dd78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xd0>
    dcb4:	e1a04001 	mov	r4, r1
    dcb8:	e3510000 	cmp	r1, #0
    dcbc:	0a000033 	beq	dd90 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xe8>
    dcc0:	e301167c 	movw	r1, #5756	; 0x167c
    dcc4:	e3401003 	movt	r1, #3
    dcc8:	e1a00004 	mov	r0, r4
    dccc:	eb006eb2 	bl	2979c <CString::Compare(char const*) const>
    dcd0:	e3500000 	cmp	r0, #0
    dcd4:	1a000015 	bne	dd30 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x88>
    dcd8:	e3a00068 	mov	r0, #104	; 0x68
    dcdc:	eb007883 	bl	2bef0 <operator new(unsigned int)>
    dce0:	e1a01006 	mov	r1, r6
    dce4:	e1a05000 	mov	r5, r0
    dce8:	eb00177c 	bl	13ae0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    dcec:	e1a00005 	mov	r0, r5
    dcf0:	eb0002e3 	bl	e884 <CUSBFunction::GetDevice() const>
    dcf4:	e1a06000 	mov	r6, r0
    dcf8:	e1a00004 	mov	r0, r4
    dcfc:	eb006e51 	bl	29648 <CString::operator char const*() const>
    dd00:	e30127a8 	movw	r2, #6056	; 0x17a8
    dd04:	e3402003 	movt	r2, #3
    dd08:	e1a03000 	mov	r3, r0
    dd0c:	e3a01003 	mov	r1, #3
    dd10:	e1a00006 	mov	r0, r6
    dd14:	ebfffd98 	bl	d37c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    dd18:	e5943000 	ldr	r3, [r4]
    dd1c:	e1a00004 	mov	r0, r4
    dd20:	e5933004 	ldr	r3, [r3, #4]
    dd24:	e12fff33 	blx	r3
    dd28:	e1a00005 	mov	r0, r5
    dd2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd30:	e3011688 	movw	r1, #5768	; 0x1688
    dd34:	e3401003 	movt	r1, #3
    dd38:	e1a00004 	mov	r0, r4
    dd3c:	eb006e96 	bl	2979c <CString::Compare(char const*) const>
    dd40:	e3500000 	cmp	r0, #0
    dd44:	0affffe3 	beq	dcd8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x30>
    dd48:	e3011694 	movw	r1, #5780	; 0x1694
    dd4c:	e3401003 	movt	r1, #3
    dd50:	e1a00004 	mov	r0, r4
    dd54:	eb006e90 	bl	2979c <CString::Compare(char const*) const>
    dd58:	e3500000 	cmp	r0, #0
    dd5c:	1a000011 	bne	dda8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x100>
    dd60:	e3a00030 	mov	r0, #48	; 0x30
    dd64:	eb007861 	bl	2bef0 <operator new(unsigned int)>
    dd68:	e1a01006 	mov	r1, r6
    dd6c:	e1a05000 	mov	r5, r0
    dd70:	eb00102e 	bl	11e30 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    dd74:	eaffffdc 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    dd78:	e3011654 	movw	r1, #5716	; 0x1654
    dd7c:	e3401003 	movt	r1, #3
    dd80:	e301066c 	movw	r0, #5740	; 0x166c
    dd84:	e3400003 	movt	r0, #3
    dd88:	e3a0202b 	mov	r2, #43	; 0x2b
    dd8c:	eb005c78 	bl	24f74 <assertion_failed>
    dd90:	e3011654 	movw	r1, #5716	; 0x1654
    dd94:	e3401003 	movt	r1, #3
    dd98:	e3010358 	movw	r0, #4952	; 0x1358
    dd9c:	e3400003 	movt	r0, #3
    dda0:	e3a0202c 	mov	r2, #44	; 0x2c
    dda4:	eb005c72 	bl	24f74 <assertion_failed>
    dda8:	e30116a0 	movw	r1, #5792	; 0x16a0
    ddac:	e3401003 	movt	r1, #3
    ddb0:	e1a00004 	mov	r0, r4
    ddb4:	eb006e78 	bl	2979c <CString::Compare(char const*) const>
    ddb8:	e3500000 	cmp	r0, #0
    ddbc:	0a00000b 	beq	ddf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x148>
    ddc0:	e30116ac 	movw	r1, #5804	; 0x16ac
    ddc4:	e3401003 	movt	r1, #3
    ddc8:	e1a00004 	mov	r0, r4
    ddcc:	eb006e72 	bl	2979c <CString::Compare(char const*) const>
    ddd0:	e3500000 	cmp	r0, #0
    ddd4:	1a00000b 	bne	de08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x160>
    ddd8:	e3a00030 	mov	r0, #48	; 0x30
    dddc:	eb007843 	bl	2bef0 <operator new(unsigned int)>
    dde0:	e1a01006 	mov	r1, r6
    dde4:	e1a05000 	mov	r5, r0
    dde8:	eb00153c 	bl	132e0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    ddec:	eaffffbe 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    ddf0:	e3a00e45 	mov	r0, #1104	; 0x450
    ddf4:	eb00783d 	bl	2bef0 <operator new(unsigned int)>
    ddf8:	e1a01006 	mov	r1, r6
    ddfc:	e1a05000 	mov	r5, r0
    de00:	eb000f2a 	bl	11ab0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    de04:	eaffffb8 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    de08:	e30116b8 	movw	r1, #5816	; 0x16b8
    de0c:	e3401003 	movt	r1, #3
    de10:	e1a00004 	mov	r0, r4
    de14:	eb006e60 	bl	2979c <CString::Compare(char const*) const>
    de18:	e3500000 	cmp	r0, #0
    de1c:	1a000006 	bne	de3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
    de20:	e3a00f4f 	mov	r0, #316	; 0x13c
    de24:	eb007831 	bl	2bef0 <operator new(unsigned int)>
    de28:	e1a01006 	mov	r1, r6
    de2c:	e3a02001 	mov	r2, #1
    de30:	e1a05000 	mov	r5, r0
    de34:	eb000692 	bl	f884 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    de38:	eaffffab 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    de3c:	e30116c4 	movw	r1, #5828	; 0x16c4
    de40:	e3401003 	movt	r1, #3
    de44:	e1a00004 	mov	r0, r4
    de48:	eb006e53 	bl	2979c <CString::Compare(char const*) const>
    de4c:	e3500000 	cmp	r0, #0
    de50:	1a000005 	bne	de6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1c4>
    de54:	e3a00f5b 	mov	r0, #364	; 0x16c
    de58:	eb007824 	bl	2bef0 <operator new(unsigned int)>
    de5c:	e1a01006 	mov	r1, r6
    de60:	e1a05000 	mov	r5, r0
    de64:	eb0003a2 	bl	ecf4 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    de68:	eaffff9f 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    de6c:	e30116d0 	movw	r1, #5840	; 0x16d0
    de70:	e3401003 	movt	r1, #3
    de74:	e1a00004 	mov	r0, r4
    de78:	eb006e47 	bl	2979c <CString::Compare(char const*) const>
    de7c:	e3500000 	cmp	r0, #0
    de80:	0a000005 	beq	de9c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1f4>
    de84:	e30116dc 	movw	r1, #5852	; 0x16dc
    de88:	e3401003 	movt	r1, #3
    de8c:	e1a00004 	mov	r0, r4
    de90:	eb006e41 	bl	2979c <CString::Compare(char const*) const>
    de94:	e3500000 	cmp	r0, #0
    de98:	1a000005 	bne	deb4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x20c>
    de9c:	e3a00f53 	mov	r0, #332	; 0x14c
    dea0:	eb007812 	bl	2bef0 <operator new(unsigned int)>
    dea4:	e1a01006 	mov	r1, r6
    dea8:	e1a05000 	mov	r5, r0
    deac:	eb0004e5 	bl	f248 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    deb0:	eaffff8d 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    deb4:	e30116e8 	movw	r1, #5864	; 0x16e8
    deb8:	e3401003 	movt	r1, #3
    debc:	e1a00004 	mov	r0, r4
    dec0:	eb006e35 	bl	2979c <CString::Compare(char const*) const>
    dec4:	e3500000 	cmp	r0, #0
    dec8:	0a000005 	beq	dee4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
    decc:	e30116f4 	movw	r1, #5876	; 0x16f4
    ded0:	e3401003 	movt	r1, #3
    ded4:	e1a00004 	mov	r0, r4
    ded8:	eb006e2f 	bl	2979c <CString::Compare(char const*) const>
    dedc:	e3500000 	cmp	r0, #0
    dee0:	1a000005 	bne	defc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x254>
    dee4:	e3a00e13 	mov	r0, #304	; 0x130
    dee8:	eb007800 	bl	2bef0 <operator new(unsigned int)>
    deec:	e1a01006 	mov	r1, r6
    def0:	e1a05000 	mov	r5, r0
    def4:	eb000a87 	bl	10918 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    def8:	eaffff7b 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    defc:	e3011700 	movw	r1, #5888	; 0x1700
    df00:	e3401003 	movt	r1, #3
    df04:	e1a00004 	mov	r0, r4
    df08:	eb006e23 	bl	2979c <CString::Compare(char const*) const>
    df0c:	e3500000 	cmp	r0, #0
    df10:	0a000005 	beq	df2c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x284>
    df14:	e301170c 	movw	r1, #5900	; 0x170c
    df18:	e3401003 	movt	r1, #3
    df1c:	e1a00004 	mov	r0, r4
    df20:	eb006e1d 	bl	2979c <CString::Compare(char const*) const>
    df24:	e3500000 	cmp	r0, #0
    df28:	1a000005 	bne	df44 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x29c>
    df2c:	e3a00f4d 	mov	r0, #308	; 0x134
    df30:	eb0077ee 	bl	2bef0 <operator new(unsigned int)>
    df34:	e1a01006 	mov	r1, r6
    df38:	e1a05000 	mov	r5, r0
    df3c:	eb000b7d 	bl	10d38 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    df40:	eaffff69 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    df44:	e3011718 	movw	r1, #5912	; 0x1718
    df48:	e3401003 	movt	r1, #3
    df4c:	e1a00004 	mov	r0, r4
    df50:	eb006e11 	bl	2979c <CString::Compare(char const*) const>
    df54:	e3500000 	cmp	r0, #0
    df58:	0afffff3 	beq	df2c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x284>
    df5c:	e3011724 	movw	r1, #5924	; 0x1724
    df60:	e3401003 	movt	r1, #3
    df64:	e1a00004 	mov	r0, r4
    df68:	eb006e0b 	bl	2979c <CString::Compare(char const*) const>
    df6c:	e3500000 	cmp	r0, #0
    df70:	0affffed 	beq	df2c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x284>
    df74:	e3011730 	movw	r1, #5936	; 0x1730
    df78:	e3401003 	movt	r1, #3
    df7c:	e1a00004 	mov	r0, r4
    df80:	eb006e05 	bl	2979c <CString::Compare(char const*) const>
    df84:	e3500000 	cmp	r0, #0
    df88:	1a000005 	bne	dfa4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2fc>
    df8c:	e3a00f4d 	mov	r0, #308	; 0x134
    df90:	eb0077d6 	bl	2bef0 <operator new(unsigned int)>
    df94:	e1a01006 	mov	r1, r6
    df98:	e1a05000 	mov	r5, r0
    df9c:	eb0008ea 	bl	1034c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    dfa0:	eaffff51 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    dfa4:	e301173c 	movw	r1, #5948	; 0x173c
    dfa8:	e3401003 	movt	r1, #3
    dfac:	e1a00004 	mov	r0, r4
    dfb0:	eb006df9 	bl	2979c <CString::Compare(char const*) const>
    dfb4:	e3500000 	cmp	r0, #0
    dfb8:	0a000005 	beq	dfd4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x32c>
    dfbc:	e3011748 	movw	r1, #5960	; 0x1748
    dfc0:	e3401003 	movt	r1, #3
    dfc4:	e1a00004 	mov	r0, r4
    dfc8:	eb006df3 	bl	2979c <CString::Compare(char const*) const>
    dfcc:	e3500000 	cmp	r0, #0
    dfd0:	1a000005 	bne	dfec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x344>
    dfd4:	e3a0001c 	mov	r0, #28
    dfd8:	eb0077c4 	bl	2bef0 <operator new(unsigned int)>
    dfdc:	e1a01006 	mov	r1, r6
    dfe0:	e1a05000 	mov	r5, r0
    dfe4:	eb001516 	bl	13444 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    dfe8:	eaffff3f 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    dfec:	e3011754 	movw	r1, #5972	; 0x1754
    dff0:	e3401003 	movt	r1, #3
    dff4:	e1a00004 	mov	r0, r4
    dff8:	eb006de7 	bl	2979c <CString::Compare(char const*) const>
    dffc:	e3500000 	cmp	r0, #0
    e000:	1a000005 	bne	e01c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x374>
    e004:	e3a00024 	mov	r0, #36	; 0x24
    e008:	eb0077b8 	bl	2bef0 <operator new(unsigned int)>
    e00c:	e1a01006 	mov	r1, r6
    e010:	e1a05000 	mov	r5, r0
    e014:	eb001d9e 	bl	15694 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    e018:	eaffff33 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e01c:	e3011760 	movw	r1, #5984	; 0x1760
    e020:	e3401003 	movt	r1, #3
    e024:	e1a00004 	mov	r0, r4
    e028:	eb006ddb 	bl	2979c <CString::Compare(char const*) const>
    e02c:	e3500000 	cmp	r0, #0
    e030:	1a000005 	bne	e04c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a4>
    e034:	e3a00024 	mov	r0, #36	; 0x24
    e038:	eb0077ac 	bl	2bef0 <operator new(unsigned int)>
    e03c:	e1a01006 	mov	r1, r6
    e040:	e1a05000 	mov	r5, r0
    e044:	eb001a17 	bl	148a8 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    e048:	eaffff27 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e04c:	e301176c 	movw	r1, #5996	; 0x176c
    e050:	e3401003 	movt	r1, #3
    e054:	e1a00004 	mov	r0, r4
    e058:	eb006dcf 	bl	2979c <CString::Compare(char const*) const>
    e05c:	e3500000 	cmp	r0, #0
    e060:	0a000005 	beq	e07c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3d4>
    e064:	e3011778 	movw	r1, #6008	; 0x1778
    e068:	e3401003 	movt	r1, #3
    e06c:	e1a00004 	mov	r0, r4
    e070:	eb006dc9 	bl	2979c <CString::Compare(char const*) const>
    e074:	e3500000 	cmp	r0, #0
    e078:	1a000005 	bne	e094 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3ec>
    e07c:	e3a00028 	mov	r0, #40	; 0x28
    e080:	eb00779a 	bl	2bef0 <operator new(unsigned int)>
    e084:	e1a01006 	mov	r1, r6
    e088:	e1a05000 	mov	r5, r0
    e08c:	eb001fc3 	bl	15fa0 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    e090:	eaffff15 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e094:	e3011784 	movw	r1, #6020	; 0x1784
    e098:	e3401003 	movt	r1, #3
    e09c:	e1a00004 	mov	r0, r4
    e0a0:	eb006dbd 	bl	2979c <CString::Compare(char const*) const>
    e0a4:	e3500000 	cmp	r0, #0
    e0a8:	1a000005 	bne	e0c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    e0ac:	e3a00028 	mov	r0, #40	; 0x28
    e0b0:	eb00778e 	bl	2bef0 <operator new(unsigned int)>
    e0b4:	e1a01006 	mov	r1, r6
    e0b8:	e1a05000 	mov	r5, r0
    e0bc:	eb00126c 	bl	12a74 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    e0c0:	eaffff09 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>
    e0c4:	e3011790 	movw	r1, #6032	; 0x1790
    e0c8:	e3401003 	movt	r1, #3
    e0cc:	e1a00004 	mov	r0, r4
    e0d0:	eb006db1 	bl	2979c <CString::Compare(char const*) const>
    e0d4:	e3500000 	cmp	r0, #0
    e0d8:	0afffff3 	beq	e0ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    e0dc:	e301179c 	movw	r1, #6044	; 0x179c
    e0e0:	e3401003 	movt	r1, #3
    e0e4:	e1a00004 	mov	r0, r4
    e0e8:	eb006dab 	bl	2979c <CString::Compare(char const*) const>
    e0ec:	e3500000 	cmp	r0, #0
    e0f0:	13a05000 	movne	r5, #0
    e0f4:	1affff07 	bne	dd18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x70>
    e0f8:	e3a00024 	mov	r0, #36	; 0x24
    e0fc:	eb00777b 	bl	2bef0 <operator new(unsigned int)>
    e100:	e1a01006 	mov	r1, r6
    e104:	e1a05000 	mov	r5, r0
    e108:	eb002186 	bl	16728 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    e10c:	eafffef6 	b	dcec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44>

0000e110 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    e110:	e3510000 	cmp	r1, #0
    e114:	e92d4010 	push	{r4, lr}
    e118:	e3a02000 	mov	r2, #0
    e11c:	e3a0e008 	mov	lr, #8
    e120:	e3a0c001 	mov	ip, #1
    e124:	e5801000 	str	r1, [r0]
    e128:	e580e008 	str	lr, [r0, #8]
    e12c:	e580c00c 	str	ip, [r0, #12]
    e130:	e5c02004 	strb	r2, [r0, #4]
    e134:	e5c02005 	strb	r2, [r0, #5]
    e138:	e5c02006 	strb	r2, [r0, #6]
    e13c:	e5c02010 	strb	r2, [r0, #16]
    e140:	18bd8010 	popne	{r4, pc}
    e144:	e30117c4 	movw	r1, #6084	; 0x17c4
    e148:	e3401003 	movt	r1, #3
    e14c:	e3010174 	movw	r0, #4468	; 0x1174
    e150:	e3400003 	movt	r0, #3
    e154:	e3a02023 	mov	r2, #35	; 0x23
    e158:	eb005b85 	bl	24f74 <assertion_failed>

0000e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    e15c:	e92d4070 	push	{r4, r5, r6, lr}
    e160:	e3510000 	cmp	r1, #0
    e164:	e3a05001 	mov	r5, #1
    e168:	e5801000 	str	r1, [r0]
    e16c:	e580500c 	str	r5, [r0, #12]
    e170:	e5c05010 	strb	r5, [r0, #16]
    e174:	0a00003e 	beq	e274 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x118>
    e178:	e3520000 	cmp	r2, #0
    e17c:	0a000042 	beq	e28c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x130>
    e180:	e5d23000 	ldrb	r3, [r2]
    e184:	e3530006 	cmp	r3, #6
    e188:	9a000045 	bls	e2a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x148>
    e18c:	e5d23001 	ldrb	r3, [r2, #1]
    e190:	e3530005 	cmp	r3, #5
    e194:	1a000048 	bne	e2bc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
    e198:	e5d23003 	ldrb	r3, [r2, #3]
    e19c:	e1a04000 	mov	r4, r0
    e1a0:	e2033003 	and	r3, r3, #3
    e1a4:	e3530002 	cmp	r3, #2
    e1a8:	0a000014 	beq	e200 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xa4>
    e1ac:	e3530003 	cmp	r3, #3
    e1b0:	1a000047 	bne	e2d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    e1b4:	e3a03002 	mov	r3, #2
    e1b8:	e5c03005 	strb	r3, [r0, #5]
    e1bc:	e5d23002 	ldrb	r3, [r2, #2]
    e1c0:	e203000f 	and	r0, r3, #15
    e1c4:	e5c40004 	strb	r0, [r4, #4]
    e1c8:	e1a033a3 	lsr	r3, r3, #7
    e1cc:	e5c43006 	strb	r3, [r4, #6]
    e1d0:	e1d230b4 	ldrh	r3, [r2, #4]
    e1d4:	e7ea3053 	ubfx	r3, r3, #0, #11
    e1d8:	e5843008 	str	r3, [r4, #8]
    e1dc:	e5d26006 	ldrb	r6, [r2, #6]
    e1e0:	e3560000 	cmp	r6, #0
    e1e4:	1a000010 	bne	e22c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd0>
    e1e8:	e1a00001 	mov	r0, r1
    e1ec:	ebfffc1a 	bl	d25c <CUSBDevice::GetSpeed() const>
    e1f0:	e3a03014 	mov	r3, #20
    e1f4:	e1a00004 	mov	r0, r4
    e1f8:	e584300c 	str	r3, [r4, #12]
    e1fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    e200:	e5c05005 	strb	r5, [r0, #5]
    e204:	e5d23002 	ldrb	r3, [r2, #2]
    e208:	e203100f 	and	r1, r3, #15
    e20c:	e5c01004 	strb	r1, [r0, #4]
    e210:	e1a033a3 	lsr	r3, r3, #7
    e214:	e5c03006 	strb	r3, [r0, #6]
    e218:	e1d230b4 	ldrh	r3, [r2, #4]
    e21c:	e7ea3053 	ubfx	r3, r3, #0, #11
    e220:	e5803008 	str	r3, [r0, #8]
    e224:	e1a00004 	mov	r0, r4
    e228:	e8bd8070 	pop	{r4, r5, r6, pc}
    e22c:	e1a00001 	mov	r0, r1
    e230:	ebfffc09 	bl	d25c <CUSBDevice::GetSpeed() const>
    e234:	e3500001 	cmp	r0, #1
    e238:	9584600c 	strls	r6, [r4, #12]
    e23c:	9a000009 	bls	e268 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    e240:	e3560010 	cmp	r6, #16
    e244:	83a03a01 	movhi	r3, #4096	; 0x1000
    e248:	8584300c 	strhi	r3, [r4, #12]
    e24c:	8afffff4 	bhi	e224 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc8>
    e250:	e2466001 	sub	r6, r6, #1
    e254:	e1a05615 	lsl	r5, r5, r6
    e258:	e1a061a5 	lsr	r6, r5, #3
    e25c:	e584600c 	str	r6, [r4, #12]
    e260:	e3560000 	cmp	r6, #0
    e264:	0affffe1 	beq	e1f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x94>
    e268:	e3560013 	cmp	r6, #19
    e26c:	8affffec 	bhi	e224 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc8>
    e270:	eaffffde 	b	e1f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x94>
    e274:	e30117c4 	movw	r1, #6084	; 0x17c4
    e278:	e3401003 	movt	r1, #3
    e27c:	e3010174 	movw	r0, #4468	; 0x1174
    e280:	e3400003 	movt	r0, #3
    e284:	e3a02032 	mov	r2, #50	; 0x32
    e288:	eb005b39 	bl	24f74 <assertion_failed>
    e28c:	e30117c4 	movw	r1, #6084	; 0x17c4
    e290:	e3401003 	movt	r1, #3
    e294:	e30107d4 	movw	r0, #6100	; 0x17d4
    e298:	e3400003 	movt	r0, #3
    e29c:	e3a02034 	mov	r2, #52	; 0x34
    e2a0:	eb005b33 	bl	24f74 <assertion_failed>
    e2a4:	e30117c4 	movw	r1, #6084	; 0x17c4
    e2a8:	e3401003 	movt	r1, #3
    e2ac:	e30107e0 	movw	r0, #6112	; 0x17e0
    e2b0:	e3400003 	movt	r0, #3
    e2b4:	e3a02035 	mov	r2, #53	; 0x35
    e2b8:	eb005b2d 	bl	24f74 <assertion_failed>
    e2bc:	e30117c4 	movw	r1, #6084	; 0x17c4
    e2c0:	e3401003 	movt	r1, #3
    e2c4:	e3010800 	movw	r0, #6144	; 0x1800
    e2c8:	e3400003 	movt	r0, #3
    e2cc:	e3a02036 	mov	r2, #54	; 0x36
    e2d0:	eb005b27 	bl	24f74 <assertion_failed>
    e2d4:	e30117c4 	movw	r1, #6084	; 0x17c4
    e2d8:	e3401003 	movt	r1, #3
    e2dc:	e3010398 	movw	r0, #5016	; 0x1398
    e2e0:	e3400003 	movt	r0, #3
    e2e4:	e3a02043 	mov	r2, #67	; 0x43
    e2e8:	eb005b21 	bl	24f74 <assertion_failed>

0000e2ec <CUSBEndpoint::~CUSBEndpoint()>:
    e2ec:	e12fff1e 	bx	lr

0000e2f0 <CUSBEndpoint::GetDevice() const>:
    e2f0:	e5900000 	ldr	r0, [r0]
    e2f4:	e3500000 	cmp	r0, #0
    e2f8:	112fff1e 	bxne	lr
    e2fc:	e30117c4 	movw	r1, #6084	; 0x17c4
    e300:	e3401003 	movt	r1, #3
    e304:	e3010174 	movw	r0, #4468	; 0x1174
    e308:	e3400003 	movt	r0, #3
    e30c:	e92d4010 	push	{r4, lr}
    e310:	e3a02086 	mov	r2, #134	; 0x86
    e314:	eb005b16 	bl	24f74 <assertion_failed>

0000e318 <CUSBEndpoint::GetNumber() const>:
    e318:	e5d00004 	ldrb	r0, [r0, #4]
    e31c:	e12fff1e 	bx	lr

0000e320 <CUSBEndpoint::GetType() const>:
    e320:	e5d00005 	ldrb	r0, [r0, #5]
    e324:	e12fff1e 	bx	lr

0000e328 <CUSBEndpoint::IsDirectionIn() const>:
    e328:	e5d00006 	ldrb	r0, [r0, #6]
    e32c:	e12fff1e 	bx	lr

0000e330 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    e330:	e5801008 	str	r1, [r0, #8]
    e334:	e3a00001 	mov	r0, #1
    e338:	e12fff1e 	bx	lr

0000e33c <CUSBEndpoint::GetMaxPacketSize() const>:
    e33c:	e5900008 	ldr	r0, [r0, #8]
    e340:	e12fff1e 	bx	lr

0000e344 <CUSBEndpoint::GetInterval() const>:
    e344:	e5d03005 	ldrb	r3, [r0, #5]
    e348:	e3530002 	cmp	r3, #2
    e34c:	1a000001 	bne	e358 <CUSBEndpoint::GetInterval() const+0x14>
    e350:	e590000c 	ldr	r0, [r0, #12]
    e354:	e12fff1e 	bx	lr
    e358:	e30117c4 	movw	r1, #6084	; 0x17c4
    e35c:	e3401003 	movt	r1, #3
    e360:	e3010830 	movw	r0, #6192	; 0x1830
    e364:	e3400003 	movt	r0, #3
    e368:	e92d4010 	push	{r4, lr}
    e36c:	e3a020ae 	mov	r2, #174	; 0xae
    e370:	eb005aff 	bl	24f74 <assertion_failed>

0000e374 <CUSBEndpoint::GetNextPID(bool)>:
    e374:	e3510000 	cmp	r1, #0
    e378:	0a000004 	beq	e390 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    e37c:	e5d03005 	ldrb	r3, [r0, #5]
    e380:	e3530000 	cmp	r3, #0
    e384:	1a000003 	bne	e398 <CUSBEndpoint::GetNextPID(bool)+0x24>
    e388:	e3a00002 	mov	r0, #2
    e38c:	e12fff1e 	bx	lr
    e390:	e5d00010 	ldrb	r0, [r0, #16]
    e394:	e12fff1e 	bx	lr
    e398:	e30117c4 	movw	r1, #6084	; 0x17c4
    e39c:	e3401003 	movt	r1, #3
    e3a0:	e3010850 	movw	r0, #6224	; 0x1850
    e3a4:	e3400003 	movt	r0, #3
    e3a8:	e92d4010 	push	{r4, lr}
    e3ac:	e3a020b7 	mov	r2, #183	; 0xb7
    e3b0:	eb005aef 	bl	24f74 <assertion_failed>

0000e3b4 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    e3b4:	e5d03005 	ldrb	r3, [r0, #5]
    e3b8:	e92d4010 	push	{r4, lr}
    e3bc:	e3530002 	cmp	r3, #2
    e3c0:	8a000014 	bhi	e418 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
    e3c4:	e3520000 	cmp	r2, #0
    e3c8:	1a000009 	bne	e3f4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x40>
    e3cc:	e5d03010 	ldrb	r3, [r0, #16]
    e3d0:	e3530001 	cmp	r3, #1
    e3d4:	0a00000a 	beq	e404 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x50>
    e3d8:	3a00000b 	bcc	e40c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x58>
    e3dc:	e3530002 	cmp	r3, #2
    e3e0:	1a000018 	bne	e448 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    e3e4:	e3110001 	tst	r1, #1
    e3e8:	13a03001 	movne	r3, #1
    e3ec:	15c03010 	strbne	r3, [r0, #16]
    e3f0:	e8bd8010 	pop	{r4, pc}
    e3f4:	e3530000 	cmp	r3, #0
    e3f8:	1a00000c 	bne	e430 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x7c>
    e3fc:	e5c03010 	strb	r3, [r0, #16]
    e400:	e8bd8010 	pop	{r4, pc}
    e404:	e3110001 	tst	r1, #1
    e408:	08bd8010 	popeq	{r4, pc}
    e40c:	e3a03002 	mov	r3, #2
    e410:	e5c03010 	strb	r3, [r0, #16]
    e414:	e8bd8010 	pop	{r4, pc}
    e418:	e30117c4 	movw	r1, #6084	; 0x17c4
    e41c:	e3401003 	movt	r1, #3
    e420:	e3010870 	movw	r0, #6256	; 0x1870
    e424:	e3400003 	movt	r0, #3
    e428:	e3a020c3 	mov	r2, #195	; 0xc3
    e42c:	eb005ad0 	bl	24f74 <assertion_failed>
    e430:	e30117c4 	movw	r1, #6084	; 0x17c4
    e434:	e3401003 	movt	r1, #3
    e438:	e3010850 	movw	r0, #6224	; 0x1850
    e43c:	e3400003 	movt	r0, #3
    e440:	e3a020e2 	mov	r2, #226	; 0xe2
    e444:	eb005aca 	bl	24f74 <assertion_failed>
    e448:	e30117c4 	movw	r1, #6084	; 0x17c4
    e44c:	e3401003 	movt	r1, #3
    e450:	e3010398 	movw	r0, #5016	; 0x1398
    e454:	e3400003 	movt	r0, #3
    e458:	e3a020dc 	mov	r2, #220	; 0xdc
    e45c:	eb005ac4 	bl	24f74 <assertion_failed>

0000e460 <CUSBEndpoint::ResetPID()>:
    e460:	e5d03005 	ldrb	r3, [r0, #5]
    e464:	e3530001 	cmp	r3, #1
    e468:	1a000001 	bne	e474 <CUSBEndpoint::ResetPID()+0x14>
    e46c:	e5c03010 	strb	r3, [r0, #16]
    e470:	e12fff1e 	bx	lr
    e474:	e30117c4 	movw	r1, #6084	; 0x17c4
    e478:	e3401003 	movt	r1, #3
    e47c:	e30108d0 	movw	r0, #6352	; 0x18d0
    e480:	e3400003 	movt	r0, #3
    e484:	e92d4010 	push	{r4, lr}
    e488:	e3a020ed 	mov	r2, #237	; 0xed
    e48c:	eb005ab8 	bl	24f74 <assertion_failed>

0000e490 <CUSBFunction::Initialize()>:
    e490:	e3a00001 	mov	r0, #1
    e494:	e12fff1e 	bx	lr

0000e498 <CUSBFunction::ReScanDevices()>:
    e498:	e3a00000 	mov	r0, #0
    e49c:	e12fff1e 	bx	lr

0000e4a0 <CUSBFunction::~CUSBFunction()>:
    e4a0:	e92d4070 	push	{r4, r5, r6, lr}
    e4a4:	e3a03000 	mov	r3, #0
    e4a8:	e5905008 	ldr	r5, [r0, #8]
    e4ac:	e59f2040 	ldr	r2, [pc, #64]	; e4f4 <CUSBFunction::~CUSBFunction()+0x54>
    e4b0:	e1a04000 	mov	r4, r0
    e4b4:	e5802000 	str	r2, [r0]
    e4b8:	e1550003 	cmp	r5, r3
    e4bc:	e580300c 	str	r3, [r0, #12]
    e4c0:	0a000004 	beq	e4d8 <CUSBFunction::~CUSBFunction()+0x38>
    e4c4:	e1a00005 	mov	r0, r5
    e4c8:	eb0021db 	bl	16c3c <CUSBConfigurationParser::~CUSBConfigurationParser()>
    e4cc:	e1a00005 	mov	r0, r5
    e4d0:	e3a0101c 	mov	r1, #28
    e4d4:	eb007693 	bl	2bf28 <operator delete(void*, unsigned int)>
    e4d8:	e3a03000 	mov	r3, #0
    e4dc:	e1a00004 	mov	r0, r4
    e4e0:	e5843008 	str	r3, [r4, #8]
    e4e4:	e5843004 	str	r3, [r4, #4]
    e4e8:	eb005c54 	bl	25640 <CDevice::~CDevice()>
    e4ec:	e1a00004 	mov	r0, r4
    e4f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e4f4:	000318f4 	.word	0x000318f4

0000e4f8 <CUSBFunction::~CUSBFunction()>:
    e4f8:	e92d4010 	push	{r4, lr}
    e4fc:	e1a04000 	mov	r4, r0
    e500:	ebffffe6 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
    e504:	e1a00004 	mov	r0, r4
    e508:	e3a01010 	mov	r1, #16
    e50c:	eb007685 	bl	2bf28 <operator delete(void*, unsigned int)>
    e510:	e1a00004 	mov	r0, r4
    e514:	e8bd8010 	pop	{r4, pc}

0000e518 <CUSBFunction::RemoveDevice()>:
    e518:	e5900004 	ldr	r0, [r0, #4]
    e51c:	e3500000 	cmp	r0, #0
    e520:	0a000000 	beq	e528 <CUSBFunction::RemoveDevice()+0x10>
    e524:	eafffaae 	b	cfe4 <CUSBDevice::RemoveDevice()>
    e528:	e3011920 	movw	r1, #6432	; 0x1920
    e52c:	e3401003 	movt	r1, #3
    e530:	e3010174 	movw	r0, #4468	; 0x1174
    e534:	e3400003 	movt	r0, #3
    e538:	e92d4010 	push	{r4, lr}
    e53c:	e3a02066 	mov	r2, #102	; 0x66
    e540:	eb005a8b 	bl	24f74 <assertion_failed>

0000e544 <CUSBFunction::Configure()>:
    e544:	e92d4070 	push	{r4, r5, r6, lr}
    e548:	e590300c 	ldr	r3, [r0, #12]
    e54c:	e24dd010 	sub	sp, sp, #16
    e550:	e3530000 	cmp	r3, #0
    e554:	0a000026 	beq	e5f4 <CUSBFunction::Configure()+0xb0>
    e558:	e5d33003 	ldrb	r3, [r3, #3]
    e55c:	e3530000 	cmp	r3, #0
    e560:	0a000018 	beq	e5c8 <CUSBFunction::Configure()+0x84>
    e564:	e1a04000 	mov	r4, r0
    e568:	e5900004 	ldr	r0, [r0, #4]
    e56c:	e3500000 	cmp	r0, #0
    e570:	0a000025 	beq	e60c <CUSBFunction::Configure()+0xc8>
    e574:	ebfffb4c 	bl	d2ac <CUSBDevice::GetHost() const>
    e578:	e1a06000 	mov	r6, r0
    e57c:	e5940004 	ldr	r0, [r4, #4]
    e580:	e3500000 	cmp	r0, #0
    e584:	0a000026 	beq	e624 <CUSBFunction::Configure()+0xe0>
    e588:	ebfffb3d 	bl	d284 <CUSBDevice::GetEndpoint0() const>
    e58c:	e594c00c 	ldr	ip, [r4, #12]
    e590:	e3a05000 	mov	r5, #0
    e594:	e58d500c 	str	r5, [sp, #12]
    e598:	e58d5008 	str	r5, [sp, #8]
    e59c:	e1a01000 	mov	r1, r0
    e5a0:	e3a0300b 	mov	r3, #11
    e5a4:	e1a00006 	mov	r0, r6
    e5a8:	e5dc2002 	ldrb	r2, [ip, #2]
    e5ac:	e58d2004 	str	r2, [sp, #4]
    e5b0:	e3a02001 	mov	r2, #1
    e5b4:	e5dcc003 	ldrb	ip, [ip, #3]
    e5b8:	e58dc000 	str	ip, [sp]
    e5bc:	eb000c4a 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e5c0:	e1500005 	cmp	r0, r5
    e5c4:	ba000002 	blt	e5d4 <CUSBFunction::Configure()+0x90>
    e5c8:	e3a00001 	mov	r0, #1
    e5cc:	e28dd010 	add	sp, sp, #16
    e5d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5d4:	eb00600b 	bl	26608 <CLogger::Get()>
    e5d8:	e3013948 	movw	r3, #6472	; 0x1948
    e5dc:	e3403003 	movt	r3, #3
    e5e0:	e3a02001 	mov	r2, #1
    e5e4:	e59f1050 	ldr	r1, [pc, #80]	; e63c <CUSBFunction::Configure()+0xf8>
    e5e8:	eb005f47 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e5ec:	e1a00005 	mov	r0, r5
    e5f0:	eafffff5 	b	e5cc <CUSBFunction::Configure()+0x88>
    e5f4:	e3011920 	movw	r1, #6432	; 0x1920
    e5f8:	e3401003 	movt	r1, #3
    e5fc:	e3010930 	movw	r0, #6448	; 0x1930
    e600:	e3400003 	movt	r0, #3
    e604:	e3a0204e 	mov	r2, #78	; 0x4e
    e608:	eb005a59 	bl	24f74 <assertion_failed>
    e60c:	e3011920 	movw	r1, #6432	; 0x1920
    e610:	e3401003 	movt	r1, #3
    e614:	e3010174 	movw	r0, #4468	; 0x1174
    e618:	e3400003 	movt	r0, #3
    e61c:	e3a02090 	mov	r2, #144	; 0x90
    e620:	eb005a53 	bl	24f74 <assertion_failed>
    e624:	e3011920 	movw	r1, #6432	; 0x1920
    e628:	e3401003 	movt	r1, #3
    e62c:	e3010174 	movw	r0, #4468	; 0x1174
    e630:	e3400003 	movt	r0, #3
    e634:	e3a0208a 	mov	r2, #138	; 0x8a
    e638:	eb005a4d 	bl	24f74 <assertion_failed>
    e63c:	00031918 	.word	0x00031918

0000e640 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
    e640:	e92d4070 	push	{r4, r5, r6, lr}
    e644:	e1a04000 	mov	r4, r0
    e648:	e1a05001 	mov	r5, r1
    e64c:	e1a06002 	mov	r6, r2
    e650:	eb005c08 	bl	25678 <CDevice::CDevice()>
    e654:	e59f209c 	ldr	r2, [pc, #156]	; e6f8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb8>
    e658:	e3a03000 	mov	r3, #0
    e65c:	e3550000 	cmp	r5, #0
    e660:	e5845004 	str	r5, [r4, #4]
    e664:	e5842000 	str	r2, [r4]
    e668:	e5843008 	str	r3, [r4, #8]
    e66c:	e584300c 	str	r3, [r4, #12]
    e670:	0a00000e 	beq	e6b0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x70>
    e674:	e3560000 	cmp	r6, #0
    e678:	0a000012 	beq	e6c8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x88>
    e67c:	e3a0001c 	mov	r0, #28
    e680:	eb00761a 	bl	2bef0 <operator new(unsigned int)>
    e684:	e1a01006 	mov	r1, r6
    e688:	e1a05000 	mov	r5, r0
    e68c:	eb002152 	bl	16bdc <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    e690:	e5845008 	str	r5, [r4, #8]
    e694:	e1a00005 	mov	r0, r5
    e698:	eb0021a5 	bl	16d34 <CUSBConfigurationParser::GetCurrentDescriptor()>
    e69c:	e3500000 	cmp	r0, #0
    e6a0:	e584000c 	str	r0, [r4, #12]
    e6a4:	0a00000d 	beq	e6e0 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    e6a8:	e1a00004 	mov	r0, r4
    e6ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    e6b0:	e3011920 	movw	r1, #6432	; 0x1920
    e6b4:	e3401003 	movt	r1, #3
    e6b8:	e3010174 	movw	r0, #4468	; 0x1174
    e6bc:	e3400003 	movt	r0, #3
    e6c0:	e3a02022 	mov	r2, #34	; 0x22
    e6c4:	eb005a2a 	bl	24f74 <assertion_failed>
    e6c8:	e3011920 	movw	r1, #6432	; 0x1920
    e6cc:	e3401003 	movt	r1, #3
    e6d0:	e3010960 	movw	r0, #6496	; 0x1960
    e6d4:	e3400003 	movt	r0, #3
    e6d8:	e3a02024 	mov	r2, #36	; 0x24
    e6dc:	eb005a24 	bl	24f74 <assertion_failed>
    e6e0:	e3011920 	movw	r1, #6432	; 0x1920
    e6e4:	e3401003 	movt	r1, #3
    e6e8:	e3010930 	movw	r0, #6448	; 0x1930
    e6ec:	e3400003 	movt	r0, #3
    e6f0:	e3a02029 	mov	r2, #41	; 0x29
    e6f4:	eb005a1e 	bl	24f74 <assertion_failed>
    e6f8:	000318f4 	.word	0x000318f4

0000e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>:
    e6fc:	e92d4070 	push	{r4, r5, r6, lr}
    e700:	e1a04000 	mov	r4, r0
    e704:	e1a05001 	mov	r5, r1
    e708:	eb005bda 	bl	25678 <CDevice::CDevice()>
    e70c:	e59f20c4 	ldr	r2, [pc, #196]	; e7d8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xdc>
    e710:	e3a03000 	mov	r3, #0
    e714:	e3550000 	cmp	r5, #0
    e718:	e1c420f0 	strd	r2, [r4]
    e71c:	e5843008 	str	r3, [r4, #8]
    e720:	e584300c 	str	r3, [r4, #12]
    e724:	0a000013 	beq	e778 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
    e728:	e5953004 	ldr	r3, [r5, #4]
    e72c:	e5843004 	str	r3, [r4, #4]
    e730:	e3530000 	cmp	r3, #0
    e734:	0a000015 	beq	e790 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x94>
    e738:	e5953008 	ldr	r3, [r5, #8]
    e73c:	e3530000 	cmp	r3, #0
    e740:	0a000018 	beq	e7a8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xac>
    e744:	e3a0001c 	mov	r0, #28
    e748:	eb0075e8 	bl	2bef0 <operator new(unsigned int)>
    e74c:	e5951008 	ldr	r1, [r5, #8]
    e750:	e1a06000 	mov	r6, r0
    e754:	eb002120 	bl	16bdc <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    e758:	e5846008 	str	r6, [r4, #8]
    e75c:	e1a00006 	mov	r0, r6
    e760:	eb002173 	bl	16d34 <CUSBConfigurationParser::GetCurrentDescriptor()>
    e764:	e3500000 	cmp	r0, #0
    e768:	e584000c 	str	r0, [r4, #12]
    e76c:	0a000013 	beq	e7c0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
    e770:	e1a00004 	mov	r0, r4
    e774:	e8bd8070 	pop	{r4, r5, r6, pc}
    e778:	e3011920 	movw	r1, #6432	; 0x1920
    e77c:	e3401003 	movt	r1, #3
    e780:	e3010974 	movw	r0, #6516	; 0x1974
    e784:	e3400003 	movt	r0, #3
    e788:	e3a02031 	mov	r2, #49	; 0x31
    e78c:	eb0059f8 	bl	24f74 <assertion_failed>
    e790:	e3011920 	movw	r1, #6432	; 0x1920
    e794:	e3401003 	movt	r1, #3
    e798:	e3010174 	movw	r0, #4468	; 0x1174
    e79c:	e3400003 	movt	r0, #3
    e7a0:	e3a02033 	mov	r2, #51	; 0x33
    e7a4:	eb0059f2 	bl	24f74 <assertion_failed>
    e7a8:	e3011920 	movw	r1, #6432	; 0x1920
    e7ac:	e3401003 	movt	r1, #3
    e7b0:	e3010984 	movw	r0, #6532	; 0x1984
    e7b4:	e3400003 	movt	r0, #3
    e7b8:	e3a02035 	mov	r2, #53	; 0x35
    e7bc:	eb0059ec 	bl	24f74 <assertion_failed>
    e7c0:	e3011920 	movw	r1, #6432	; 0x1920
    e7c4:	e3401003 	movt	r1, #3
    e7c8:	e3010930 	movw	r0, #6448	; 0x1930
    e7cc:	e3400003 	movt	r0, #3
    e7d0:	e3a0203a 	mov	r2, #58	; 0x3a
    e7d4:	eb0059e6 	bl	24f74 <assertion_failed>
    e7d8:	000318f4 	.word	0x000318f4

0000e7dc <CUSBFunction::GetInterfaceName() const>:
    e7dc:	e92d4030 	push	{r4, r5, lr}
    e7e0:	e1a05000 	mov	r5, r0
    e7e4:	e3a00010 	mov	r0, #16
    e7e8:	e24dd00c 	sub	sp, sp, #12
    e7ec:	eb0075bf 	bl	2bef0 <operator new(unsigned int)>
    e7f0:	e3011350 	movw	r1, #4944	; 0x1350
    e7f4:	e3401003 	movt	r1, #3
    e7f8:	e1a04000 	mov	r4, r0
    e7fc:	eb006b80 	bl	29604 <CString::CString(char const*)>
    e800:	e595100c 	ldr	r1, [r5, #12]
    e804:	e3510000 	cmp	r1, #0
    e808:	0a000004 	beq	e820 <CUSBFunction::GetInterfaceName() const+0x44>
    e80c:	e5d12005 	ldrb	r2, [r1, #5]
    e810:	e2423001 	sub	r3, r2, #1
    e814:	e6ef3073 	uxtb	r3, r3
    e818:	e35300fd 	cmp	r3, #253	; 0xfd
    e81c:	9a000002 	bls	e82c <CUSBFunction::GetInterfaceName() const+0x50>
    e820:	e1a00004 	mov	r0, r4
    e824:	e28dd00c 	add	sp, sp, #12
    e828:	e8bd8030 	pop	{r4, r5, pc}
    e82c:	e5d10007 	ldrb	r0, [r1, #7]
    e830:	e5d13006 	ldrb	r3, [r1, #6]
    e834:	e30119a4 	movw	r1, #6564	; 0x19a4
    e838:	e3401003 	movt	r1, #3
    e83c:	e58d0000 	str	r0, [sp]
    e840:	e1a00004 	mov	r0, r4
    e844:	eb006f38 	bl	2a52c <CString::Format(char const*, ...)>
    e848:	e1a00004 	mov	r0, r4
    e84c:	e28dd00c 	add	sp, sp, #12
    e850:	e8bd8030 	pop	{r4, r5, pc}

0000e854 <CUSBFunction::GetNumEndpoints() const>:
    e854:	e590300c 	ldr	r3, [r0, #12]
    e858:	e3530000 	cmp	r3, #0
    e85c:	0a000001 	beq	e868 <CUSBFunction::GetNumEndpoints() const+0x14>
    e860:	e5d30004 	ldrb	r0, [r3, #4]
    e864:	e12fff1e 	bx	lr
    e868:	e3011920 	movw	r1, #6432	; 0x1920
    e86c:	e3401003 	movt	r1, #3
    e870:	e3010930 	movw	r0, #6448	; 0x1930
    e874:	e3400003 	movt	r0, #3
    e878:	e92d4010 	push	{r4, lr}
    e87c:	e3a0207e 	mov	r2, #126	; 0x7e
    e880:	eb0059bb 	bl	24f74 <assertion_failed>

0000e884 <CUSBFunction::GetDevice() const>:
    e884:	e5900004 	ldr	r0, [r0, #4]
    e888:	e3500000 	cmp	r0, #0
    e88c:	112fff1e 	bxne	lr
    e890:	e3011920 	movw	r1, #6432	; 0x1920
    e894:	e3401003 	movt	r1, #3
    e898:	e3010174 	movw	r0, #4468	; 0x1174
    e89c:	e3400003 	movt	r0, #3
    e8a0:	e92d4010 	push	{r4, lr}
    e8a4:	e3a02084 	mov	r2, #132	; 0x84
    e8a8:	eb0059b1 	bl	24f74 <assertion_failed>

0000e8ac <CUSBFunction::GetEndpoint0() const>:
    e8ac:	e5900004 	ldr	r0, [r0, #4]
    e8b0:	e3500000 	cmp	r0, #0
    e8b4:	0a000000 	beq	e8bc <CUSBFunction::GetEndpoint0() const+0x10>
    e8b8:	eafffa71 	b	d284 <CUSBDevice::GetEndpoint0() const>
    e8bc:	e3011920 	movw	r1, #6432	; 0x1920
    e8c0:	e3401003 	movt	r1, #3
    e8c4:	e3010174 	movw	r0, #4468	; 0x1174
    e8c8:	e3400003 	movt	r0, #3
    e8cc:	e92d4010 	push	{r4, lr}
    e8d0:	e3a0208a 	mov	r2, #138	; 0x8a
    e8d4:	eb0059a6 	bl	24f74 <assertion_failed>

0000e8d8 <CUSBFunction::GetHost() const>:
    e8d8:	e5900004 	ldr	r0, [r0, #4]
    e8dc:	e3500000 	cmp	r0, #0
    e8e0:	0a000000 	beq	e8e8 <CUSBFunction::GetHost() const+0x10>
    e8e4:	eafffa70 	b	d2ac <CUSBDevice::GetHost() const>
    e8e8:	e3011920 	movw	r1, #6432	; 0x1920
    e8ec:	e3401003 	movt	r1, #3
    e8f0:	e3010174 	movw	r0, #4468	; 0x1174
    e8f4:	e3400003 	movt	r0, #3
    e8f8:	e92d4010 	push	{r4, lr}
    e8fc:	e3a02090 	mov	r2, #144	; 0x90
    e900:	eb00599b 	bl	24f74 <assertion_failed>

0000e904 <CUSBFunction::GetDescriptor(unsigned char)>:
    e904:	e5900008 	ldr	r0, [r0, #8]
    e908:	e3500000 	cmp	r0, #0
    e90c:	0a000000 	beq	e914 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
    e910:	ea0020cc 	b	16c48 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e914:	e3011920 	movw	r1, #6432	; 0x1920
    e918:	e3401003 	movt	r1, #3
    e91c:	e30103b0 	movw	r0, #5040	; 0x13b0
    e920:	e3400003 	movt	r0, #3
    e924:	e92d4010 	push	{r4, lr}
    e928:	e3a02096 	mov	r2, #150	; 0x96
    e92c:	eb005990 	bl	24f74 <assertion_failed>

0000e930 <CUSBFunction::ConfigurationError(char const*) const>:
    e930:	e5900008 	ldr	r0, [r0, #8]
    e934:	e92d4010 	push	{r4, lr}
    e938:	e3500000 	cmp	r0, #0
    e93c:	0a000003 	beq	e950 <CUSBFunction::ConfigurationError(char const*) const+0x20>
    e940:	e3510000 	cmp	r1, #0
    e944:	0a000007 	beq	e968 <CUSBFunction::ConfigurationError(char const*) const+0x38>
    e948:	e8bd4010 	pop	{r4, lr}
    e94c:	ea00210b 	b	16d80 <CUSBConfigurationParser::Error(char const*) const>
    e950:	e3011920 	movw	r1, #6432	; 0x1920
    e954:	e3401003 	movt	r1, #3
    e958:	e30103b0 	movw	r0, #5040	; 0x13b0
    e95c:	e3400003 	movt	r0, #3
    e960:	e3a0209c 	mov	r2, #156	; 0x9c
    e964:	eb005982 	bl	24f74 <assertion_failed>
    e968:	e3011920 	movw	r1, #6432	; 0x1920
    e96c:	e3401003 	movt	r1, #3
    e970:	e30109b0 	movw	r0, #6576	; 0x19b0
    e974:	e3400003 	movt	r0, #3
    e978:	e3a0209d 	mov	r2, #157	; 0x9d
    e97c:	eb00597c 	bl	24f74 <assertion_failed>

0000e980 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
    e980:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e984:	e1a04000 	mov	r4, r0
    e988:	e590000c 	ldr	r0, [r0, #12]
    e98c:	e3500000 	cmp	r0, #0
    e990:	0a00001d 	beq	ea0c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x8c>
    e994:	e1a07003 	mov	r7, r3
    e998:	e5943008 	ldr	r3, [r4, #8]
    e99c:	e3530000 	cmp	r3, #0
    e9a0:	0a00001f 	beq	ea24 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xa4>
    e9a4:	e5943004 	ldr	r3, [r4, #4]
    e9a8:	e1a05001 	mov	r5, r1
    e9ac:	e1a06002 	mov	r6, r2
    e9b0:	e3530000 	cmp	r3, #0
    e9b4:	1a000009 	bne	e9e0 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x60>
    e9b8:	ea00001f 	b	ea3c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
    e9bc:	e3a01004 	mov	r1, #4
    e9c0:	e5940004 	ldr	r0, [r4, #4]
    e9c4:	ebfffa56 	bl	d324 <CUSBDevice::GetDescriptor(unsigned char)>
    e9c8:	e3a01004 	mov	r1, #4
    e9cc:	e5940008 	ldr	r0, [r4, #8]
    e9d0:	eb00209c 	bl	16c48 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e9d4:	e3500000 	cmp	r0, #0
    e9d8:	e584000c 	str	r0, [r4, #12]
    e9dc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    e9e0:	e5d03005 	ldrb	r3, [r0, #5]
    e9e4:	e1530005 	cmp	r3, r5
    e9e8:	1afffff3 	bne	e9bc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    e9ec:	e5d03006 	ldrb	r3, [r0, #6]
    e9f0:	e1530006 	cmp	r3, r6
    e9f4:	1afffff0 	bne	e9bc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    e9f8:	e5d03007 	ldrb	r3, [r0, #7]
    e9fc:	e1530007 	cmp	r3, r7
    ea00:	1affffed 	bne	e9bc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
    ea04:	e3a00001 	mov	r0, #1
    ea08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ea0c:	e3011920 	movw	r1, #6432	; 0x1920
    ea10:	e3401003 	movt	r1, #3
    ea14:	e3010930 	movw	r0, #6448	; 0x1930
    ea18:	e3400003 	movt	r0, #3
    ea1c:	e3a020a3 	mov	r2, #163	; 0xa3
    ea20:	eb005953 	bl	24f74 <assertion_failed>
    ea24:	e3011920 	movw	r1, #6432	; 0x1920
    ea28:	e3401003 	movt	r1, #3
    ea2c:	e30103b0 	movw	r0, #5040	; 0x13b0
    ea30:	e3400003 	movt	r0, #3
    ea34:	e3a020a4 	mov	r2, #164	; 0xa4
    ea38:	eb00594d 	bl	24f74 <assertion_failed>
    ea3c:	e3011920 	movw	r1, #6432	; 0x1920
    ea40:	e3401003 	movt	r1, #3
    ea44:	e3010174 	movw	r0, #4468	; 0x1174
    ea48:	e3400003 	movt	r0, #3
    ea4c:	e3a020a5 	mov	r2, #165	; 0xa5
    ea50:	eb005947 	bl	24f74 <assertion_failed>

0000ea54 <CUSBFunction::GetInterfaceNumber() const>:
    ea54:	e590300c 	ldr	r3, [r0, #12]
    ea58:	e3530000 	cmp	r3, #0
    ea5c:	0a000001 	beq	ea68 <CUSBFunction::GetInterfaceNumber() const+0x14>
    ea60:	e5d30002 	ldrb	r0, [r3, #2]
    ea64:	e12fff1e 	bx	lr
    ea68:	e3011920 	movw	r1, #6432	; 0x1920
    ea6c:	e3401003 	movt	r1, #3
    ea70:	e3010930 	movw	r0, #6448	; 0x1930
    ea74:	e3400003 	movt	r0, #3
    ea78:	e92d4010 	push	{r4, lr}
    ea7c:	e3a020bb 	mov	r2, #187	; 0xbb
    ea80:	eb00593b 	bl	24f74 <assertion_failed>

0000ea84 <CUSBFunction::GetInterfaceClass() const>:
    ea84:	e590300c 	ldr	r3, [r0, #12]
    ea88:	e3530000 	cmp	r3, #0
    ea8c:	0a000001 	beq	ea98 <CUSBFunction::GetInterfaceClass() const+0x14>
    ea90:	e5d30005 	ldrb	r0, [r3, #5]
    ea94:	e12fff1e 	bx	lr
    ea98:	e3011920 	movw	r1, #6432	; 0x1920
    ea9c:	e3401003 	movt	r1, #3
    eaa0:	e3010930 	movw	r0, #6448	; 0x1930
    eaa4:	e3400003 	movt	r0, #3
    eaa8:	e92d4010 	push	{r4, lr}
    eaac:	e3a020c1 	mov	r2, #193	; 0xc1
    eab0:	eb00592f 	bl	24f74 <assertion_failed>

0000eab4 <CUSBFunction::GetInterfaceSubClass() const>:
    eab4:	e590300c 	ldr	r3, [r0, #12]
    eab8:	e3530000 	cmp	r3, #0
    eabc:	0a000001 	beq	eac8 <CUSBFunction::GetInterfaceSubClass() const+0x14>
    eac0:	e5d30006 	ldrb	r0, [r3, #6]
    eac4:	e12fff1e 	bx	lr
    eac8:	e3011920 	movw	r1, #6432	; 0x1920
    eacc:	e3401003 	movt	r1, #3
    ead0:	e3010930 	movw	r0, #6448	; 0x1930
    ead4:	e3400003 	movt	r0, #3
    ead8:	e92d4010 	push	{r4, lr}
    eadc:	e3a020c7 	mov	r2, #199	; 0xc7
    eae0:	eb005923 	bl	24f74 <assertion_failed>

0000eae4 <CUSBFunction::GetInterfaceProtocol() const>:
    eae4:	e590300c 	ldr	r3, [r0, #12]
    eae8:	e3530000 	cmp	r3, #0
    eaec:	0a000001 	beq	eaf8 <CUSBFunction::GetInterfaceProtocol() const+0x14>
    eaf0:	e5d30007 	ldrb	r0, [r3, #7]
    eaf4:	e12fff1e 	bx	lr
    eaf8:	e3011920 	movw	r1, #6432	; 0x1920
    eafc:	e3401003 	movt	r1, #3
    eb00:	e3010930 	movw	r0, #6448	; 0x1930
    eb04:	e3400003 	movt	r0, #3
    eb08:	e92d4010 	push	{r4, lr}
    eb0c:	e3a020cd 	mov	r2, #205	; 0xcd
    eb10:	eb005917 	bl	24f74 <assertion_failed>

0000eb14 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    eb14:	e59f3014 	ldr	r3, [pc, #20]	; eb30 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
    eb18:	e92d4010 	push	{r4, lr}
    eb1c:	e1a04000 	mov	r4, r0
    eb20:	e5803000 	str	r3, [r0]
    eb24:	eb00033f 	bl	f828 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    eb28:	e1a00004 	mov	r0, r4
    eb2c:	e8bd8010 	pop	{r4, pc}
    eb30:	000319c8 	.word	0x000319c8

0000eb34 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    eb34:	e59f3020 	ldr	r3, [pc, #32]	; eb5c <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
    eb38:	e92d4010 	push	{r4, lr}
    eb3c:	e1a04000 	mov	r4, r0
    eb40:	e5803000 	str	r3, [r0]
    eb44:	eb000337 	bl	f828 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    eb48:	e1a00004 	mov	r0, r4
    eb4c:	e3a01f5b 	mov	r1, #364	; 0x16c
    eb50:	eb0074f4 	bl	2bf28 <operator delete(void*, unsigned int)>
    eb54:	e1a00004 	mov	r0, r4
    eb58:	e8bd8010 	pop	{r4, pc}
    eb5c:	000319c8 	.word	0x000319c8

0000eb60 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
    eb60:	e92d4070 	push	{r4, r5, r6, lr}
    eb64:	e1a04000 	mov	r4, r0
    eb68:	e1a05001 	mov	r5, r1
    eb6c:	e24dd040 	sub	sp, sp, #64	; 0x40
    eb70:	e2841f4f 	add	r1, r4, #316	; 0x13c
    eb74:	e28d0010 	add	r0, sp, #16
    eb78:	e3a02030 	mov	r2, #48	; 0x30
    eb7c:	eb0073d1 	bl	2bac8 <memcpy>
    eb80:	e3550001 	cmp	r5, #1
    eb84:	0a000027 	beq	ec28 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc8>
    eb88:	3a000020 	bcc	ec10 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb0>
    eb8c:	e3550002 	cmp	r5, #2
    eb90:	1a00002c 	bne	ec48 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xe8>
    eb94:	e3e03001 	mvn	r3, #1
    eb98:	e3a01000 	mov	r1, #0
    eb9c:	e3e02000 	mvn	r2, #0
    eba0:	e5cd3011 	strb	r3, [sp, #17]
    eba4:	e5cd3013 	strb	r3, [sp, #19]
    eba8:	e5cd1012 	strb	r1, [sp, #18]
    ebac:	e5cd2014 	strb	r2, [sp, #20]
    ebb0:	e1a00004 	mov	r0, r4
    ebb4:	ebffff47 	bl	e8d8 <CUSBFunction::GetHost() const>
    ebb8:	e1a05000 	mov	r5, r0
    ebbc:	e1a00004 	mov	r0, r4
    ebc0:	ebffff39 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
    ebc4:	e1a06000 	mov	r6, r0
    ebc8:	e1a00004 	mov	r0, r4
    ebcc:	ebffffa0 	bl	ea54 <CUSBFunction::GetInterfaceNumber() const>
    ebd0:	e28d3010 	add	r3, sp, #16
    ebd4:	e1a01006 	mov	r1, r6
    ebd8:	e6ff0070 	uxth	r0, r0
    ebdc:	e3002201 	movw	r2, #513	; 0x201
    ebe0:	e98d0009 	stmib	sp, {r0, r3}
    ebe4:	e58d2000 	str	r2, [sp]
    ebe8:	e1a00005 	mov	r0, r5
    ebec:	e3a03030 	mov	r3, #48	; 0x30
    ebf0:	e3a02021 	mov	r2, #33	; 0x21
    ebf4:	e58d300c 	str	r3, [sp, #12]
    ebf8:	e3a03009 	mov	r3, #9
    ebfc:	eb000aba 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ec00:	e1e00000 	mvn	r0, r0
    ec04:	e1a00fa0 	lsr	r0, r0, #31
    ec08:	e28dd040 	add	sp, sp, #64	; 0x40
    ec0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec10:	e3a03000 	mov	r3, #0
    ec14:	e5cd3011 	strb	r3, [sp, #17]
    ec18:	e5cd3012 	strb	r3, [sp, #18]
    ec1c:	e5cd3013 	strb	r3, [sp, #19]
    ec20:	e5cd3014 	strb	r3, [sp, #20]
    ec24:	eaffffe1 	b	ebb0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    ec28:	e3e03001 	mvn	r3, #1
    ec2c:	e3e01000 	mvn	r1, #0
    ec30:	e3a02000 	mov	r2, #0
    ec34:	e5cd3011 	strb	r3, [sp, #17]
    ec38:	e5cd3013 	strb	r3, [sp, #19]
    ec3c:	e5cd1012 	strb	r1, [sp, #18]
    ec40:	e5cd2014 	strb	r2, [sp, #20]
    ec44:	eaffffd9 	b	ebb0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    ec48:	e3011a84 	movw	r1, #6788	; 0x1a84
    ec4c:	e3401003 	movt	r1, #3
    ec50:	e3010398 	movw	r0, #5016	; 0x1398
    ec54:	e3400003 	movt	r0, #3
    ec58:	e300210e 	movw	r2, #270	; 0x10e
    ec5c:	eb0058c4 	bl	24f74 <assertion_failed>

0000ec60 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
    ec60:	e351000a 	cmp	r1, #10
    ec64:	9a000001 	bls	ec70 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
    ec68:	e3a00000 	mov	r0, #0
    ec6c:	e12fff1e 	bx	lr
    ec70:	e30139c0 	movw	r3, #6592	; 0x19c0
    ec74:	e3403003 	movt	r3, #3
    ec78:	e0831001 	add	r1, r3, r1
    ec7c:	e92d4070 	push	{r4, r5, r6, lr}
    ec80:	e1a04000 	mov	r4, r0
    ec84:	e24dd010 	sub	sp, sp, #16
    ec88:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
    ec8c:	e1a03083 	lsl	r3, r3, #1
    ec90:	e5c03145 	strb	r3, [r0, #325]	; 0x145
    ec94:	ebffff0f 	bl	e8d8 <CUSBFunction::GetHost() const>
    ec98:	e1a05000 	mov	r5, r0
    ec9c:	e1a00004 	mov	r0, r4
    eca0:	ebffff01 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
    eca4:	e1a06000 	mov	r6, r0
    eca8:	e1a00004 	mov	r0, r4
    ecac:	e2844f4f 	add	r4, r4, #316	; 0x13c
    ecb0:	ebffff67 	bl	ea54 <CUSBFunction::GetInterfaceNumber() const>
    ecb4:	e1a01006 	mov	r1, r6
    ecb8:	e6ff0070 	uxth	r0, r0
    ecbc:	e58d4008 	str	r4, [sp, #8]
    ecc0:	e58d0004 	str	r0, [sp, #4]
    ecc4:	e3a02030 	mov	r2, #48	; 0x30
    ecc8:	e1a00005 	mov	r0, r5
    eccc:	e58d200c 	str	r2, [sp, #12]
    ecd0:	e3003201 	movw	r3, #513	; 0x201
    ecd4:	e3a02021 	mov	r2, #33	; 0x21
    ecd8:	e58d3000 	str	r3, [sp]
    ecdc:	e3a03009 	mov	r3, #9
    ece0:	eb000a81 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ece4:	e1e00000 	mvn	r0, r0
    ece8:	e1a00fa0 	lsr	r0, r0, #31
    ecec:	e28dd010 	add	sp, sp, #16
    ecf0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ecf4 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
    ecf4:	e92d4070 	push	{r4, r5, r6, lr}
    ecf8:	e1a04000 	mov	r4, r0
    ecfc:	e3a02000 	mov	r2, #0
    ed00:	eb0002df 	bl	f884 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    ed04:	e30159c0 	movw	r5, #6592	; 0x19c0
    ed08:	e3405003 	movt	r5, #3
    ed0c:	e3a03000 	mov	r3, #0
    ed10:	e2852008 	add	r2, r5, #8
    ed14:	e1a00004 	mov	r0, r4
    ed18:	e5842000 	str	r2, [r4]
    ed1c:	e3a01003 	mov	r1, #3
    ed20:	e1a02003 	mov	r2, r3
    ed24:	ebffff15 	bl	e980 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    ed28:	e2851058 	add	r1, r5, #88	; 0x58
    ed2c:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
    ed30:	e3a02030 	mov	r2, #48	; 0x30
    ed34:	e2840f4f 	add	r0, r4, #316	; 0x13c
    ed38:	eb007362 	bl	2bac8 <memcpy>
    ed3c:	e1a00004 	mov	r0, r4
    ed40:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ed44 <CUSBGamePadPS3Device::PS3Enable()>:
    ed44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ed48:	e1a04000 	mov	r4, r0
    ed4c:	e3003c42 	movw	r3, #3138	; 0xc42
    ed50:	e24dd01c 	sub	sp, sp, #28
    ed54:	e28d5018 	add	r5, sp, #24
    ed58:	e5253004 	str	r3, [r5, #-4]!
    ed5c:	ebfffedd 	bl	e8d8 <CUSBFunction::GetHost() const>
    ed60:	e1a06000 	mov	r6, r0
    ed64:	e1a00004 	mov	r0, r4
    ed68:	ebfffecf 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
    ed6c:	e1a07000 	mov	r7, r0
    ed70:	e1a00004 	mov	r0, r4
    ed74:	ebffff36 	bl	ea54 <CUSBFunction::GetInterfaceNumber() const>
    ed78:	e3a03004 	mov	r3, #4
    ed7c:	e6ff0070 	uxth	r0, r0
    ed80:	e3a02ffd 	mov	r2, #1012	; 0x3f4
    ed84:	e58d0004 	str	r0, [sp, #4]
    ed88:	e1a01007 	mov	r1, r7
    ed8c:	e58d300c 	str	r3, [sp, #12]
    ed90:	e1a00006 	mov	r0, r6
    ed94:	e58d2000 	str	r2, [sp]
    ed98:	e3a03009 	mov	r3, #9
    ed9c:	e58d5008 	str	r5, [sp, #8]
    eda0:	e3a02021 	mov	r2, #33	; 0x21
    eda4:	eb000a50 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    eda8:	e3500000 	cmp	r0, #0
    edac:	b3a00000 	movlt	r0, #0
    edb0:	ba000004 	blt	edc8 <CUSBGamePadPS3Device::PS3Enable()+0x84>
    edb4:	e5943000 	ldr	r3, [r4]
    edb8:	e1a00004 	mov	r0, r4
    edbc:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
    edc0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    edc4:	e12fff33 	blx	r3
    edc8:	e28dd01c 	add	sp, sp, #28
    edcc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000edd0 <CUSBGamePadPS3Device::Configure()>:
    edd0:	e92d4030 	push	{r4, r5, lr}
    edd4:	e5d0313a 	ldrb	r3, [r0, #314]	; 0x13a
    edd8:	e24dd00c 	sub	sp, sp, #12
    eddc:	e3530000 	cmp	r3, #0
    ede0:	0a00001e 	beq	ee60 <CUSBGamePadPS3Device::Configure()+0x90>
    ede4:	e1a04000 	mov	r4, r0
    ede8:	eb000405 	bl	fe04 <CUSBGamePadStandardDevice::Configure()>
    edec:	e3500000 	cmp	r0, #0
    edf0:	0a00001f 	beq	ee74 <CUSBGamePadPS3Device::Configure()+0xa4>
    edf4:	e2845f4a 	add	r5, r4, #296	; 0x128
    edf8:	e1d530b0 	ldrh	r3, [r5]
    edfc:	e2433031 	sub	r3, r3, #49	; 0x31
    ee00:	e3530001 	cmp	r3, #1
    ee04:	8a00002c 	bhi	eebc <CUSBGamePadPS3Device::Configure()+0xec>
    ee08:	e1a03004 	mov	r3, r4
    ee0c:	e28400c0 	add	r0, r4, #192	; 0xc0
    ee10:	e3a02000 	mov	r2, #0
    ee14:	e3a010ff 	mov	r1, #255	; 0xff
    ee18:	e3a0c013 	mov	ip, #19
    ee1c:	e584c104 	str	ip, [r4, #260]	; 0x104
    ee20:	e3a0c010 	mov	ip, #16
    ee24:	e584c024 	str	ip, [r4, #36]	; 0x24
    ee28:	e583202c 	str	r2, [r3, #44]	; 0x2c
    ee2c:	e283300c 	add	r3, r3, #12
    ee30:	e5831024 	str	r1, [r3, #36]	; 0x24
    ee34:	e1530000 	cmp	r3, r0
    ee38:	1afffffa 	bne	ee28 <CUSBGamePadPS3Device::Configure()+0x58>
    ee3c:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    ee40:	e1a00004 	mov	r0, r4
    ee44:	ebffffbe 	bl	ed44 <CUSBGamePadPS3Device::PS3Enable()>
    ee48:	e3500000 	cmp	r0, #0
    ee4c:	0a000011 	beq	ee98 <CUSBGamePadPS3Device::Configure()+0xc8>
    ee50:	e1a00004 	mov	r0, r4
    ee54:	e28dd00c 	add	sp, sp, #12
    ee58:	e8bd4030 	pop	{r4, r5, lr}
    ee5c:	ea000991 	b	114a8 <CUSBHIDDevice::StartRequest()>
    ee60:	e59f1080 	ldr	r1, [pc, #128]	; eee8 <CUSBGamePadPS3Device::Configure()+0x118>
    ee64:	ebfffeb1 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
    ee68:	e3a00000 	mov	r0, #0
    ee6c:	e28dd00c 	add	sp, sp, #12
    ee70:	e8bd8030 	pop	{r4, r5, pc}
    ee74:	eb005de3 	bl	26608 <CLogger::Get()>
    ee78:	e3a02001 	mov	r2, #1
    ee7c:	e59f1064 	ldr	r1, [pc, #100]	; eee8 <CUSBGamePadPS3Device::Configure()+0x118>
    ee80:	e3013a98 	movw	r3, #6808	; 0x1a98
    ee84:	e3403003 	movt	r3, #3
    ee88:	eb005d1f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ee8c:	e3a00000 	mov	r0, #0
    ee90:	e28dd00c 	add	sp, sp, #12
    ee94:	e8bd8030 	pop	{r4, r5, pc}
    ee98:	eb005dda 	bl	26608 <CLogger::Get()>
    ee9c:	e3a02001 	mov	r2, #1
    eea0:	e59f1040 	ldr	r1, [pc, #64]	; eee8 <CUSBGamePadPS3Device::Configure()+0x118>
    eea4:	e3013ad4 	movw	r3, #6868	; 0x1ad4
    eea8:	e3403003 	movt	r3, #3
    eeac:	eb005d16 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eeb0:	e3a00000 	mov	r0, #0
    eeb4:	e28dd00c 	add	sp, sp, #12
    eeb8:	e8bd8030 	pop	{r4, r5, pc}
    eebc:	eb005dd1 	bl	26608 <CLogger::Get()>
    eec0:	e1d530b0 	ldrh	r3, [r5]
    eec4:	e58d3000 	str	r3, [sp]
    eec8:	e3a02001 	mov	r2, #1
    eecc:	e59f1014 	ldr	r1, [pc, #20]	; eee8 <CUSBGamePadPS3Device::Configure()+0x118>
    eed0:	e3013ab8 	movw	r3, #6840	; 0x1ab8
    eed4:	e3403003 	movt	r3, #3
    eed8:	eb005d0b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eedc:	e3a00000 	mov	r0, #0
    eee0:	e28dd00c 	add	sp, sp, #12
    eee4:	e8bd8030 	pop	{r4, r5, pc}
    eee8:	00031a48 	.word	0x00031a48

0000eeec <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
    eeec:	e2803f4a 	add	r3, r0, #296	; 0x128
    eef0:	e92d4070 	push	{r4, r5, r6, lr}
    eef4:	e1a0c000 	mov	ip, r0
    eef8:	e1a0e001 	mov	lr, r1
    eefc:	e1d330b0 	ldrh	r3, [r3]
    ef00:	e3530031 	cmp	r3, #49	; 0x31
    ef04:	0a00000a 	beq	ef34 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x48>
    ef08:	e3530032 	cmp	r3, #50	; 0x32
    ef0c:	0a000007 	beq	ef30 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
    ef10:	e3530000 	cmp	r3, #0
    ef14:	0a00003c 	beq	f00c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x120>
    ef18:	e3011a84 	movw	r1, #6788	; 0x1a84
    ef1c:	e3401003 	movt	r1, #3
    ef20:	e3010398 	movw	r0, #5016	; 0x1398
    ef24:	e3400003 	movt	r0, #3
    ef28:	e3a02092 	mov	r2, #146	; 0x92
    ef2c:	eb005810 	bl	24f74 <assertion_failed>
    ef30:	e281e001 	add	lr, r1, #1
    ef34:	e35e0000 	cmp	lr, #0
    ef38:	0a000035 	beq	f014 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x128>
    ef3c:	e59e4002 	ldr	r4, [lr, #2]
    ef40:	e30057f8 	movw	r5, #2040	; 0x7f8
    ef44:	e3a01b3e 	mov	r1, #63488	; 0xf800
    ef48:	e3401007 	movt	r1, #7
    ef4c:	e59f00d8 	ldr	r0, [pc, #216]	; f02c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x140>
    ef50:	e28e200d 	add	r2, lr, #13
    ef54:	e00552a4 	and	r5, r5, r4, lsr #5
    ef58:	e7e23854 	ubfx	r3, r4, #16, #3
    ef5c:	e0011584 	and	r1, r1, r4, lsl #11
    ef60:	e1833005 	orr	r3, r3, r5
    ef64:	e1833001 	orr	r3, r3, r1
    ef68:	e58c3108 	str	r3, [ip, #264]	; 0x108
    ef6c:	e28e5019 	add	r5, lr, #25
    ef70:	e3a03006 	mov	r3, #6
    ef74:	e5de1006 	ldrb	r1, [lr, #6]
    ef78:	e3a0400c 	mov	r4, #12
    ef7c:	e58c1028 	str	r1, [ip, #40]	; 0x28
    ef80:	e5de1007 	ldrb	r1, [lr, #7]
    ef84:	e58c1034 	str	r1, [ip, #52]	; 0x34
    ef88:	e5de1008 	ldrb	r1, [lr, #8]
    ef8c:	e58c1040 	str	r1, [ip, #64]	; 0x40
    ef90:	e5de1009 	ldrb	r1, [lr, #9]
    ef94:	e58c104c 	str	r1, [ip, #76]	; 0x4c
    ef98:	ea000000 	b	efa0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb4>
    ef9c:	e5b03004 	ldr	r3, [r0, #4]!
    efa0:	e023c394 	mla	r3, r4, r3, ip
    efa4:	e5f21001 	ldrb	r1, [r2, #1]!
    efa8:	e1520005 	cmp	r2, r5
    efac:	e5831028 	str	r1, [r3, #40]	; 0x28
    efb0:	1afffff9 	bne	ef9c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb0>
    efb4:	e1de32b9 	ldrh	r3, [lr, #41]	; 0x29
    efb8:	e30021ff 	movw	r2, #511	; 0x1ff
    efbc:	e6bf3fb3 	rev16	r3, r3
    efc0:	e6ff3073 	uxth	r3, r3
    efc4:	e0423003 	sub	r3, r2, r3
    efc8:	e58c310c 	str	r3, [ip, #268]	; 0x10c
    efcc:	e1de32bb 	ldrh	r3, [lr, #43]	; 0x2b
    efd0:	e6bf3fb3 	rev16	r3, r3
    efd4:	e6ff3073 	uxth	r3, r3
    efd8:	e0423003 	sub	r3, r2, r3
    efdc:	e58c3110 	str	r3, [ip, #272]	; 0x110
    efe0:	e1de32bd 	ldrh	r3, [lr, #45]	; 0x2d
    efe4:	e6bf3fb3 	rev16	r3, r3
    efe8:	e6ff3073 	uxth	r3, r3
    efec:	e0422003 	sub	r2, r2, r3
    eff0:	e58c2114 	str	r2, [ip, #276]	; 0x114
    eff4:	e1de32bf 	ldrh	r3, [lr, #47]	; 0x2f
    eff8:	e6bf3fb3 	rev16	r3, r3
    effc:	e6ff3073 	uxth	r3, r3
    f000:	e2433006 	sub	r3, r3, #6
    f004:	e58c3120 	str	r3, [ip, #288]	; 0x120
    f008:	e8bd8070 	pop	{r4, r5, r6, pc}
    f00c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f010:	ea00026f 	b	f9d4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
    f014:	e3011a84 	movw	r1, #6788	; 0x1a84
    f018:	e3401003 	movt	r1, #3
    f01c:	e3010af4 	movw	r0, #6900	; 0x1af4
    f020:	e3400003 	movt	r0, #3
    f024:	e3a02097 	mov	r2, #151	; 0x97
    f028:	eb0057d1 	bl	24f74 <assertion_failed>
    f02c:	00031a54 	.word	0x00031a54

0000f030 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
    f030:	e3a00000 	mov	r0, #0
    f034:	e12fff1e 	bx	lr

0000f038 <CUSBGamePadPS3Device::GetProperties()>:
    f038:	e3a0001b 	mov	r0, #27
    f03c:	e12fff1e 	bx	lr

0000f040 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
    f040:	e5d12001 	ldrb	r2, [r1, #1]
    f044:	e3013b04 	movw	r3, #6916	; 0x1b04
    f048:	e3403003 	movt	r3, #3
    f04c:	e5802028 	str	r2, [r0, #40]	; 0x28
    f050:	e5d12002 	ldrb	r2, [r1, #2]
    f054:	e5802034 	str	r2, [r0, #52]	; 0x34
    f058:	e5d12003 	ldrb	r2, [r1, #3]
    f05c:	e5802040 	str	r2, [r0, #64]	; 0x40
    f060:	e5d12004 	ldrb	r2, [r1, #4]
    f064:	e580204c 	str	r2, [r0, #76]	; 0x4c
    f068:	e5d12008 	ldrb	r2, [r1, #8]
    f06c:	e5802058 	str	r2, [r0, #88]	; 0x58
    f070:	e5d12009 	ldrb	r2, [r1, #9]
    f074:	e5802064 	str	r2, [r0, #100]	; 0x64
    f078:	e5d12005 	ldrb	r2, [r1, #5]
    f07c:	e202200f 	and	r2, r2, #15
    f080:	e58020ec 	str	r2, [r0, #236]	; 0xec
    f084:	e5d12005 	ldrb	r2, [r1, #5]
    f088:	e202200f 	and	r2, r2, #15
    f08c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
    f090:	e5802108 	str	r2, [r0, #264]	; 0x108
    f094:	e5d13005 	ldrb	r3, [r1, #5]
    f098:	e3130080 	tst	r3, #128	; 0x80
    f09c:	13822080 	orrne	r2, r2, #128	; 0x80
    f0a0:	15802108 	strne	r2, [r0, #264]	; 0x108
    f0a4:	15d13005 	ldrbne	r3, [r1, #5]
    f0a8:	e3130040 	tst	r3, #64	; 0x40
    f0ac:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f0b0:	13833c01 	orrne	r3, r3, #256	; 0x100
    f0b4:	15803108 	strne	r3, [r0, #264]	; 0x108
    f0b8:	15d13005 	ldrbne	r3, [r1, #5]
    f0bc:	e3130020 	tst	r3, #32
    f0c0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f0c4:	13833c02 	orrne	r3, r3, #512	; 0x200
    f0c8:	15803108 	strne	r3, [r0, #264]	; 0x108
    f0cc:	15d13005 	ldrbne	r3, [r1, #5]
    f0d0:	e3130010 	tst	r3, #16
    f0d4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f0d8:	13833b01 	orrne	r3, r3, #1024	; 0x400
    f0dc:	15803108 	strne	r3, [r0, #264]	; 0x108
    f0e0:	e5d13006 	ldrb	r3, [r1, #6]
    f0e4:	e3130080 	tst	r3, #128	; 0x80
    f0e8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f0ec:	13833a02 	orrne	r3, r3, #8192	; 0x2000
    f0f0:	15803108 	strne	r3, [r0, #264]	; 0x108
    f0f4:	15d13006 	ldrbne	r3, [r1, #6]
    f0f8:	e3130040 	tst	r3, #64	; 0x40
    f0fc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f100:	13833a01 	orrne	r3, r3, #4096	; 0x1000
    f104:	15803108 	strne	r3, [r0, #264]	; 0x108
    f108:	15d13006 	ldrbne	r3, [r1, #6]
    f10c:	e3130020 	tst	r3, #32
    f110:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f114:	13833901 	orrne	r3, r3, #16384	; 0x4000
    f118:	15803108 	strne	r3, [r0, #264]	; 0x108
    f11c:	15d13006 	ldrbne	r3, [r1, #6]
    f120:	e3130010 	tst	r3, #16
    f124:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f128:	13833b02 	orrne	r3, r3, #2048	; 0x800
    f12c:	15803108 	strne	r3, [r0, #264]	; 0x108
    f130:	15d13006 	ldrbne	r3, [r1, #6]
    f134:	e3130008 	tst	r3, #8
    f138:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f13c:	13833010 	orrne	r3, r3, #16
    f140:	15803108 	strne	r3, [r0, #264]	; 0x108
    f144:	15d13006 	ldrbne	r3, [r1, #6]
    f148:	e3130004 	tst	r3, #4
    f14c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f150:	13833008 	orrne	r3, r3, #8
    f154:	15803108 	strne	r3, [r0, #264]	; 0x108
    f158:	15d13006 	ldrbne	r3, [r1, #6]
    f15c:	e3130002 	tst	r3, #2
    f160:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f164:	13833040 	orrne	r3, r3, #64	; 0x40
    f168:	15803108 	strne	r3, [r0, #264]	; 0x108
    f16c:	15d13006 	ldrbne	r3, [r1, #6]
    f170:	e3130001 	tst	r3, #1
    f174:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f178:	13833020 	orrne	r3, r3, #32
    f17c:	15803108 	strne	r3, [r0, #264]	; 0x108
    f180:	e5d13007 	ldrb	r3, [r1, #7]
    f184:	e3130002 	tst	r3, #2
    f188:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f18c:	13833602 	orrne	r3, r3, #2097152	; 0x200000
    f190:	15803108 	strne	r3, [r0, #264]	; 0x108
    f194:	15d13007 	ldrbne	r3, [r1, #7]
    f198:	e3130001 	tst	r3, #1
    f19c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    f1a0:	13833001 	orrne	r3, r3, #1
    f1a4:	15803108 	strne	r3, [r0, #264]	; 0x108
    f1a8:	e1d131f3 	ldrsh	r3, [r1, #19]
    f1ac:	e580310c 	str	r3, [r0, #268]	; 0x10c
    f1b0:	e1d131f7 	ldrsh	r3, [r1, #23]
    f1b4:	e5803110 	str	r3, [r0, #272]	; 0x110
    f1b8:	e1d131f5 	ldrsh	r3, [r1, #21]
    f1bc:	e5803114 	str	r3, [r0, #276]	; 0x114
    f1c0:	e1d131f1 	ldrsh	r3, [r1, #17]
    f1c4:	e5803118 	str	r3, [r0, #280]	; 0x118
    f1c8:	e1d130fd 	ldrsh	r3, [r1, #13]
    f1cc:	e580311c 	str	r3, [r0, #284]	; 0x11c
    f1d0:	e1d130ff 	ldrsh	r3, [r1, #15]
    f1d4:	e5803120 	str	r3, [r0, #288]	; 0x120
    f1d8:	e12fff1e 	bx	lr

0000f1dc <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
    f1dc:	e92d4010 	push	{r4, lr}
    f1e0:	e1a04000 	mov	r4, r0
    f1e4:	e5900140 	ldr	r0, [r0, #320]	; 0x140
    f1e8:	e59f3034 	ldr	r3, [pc, #52]	; f224 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
    f1ec:	e5843000 	str	r3, [r4]
    f1f0:	e3500000 	cmp	r0, #0
    f1f4:	0a000002 	beq	f204 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
    f1f8:	e5903000 	ldr	r3, [r0]
    f1fc:	e5933004 	ldr	r3, [r3, #4]
    f200:	e12fff33 	blx	r3
    f204:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
    f208:	e3500000 	cmp	r0, #0
    f20c:	0a000000 	beq	f214 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
    f210:	eb007343 	bl	2bf24 <operator delete[](void*)>
    f214:	e1a00004 	mov	r0, r4
    f218:	eb001f59 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
    f21c:	e1a00004 	mov	r0, r4
    f220:	e8bd8010 	pop	{r4, pc}
    f224:	00031b30 	.word	0x00031b30

0000f228 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
    f228:	e92d4010 	push	{r4, lr}
    f22c:	e1a04000 	mov	r4, r0
    f230:	ebffffe9 	bl	f1dc <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
    f234:	e1a00004 	mov	r0, r4
    f238:	e3a01f53 	mov	r1, #332	; 0x14c
    f23c:	eb007339 	bl	2bf28 <operator delete(void*, unsigned int)>
    f240:	e1a00004 	mov	r0, r4
    f244:	e8bd8010 	pop	{r4, pc}

0000f248 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
    f248:	e92d4010 	push	{r4, lr}
    f24c:	e1a04000 	mov	r4, r0
    f250:	eb001f39 	bl	16f3c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    f254:	e3a03000 	mov	r3, #0
    f258:	e59f1030 	ldr	r1, [pc, #48]	; f290 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
    f25c:	e1a02003 	mov	r2, r3
    f260:	e5841000 	str	r1, [r4]
    f264:	e1a00004 	mov	r0, r4
    f268:	e3a01003 	mov	r1, #3
    f26c:	ebfffdc3 	bl	e980 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    f270:	e3a03000 	mov	r3, #0
    f274:	e5c40130 	strb	r0, [r4, #304]	; 0x130
    f278:	e1a00004 	mov	r0, r4
    f27c:	e584313c 	str	r3, [r4, #316]	; 0x13c
    f280:	e5843140 	str	r3, [r4, #320]	; 0x140
    f284:	e5c43144 	strb	r3, [r4, #324]	; 0x144
    f288:	e5c43145 	strb	r3, [r4, #325]	; 0x145
    f28c:	e8bd8010 	pop	{r4, pc}
    f290:	00031b30 	.word	0x00031b30

0000f294 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
    f294:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f298:	e1a05000 	mov	r5, r0
    f29c:	e1a06001 	mov	r6, r1
    f2a0:	e5d13007 	ldrb	r3, [r1, #7]
    f2a4:	e5d00144 	ldrb	r0, [r0, #324]	; 0x144
    f2a8:	e3130002 	tst	r3, #2
    f2ac:	1a000057 	bne	f410 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
    f2b0:	e3500000 	cmp	r0, #0
    f2b4:	1a000058 	bne	f41c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x188>
    f2b8:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
    f2bc:	e2859f51 	add	r9, r5, #324	; 0x144
    f2c0:	e2899002 	add	r9, r9, #2
    f2c4:	e3a04000 	mov	r4, #0
    f2c8:	e2473001 	sub	r3, r7, #1
    f2cc:	e1a08009 	mov	r8, r9
    f2d0:	e3530003 	cmp	r3, #3
    f2d4:	23a07001 	movcs	r7, #1
    f2d8:	ea000033 	b	f3ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x118>
    f2dc:	e5d53145 	ldrb	r3, [r5, #325]	; 0x145
    f2e0:	e3530000 	cmp	r3, #0
    f2e4:	0a000045 	beq	f400 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x16c>
    f2e8:	e5d2a005 	ldrb	sl, [r2, #5]
    f2ec:	e285cf52 	add	ip, r5, #328	; 0x148
    f2f0:	e5d2e004 	ldrb	lr, [r2, #4]
    f2f4:	e20ab00f 	and	fp, sl, #15
    f2f8:	e5d23006 	ldrb	r3, [r2, #6]
    f2fc:	e1d820b0 	ldrh	r2, [r8]
    f300:	e18ee40b 	orr	lr, lr, fp, lsl #8
    f304:	e04e2002 	sub	r2, lr, r2
    f308:	e1a03203 	lsl	r3, r3, #4
    f30c:	e352007f 	cmp	r2, #127	; 0x7f
    f310:	e1dce0b0 	ldrh	lr, [ip]
    f314:	e183322a 	orr	r3, r3, sl, lsr #4
    f318:	a3a0207f 	movge	r2, #127	; 0x7f
    f31c:	e043300e 	sub	r3, r3, lr
    f320:	e3e0a07e 	mvn	sl, #126	; 0x7e
    f324:	e152000a 	cmp	r2, sl
    f328:	e1a0e008 	mov	lr, r8
    f32c:	b1a0200a 	movlt	r2, sl
    f330:	e353007f 	cmp	r3, #127	; 0x7f
    f334:	a3a0307f 	movge	r3, #127	; 0x7f
    f338:	e153000a 	cmp	r3, sl
    f33c:	b1a0300a 	movlt	r3, sl
    f340:	e192a003 	orrs	sl, r2, r3
    f344:	13800001 	orrne	r0, r0, #1
    f348:	e0811004 	add	r1, r1, r4
    f34c:	e3a0a001 	mov	sl, #1
    f350:	e0861001 	add	r1, r6, r1
    f354:	e5c5a145 	strb	sl, [r5, #325]	; 0x145
    f358:	e3500000 	cmp	r0, #0
    f35c:	e5d1a025 	ldrb	sl, [r1, #37]	; 0x25
    f360:	e5d10024 	ldrb	r0, [r1, #36]	; 0x24
    f364:	e20aa00f 	and	sl, sl, #15
    f368:	e180040a 	orr	r0, r0, sl, lsl #8
    f36c:	e1ce00b0 	strh	r0, [lr]
    f370:	e5d10026 	ldrb	r0, [r1, #38]	; 0x26
    f374:	e5d1e025 	ldrb	lr, [r1, #37]	; 0x25
    f378:	e1a01200 	lsl	r1, r0, #4
    f37c:	e181122e 	orr	r1, r1, lr, lsr #4
    f380:	e1cc10b0 	strh	r1, [ip]
    f384:	0a000004 	beq	f39c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x108>
    f388:	e5950140 	ldr	r0, [r5, #320]	; 0x140
    f38c:	e3500000 	cmp	r0, #0
    f390:	0a000014 	beq	f3e8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x154>
    f394:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
    f398:	eb00224d 	bl	17cd4 <CMouseDevice::ReportHandler(unsigned int, int, int)>
    f39c:	e2844001 	add	r4, r4, #1
    f3a0:	e3a00000 	mov	r0, #0
    f3a4:	e1570004 	cmp	r7, r4
    f3a8:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3ac:	e1a01184 	lsl	r1, r4, #3
    f3b0:	e0812004 	add	r2, r1, r4
    f3b4:	e0862002 	add	r2, r6, r2
    f3b8:	e2822020 	add	r2, r2, #32
    f3bc:	e5d23003 	ldrb	r3, [r2, #3]
    f3c0:	e1b033a3 	lsrs	r3, r3, #7
    f3c4:	0affffc4 	beq	f2dc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x48>
    f3c8:	e3a03000 	mov	r3, #0
    f3cc:	e3500000 	cmp	r0, #0
    f3d0:	e5c53145 	strb	r3, [r5, #325]	; 0x145
    f3d4:	0afffff0 	beq	f39c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x108>
    f3d8:	e5950140 	ldr	r0, [r5, #320]	; 0x140
    f3dc:	e1a02003 	mov	r2, r3
    f3e0:	e3500000 	cmp	r0, #0
    f3e4:	1affffea 	bne	f394 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x100>
    f3e8:	e3011b80 	movw	r1, #7040	; 0x1b80
    f3ec:	e3401003 	movt	r1, #3
    f3f0:	e3010b94 	movw	r0, #7060	; 0x1b94
    f3f4:	e3400003 	movt	r0, #3
    f3f8:	e300215a 	movw	r2, #346	; 0x15a
    f3fc:	eb0056dc 	bl	24f74 <assertion_failed>
    f400:	e1a0e009 	mov	lr, r9
    f404:	e1a02003 	mov	r2, r3
    f408:	e285cf52 	add	ip, r5, #328	; 0x148
    f40c:	eaffffcd 	b	f348 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb4>
    f410:	e3500000 	cmp	r0, #0
    f414:	13a00000 	movne	r0, #0
    f418:	1affffa6 	bne	f2b8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
    f41c:	e7e030d3 	ubfx	r3, r3, #1, #1
    f420:	e3a00001 	mov	r0, #1
    f424:	e5c53144 	strb	r3, [r5, #324]	; 0x144
    f428:	eaffffa2 	b	f2b8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>

0000f42c <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
    f42c:	e2422040 	sub	r2, r2, #64	; 0x40
    f430:	e3510000 	cmp	r1, #0
    f434:	e16f2f12 	clz	r2, r2
    f438:	e1a022a2 	lsr	r2, r2, #5
    f43c:	03a02000 	moveq	r2, #0
    f440:	e3520000 	cmp	r2, #0
    f444:	012fff1e 	bxeq	lr
    f448:	e5903000 	ldr	r3, [r0]
    f44c:	e92d4070 	push	{r4, r5, r6, lr}
    f450:	e1a04000 	mov	r4, r0
    f454:	e1a05001 	mov	r5, r1
    f458:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    f45c:	e12fff33 	blx	r3
    f460:	e5943124 	ldr	r3, [r4, #292]	; 0x124
    f464:	e3530000 	cmp	r3, #0
    f468:	0a000003 	beq	f47c <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x50>
    f46c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
    f470:	e2841024 	add	r1, r4, #36	; 0x24
    f474:	e2400001 	sub	r0, r0, #1
    f478:	e12fff33 	blx	r3
    f47c:	e5943140 	ldr	r3, [r4, #320]	; 0x140
    f480:	e3530000 	cmp	r3, #0
    f484:	08bd8070 	popeq	{r4, r5, r6, pc}
    f488:	e1a01005 	mov	r1, r5
    f48c:	e1a00004 	mov	r0, r4
    f490:	e8bd4070 	pop	{r4, r5, r6, lr}
    f494:	eaffff7e 	b	f294 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0000f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
    f498:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f49c:	e3a03000 	mov	r3, #0
    f4a0:	e92d4010 	push	{r4, lr}
    f4a4:	e3a02020 	mov	r2, #32
    f4a8:	e5d0e131 	ldrb	lr, [r0, #305]	; 0x131
    f4ac:	e5cce003 	strb	lr, [ip, #3]
    f4b0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f4b4:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
    f4b8:	e5cce004 	strb	lr, [ip, #4]
    f4bc:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f4c0:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
    f4c4:	e5cce005 	strb	lr, [ip, #5]
    f4c8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f4cc:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
    f4d0:	e5cce006 	strb	lr, [ip, #6]
    f4d4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f4d8:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
    f4dc:	e5cce007 	strb	lr, [ip, #7]
    f4e0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f4e4:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
    f4e8:	e5cce008 	strb	lr, [ip, #8]
    f4ec:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f4f0:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
    f4f4:	e5cce009 	strb	lr, [ip, #9]
    f4f8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    f4fc:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
    f500:	e5cce00a 	strb	lr, [ip, #10]
    f504:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
    f508:	eb000758 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
    f50c:	e2504000 	subs	r4, r0, #0
    f510:	1a000005 	bne	f52c <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x94>
    f514:	eb005c3b 	bl	26608 <CLogger::Get()>
    f518:	e3013ba8 	movw	r3, #7080	; 0x1ba8
    f51c:	e3403003 	movt	r3, #3
    f520:	e3a02001 	mov	r2, #1
    f524:	e59f1008 	ldr	r1, [pc, #8]	; f534 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
    f528:	eb005b77 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f52c:	e1a00004 	mov	r0, r4
    f530:	e8bd8010 	pop	{r4, pc}
    f534:	00031b74 	.word	0x00031b74

0000f538 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
    f538:	e2411001 	sub	r1, r1, #1
    f53c:	e3510006 	cmp	r1, #6
    f540:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    f544:	ea00002f 	b	f608 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd0>
    f548:	0000f578 	.word	0x0000f578
    f54c:	0000f590 	.word	0x0000f590
    f550:	0000f5a8 	.word	0x0000f5a8
    f554:	0000f5c0 	.word	0x0000f5c0
    f558:	0000f5d8 	.word	0x0000f5d8
    f55c:	0000f5f0 	.word	0x0000f5f0
    f560:	0000f564 	.word	0x0000f564
    f564:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
    f568:	e3e03000 	mvn	r3, #0
    f56c:	e5802134 	str	r2, [r0, #308]	; 0x134
    f570:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f574:	eaffffc7 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f578:	e3a03000 	mov	r3, #0
    f57c:	e3473fff 	movt	r3, #32767	; 0x7fff
    f580:	e3e02000 	mvn	r2, #0
    f584:	e5803134 	str	r3, [r0, #308]	; 0x134
    f588:	e5c02138 	strb	r2, [r0, #312]	; 0x138
    f58c:	eaffffc1 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f590:	e3a030ff 	mov	r3, #255	; 0xff
    f594:	e3473f00 	movt	r3, #32512	; 0x7f00
    f598:	e3e02000 	mvn	r2, #0
    f59c:	e5803134 	str	r3, [r0, #308]	; 0x134
    f5a0:	e5c02138 	strb	r2, [r0, #312]	; 0x138
    f5a4:	eaffffbb 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f5a8:	e3a030ff 	mov	r3, #255	; 0xff
    f5ac:	e3473fff 	movt	r3, #32767	; 0x7fff
    f5b0:	e3e02000 	mvn	r2, #0
    f5b4:	e5803134 	str	r3, [r0, #308]	; 0x134
    f5b8:	e5c02138 	strb	r2, [r0, #312]	; 0x138
    f5bc:	eaffffb5 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f5c0:	e3a03cff 	mov	r3, #65280	; 0xff00
    f5c4:	e3473f00 	movt	r3, #32512	; 0x7f00
    f5c8:	e3e02000 	mvn	r2, #0
    f5cc:	e5803134 	str	r3, [r0, #308]	; 0x134
    f5d0:	e5c02138 	strb	r2, [r0, #312]	; 0x138
    f5d4:	eaffffaf 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f5d8:	e3a03cff 	mov	r3, #65280	; 0xff00
    f5dc:	e3473fff 	movt	r3, #32767	; 0x7fff
    f5e0:	e3e02000 	mvn	r2, #0
    f5e4:	e5803134 	str	r3, [r0, #308]	; 0x134
    f5e8:	e5c02138 	strb	r2, [r0, #312]	; 0x138
    f5ec:	eaffffa9 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f5f0:	e30f3fff 	movw	r3, #65535	; 0xffff
    f5f4:	e3473f00 	movt	r3, #32512	; 0x7f00
    f5f8:	e3e02000 	mvn	r2, #0
    f5fc:	e5803134 	str	r3, [r0, #308]	; 0x134
    f600:	e5c02138 	strb	r2, [r0, #312]	; 0x138
    f604:	eaffffa3 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f608:	e3a03000 	mov	r3, #0
    f60c:	e5803134 	str	r3, [r0, #308]	; 0x134
    f610:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f614:	eaffff9f 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000f618 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
    f618:	e92d4010 	push	{r4, lr}
    f61c:	e1a04821 	lsr	r4, r1, #16
    f620:	e1a0e421 	lsr	lr, r1, #8
    f624:	e5c04134 	strb	r4, [r0, #308]	; 0x134
    f628:	e5c01136 	strb	r1, [r0, #310]	; 0x136
    f62c:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
    f630:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    f634:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f638:	e8bd4010 	pop	{r4, lr}
    f63c:	eaffff95 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000f640 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
    f640:	e3510001 	cmp	r1, #1
    f644:	0a000011 	beq	f690 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    f648:	3a00000a 	bcc	f678 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
    f64c:	e3510002 	cmp	r1, #2
    f650:	1a000006 	bne	f670 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
    f654:	e3e0300c 	mvn	r3, #12
    f658:	e3a02000 	mov	r2, #0
    f65c:	e5c03131 	strb	r3, [r0, #305]	; 0x131
    f660:	e3e03000 	mvn	r3, #0
    f664:	e5c02133 	strb	r2, [r0, #307]	; 0x133
    f668:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    f66c:	eaffff89 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f670:	e3a00001 	mov	r0, #1
    f674:	e12fff1e 	bx	lr
    f678:	e3a03000 	mov	r3, #0
    f67c:	e3e0200f 	mvn	r2, #15
    f680:	e5c03133 	strb	r3, [r0, #307]	; 0x133
    f684:	e5c02131 	strb	r2, [r0, #305]	; 0x131
    f688:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    f68c:	eaffff81 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f690:	e3e0300c 	mvn	r3, #12
    f694:	e3e02000 	mvn	r2, #0
    f698:	e5c03131 	strb	r3, [r0, #305]	; 0x131
    f69c:	e3a03000 	mov	r3, #0
    f6a0:	e5c02133 	strb	r2, [r0, #307]	; 0x133
    f6a4:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    f6a8:	eaffff7a 	b	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000f6ac <CUSBGamePadPS4Device::DisableTouchpad()>:
    f6ac:	e3083f60 	movw	r3, #36704	; 0x8f60
    f6b0:	e3403003 	movt	r3, #3
    f6b4:	e3a02000 	mov	r2, #0
    f6b8:	e5c32000 	strb	r2, [r3]
    f6bc:	e12fff1e 	bx	lr

0000f6c0 <CUSBGamePadPS4Device::Configure()>:
    f6c0:	e5d03130 	ldrb	r3, [r0, #304]	; 0x130
    f6c4:	e92d4070 	push	{r4, r5, r6, lr}
    f6c8:	e3530000 	cmp	r3, #0
    f6cc:	0a000040 	beq	f7d4 <CUSBGamePadPS4Device::Configure()+0x114>
    f6d0:	e2803f4a 	add	r3, r0, #296	; 0x128
    f6d4:	e3a02040 	mov	r2, #64	; 0x40
    f6d8:	e1a04000 	mov	r4, r0
    f6dc:	e1c320b0 	strh	r2, [r3]
    f6e0:	eb001dea 	bl	16e90 <CUSBGamePadDevice::Configure()>
    f6e4:	e3500000 	cmp	r0, #0
    f6e8:	0a00003d 	beq	f7e4 <CUSBGamePadPS4Device::Configure()+0x124>
    f6ec:	e3083f60 	movw	r3, #36704	; 0x8f60
    f6f0:	e3403003 	movt	r3, #3
    f6f4:	e5d33000 	ldrb	r3, [r3]
    f6f8:	e3530000 	cmp	r3, #0
    f6fc:	1a000040 	bne	f804 <CUSBGamePadPS4Device::Configure()+0x144>
    f700:	e1a03004 	mov	r3, r4
    f704:	e2841048 	add	r1, r4, #72	; 0x48
    f708:	e3a05000 	mov	r5, #0
    f70c:	e3a020ff 	mov	r2, #255	; 0xff
    f710:	e3a0000e 	mov	r0, #14
    f714:	e5840104 	str	r0, [r4, #260]	; 0x104
    f718:	e3a00001 	mov	r0, #1
    f71c:	e58400e8 	str	r0, [r4, #232]	; 0xe8
    f720:	e3a00006 	mov	r0, #6
    f724:	e5840024 	str	r0, [r4, #36]	; 0x24
    f728:	e583502c 	str	r5, [r3, #44]	; 0x2c
    f72c:	e283300c 	add	r3, r3, #12
    f730:	e5832024 	str	r2, [r3, #36]	; 0x24
    f734:	e1510003 	cmp	r1, r3
    f738:	1afffffa 	bne	f728 <CUSBGamePadPS4Device::Configure()+0x68>
    f73c:	e3a00020 	mov	r0, #32
    f740:	eb0071f0 	bl	2bf08 <operator new[](unsigned int)>
    f744:	e3a02020 	mov	r2, #32
    f748:	e584013c 	str	r0, [r4, #316]	; 0x13c
    f74c:	e3a01000 	mov	r1, #0
    f750:	eb006f34 	bl	2b428 <memset>
    f754:	e594313c 	ldr	r3, [r4, #316]	; 0x13c
    f758:	e3a02005 	mov	r2, #5
    f75c:	e3a0c007 	mov	ip, #7
    f760:	e3a0e004 	mov	lr, #4
    f764:	e3e0100f 	mvn	r1, #15
    f768:	e5c32000 	strb	r2, [r3]
    f76c:	e3e03000 	mvn	r3, #0
    f770:	e3a0207f 	mov	r2, #127	; 0x7f
    f774:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
    f778:	e5c0c001 	strb	ip, [r0, #1]
    f77c:	e1a00004 	mov	r0, r4
    f780:	e594c13c 	ldr	ip, [r4, #316]	; 0x13c
    f784:	e5cce002 	strb	lr, [ip, #2]
    f788:	e5c41131 	strb	r1, [r4, #305]	; 0x131
    f78c:	e5c42137 	strb	r2, [r4, #311]	; 0x137
    f790:	e5c43134 	strb	r3, [r4, #308]	; 0x134
    f794:	e5c43135 	strb	r3, [r4, #309]	; 0x135
    f798:	e5c43136 	strb	r3, [r4, #310]	; 0x136
    f79c:	e5c43138 	strb	r3, [r4, #312]	; 0x138
    f7a0:	e5c45133 	strb	r5, [r4, #307]	; 0x133
    f7a4:	e5c45132 	strb	r5, [r4, #306]	; 0x132
    f7a8:	ebffff3a 	bl	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f7ac:	e2843f4d 	add	r3, r4, #308	; 0x134
    f7b0:	e3a000fa 	mov	r0, #250	; 0xfa
    f7b4:	e1c350b0 	strh	r5, [r3]
    f7b8:	e5c45136 	strb	r5, [r4, #310]	; 0x136
    f7bc:	eb006ed0 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
    f7c0:	e1a00004 	mov	r0, r4
    f7c4:	ebffff33 	bl	f498 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f7c8:	e1a00004 	mov	r0, r4
    f7cc:	e8bd4070 	pop	{r4, r5, r6, lr}
    f7d0:	ea000734 	b	114a8 <CUSBHIDDevice::StartRequest()>
    f7d4:	e59f1040 	ldr	r1, [pc, #64]	; f81c <CUSBGamePadPS4Device::Configure()+0x15c>
    f7d8:	ebfffc54 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
    f7dc:	e3a00000 	mov	r0, #0
    f7e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f7e4:	eb005b87 	bl	26608 <CLogger::Get()>
    f7e8:	e3a02001 	mov	r2, #1
    f7ec:	e59f1028 	ldr	r1, [pc, #40]	; f81c <CUSBGamePadPS4Device::Configure()+0x15c>
    f7f0:	e3013a98 	movw	r3, #6808	; 0x1a98
    f7f4:	e3403003 	movt	r3, #3
    f7f8:	eb005ac3 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f7fc:	e3a00000 	mov	r0, #0
    f800:	e8bd8070 	pop	{r4, r5, r6, pc}
    f804:	e3a00028 	mov	r0, #40	; 0x28
    f808:	eb0071b8 	bl	2bef0 <operator new(unsigned int)>
    f80c:	e1a05000 	mov	r5, r0
    f810:	eb0020f4 	bl	17be8 <CMouseDevice::CMouseDevice()>
    f814:	e5845140 	str	r5, [r4, #320]	; 0x140
    f818:	eaffffb8 	b	f700 <CUSBGamePadPS4Device::Configure()+0x40>
    f81c:	00031b74 	.word	0x00031b74

0000f820 <CUSBGamePadPS4Device::GetProperties()>:
    f820:	e3a0003f 	mov	r0, #63	; 0x3f
    f824:	e12fff1e 	bx	lr

0000f828 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
    f828:	e92d4010 	push	{r4, lr}
    f82c:	e1a04000 	mov	r4, r0
    f830:	e5900134 	ldr	r0, [r0, #308]	; 0x134
    f834:	e59f3024 	ldr	r3, [pc, #36]	; f860 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
    f838:	e5843000 	str	r3, [r4]
    f83c:	e3500000 	cmp	r0, #0
    f840:	0a000000 	beq	f848 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
    f844:	eb0071b6 	bl	2bf24 <operator delete[](void*)>
    f848:	e3a03000 	mov	r3, #0
    f84c:	e1a00004 	mov	r0, r4
    f850:	e5843134 	str	r3, [r4, #308]	; 0x134
    f854:	eb001dca 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
    f858:	e1a00004 	mov	r0, r4
    f85c:	e8bd8010 	pop	{r4, pc}
    f860:	00031bd0 	.word	0x00031bd0

0000f864 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
    f864:	e92d4010 	push	{r4, lr}
    f868:	e1a04000 	mov	r4, r0
    f86c:	ebffffed 	bl	f828 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    f870:	e1a00004 	mov	r0, r4
    f874:	e3a01f4f 	mov	r1, #316	; 0x13c
    f878:	eb0071aa 	bl	2bf28 <operator delete(void*, unsigned int)>
    f87c:	e1a00004 	mov	r0, r4
    f880:	e8bd8010 	pop	{r4, pc}

0000f884 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
    f884:	e92d4070 	push	{r4, r5, r6, lr}
    f888:	e1a04000 	mov	r4, r0
    f88c:	e1a05002 	mov	r5, r2
    f890:	eb001da9 	bl	16f3c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    f894:	e2841f4e 	add	r1, r4, #312	; 0x138
    f898:	e59fc018 	ldr	ip, [pc, #24]	; f8b8 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
    f89c:	e3a03000 	mov	r3, #0
    f8a0:	e5c45130 	strb	r5, [r4, #304]	; 0x130
    f8a4:	e1a00004 	mov	r0, r4
    f8a8:	e584c000 	str	ip, [r4]
    f8ac:	e5843134 	str	r3, [r4, #308]	; 0x134
    f8b0:	e1c130b0 	strh	r3, [r1]
    f8b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f8b8:	00031bd0 	.word	0x00031bd0

0000f8bc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
    f8bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8c0:	e081e002 	add	lr, r1, r2
    f8c4:	e28e8007 	add	r8, lr, #7
    f8c8:	e1a041a1 	lsr	r4, r1, #3
    f8cc:	e1a031a8 	lsr	r3, r8, #3
    f8d0:	e1540003 	cmp	r4, r3
    f8d4:	e24dd00c 	sub	sp, sp, #12
    f8d8:	23a00000 	movcs	r0, #0
    f8dc:	2a000030 	bcs	f9a4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe8>
    f8e0:	e2011007 	and	r1, r1, #7
    f8e4:	e1a09000 	mov	r9, r0
    f8e8:	e3a05001 	mov	r5, #1
    f8ec:	e0810002 	add	r0, r1, r2
    f8f0:	e24ee001 	sub	lr, lr, #1
    f8f4:	e244c001 	sub	ip, r4, #1
    f8f8:	e1a06115 	lsl	r6, r5, r1
    f8fc:	e2498001 	sub	r8, r9, #1
    f900:	e1a05015 	lsl	r5, r5, r0
    f904:	e6ef6076 	uxtb	r6, r6
    f908:	e6ef5075 	uxtb	r5, r5
    f90c:	e266a000 	rsb	sl, r6, #0
    f910:	e2450001 	sub	r0, r5, #1
    f914:	e0455006 	sub	r5, r5, r6
    f918:	e3a06000 	mov	r6, #0
    f91c:	e6ef0070 	uxtb	r0, r0
    f920:	e1a0e1ae 	lsr	lr, lr, #3
    f924:	e58d0004 	str	r0, [sp, #4]
    f928:	e6ef5075 	uxtb	r5, r5
    f92c:	e6efa07a 	uxtb	sl, sl
    f930:	e261b008 	rsb	fp, r1, #8
    f934:	e089c00c 	add	ip, r9, ip
    f938:	e0888003 	add	r8, r8, r3
    f93c:	e1a00006 	mov	r0, r6
    f940:	ea000008 	b	f968 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xac>
    f944:	e15e0003 	cmp	lr, r3
    f948:	12866008 	addne	r6, r6, #8
    f94c:	10423006 	subne	r3, r2, r6
    f950:	059d3004 	ldreq	r3, [sp, #4]
    f954:	11800317 	orrne	r0, r0, r7, lsl r3
    f958:	00077003 	andeq	r7, r7, r3
    f95c:	01800007 	orreq	r0, r0, r7
    f960:	e15c0008 	cmp	ip, r8
    f964:	0a00000e 	beq	f9a4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe8>
    f968:	e5fc7001 	ldrb	r7, [ip, #1]!
    f96c:	e15e0004 	cmp	lr, r4
    f970:	00050007 	andeq	r0, r5, r7
    f974:	01a00150 	asreq	r0, r0, r1
    f978:	0afffff8 	beq	f960 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
    f97c:	e04c3009 	sub	r3, ip, r9
    f980:	e1530004 	cmp	r3, r4
    f984:	1affffee 	bne	f944 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x88>
    f988:	e086600b 	add	r6, r6, fp
    f98c:	e00a0007 	and	r0, sl, r7
    f990:	e1a00150 	asr	r0, r0, r1
    f994:	e0423006 	sub	r3, r2, r6
    f998:	e15c0008 	cmp	ip, r8
    f99c:	e1a00310 	lsl	r0, r0, r3
    f9a0:	1afffff0 	bne	f968 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xac>
    f9a4:	e28dd00c 	add	sp, sp, #12
    f9a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f9ac <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
    f9ac:	e92d4010 	push	{r4, lr}
    f9b0:	e1a04002 	mov	r4, r2
    f9b4:	ebffffc0 	bl	f8bc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    f9b8:	e2423001 	sub	r3, r2, #1
    f9bc:	e3a02001 	mov	r2, #1
    f9c0:	e0103312 	ands	r3, r0, r2, lsl r3
    f9c4:	11a02412 	lslne	r2, r2, r4
    f9c8:	12622000 	rsbne	r2, r2, #0
    f9cc:	11800002 	orrne	r0, r0, r2
    f9d0:	e8bd8010 	pop	{r4, pc}

0000f9d4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
    f9d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9d8:	e5905134 	ldr	r5, [r0, #308]	; 0x134
    f9dc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    f9e0:	e3550000 	cmp	r5, #0
    f9e4:	0a0000a2 	beq	fc74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a0>
    f9e8:	e2803f4e 	add	r3, r0, #312	; 0x138
    f9ec:	e1a0b000 	mov	fp, r0
    f9f0:	e1d340b0 	ldrh	r4, [r3]
    f9f4:	e3540000 	cmp	r4, #0
    f9f8:	0a0000fe 	beq	fdf8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x424>
    f9fc:	e3a07000 	mov	r7, #0
    fa00:	e30392eb 	movw	r9, #13035	; 0x32eb
    fa04:	e34f98a4 	movt	r9, #63652	; 0xf8a4
    fa08:	e58d9014 	str	r9, [sp, #20]
    fa0c:	e58d9024 	str	r9, [sp, #36]	; 0x24
    fa10:	e1a06007 	mov	r6, r7
    fa14:	e58d900c 	str	r9, [sp, #12]
    fa18:	e1a0a007 	mov	sl, r7
    fa1c:	e58d701c 	str	r7, [sp, #28]
    fa20:	e1a0b001 	mov	fp, r1
    fa24:	e58d7018 	str	r7, [sp, #24]
    fa28:	e58d7004 	str	r7, [sp, #4]
    fa2c:	e58d7008 	str	r7, [sp, #8]
    fa30:	e58d9010 	str	r9, [sp, #16]
    fa34:	e58d0020 	str	r0, [sp, #32]
    fa38:	ea00000e 	b	fa78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa4>
    fa3c:	e3530034 	cmp	r3, #52	; 0x34
    fa40:	0a000065 	beq	fbdc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x208>
    fa44:	ca000039 	bgt	fb30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x15c>
    fa48:	e3530008 	cmp	r3, #8
    fa4c:	0a00005a 	beq	fbbc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
    fa50:	da000063 	ble	fbe4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x210>
    fa54:	e3530014 	cmp	r3, #20
    fa58:	058d8024 	streq	r8, [sp, #36]	; 0x24
    fa5c:	0a000003 	beq	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fa60:	e59d200c 	ldr	r2, [sp, #12]
    fa64:	e3530024 	cmp	r3, #36	; 0x24
    fa68:	01a02008 	moveq	r2, r8
    fa6c:	e58d200c 	str	r2, [sp, #12]
    fa70:	e3540000 	cmp	r4, #0
    fa74:	0a000022 	beq	fb04 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x130>
    fa78:	e1d530d0 	ldrsb	r3, [r5]
    fa7c:	e2038003 	and	r8, r3, #3
    fa80:	e3580001 	cmp	r8, #1
    fa84:	0a00003b 	beq	fb78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1a4>
    fa88:	e3580002 	cmp	r8, #2
    fa8c:	0a000032 	beq	fb5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x188>
    fa90:	e3580000 	cmp	r8, #0
    fa94:	0a00003c 	beq	fb8c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b8>
    fa98:	e1d580d3 	ldrsb	r8, [r5, #3]
    fa9c:	e2444005 	sub	r4, r4, #5
    faa0:	e1d500d2 	ldrsb	r0, [r5, #2]
    faa4:	e6ff4074 	uxth	r4, r4
    faa8:	e1d510d1 	ldrsb	r1, [r5, #1]
    faac:	e2855005 	add	r5, r5, #5
    fab0:	e15520d1 	ldrsb	r2, [r5, #-1]
    fab4:	e1a08808 	lsl	r8, r8, #16
    fab8:	e1888400 	orr	r8, r8, r0, lsl #8
    fabc:	e1888001 	orr	r8, r8, r1
    fac0:	e1888c02 	orr	r8, r8, r2, lsl #24
    fac4:	e20330fc 	and	r3, r3, #252	; 0xfc
    fac8:	e3530084 	cmp	r3, #132	; 0x84
    facc:	1affffda 	bne	fa3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
    fad0:	e3560000 	cmp	r6, #0
    fad4:	1a00000a 	bne	fb04 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x130>
    fad8:	e1a01006 	mov	r1, r6
    fadc:	e3a02008 	mov	r2, #8
    fae0:	e1a0000b 	mov	r0, fp
    fae4:	ebffff74 	bl	f8bc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    fae8:	e3500000 	cmp	r0, #0
    faec:	11500008 	cmpne	r0, r8
    faf0:	1a00000c 	bne	fb28 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x154>
    faf4:	e1a06008 	mov	r6, r8
    faf8:	e3a0a008 	mov	sl, #8
    fafc:	e3540000 	cmp	r4, #0
    fb00:	1affffdc 	bne	fa78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa4>
    fb04:	e28a4007 	add	r4, sl, #7
    fb08:	e59db020 	ldr	fp, [sp, #32]
    fb0c:	e7ef41d4 	ubfx	r4, r4, #3, #16
    fb10:	e28b3f4a 	add	r3, fp, #296	; 0x128
    fb14:	e59d2018 	ldr	r2, [sp, #24]
    fb18:	e58b2024 	str	r2, [fp, #36]	; 0x24
    fb1c:	e59d201c 	ldr	r2, [sp, #28]
    fb20:	e58b20e8 	str	r2, [fp, #232]	; 0xe8
    fb24:	e1c340b0 	strh	r4, [r3]
    fb28:	e28dd03c 	add	sp, sp, #60	; 0x3c
    fb2c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb30:	e3530074 	cmp	r3, #116	; 0x74
    fb34:	058d8008 	streq	r8, [sp, #8]
    fb38:	0affffcc 	beq	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fb3c:	da00002f 	ble	fc00 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x22c>
    fb40:	e3530080 	cmp	r3, #128	; 0x80
    fb44:	0a000014 	beq	fb9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c8>
    fb48:	e59d2004 	ldr	r2, [sp, #4]
    fb4c:	e3530094 	cmp	r3, #148	; 0x94
    fb50:	01a02008 	moveq	r2, r8
    fb54:	e58d2004 	str	r2, [sp, #4]
    fb58:	eaffffc4 	b	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fb5c:	e5d58001 	ldrb	r8, [r5, #1]
    fb60:	e2444003 	sub	r4, r4, #3
    fb64:	e1d520d2 	ldrsb	r2, [r5, #2]
    fb68:	e6ff4074 	uxth	r4, r4
    fb6c:	e2855003 	add	r5, r5, #3
    fb70:	e1888402 	orr	r8, r8, r2, lsl #8
    fb74:	eaffffd2 	b	fac4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
    fb78:	e2444002 	sub	r4, r4, #2
    fb7c:	e1d580d1 	ldrsb	r8, [r5, #1]
    fb80:	e6ff4074 	uxth	r4, r4
    fb84:	e2855002 	add	r5, r5, #2
    fb88:	eaffffcd 	b	fac4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
    fb8c:	e2444001 	sub	r4, r4, #1
    fb90:	e2855001 	add	r5, r5, #1
    fb94:	e6ff4074 	uxth	r4, r4
    fb98:	eaffffc9 	b	fac4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
    fb9c:	e59d2004 	ldr	r2, [sp, #4]
    fba0:	e2083003 	and	r3, r8, #3
    fba4:	e59d1008 	ldr	r1, [sp, #8]
    fba8:	e3530002 	cmp	r3, #2
    fbac:	e0080192 	mul	r8, r2, r1
    fbb0:	0a00001f 	beq	fc34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x260>
    fbb4:	e08aa008 	add	sl, sl, r8
    fbb8:	eaffffac 	b	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fbbc:	e3580036 	cmp	r8, #54	; 0x36
    fbc0:	ca000016 	bgt	fc20 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x24c>
    fbc4:	e3580030 	cmp	r8, #48	; 0x30
    fbc8:	aa000011 	bge	fc14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x240>
    fbcc:	e2488004 	sub	r8, r8, #4
    fbd0:	e3580001 	cmp	r8, #1
    fbd4:	93a07001 	movls	r7, #1
    fbd8:	eaffffa4 	b	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fbdc:	e58d8014 	str	r8, [sp, #20]
    fbe0:	eaffffa2 	b	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fbe4:	e3530004 	cmp	r3, #4
    fbe8:	1affffa0 	bne	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fbec:	e3580009 	cmp	r8, #9
    fbf0:	1affff9e 	bne	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fbf4:	e3570001 	cmp	r7, #1
    fbf8:	03a07002 	moveq	r7, #2
    fbfc:	eaffff9b 	b	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fc00:	e59d2010 	ldr	r2, [sp, #16]
    fc04:	e3530044 	cmp	r3, #68	; 0x44
    fc08:	01a02008 	moveq	r2, r8
    fc0c:	e58d2010 	str	r2, [sp, #16]
    fc10:	eaffff96 	b	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fc14:	e3570001 	cmp	r7, #1
    fc18:	03a07003 	moveq	r7, #3
    fc1c:	eaffff93 	b	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fc20:	e3580039 	cmp	r8, #57	; 0x39
    fc24:	1affff91 	bne	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fc28:	e3570001 	cmp	r7, #1
    fc2c:	03a07004 	moveq	r7, #4
    fc30:	eaffff8e 	b	fa70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x9c>
    fc34:	e3570003 	cmp	r7, #3
    fc38:	0a000013 	beq	fc8c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2b8>
    fc3c:	e3570004 	cmp	r7, #4
    fc40:	0a000041 	beq	fd4c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x378>
    fc44:	e3570002 	cmp	r7, #2
    fc48:	1affffd9 	bne	fbb4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
    fc4c:	e59d9020 	ldr	r9, [sp, #32]
    fc50:	e1a02008 	mov	r2, r8
    fc54:	e59d3004 	ldr	r3, [sp, #4]
    fc58:	e1a0100a 	mov	r1, sl
    fc5c:	e1a0000b 	mov	r0, fp
    fc60:	e3a07001 	mov	r7, #1
    fc64:	e5893104 	str	r3, [r9, #260]	; 0x104
    fc68:	ebffff13 	bl	f8bc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    fc6c:	e5890108 	str	r0, [r9, #264]	; 0x108
    fc70:	eaffffcf 	b	fbb4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
    fc74:	e3011c20 	movw	r1, #7200	; 0x1c20
    fc78:	e3401003 	movt	r1, #3
    fc7c:	e3010c38 	movw	r0, #7224	; 0x1c38
    fc80:	e3400003 	movt	r0, #3
    fc84:	e3a020a2 	mov	r2, #162	; 0xa2
    fc88:	eb0054b9 	bl	24f74 <assertion_failed>
    fc8c:	e3520000 	cmp	r2, #0
    fc90:	0a00004e 	beq	fdd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3fc>
    fc94:	e59d0018 	ldr	r0, [sp, #24]
    fc98:	e3a0300c 	mov	r3, #12
    fc9c:	e59d2020 	ldr	r2, [sp, #32]
    fca0:	e303c2eb 	movw	ip, #13035	; 0x32eb
    fca4:	e34fc8a4 	movt	ip, #63652	; 0xf8a4
    fca8:	e59d1014 	ldr	r1, [sp, #20]
    fcac:	e3a09000 	mov	r9, #0
    fcb0:	e59de010 	ldr	lr, [sp, #16]
    fcb4:	e0272093 	mla	r7, r3, r0, r2
    fcb8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    fcbc:	e58d6018 	str	r6, [sp, #24]
    fcc0:	e1a02003 	mov	r2, r3
    fcc4:	e153000c 	cmp	r3, ip
    fcc8:	e59d300c 	ldr	r3, [sp, #12]
    fccc:	01a02001 	moveq	r2, r1
    fcd0:	e58d5028 	str	r5, [sp, #40]	; 0x28
    fcd4:	e1a05000 	mov	r5, r0
    fcd8:	e153000c 	cmp	r3, ip
    fcdc:	e1a01003 	mov	r1, r3
    fce0:	01a0100e 	moveq	r1, lr
    fce4:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    fce8:	e58d8034 	str	r8, [sp, #52]	; 0x34
    fcec:	e1a04002 	mov	r4, r2
    fcf0:	e59d6008 	ldr	r6, [sp, #8]
    fcf4:	e1a08001 	mov	r8, r1
    fcf8:	e58da030 	str	sl, [sp, #48]	; 0x30
    fcfc:	ea000009 	b	fd28 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x354>
    fd00:	ebfffeed 	bl	f8bc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    fd04:	e59d3004 	ldr	r3, [sp, #4]
    fd08:	e2899001 	add	r9, r9, #1
    fd0c:	e5870028 	str	r0, [r7, #40]	; 0x28
    fd10:	e2855001 	add	r5, r5, #1
    fd14:	e359000f 	cmp	r9, #15
    fd18:	91590003 	cmpls	r9, r3
    fd1c:	e287700c 	add	r7, r7, #12
    fd20:	e08aa006 	add	sl, sl, r6
    fd24:	2a00002b 	bcs	fdd8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x404>
    fd28:	e587402c 	str	r4, [r7, #44]	; 0x2c
    fd2c:	e1a02006 	mov	r2, r6
    fd30:	e1a0100a 	mov	r1, sl
    fd34:	e1a0000b 	mov	r0, fp
    fd38:	e3540000 	cmp	r4, #0
    fd3c:	e5878030 	str	r8, [r7, #48]	; 0x30
    fd40:	aaffffee 	bge	fd00 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x32c>
    fd44:	ebffff18 	bl	f9ac <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
    fd48:	eaffffed 	b	fd04 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x330>
    fd4c:	e59d2004 	ldr	r2, [sp, #4]
    fd50:	e3520000 	cmp	r2, #0
    fd54:	0a00001d 	beq	fdd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3fc>
    fd58:	e59d101c 	ldr	r1, [sp, #28]
    fd5c:	e1a0900a 	mov	r9, sl
    fd60:	e59d3020 	ldr	r3, [sp, #32]
    fd64:	e3a07000 	mov	r7, #0
    fd68:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    fd6c:	e59d4008 	ldr	r4, [sp, #8]
    fd70:	e0833101 	add	r3, r3, r1, lsl #2
    fd74:	e58d601c 	str	r6, [sp, #28]
    fd78:	e28330e8 	add	r3, r3, #232	; 0xe8
    fd7c:	e58d5028 	str	r5, [sp, #40]	; 0x28
    fd80:	e58d8030 	str	r8, [sp, #48]	; 0x30
    fd84:	e1a06002 	mov	r6, r2
    fd88:	e1a05001 	mov	r5, r1
    fd8c:	e1a08003 	mov	r8, r3
    fd90:	e1a01009 	mov	r1, r9
    fd94:	e2877001 	add	r7, r7, #1
    fd98:	e1a02004 	mov	r2, r4
    fd9c:	e1a0000b 	mov	r0, fp
    fda0:	ebfffec5 	bl	f8bc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    fda4:	e2855001 	add	r5, r5, #1
    fda8:	e0899004 	add	r9, r9, r4
    fdac:	e3570005 	cmp	r7, #5
    fdb0:	91570006 	cmpls	r7, r6
    fdb4:	e5a80004 	str	r0, [r8, #4]!
    fdb8:	3afffff4 	bcc	fd90 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3bc>
    fdbc:	e59d601c 	ldr	r6, [sp, #28]
    fdc0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    fdc4:	e58d501c 	str	r5, [sp, #28]
    fdc8:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
    fdcc:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    fdd0:	e3a07001 	mov	r7, #1
    fdd4:	eaffff76 	b	fbb4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
    fdd8:	e59d6018 	ldr	r6, [sp, #24]
    fddc:	e3a07001 	mov	r7, #1
    fde0:	e58d5018 	str	r5, [sp, #24]
    fde4:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    fde8:	e59da030 	ldr	sl, [sp, #48]	; 0x30
    fdec:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    fdf0:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
    fdf4:	eaffff6e 	b	fbb4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
    fdf8:	e58d401c 	str	r4, [sp, #28]
    fdfc:	e58d4018 	str	r4, [sp, #24]
    fe00:	eaffff42 	b	fb10 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x13c>

0000fe04 <CUSBGamePadStandardDevice::Configure()>:
    fe04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fe08:	e3a01021 	mov	r1, #33	; 0x21
    fe0c:	e1a04000 	mov	r4, r0
    fe10:	e24dd078 	sub	sp, sp, #120	; 0x78
    fe14:	ebfffaba 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
    fe18:	e2505000 	subs	r5, r0, #0
    fe1c:	0a000003 	beq	fe30 <CUSBGamePadStandardDevice::Configure()+0x2c>
    fe20:	e1d530b7 	ldrh	r3, [r5, #7]
    fe24:	e6ff0073 	uxth	r0, r3
    fe28:	e3500000 	cmp	r0, #0
    fe2c:	1a000006 	bne	fe4c <CUSBGamePadStandardDevice::Configure()+0x48>
    fe30:	e3a05000 	mov	r5, #0
    fe34:	e1a00004 	mov	r0, r4
    fe38:	e59f1164 	ldr	r1, [pc, #356]	; ffa4 <CUSBGamePadStandardDevice::Configure()+0x1a0>
    fe3c:	ebfffabb 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
    fe40:	e1a00005 	mov	r0, r5
    fe44:	e28dd078 	add	sp, sp, #120	; 0x78
    fe48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fe4c:	e2846f4e 	add	r6, r4, #312	; 0x138
    fe50:	e1c630b0 	strh	r3, [r6]
    fe54:	eb00702b 	bl	2bf08 <operator new[](unsigned int)>
    fe58:	e5840134 	str	r0, [r4, #308]	; 0x134
    fe5c:	e1a00004 	mov	r0, r4
    fe60:	ebfffa9c 	bl	e8d8 <CUSBFunction::GetHost() const>
    fe64:	e1a07000 	mov	r7, r0
    fe68:	e1a00004 	mov	r0, r4
    fe6c:	ebfffa8e 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
    fe70:	e5d55006 	ldrb	r5, [r5, #6]
    fe74:	e1a08000 	mov	r8, r0
    fe78:	e1d6a0b0 	ldrh	sl, [r6]
    fe7c:	e5949134 	ldr	r9, [r4, #308]	; 0x134
    fe80:	e1a00004 	mov	r0, r4
    fe84:	ebfffaf2 	bl	ea54 <CUSBFunction::GetInterfaceNumber() const>
    fe88:	e3a0c081 	mov	ip, #129	; 0x81
    fe8c:	e6ff0070 	uxth	r0, r0
    fe90:	e3a03000 	mov	r3, #0
    fe94:	e58d000c 	str	r0, [sp, #12]
    fe98:	e1a02005 	mov	r2, r5
    fe9c:	e58da004 	str	sl, [sp, #4]
    fea0:	e1a01008 	mov	r1, r8
    fea4:	e58d9000 	str	r9, [sp]
    fea8:	e1a00007 	mov	r0, r7
    feac:	e58dc008 	str	ip, [sp, #8]
    feb0:	eb000639 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    feb4:	e1d630b0 	ldrh	r3, [r6]
    feb8:	e1500003 	cmp	r0, r3
    febc:	0a000009 	beq	fee8 <CUSBGamePadStandardDevice::Configure()+0xe4>
    fec0:	eb0059d0 	bl	26608 <CLogger::Get()>
    fec4:	e3a05000 	mov	r5, #0
    fec8:	e3a02001 	mov	r2, #1
    fecc:	e59f10d0 	ldr	r1, [pc, #208]	; ffa4 <CUSBGamePadStandardDevice::Configure()+0x1a0>
    fed0:	e3013c54 	movw	r3, #7252	; 0x1c54
    fed4:	e3403003 	movt	r3, #3
    fed8:	eb00590b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fedc:	e1a00005 	mov	r0, r5
    fee0:	e28dd078 	add	sp, sp, #120	; 0x78
    fee4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fee8:	e3a02064 	mov	r2, #100	; 0x64
    feec:	e3a01000 	mov	r1, #0
    fef0:	e28d0014 	add	r0, sp, #20
    fef4:	eb006d4b 	bl	2b428 <memset>
    fef8:	e5943000 	ldr	r3, [r4]
    fefc:	e28d1014 	add	r1, sp, #20
    ff00:	e1a00004 	mov	r0, r4
    ff04:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    ff08:	e12fff33 	blx	r3
    ff0c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    ff10:	e3530000 	cmp	r3, #0
    ff14:	1a000002 	bne	ff24 <CUSBGamePadStandardDevice::Configure()+0x120>
    ff18:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    ff1c:	e3530000 	cmp	r3, #0
    ff20:	0a00000e 	beq	ff60 <CUSBGamePadStandardDevice::Configure()+0x15c>
    ff24:	e2843f4a 	add	r3, r4, #296	; 0x128
    ff28:	e1d330b0 	ldrh	r3, [r3]
    ff2c:	e3530000 	cmp	r3, #0
    ff30:	0a000015 	beq	ff8c <CUSBGamePadStandardDevice::Configure()+0x188>
    ff34:	e1a00004 	mov	r0, r4
    ff38:	eb001bd4 	bl	16e90 <CUSBGamePadDevice::Configure()>
    ff3c:	e2505000 	subs	r5, r0, #0
    ff40:	0a00000a 	beq	ff70 <CUSBGamePadStandardDevice::Configure()+0x16c>
    ff44:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
    ff48:	e3530000 	cmp	r3, #0
    ff4c:	0affffbb 	beq	fe40 <CUSBGamePadStandardDevice::Configure()+0x3c>
    ff50:	e1a00004 	mov	r0, r4
    ff54:	eb000553 	bl	114a8 <CUSBHIDDevice::StartRequest()>
    ff58:	e1a05000 	mov	r5, r0
    ff5c:	eaffffb7 	b	fe40 <CUSBGamePadStandardDevice::Configure()+0x3c>
    ff60:	e5945104 	ldr	r5, [r4, #260]	; 0x104
    ff64:	e3550000 	cmp	r5, #0
    ff68:	1affffed 	bne	ff24 <CUSBGamePadStandardDevice::Configure()+0x120>
    ff6c:	eaffffb3 	b	fe40 <CUSBGamePadStandardDevice::Configure()+0x3c>
    ff70:	eb0059a4 	bl	26608 <CLogger::Get()>
    ff74:	e3013a98 	movw	r3, #6808	; 0x1a98
    ff78:	e3403003 	movt	r3, #3
    ff7c:	e3a02001 	mov	r2, #1
    ff80:	e59f101c 	ldr	r1, [pc, #28]	; ffa4 <CUSBGamePadStandardDevice::Configure()+0x1a0>
    ff84:	eb0058e0 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff88:	eaffffac 	b	fe40 <CUSBGamePadStandardDevice::Configure()+0x3c>
    ff8c:	e3011c20 	movw	r1, #7200	; 0x1c20
    ff90:	e3401003 	movt	r1, #3
    ff94:	e3010c78 	movw	r0, #7288	; 0x1c78
    ff98:	e3400003 	movt	r0, #3
    ff9c:	e3a02085 	mov	r2, #133	; 0x85
    ffa0:	eb0053f3 	bl	24f74 <assertion_failed>
    ffa4:	00031c14 	.word	0x00031c14

0000ffa8 <CUSBGamePadDevice::GetProperties()>:
    ffa8:	e3a00000 	mov	r0, #0
    ffac:	e12fff1e 	bx	lr

0000ffb0 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
    ffb0:	e3a00000 	mov	r0, #0
    ffb4:	e12fff1e 	bx	lr

0000ffb8 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
    ffb8:	e3a00000 	mov	r0, #0
    ffbc:	e12fff1e 	bx	lr

0000ffc0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
    ffc0:	e59f3014 	ldr	r3, [pc, #20]	; ffdc <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
    ffc4:	e92d4010 	push	{r4, lr}
    ffc8:	e1a04000 	mov	r4, r0
    ffcc:	e5803000 	str	r3, [r0]
    ffd0:	eb001beb 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
    ffd4:	e1a00004 	mov	r0, r4
    ffd8:	e8bd8010 	pop	{r4, pc}
    ffdc:	00031c94 	.word	0x00031c94

0000ffe0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
    ffe0:	e59f3020 	ldr	r3, [pc, #32]	; 10008 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
    ffe4:	e92d4010 	push	{r4, lr}
    ffe8:	e1a04000 	mov	r4, r0
    ffec:	e5803000 	str	r3, [r0]
    fff0:	eb001be3 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
    fff4:	e1a00004 	mov	r0, r4
    fff8:	e3a01f4d 	mov	r1, #308	; 0x134
    fffc:	eb006fc9 	bl	2bf28 <operator delete(void*, unsigned int)>
   10000:	e1a00004 	mov	r0, r4
   10004:	e8bd8010 	pop	{r4, pc}
   10008:	00031c94 	.word	0x00031c94

0001000c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   1000c:	e5d13000 	ldrb	r3, [r1]
   10010:	e3530030 	cmp	r3, #48	; 0x30
   10014:	1a000067 	bne	101b8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1ac>
   10018:	e3a03000 	mov	r3, #0
   1001c:	e5803108 	str	r3, [r0, #264]	; 0x108
   10020:	e5d13003 	ldrb	r3, [r1, #3]
   10024:	e3130001 	tst	r3, #1
   10028:	13a03080 	movne	r3, #128	; 0x80
   1002c:	15803108 	strne	r3, [r0, #264]	; 0x108
   10030:	15d13003 	ldrbne	r3, [r1, #3]
   10034:	e3130002 	tst	r3, #2
   10038:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1003c:	13833b01 	orrne	r3, r3, #1024	; 0x400
   10040:	15803108 	strne	r3, [r0, #264]	; 0x108
   10044:	15d13003 	ldrbne	r3, [r1, #3]
   10048:	e3130004 	tst	r3, #4
   1004c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10050:	13833c01 	orrne	r3, r3, #256	; 0x100
   10054:	15803108 	strne	r3, [r0, #264]	; 0x108
   10058:	15d13003 	ldrbne	r3, [r1, #3]
   1005c:	e3130008 	tst	r3, #8
   10060:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10064:	13833c02 	orrne	r3, r3, #512	; 0x200
   10068:	15803108 	strne	r3, [r0, #264]	; 0x108
   1006c:	15d13003 	ldrbne	r3, [r1, #3]
   10070:	e3130040 	tst	r3, #64	; 0x40
   10074:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10078:	13833040 	orrne	r3, r3, #64	; 0x40
   1007c:	15803108 	strne	r3, [r0, #264]	; 0x108
   10080:	15d13003 	ldrbne	r3, [r1, #3]
   10084:	e3130080 	tst	r3, #128	; 0x80
   10088:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1008c:	13833010 	orrne	r3, r3, #16
   10090:	15803108 	strne	r3, [r0, #264]	; 0x108
   10094:	e5d13004 	ldrb	r3, [r1, #4]
   10098:	e3130001 	tst	r3, #1
   1009c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   100a0:	13833702 	orrne	r3, r3, #524288	; 0x80000
   100a4:	15803108 	strne	r3, [r0, #264]	; 0x108
   100a8:	15d13004 	ldrbne	r3, [r1, #4]
   100ac:	e3130002 	tst	r3, #2
   100b0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   100b4:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   100b8:	15803108 	strne	r3, [r0, #264]	; 0x108
   100bc:	15d13004 	ldrbne	r3, [r1, #4]
   100c0:	e3130004 	tst	r3, #4
   100c4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   100c8:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   100cc:	15803108 	strne	r3, [r0, #264]	; 0x108
   100d0:	15d13004 	ldrbne	r3, [r1, #4]
   100d4:	e3130008 	tst	r3, #8
   100d8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   100dc:	13833a01 	orrne	r3, r3, #4096	; 0x1000
   100e0:	15803108 	strne	r3, [r0, #264]	; 0x108
   100e4:	15d13004 	ldrbne	r3, [r1, #4]
   100e8:	e3130010 	tst	r3, #16
   100ec:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   100f0:	13833001 	orrne	r3, r3, #1
   100f4:	15803108 	strne	r3, [r0, #264]	; 0x108
   100f8:	15d13004 	ldrbne	r3, [r1, #4]
   100fc:	e3130020 	tst	r3, #32
   10100:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10104:	13833b02 	orrne	r3, r3, #2048	; 0x800
   10108:	15803108 	strne	r3, [r0, #264]	; 0x108
   1010c:	e5d13005 	ldrb	r3, [r1, #5]
   10110:	e3130001 	tst	r3, #1
   10114:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10118:	13833802 	orrne	r3, r3, #131072	; 0x20000
   1011c:	15803108 	strne	r3, [r0, #264]	; 0x108
   10120:	15d13005 	ldrbne	r3, [r1, #5]
   10124:	e3130002 	tst	r3, #2
   10128:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1012c:	13833902 	orrne	r3, r3, #32768	; 0x8000
   10130:	15803108 	strne	r3, [r0, #264]	; 0x108
   10134:	15d13005 	ldrbne	r3, [r1, #5]
   10138:	e3130004 	tst	r3, #4
   1013c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10140:	13833801 	orrne	r3, r3, #65536	; 0x10000
   10144:	15803108 	strne	r3, [r0, #264]	; 0x108
   10148:	15d13005 	ldrbne	r3, [r1, #5]
   1014c:	e3130008 	tst	r3, #8
   10150:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10154:	13833701 	orrne	r3, r3, #262144	; 0x40000
   10158:	15803108 	strne	r3, [r0, #264]	; 0x108
   1015c:	15d13005 	ldrbne	r3, [r1, #5]
   10160:	e3130040 	tst	r3, #64	; 0x40
   10164:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10168:	13833020 	orrne	r3, r3, #32
   1016c:	15803108 	strne	r3, [r0, #264]	; 0x108
   10170:	15d13005 	ldrbne	r3, [r1, #5]
   10174:	e3130080 	tst	r3, #128	; 0x80
   10178:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1017c:	13833008 	orrne	r3, r3, #8
   10180:	15803108 	strne	r3, [r0, #264]	; 0x108
   10184:	e1d130b6 	ldrh	r3, [r1, #6]
   10188:	e7e73253 	ubfx	r3, r3, #4, #8
   1018c:	e5803028 	str	r3, [r0, #40]	; 0x28
   10190:	e5d13008 	ldrb	r3, [r1, #8]
   10194:	e26330ff 	rsb	r3, r3, #255	; 0xff
   10198:	e5803034 	str	r3, [r0, #52]	; 0x34
   1019c:	e1d130b9 	ldrh	r3, [r1, #9]
   101a0:	e7e73253 	ubfx	r3, r3, #4, #8
   101a4:	e5803040 	str	r3, [r0, #64]	; 0x40
   101a8:	e5d1300b 	ldrb	r3, [r1, #11]
   101ac:	e26330ff 	rsb	r3, r3, #255	; 0xff
   101b0:	e580304c 	str	r3, [r0, #76]	; 0x4c
   101b4:	e12fff1e 	bx	lr
   101b8:	e92d4010 	push	{r4, lr}
   101bc:	e1a04001 	mov	r4, r1
   101c0:	e24dd008 	sub	sp, sp, #8
   101c4:	eb00590f 	bl	26608 <CLogger::Get()>
   101c8:	e5d43000 	ldrb	r3, [r4]
   101cc:	e3a02003 	mov	r2, #3
   101d0:	e59f1014 	ldr	r1, [pc, #20]	; 101ec <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1e0>
   101d4:	e58d3000 	str	r3, [sp]
   101d8:	e3013d00 	movw	r3, #7424	; 0x1d00
   101dc:	e3403003 	movt	r3, #3
   101e0:	eb005849 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   101e4:	e28dd008 	add	sp, sp, #8
   101e8:	e8bd8010 	pop	{r4, pc}
   101ec:	00031cd8 	.word	0x00031cd8

000101f0 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   101f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   101f4:	e1a05000 	mov	r5, r0
   101f8:	e59f4068 	ldr	r4, [pc, #104]	; 10268 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
   101fc:	e24dd014 	sub	sp, sp, #20
   10200:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   10204:	e28de004 	add	lr, sp, #4
   10208:	e1a06001 	mov	r6, r1
   1020c:	e28c7001 	add	r7, ip, #1
   10210:	e3a03000 	mov	r3, #0
   10214:	e8940007 	ldm	r4, {r0, r1, r2}
   10218:	e88e0007 	stm	lr, {r0, r1, r2}
   1021c:	e1a00005 	mov	r0, r5
   10220:	e5c57131 	strb	r7, [r5, #305]	; 0x131
   10224:	e1a0100e 	mov	r1, lr
   10228:	e3a0200c 	mov	r2, #12
   1022c:	e20cc00f 	and	ip, ip, #15
   10230:	e5cd600f 	strb	r6, [sp, #15]
   10234:	e5cdc005 	strb	ip, [sp, #5]
   10238:	eb00040c 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1023c:	e2505000 	subs	r5, r0, #0
   10240:	1a000005 	bne	1025c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x6c>
   10244:	eb0058ef 	bl	26608 <CLogger::Get()>
   10248:	e3013d1c 	movw	r3, #7452	; 0x1d1c
   1024c:	e3403003 	movt	r3, #3
   10250:	e2441010 	sub	r1, r4, #16
   10254:	e3a02001 	mov	r2, #1
   10258:	eb00582b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1025c:	e1a00005 	mov	r0, r5
   10260:	e28dd014 	add	sp, sp, #20
   10264:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10268:	00031ce8 	.word	0x00031ce8

0001026c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   1026c:	e92d4010 	push	{r4, lr}
   10270:	e1a0c000 	mov	ip, r0
   10274:	e59f20c8 	ldr	r2, [pc, #200]	; 10344 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xd8>
   10278:	e24dd010 	sub	sp, sp, #16
   1027c:	e1a0e001 	mov	lr, r1
   10280:	e28d3004 	add	r3, sp, #4
   10284:	e3510001 	cmp	r1, #1
   10288:	e8920007 	ldm	r2, {r0, r1, r2}
   1028c:	e8a30003 	stmia	r3!, {r0, r1}
   10290:	e1c320b0 	strh	r2, [r3]
   10294:	0a000025 	beq	10330 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc4>
   10298:	3a000007 	bcc	102bc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   1029c:	e35e0002 	cmp	lr, #2
   102a0:	1a00001e 	bne	10320 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xb4>
   102a4:	e3a03020 	mov	r3, #32
   102a8:	e3a02062 	mov	r2, #98	; 0x62
   102ac:	e5cd3007 	strb	r3, [sp, #7]
   102b0:	e3e03000 	mvn	r3, #0
   102b4:	e5cd2008 	strb	r2, [sp, #8]
   102b8:	e5cd3009 	strb	r3, [sp, #9]
   102bc:	e1a0200c 	mov	r2, ip
   102c0:	e5dcc131 	ldrb	ip, [ip, #305]	; 0x131
   102c4:	e1a00002 	mov	r0, r2
   102c8:	e28d1004 	add	r1, sp, #4
   102cc:	e28ce001 	add	lr, ip, #1
   102d0:	e3a03000 	mov	r3, #0
   102d4:	e5c2e131 	strb	lr, [r2, #305]	; 0x131
   102d8:	e3a0200a 	mov	r2, #10
   102dc:	e20cc00f 	and	ip, ip, #15
   102e0:	e5cdc005 	strb	ip, [sp, #5]
   102e4:	eb0003e1 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   102e8:	e2504000 	subs	r4, r0, #0
   102ec:	0a000002 	beq	102fc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   102f0:	e1a00004 	mov	r0, r4
   102f4:	e28dd010 	add	sp, sp, #16
   102f8:	e8bd8010 	pop	{r4, pc}
   102fc:	eb0058c1 	bl	26608 <CLogger::Get()>
   10300:	e3a02001 	mov	r2, #1
   10304:	e59f103c 	ldr	r1, [pc, #60]	; 10348 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xdc>
   10308:	e3013d30 	movw	r3, #7472	; 0x1d30
   1030c:	e3403003 	movt	r3, #3
   10310:	eb0057fd 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10314:	e1a00004 	mov	r0, r4
   10318:	e28dd010 	add	sp, sp, #16
   1031c:	e8bd8010 	pop	{r4, pc}
   10320:	e3a04001 	mov	r4, #1
   10324:	e1a00004 	mov	r0, r4
   10328:	e28dd010 	add	sp, sp, #16
   1032c:	e8bd8010 	pop	{r4, pc}
   10330:	e3022098 	movw	r2, #8344	; 0x2098
   10334:	e3e0309d 	mvn	r3, #157	; 0x9d
   10338:	e1cd20ba 	strh	r2, [sp, #10]
   1033c:	e1cd30bc 	strh	r3, [sp, #12]
   10340:	eaffffdd 	b	102bc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   10344:	00031cf4 	.word	0x00031cf4
   10348:	00031cd8 	.word	0x00031cd8

0001034c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   1034c:	e92d4010 	push	{r4, lr}
   10350:	e1a04000 	mov	r4, r0
   10354:	eb001af8 	bl	16f3c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10358:	e3a03000 	mov	r3, #0
   1035c:	e59f1024 	ldr	r1, [pc, #36]	; 10388 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   10360:	e1a02003 	mov	r2, r3
   10364:	e5841000 	str	r1, [r4]
   10368:	e1a00004 	mov	r0, r4
   1036c:	e3a01003 	mov	r1, #3
   10370:	ebfff982 	bl	e980 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   10374:	e3a03000 	mov	r3, #0
   10378:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   1037c:	e1a00004 	mov	r0, r4
   10380:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   10384:	e8bd8010 	pop	{r4, pc}
   10388:	00031c94 	.word	0x00031c94

0001038c <CUSBGamePadSwitchProDevice::Configure()>:
   1038c:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   10390:	e28db018 	add	fp, sp, #24
   10394:	e24dd014 	sub	sp, sp, #20
   10398:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   1039c:	e3550000 	cmp	r5, #0
   103a0:	0a00003f 	beq	104a4 <CUSBGamePadSwitchProDevice::Configure()+0x118>
   103a4:	e2807f4a 	add	r7, r0, #296	; 0x128
   103a8:	e3a03040 	mov	r3, #64	; 0x40
   103ac:	e1a04000 	mov	r4, r0
   103b0:	e1c730b0 	strh	r3, [r7]
   103b4:	eb001ab5 	bl	16e90 <CUSBGamePadDevice::Configure()>
   103b8:	e2505000 	subs	r5, r0, #0
   103bc:	0a00003d 	beq	104b8 <CUSBGamePadSwitchProDevice::Configure()+0x12c>
   103c0:	e1d720b0 	ldrh	r2, [r7]
   103c4:	e1a0000d 	mov	r0, sp
   103c8:	e3a06000 	mov	r6, #0
   103cc:	e3a0c0ff 	mov	ip, #255	; 0xff
   103d0:	e2821007 	add	r1, r2, #7
   103d4:	e1a03006 	mov	r3, r6
   103d8:	e1a011a1 	lsr	r1, r1, #3
   103dc:	e584c030 	str	ip, [r4, #48]	; 0x30
   103e0:	e0401181 	sub	r1, r0, r1, lsl #3
   103e4:	e584c03c 	str	ip, [r4, #60]	; 0x3c
   103e8:	e1a0d001 	mov	sp, r1
   103ec:	e3a00012 	mov	r0, #18
   103f0:	e584c048 	str	ip, [r4, #72]	; 0x48
   103f4:	e1a0800d 	mov	r8, sp
   103f8:	e5840104 	str	r0, [r4, #260]	; 0x104
   103fc:	e3a00004 	mov	r0, #4
   10400:	e584c054 	str	ip, [r4, #84]	; 0x54
   10404:	e5840024 	str	r0, [r4, #36]	; 0x24
   10408:	e1a00004 	mov	r0, r4
   1040c:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   10410:	e584602c 	str	r6, [r4, #44]	; 0x2c
   10414:	e5846038 	str	r6, [r4, #56]	; 0x38
   10418:	e5846044 	str	r6, [r4, #68]	; 0x44
   1041c:	e5846050 	str	r6, [r4, #80]	; 0x50
   10420:	eb0003f0 	bl	113e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   10424:	e24b101c 	sub	r1, fp, #28
   10428:	e3a00d0e 	mov	r0, #896	; 0x380
   1042c:	e1a03006 	mov	r3, r6
   10430:	e3a02002 	mov	r2, #2
   10434:	e16100bc 	strh	r0, [r1, #-12]!
   10438:	e1a00004 	mov	r0, r4
   1043c:	eb00038b 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10440:	e2505000 	subs	r5, r0, #0
   10444:	0a000024 	beq	104dc <CUSBGamePadSwitchProDevice::Configure()+0x150>
   10448:	e1a03006 	mov	r3, r6
   1044c:	e1d720b0 	ldrh	r2, [r7]
   10450:	e1a0100d 	mov	r1, sp
   10454:	e1a00004 	mov	r0, r4
   10458:	eb0003e2 	bl	113e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   1045c:	e3500000 	cmp	r0, #0
   10460:	da000026 	ble	10500 <CUSBGamePadSwitchProDevice::Configure()+0x174>
   10464:	e5dd3000 	ldrb	r3, [sp]
   10468:	e3530081 	cmp	r3, #129	; 0x81
   1046c:	1a000002 	bne	1047c <CUSBGamePadSwitchProDevice::Configure()+0xf0>
   10470:	e5dd3001 	ldrb	r3, [sp, #1]
   10474:	e3530003 	cmp	r3, #3
   10478:	0a000028 	beq	10520 <CUSBGamePadSwitchProDevice::Configure()+0x194>
   1047c:	eb005861 	bl	26608 <CLogger::Get()>
   10480:	e3a05000 	mov	r5, #0
   10484:	e3a02001 	mov	r2, #1
   10488:	e59f11e0 	ldr	r1, [pc, #480]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   1048c:	e3013d48 	movw	r3, #7496	; 0x1d48
   10490:	e3403003 	movt	r3, #3
   10494:	eb00579c 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10498:	e1a00005 	mov	r0, r5
   1049c:	e24bd018 	sub	sp, fp, #24
   104a0:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   104a4:	e59f11c4 	ldr	r1, [pc, #452]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   104a8:	ebfff920 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   104ac:	e1a00005 	mov	r0, r5
   104b0:	e24bd018 	sub	sp, fp, #24
   104b4:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   104b8:	eb005852 	bl	26608 <CLogger::Get()>
   104bc:	e3a02001 	mov	r2, #1
   104c0:	e59f11a8 	ldr	r1, [pc, #424]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   104c4:	e3013a98 	movw	r3, #6808	; 0x1a98
   104c8:	e3403003 	movt	r3, #3
   104cc:	eb00578e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   104d0:	e1a00005 	mov	r0, r5
   104d4:	e24bd018 	sub	sp, fp, #24
   104d8:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   104dc:	eb005849 	bl	26608 <CLogger::Get()>
   104e0:	e3a02001 	mov	r2, #1
   104e4:	e59f1184 	ldr	r1, [pc, #388]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   104e8:	e3013d48 	movw	r3, #7496	; 0x1d48
   104ec:	e3403003 	movt	r3, #3
   104f0:	eb005785 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   104f4:	e1a00005 	mov	r0, r5
   104f8:	e24bd018 	sub	sp, fp, #24
   104fc:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   10500:	eb005840 	bl	26608 <CLogger::Get()>
   10504:	e3013d68 	movw	r3, #7528	; 0x1d68
   10508:	e3403003 	movt	r3, #3
   1050c:	e3a02001 	mov	r2, #1
   10510:	e59f1158 	ldr	r1, [pc, #344]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   10514:	e1a05006 	mov	r5, r6
   10518:	eb00577b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1051c:	eaffffe2 	b	104ac <CUSBGamePadSwitchProDevice::Configure()+0x120>
   10520:	e24b101c 	sub	r1, fp, #28
   10524:	e3a0cd0a 	mov	ip, #640	; 0x280
   10528:	e1a03006 	mov	r3, r6
   1052c:	e3a02002 	mov	r2, #2
   10530:	e1a00004 	mov	r0, r4
   10534:	e161c0b8 	strh	ip, [r1, #-8]!
   10538:	eb00034c 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1053c:	e2505000 	subs	r5, r0, #0
   10540:	0a000014 	beq	10598 <CUSBGamePadSwitchProDevice::Configure()+0x20c>
   10544:	e1a03006 	mov	r3, r6
   10548:	e1d720b0 	ldrh	r2, [r7]
   1054c:	e1a0100d 	mov	r1, sp
   10550:	e1a00004 	mov	r0, r4
   10554:	eb0003a3 	bl	113e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   10558:	e3500000 	cmp	r0, #0
   1055c:	da000014 	ble	105b4 <CUSBGamePadSwitchProDevice::Configure()+0x228>
   10560:	e5dd3000 	ldrb	r3, [sp]
   10564:	e3530081 	cmp	r3, #129	; 0x81
   10568:	1a000002 	bne	10578 <CUSBGamePadSwitchProDevice::Configure()+0x1ec>
   1056c:	e5dd3001 	ldrb	r3, [sp, #1]
   10570:	e3530002 	cmp	r3, #2
   10574:	0a000016 	beq	105d4 <CUSBGamePadSwitchProDevice::Configure()+0x248>
   10578:	eb005822 	bl	26608 <CLogger::Get()>
   1057c:	e3013d88 	movw	r3, #7560	; 0x1d88
   10580:	e3403003 	movt	r3, #3
   10584:	e3a02001 	mov	r2, #1
   10588:	e59f10e0 	ldr	r1, [pc, #224]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   1058c:	eb00575e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10590:	e3a05000 	mov	r5, #0
   10594:	eaffffc4 	b	104ac <CUSBGamePadSwitchProDevice::Configure()+0x120>
   10598:	eb00581a 	bl	26608 <CLogger::Get()>
   1059c:	e3013d88 	movw	r3, #7560	; 0x1d88
   105a0:	e3403003 	movt	r3, #3
   105a4:	e3a02001 	mov	r2, #1
   105a8:	e59f10c0 	ldr	r1, [pc, #192]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   105ac:	eb005756 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   105b0:	eaffffbd 	b	104ac <CUSBGamePadSwitchProDevice::Configure()+0x120>
   105b4:	eb005813 	bl	26608 <CLogger::Get()>
   105b8:	e3013da4 	movw	r3, #7588	; 0x1da4
   105bc:	e3403003 	movt	r3, #3
   105c0:	e3a02001 	mov	r2, #1
   105c4:	e59f10a4 	ldr	r1, [pc, #164]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   105c8:	e1a05006 	mov	r5, r6
   105cc:	eb00574e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   105d0:	eaffffb5 	b	104ac <CUSBGamePadSwitchProDevice::Configure()+0x120>
   105d4:	e24b101c 	sub	r1, fp, #28
   105d8:	e3a0cd12 	mov	ip, #1152	; 0x480
   105dc:	e3a03000 	mov	r3, #0
   105e0:	e3a02002 	mov	r2, #2
   105e4:	e1a00004 	mov	r0, r4
   105e8:	e161c0b4 	strh	ip, [r1, #-4]!
   105ec:	eb00031f 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   105f0:	e2505000 	subs	r5, r0, #0
   105f4:	0a00000f 	beq	10638 <CUSBGamePadSwitchProDevice::Configure()+0x2ac>
   105f8:	e5943000 	ldr	r3, [r4]
   105fc:	e1a00004 	mov	r0, r4
   10600:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   10604:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   10608:	e12fff33 	blx	r3
   1060c:	e1d720b0 	ldrh	r2, [r7]
   10610:	e1a01008 	mov	r1, r8
   10614:	e3a03000 	mov	r3, #0
   10618:	e1a00004 	mov	r0, r4
   1061c:	eb000371 	bl	113e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   10620:	e3500000 	cmp	r0, #0
   10624:	da00000a 	ble	10654 <CUSBGamePadSwitchProDevice::Configure()+0x2c8>
   10628:	e1a00004 	mov	r0, r4
   1062c:	eb00039d 	bl	114a8 <CUSBHIDDevice::StartRequest()>
   10630:	e1a05000 	mov	r5, r0
   10634:	eaffff9c 	b	104ac <CUSBGamePadSwitchProDevice::Configure()+0x120>
   10638:	eb0057f2 	bl	26608 <CLogger::Get()>
   1063c:	e3013dc0 	movw	r3, #7616	; 0x1dc0
   10640:	e3403003 	movt	r3, #3
   10644:	e3a02001 	mov	r2, #1
   10648:	e59f1020 	ldr	r1, [pc, #32]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   1064c:	eb00572e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10650:	eaffff95 	b	104ac <CUSBGamePadSwitchProDevice::Configure()+0x120>
   10654:	eb0057eb 	bl	26608 <CLogger::Get()>
   10658:	e3013de0 	movw	r3, #7648	; 0x1de0
   1065c:	e3403003 	movt	r3, #3
   10660:	e3a02001 	mov	r2, #1
   10664:	e59f1004 	ldr	r1, [pc, #4]	; 10670 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   10668:	eb005727 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1066c:	eaffffed 	b	10628 <CUSBGamePadSwitchProDevice::Configure()+0x29c>
   10670:	00031cd8 	.word	0x00031cd8

00010674 <CUSBGamePadSwitchProDevice::GetProperties()>:
   10674:	e3a0004b 	mov	r0, #75	; 0x4b
   10678:	e12fff1e 	bx	lr

0001067c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   1067c:	e59f3014 	ldr	r3, [pc, #20]	; 10698 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   10680:	e92d4010 	push	{r4, lr}
   10684:	e1a04000 	mov	r4, r0
   10688:	e5803000 	str	r3, [r0]
   1068c:	eb001a3c 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10690:	e1a00004 	mov	r0, r4
   10694:	e8bd8010 	pop	{r4, pc}
   10698:	00031e04 	.word	0x00031e04

0001069c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   1069c:	e59f3020 	ldr	r3, [pc, #32]	; 106c4 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   106a0:	e92d4010 	push	{r4, lr}
   106a4:	e1a04000 	mov	r4, r0
   106a8:	e5803000 	str	r3, [r0]
   106ac:	eb001a34 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   106b0:	e1a00004 	mov	r0, r4
   106b4:	e3a01e13 	mov	r1, #304	; 0x130
   106b8:	eb006e1a 	bl	2bf28 <operator delete(void*, unsigned int)>
   106bc:	e1a00004 	mov	r0, r4
   106c0:	e8bd8010 	pop	{r4, pc}
   106c4:	00031e04 	.word	0x00031e04

000106c8 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   106c8:	e242200e 	sub	r2, r2, #14
   106cc:	e3510000 	cmp	r1, #0
   106d0:	e16f2f12 	clz	r2, r2
   106d4:	e1a022a2 	lsr	r2, r2, #5
   106d8:	03a02000 	moveq	r2, #0
   106dc:	e3520000 	cmp	r2, #0
   106e0:	012fff1e 	bxeq	lr
   106e4:	e5d12000 	ldrb	r2, [r1]
   106e8:	e3520000 	cmp	r2, #0
   106ec:	112fff1e 	bxne	lr
   106f0:	e5d13001 	ldrb	r3, [r1, #1]
   106f4:	e3530014 	cmp	r3, #20
   106f8:	112fff1e 	bxne	lr
   106fc:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   10700:	e92d4070 	push	{r4, r5, r6, lr}
   10704:	e1a04000 	mov	r4, r0
   10708:	e3530000 	cmp	r3, #0
   1070c:	08bd8070 	popeq	{r4, r5, r6, pc}
   10710:	e1a05000 	mov	r5, r0
   10714:	e4953024 	ldr	r3, [r5], #36	; 0x24
   10718:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1071c:	e12fff33 	blx	r3
   10720:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   10724:	e1a01005 	mov	r1, r5
   10728:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   1072c:	e2400001 	sub	r0, r0, #1
   10730:	e8bd4070 	pop	{r4, r5, r6, lr}
   10734:	e12fff13 	bx	r3

00010738 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   10738:	e92d4070 	push	{r4, r5, r6, lr}
   1073c:	e3510000 	cmp	r1, #0
   10740:	0a000033 	beq	10814 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xdc>
   10744:	e1d130b0 	ldrh	r3, [r1]
   10748:	e3530b05 	cmp	r3, #5120	; 0x1400
   1074c:	1a000036 	bne	1082c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xf4>
   10750:	e59f30ec 	ldr	r3, [pc, #236]	; 10844 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10c>
   10754:	e3a0c000 	mov	ip, #0
   10758:	e1d120b2 	ldrh	r2, [r1, #2]
   1075c:	e283e040 	add	lr, r3, #64	; 0x40
   10760:	e580c108 	str	ip, [r0, #264]	; 0x108
   10764:	e3120001 	tst	r2, #1
   10768:	e2833004 	add	r3, r3, #4
   1076c:	e1a020a2 	lsr	r2, r2, #1
   10770:	15134004 	ldrne	r4, [r3, #-4]
   10774:	1590c108 	ldrne	ip, [r0, #264]	; 0x108
   10778:	118cc004 	orrne	ip, ip, r4
   1077c:	1580c108 	strne	ip, [r0, #264]	; 0x108
   10780:	e15e0003 	cmp	lr, r3
   10784:	1afffff6 	bne	10764 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x2c>
   10788:	e1d130f6 	ldrsh	r3, [r1, #6]
   1078c:	e3a02000 	mov	r2, #0
   10790:	e1a0c002 	mov	ip, r2
   10794:	e3a0400c 	mov	r4, #12
   10798:	e2833902 	add	r3, r3, #32768	; 0x8000
   1079c:	e1a03423 	lsr	r3, r3, #8
   107a0:	e02c0c94 	mla	ip, r4, ip, r0
   107a4:	e2822001 	add	r2, r2, #1
   107a8:	e3520004 	cmp	r2, #4
   107ac:	e58c3028 	str	r3, [ip, #40]	; 0x28
   107b0:	0a000008 	beq	107d8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xa0>
   107b4:	e0813082 	add	r3, r1, r2, lsl #1
   107b8:	e79ec102 	ldr	ip, [lr, r2, lsl #2]
   107bc:	e3cc5002 	bic	r5, ip, #2
   107c0:	e1d330f6 	ldrsh	r3, [r3, #6]
   107c4:	e3550001 	cmp	r5, #1
   107c8:	e2833902 	add	r3, r3, #32768	; 0x8000
   107cc:	e1a03423 	lsr	r3, r3, #8
   107d0:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   107d4:	eafffff1 	b	107a0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x68>
   107d8:	e5d13004 	ldrb	r3, [r1, #4]
   107dc:	e5803058 	str	r3, [r0, #88]	; 0x58
   107e0:	e1d130d4 	ldrsb	r3, [r1, #4]
   107e4:	e3530000 	cmp	r3, #0
   107e8:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   107ec:	b3833008 	orrlt	r3, r3, #8
   107f0:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   107f4:	e5d13005 	ldrb	r3, [r1, #5]
   107f8:	e5803064 	str	r3, [r0, #100]	; 0x64
   107fc:	e1d130d5 	ldrsb	r3, [r1, #5]
   10800:	e3530000 	cmp	r3, #0
   10804:	b5903108 	ldrlt	r3, [r0, #264]	; 0x108
   10808:	b3833010 	orrlt	r3, r3, #16
   1080c:	b5803108 	strlt	r3, [r0, #264]	; 0x108
   10810:	e8bd8070 	pop	{r4, r5, r6, pc}
   10814:	e3011eb8 	movw	r1, #7864	; 0x1eb8
   10818:	e3401003 	movt	r1, #3
   1081c:	e3010af4 	movw	r0, #6900	; 0x1af4
   10820:	e3400003 	movt	r0, #3
   10824:	e3a02077 	mov	r2, #119	; 0x77
   10828:	eb0051d1 	bl	24f74 <assertion_failed>
   1082c:	e3011eb8 	movw	r1, #7864	; 0x1eb8
   10830:	e3401003 	movt	r1, #3
   10834:	e3010ed0 	movw	r0, #7888	; 0x1ed0
   10838:	e3400003 	movt	r0, #3
   1083c:	e3a02078 	mov	r2, #120	; 0x78
   10840:	eb0051cb 	bl	24f74 <assertion_failed>
   10844:	00031e48 	.word	0x00031e48

00010848 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   10848:	e3510004 	cmp	r1, #4
   1084c:	9a000001 	bls	10858 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   10850:	e3a00000 	mov	r0, #0
   10854:	e12fff1e 	bx	lr
   10858:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1085c:	e3013dfc 	movw	r3, #7676	; 0x1dfc
   10860:	e3403003 	movt	r3, #3
   10864:	e083c001 	add	ip, r3, r1
   10868:	e24dd00c 	sub	sp, sp, #12
   1086c:	e3a03000 	mov	r3, #0
   10870:	e3a02003 	mov	r2, #3
   10874:	e28d1004 	add	r1, sp, #4
   10878:	e300e301 	movw	lr, #769	; 0x301
   1087c:	e5dcc0a4 	ldrb	ip, [ip, #164]	; 0xa4
   10880:	e1cde0b4 	strh	lr, [sp, #4]
   10884:	e5cdc006 	strb	ip, [sp, #6]
   10888:	eb000278 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1088c:	e28dd00c 	add	sp, sp, #12
   10890:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00010894 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   10894:	e92d4030 	push	{r4, r5, lr}
   10898:	e3a02008 	mov	r2, #8
   1089c:	e1a04001 	mov	r4, r1
   108a0:	e24dd00c 	sub	sp, sp, #12
   108a4:	e1a05000 	mov	r5, r0
   108a8:	e3a01000 	mov	r1, #0
   108ac:	e1a0000d 	mov	r0, sp
   108b0:	eb006adc 	bl	2b428 <memset>
   108b4:	e3a03008 	mov	r3, #8
   108b8:	e3540001 	cmp	r4, #1
   108bc:	e5cd3001 	strb	r3, [sp, #1]
   108c0:	0a00000b 	beq	108f4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   108c4:	3a000003 	bcc	108d8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   108c8:	e3540002 	cmp	r4, #2
   108cc:	03e03000 	mvneq	r3, #0
   108d0:	05cd3003 	strbeq	r3, [sp, #3]
   108d4:	1a000009 	bne	10900 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   108d8:	e1a0100d 	mov	r1, sp
   108dc:	e1a00005 	mov	r0, r5
   108e0:	e3a03000 	mov	r3, #0
   108e4:	e3a02008 	mov	r2, #8
   108e8:	eb000260 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   108ec:	e28dd00c 	add	sp, sp, #12
   108f0:	e8bd8030 	pop	{r4, r5, pc}
   108f4:	e3e03000 	mvn	r3, #0
   108f8:	e5cd3004 	strb	r3, [sp, #4]
   108fc:	eafffff5 	b	108d8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   10900:	e3011eb8 	movw	r1, #7864	; 0x1eb8
   10904:	e3401003 	movt	r1, #3
   10908:	e3010398 	movw	r0, #5016	; 0x1398
   1090c:	e3400003 	movt	r0, #3
   10910:	e3a020e5 	mov	r2, #229	; 0xe5
   10914:	eb005196 	bl	24f74 <assertion_failed>

00010918 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   10918:	e92d4010 	push	{r4, lr}
   1091c:	e1a04000 	mov	r4, r0
   10920:	eb001985 	bl	16f3c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10924:	e59f3008 	ldr	r3, [pc, #8]	; 10934 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   10928:	e1a00004 	mov	r0, r4
   1092c:	e5843000 	str	r3, [r4]
   10930:	e8bd8010 	pop	{r4, pc}
   10934:	00031e04 	.word	0x00031e04

00010938 <CUSBGamePadXbox360Device::Configure()>:
   10938:	e2803f4a 	add	r3, r0, #296	; 0x128
   1093c:	e92d4070 	push	{r4, r5, r6, lr}
   10940:	e3a0200e 	mov	r2, #14
   10944:	e1a04000 	mov	r4, r0
   10948:	e1c320b0 	strh	r2, [r3]
   1094c:	eb00194f 	bl	16e90 <CUSBGamePadDevice::Configure()>
   10950:	e3500000 	cmp	r0, #0
   10954:	0a00001e 	beq	109d4 <CUSBGamePadXbox360Device::Configure()+0x9c>
   10958:	e5941000 	ldr	r1, [r4]
   1095c:	e3a02012 	mov	r2, #18
   10960:	e3a03006 	mov	r3, #6
   10964:	e5842104 	str	r2, [r4, #260]	; 0x104
   10968:	e5843024 	str	r3, [r4, #36]	; 0x24
   1096c:	e3a020ff 	mov	r2, #255	; 0xff
   10970:	e3a03000 	mov	r3, #0
   10974:	e1a00004 	mov	r0, r4
   10978:	e5915034 	ldr	r5, [r1, #52]	; 0x34
   1097c:	e584302c 	str	r3, [r4, #44]	; 0x2c
   10980:	e5843038 	str	r3, [r4, #56]	; 0x38
   10984:	e5843044 	str	r3, [r4, #68]	; 0x44
   10988:	e5843050 	str	r3, [r4, #80]	; 0x50
   1098c:	e584305c 	str	r3, [r4, #92]	; 0x5c
   10990:	e5843068 	str	r3, [r4, #104]	; 0x68
   10994:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   10998:	e5842030 	str	r2, [r4, #48]	; 0x30
   1099c:	e584203c 	str	r2, [r4, #60]	; 0x3c
   109a0:	e5842048 	str	r2, [r4, #72]	; 0x48
   109a4:	e5842054 	str	r2, [r4, #84]	; 0x54
   109a8:	e5842060 	str	r2, [r4, #96]	; 0x60
   109ac:	e584206c 	str	r2, [r4, #108]	; 0x6c
   109b0:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   109b4:	e12fff35 	blx	r5
   109b8:	e3500000 	cmp	r0, #0
   109bc:	1a000001 	bne	109c8 <CUSBGamePadXbox360Device::Configure()+0x90>
   109c0:	e3a00000 	mov	r0, #0
   109c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   109c8:	e1a00004 	mov	r0, r4
   109cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   109d0:	ea0002b4 	b	114a8 <CUSBHIDDevice::StartRequest()>
   109d4:	eb00570b 	bl	26608 <CLogger::Get()>
   109d8:	e3a02001 	mov	r2, #1
   109dc:	e59f1010 	ldr	r1, [pc, #16]	; 109f4 <CUSBGamePadXbox360Device::Configure()+0xbc>
   109e0:	e3013a98 	movw	r3, #6808	; 0x1a98
   109e4:	e3403003 	movt	r3, #3
   109e8:	eb005647 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   109ec:	e3a00000 	mov	r0, #0
   109f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   109f4:	00031ea8 	.word	0x00031ea8

000109f8 <CUSBGamePadXbox360Device::GetProperties()>:
   109f8:	e3a0000b 	mov	r0, #11
   109fc:	e12fff1e 	bx	lr

00010a00 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   10a00:	e5d13004 	ldrb	r3, [r1, #4]
   10a04:	e3a02000 	mov	r2, #0
   10a08:	e5802108 	str	r2, [r0, #264]	; 0x108
   10a0c:	e3130004 	tst	r3, #4
   10a10:	13a02901 	movne	r2, #16384	; 0x4000
   10a14:	15802108 	strne	r2, [r0, #264]	; 0x108
   10a18:	e3130008 	tst	r3, #8
   10a1c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10a20:	13822b02 	orrne	r2, r2, #2048	; 0x800
   10a24:	15802108 	strne	r2, [r0, #264]	; 0x108
   10a28:	e3130010 	tst	r3, #16
   10a2c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10a30:	13822c02 	orrne	r2, r2, #512	; 0x200
   10a34:	15802108 	strne	r2, [r0, #264]	; 0x108
   10a38:	e3130020 	tst	r3, #32
   10a3c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10a40:	13822c01 	orrne	r2, r2, #256	; 0x100
   10a44:	15802108 	strne	r2, [r0, #264]	; 0x108
   10a48:	e3130040 	tst	r3, #64	; 0x40
   10a4c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10a50:	13822b01 	orrne	r2, r2, #1024	; 0x400
   10a54:	15802108 	strne	r2, [r0, #264]	; 0x108
   10a58:	e1b033a3 	lsrs	r3, r3, #7
   10a5c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10a60:	13833080 	orrne	r3, r3, #128	; 0x80
   10a64:	15803108 	strne	r3, [r0, #264]	; 0x108
   10a68:	e5d13005 	ldrb	r3, [r1, #5]
   10a6c:	e3130001 	tst	r3, #1
   10a70:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10a74:	13822902 	orrne	r2, r2, #32768	; 0x8000
   10a78:	15802108 	strne	r2, [r0, #264]	; 0x108
   10a7c:	e3130002 	tst	r3, #2
   10a80:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10a84:	13822802 	orrne	r2, r2, #131072	; 0x20000
   10a88:	15802108 	strne	r2, [r0, #264]	; 0x108
   10a8c:	e3130004 	tst	r3, #4
   10a90:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10a94:	13822701 	orrne	r2, r2, #262144	; 0x40000
   10a98:	15802108 	strne	r2, [r0, #264]	; 0x108
   10a9c:	e3130008 	tst	r3, #8
   10aa0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10aa4:	13822801 	orrne	r2, r2, #65536	; 0x10000
   10aa8:	15802108 	strne	r2, [r0, #264]	; 0x108
   10aac:	e3130010 	tst	r3, #16
   10ab0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10ab4:	13822020 	orrne	r2, r2, #32
   10ab8:	15802108 	strne	r2, [r0, #264]	; 0x108
   10abc:	e3130020 	tst	r3, #32
   10ac0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10ac4:	13822040 	orrne	r2, r2, #64	; 0x40
   10ac8:	15802108 	strne	r2, [r0, #264]	; 0x108
   10acc:	e3130040 	tst	r3, #64	; 0x40
   10ad0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10ad4:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   10ad8:	15802108 	strne	r2, [r0, #264]	; 0x108
   10adc:	e1b033a3 	lsrs	r3, r3, #7
   10ae0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10ae4:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   10ae8:	15803108 	strne	r3, [r0, #264]	; 0x108
   10aec:	e1d130b6 	ldrh	r3, [r1, #6]
   10af0:	e1a03143 	asr	r3, r3, #2
   10af4:	e5803058 	str	r3, [r0, #88]	; 0x58
   10af8:	e353007f 	cmp	r3, #127	; 0x7f
   10afc:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   10b00:	c3833008 	orrgt	r3, r3, #8
   10b04:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   10b08:	e1d130b8 	ldrh	r3, [r1, #8]
   10b0c:	e1a03143 	asr	r3, r3, #2
   10b10:	e5803064 	str	r3, [r0, #100]	; 0x64
   10b14:	e353007f 	cmp	r3, #127	; 0x7f
   10b18:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   10b1c:	c3833010 	orrgt	r3, r3, #16
   10b20:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   10b24:	e1d130fa 	ldrsh	r3, [r1, #10]
   10b28:	e2833902 	add	r3, r3, #32768	; 0x8000
   10b2c:	e1a03423 	lsr	r3, r3, #8
   10b30:	e5803028 	str	r3, [r0, #40]	; 0x28
   10b34:	e1d130fc 	ldrsh	r3, [r1, #12]
   10b38:	e2833902 	add	r3, r3, #32768	; 0x8000
   10b3c:	e1a03423 	lsr	r3, r3, #8
   10b40:	e22330ff 	eor	r3, r3, #255	; 0xff
   10b44:	e5803034 	str	r3, [r0, #52]	; 0x34
   10b48:	e1d130fe 	ldrsh	r3, [r1, #14]
   10b4c:	e2833902 	add	r3, r3, #32768	; 0x8000
   10b50:	e1a03423 	lsr	r3, r3, #8
   10b54:	e5803040 	str	r3, [r0, #64]	; 0x40
   10b58:	e1d131f0 	ldrsh	r3, [r1, #16]
   10b5c:	e2833902 	add	r3, r3, #32768	; 0x8000
   10b60:	e1a03423 	lsr	r3, r3, #8
   10b64:	e22330ff 	eor	r3, r3, #255	; 0xff
   10b68:	e580304c 	str	r3, [r0, #76]	; 0x4c
   10b6c:	e12fff1e 	bx	lr

00010b70 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   10b70:	e59f3014 	ldr	r3, [pc, #20]	; 10b8c <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   10b74:	e92d4010 	push	{r4, lr}
   10b78:	e1a04000 	mov	r4, r0
   10b7c:	e5803000 	str	r3, [r0]
   10b80:	eb0018ff 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10b84:	e1a00004 	mov	r0, r4
   10b88:	e8bd8010 	pop	{r4, pc}
   10b8c:	00031efc 	.word	0x00031efc

00010b90 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   10b90:	e59f3020 	ldr	r3, [pc, #32]	; 10bb8 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   10b94:	e92d4010 	push	{r4, lr}
   10b98:	e1a04000 	mov	r4, r0
   10b9c:	e5803000 	str	r3, [r0]
   10ba0:	eb0018f7 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10ba4:	e1a00004 	mov	r0, r4
   10ba8:	e3a01f4d 	mov	r1, #308	; 0x134
   10bac:	eb006cdd 	bl	2bf28 <operator delete(void*, unsigned int)>
   10bb0:	e1a00004 	mov	r0, r4
   10bb4:	e8bd8010 	pop	{r4, pc}
   10bb8:	00031efc 	.word	0x00031efc

00010bbc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   10bbc:	e2513000 	subs	r3, r1, #0
   10bc0:	012fff1e 	bxeq	lr
   10bc4:	e92d4030 	push	{r4, r5, lr}
   10bc8:	e3520006 	cmp	r2, #6
   10bcc:	e1a04000 	mov	r4, r0
   10bd0:	e24dd014 	sub	sp, sp, #20
   10bd4:	0a000009 	beq	10c00 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   10bd8:	e590c124 	ldr	ip, [r0, #292]	; 0x124
   10bdc:	e2422012 	sub	r2, r2, #18
   10be0:	e16f2f12 	clz	r2, r2
   10be4:	e35c0000 	cmp	ip, #0
   10be8:	e1a022a2 	lsr	r2, r2, #5
   10bec:	03a02000 	moveq	r2, #0
   10bf0:	e3520000 	cmp	r2, #0
   10bf4:	1a00001c 	bne	10c6c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb0>
   10bf8:	e28dd014 	add	sp, sp, #20
   10bfc:	e8bd8030 	pop	{r4, r5, pc}
   10c00:	e5d32000 	ldrb	r2, [r3]
   10c04:	e3520007 	cmp	r2, #7
   10c08:	1afffffa 	bne	10bf8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   10c0c:	e5d32001 	ldrb	r2, [r3, #1]
   10c10:	e3520030 	cmp	r2, #48	; 0x30
   10c14:	1afffff7 	bne	10bf8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   10c18:	e59f5080 	ldr	r5, [pc, #128]	; 10ca0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   10c1c:	e1a0c00d 	mov	ip, sp
   10c20:	e5d3e002 	ldrb	lr, [r3, #2]
   10c24:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   10c28:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   10c2c:	e1a00004 	mov	r0, r4
   10c30:	e5cc3000 	strb	r3, [ip]
   10c34:	e3a0200d 	mov	r2, #13
   10c38:	e3a03000 	mov	r3, #0
   10c3c:	e1a0100d 	mov	r1, sp
   10c40:	e5cde002 	strb	lr, [sp, #2]
   10c44:	eb0001ae 	bl	11304 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   10c48:	e3500000 	cmp	r0, #0
   10c4c:	1affffe9 	bne	10bf8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   10c50:	eb00566c 	bl	26608 <CLogger::Get()>
   10c54:	e2851010 	add	r1, r5, #16
   10c58:	e3013f78 	movw	r3, #8056	; 0x1f78
   10c5c:	e3403003 	movt	r3, #3
   10c60:	e3a02001 	mov	r2, #1
   10c64:	eb0055a8 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c68:	eaffffe2 	b	10bf8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   10c6c:	e5d33000 	ldrb	r3, [r3]
   10c70:	e3530020 	cmp	r3, #32
   10c74:	1affffdf 	bne	10bf8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   10c78:	e1a05000 	mov	r5, r0
   10c7c:	e4953024 	ldr	r3, [r5], #36	; 0x24
   10c80:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10c84:	e12fff33 	blx	r3
   10c88:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   10c8c:	e1a01005 	mov	r1, r5
   10c90:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   10c94:	e2400001 	sub	r0, r0, #1
   10c98:	e12fff33 	blx	r3
   10c9c:	eaffffd5 	b	10bf8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   10ca0:	00031f40 	.word	0x00031f40

00010ca4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   10ca4:	e92d4010 	push	{r4, lr}
   10ca8:	e3510001 	cmp	r1, #1
   10cac:	e59f3080 	ldr	r3, [pc, #128]	; 10d34 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   10cb0:	e24dd010 	sub	sp, sp, #16
   10cb4:	e1a0e000 	mov	lr, r0
   10cb8:	e1a0c00d 	mov	ip, sp
   10cbc:	e1a04001 	mov	r4, r1
   10cc0:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   10cc4:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   10cc8:	e5cc3000 	strb	r3, [ip]
   10ccc:	0a00000f 	beq	10d10 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   10cd0:	3a000003 	bcc	10ce4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   10cd4:	e3540002 	cmp	r4, #2
   10cd8:	03e03000 	mvneq	r3, #0
   10cdc:	05cd3008 	strbeq	r3, [sp, #8]
   10ce0:	1a00000d 	bne	10d1c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x78>
   10ce4:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   10ce8:	e1a0100d 	mov	r1, sp
   10cec:	e1a0000e 	mov	r0, lr
   10cf0:	e3a03000 	mov	r3, #0
   10cf4:	e28c2001 	add	r2, ip, #1
   10cf8:	e5ce2130 	strb	r2, [lr, #304]	; 0x130
   10cfc:	e3a0200d 	mov	r2, #13
   10d00:	e5cdc002 	strb	ip, [sp, #2]
   10d04:	eb000159 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10d08:	e28dd010 	add	sp, sp, #16
   10d0c:	e8bd8010 	pop	{r4, pc}
   10d10:	e3e03000 	mvn	r3, #0
   10d14:	e5cd3009 	strb	r3, [sp, #9]
   10d18:	eafffff1 	b	10ce4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   10d1c:	e3011f8c 	movw	r1, #8076	; 0x1f8c
   10d20:	e3401003 	movt	r1, #3
   10d24:	e3010398 	movw	r0, #5016	; 0x1398
   10d28:	e3400003 	movt	r0, #3
   10d2c:	e3a020ee 	mov	r2, #238	; 0xee
   10d30:	eb00508f 	bl	24f74 <assertion_failed>
   10d34:	00031f60 	.word	0x00031f60

00010d38 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   10d38:	e92d4010 	push	{r4, lr}
   10d3c:	e1a04000 	mov	r4, r0
   10d40:	eb00187d 	bl	16f3c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10d44:	e59f2010 	ldr	r2, [pc, #16]	; 10d5c <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   10d48:	e3a03000 	mov	r3, #0
   10d4c:	e1a00004 	mov	r0, r4
   10d50:	e5842000 	str	r2, [r4]
   10d54:	e5c43130 	strb	r3, [r4, #304]	; 0x130
   10d58:	e8bd8010 	pop	{r4, pc}
   10d5c:	00031efc 	.word	0x00031efc

00010d60 <CUSBGamePadXboxOneDevice::Configure()>:
   10d60:	e2803f4a 	add	r3, r0, #296	; 0x128
   10d64:	e92d4070 	push	{r4, r5, r6, lr}
   10d68:	e3a02040 	mov	r2, #64	; 0x40
   10d6c:	e24dd008 	sub	sp, sp, #8
   10d70:	e1a04000 	mov	r4, r0
   10d74:	e1c320b0 	strh	r2, [r3]
   10d78:	eb001844 	bl	16e90 <CUSBGamePadDevice::Configure()>
   10d7c:	e2505000 	subs	r5, r0, #0
   10d80:	0a00002c 	beq	10e38 <CUSBGamePadXboxOneDevice::Configure()+0xd8>
   10d84:	e59f60d0 	ldr	r6, [pc, #208]	; 10e5c <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   10d88:	e3a02000 	mov	r2, #0
   10d8c:	e3a0c0ff 	mov	ip, #255	; 0xff
   10d90:	e1a03002 	mov	r3, r2
   10d94:	e584202c 	str	r2, [r4, #44]	; 0x2c
   10d98:	e3a0e010 	mov	lr, #16
   10d9c:	e5842038 	str	r2, [r4, #56]	; 0x38
   10da0:	e8960003 	ldm	r6, {r0, r1}
   10da4:	e5842044 	str	r2, [r4, #68]	; 0x44
   10da8:	e58d0000 	str	r0, [sp]
   10dac:	e3a00006 	mov	r0, #6
   10db0:	e5cd1004 	strb	r1, [sp, #4]
   10db4:	e1a0100d 	mov	r1, sp
   10db8:	e5842050 	str	r2, [r4, #80]	; 0x50
   10dbc:	e584205c 	str	r2, [r4, #92]	; 0x5c
   10dc0:	e5842068 	str	r2, [r4, #104]	; 0x68
   10dc4:	e58420e8 	str	r2, [r4, #232]	; 0xe8
   10dc8:	e3a02005 	mov	r2, #5
   10dcc:	e5840024 	str	r0, [r4, #36]	; 0x24
   10dd0:	e1a00004 	mov	r0, r4
   10dd4:	e584e104 	str	lr, [r4, #260]	; 0x104
   10dd8:	e584c030 	str	ip, [r4, #48]	; 0x30
   10ddc:	e584c03c 	str	ip, [r4, #60]	; 0x3c
   10de0:	e584c048 	str	ip, [r4, #72]	; 0x48
   10de4:	e584c054 	str	ip, [r4, #84]	; 0x54
   10de8:	e584c060 	str	ip, [r4, #96]	; 0x60
   10dec:	e584c06c 	str	ip, [r4, #108]	; 0x6c
   10df0:	eb00011e 	bl	11270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10df4:	e2505000 	subs	r5, r0, #0
   10df8:	0a000005 	beq	10e14 <CUSBGamePadXboxOneDevice::Configure()+0xb4>
   10dfc:	e1a00004 	mov	r0, r4
   10e00:	eb0001a8 	bl	114a8 <CUSBHIDDevice::StartRequest()>
   10e04:	e1a05000 	mov	r5, r0
   10e08:	e1a00005 	mov	r0, r5
   10e0c:	e28dd008 	add	sp, sp, #8
   10e10:	e8bd8070 	pop	{r4, r5, r6, pc}
   10e14:	eb0055fb 	bl	26608 <CLogger::Get()>
   10e18:	e2461020 	sub	r1, r6, #32
   10e1c:	e3a02001 	mov	r2, #1
   10e20:	e3013fa4 	movw	r3, #8100	; 0x1fa4
   10e24:	e3403003 	movt	r3, #3
   10e28:	eb005537 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10e2c:	e1a00005 	mov	r0, r5
   10e30:	e28dd008 	add	sp, sp, #8
   10e34:	e8bd8070 	pop	{r4, r5, r6, pc}
   10e38:	eb0055f2 	bl	26608 <CLogger::Get()>
   10e3c:	e3a02001 	mov	r2, #1
   10e40:	e59f1018 	ldr	r1, [pc, #24]	; 10e60 <CUSBGamePadXboxOneDevice::Configure()+0x100>
   10e44:	e3013a98 	movw	r3, #6808	; 0x1a98
   10e48:	e3403003 	movt	r3, #3
   10e4c:	eb00552e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10e50:	e1a00005 	mov	r0, r5
   10e54:	e28dd008 	add	sp, sp, #8
   10e58:	e8bd8070 	pop	{r4, r5, r6, pc}
   10e5c:	00031f70 	.word	0x00031f70
   10e60:	00031f50 	.word	0x00031f50

00010e64 <CUSBGamePadXboxOneDevice::GetProperties()>:
   10e64:	e3a00009 	mov	r0, #9
   10e68:	e12fff1e 	bx	lr

00010e6c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   10e6c:	e92d4070 	push	{r4, r5, r6, lr}
   10e70:	e2504000 	subs	r4, r0, #0
   10e74:	0a000015 	beq	10ed0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x64>
   10e78:	e1a05001 	mov	r5, r1
   10e7c:	eb000a2c 	bl	13734 <CUSBRequest::GetStatus() const>
   10e80:	e3500000 	cmp	r0, #0
   10e84:	0a000009 	beq	10eb0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   10e88:	e1a00004 	mov	r0, r4
   10e8c:	eb000a19 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   10e90:	e1a00004 	mov	r0, r4
   10e94:	e3a01028 	mov	r1, #40	; 0x28
   10e98:	eb000a8e 	bl	138d8 <CUSBRequest::operator delete(void*, unsigned int)>
   10e9c:	e3550000 	cmp	r5, #0
   10ea0:	0a000010 	beq	10ee8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   10ea4:	e1a00005 	mov	r0, r5
   10ea8:	e8bd4070 	pop	{r4, r5, r6, lr}
   10eac:	ea006c1c 	b	2bf24 <operator delete[](void*)>
   10eb0:	eb0055d4 	bl	26608 <CLogger::Get()>
   10eb4:	e3023008 	movw	r3, #8200	; 0x2008
   10eb8:	e3403003 	movt	r3, #3
   10ebc:	e3011fbc 	movw	r1, #8124	; 0x1fbc
   10ec0:	e3401003 	movt	r1, #3
   10ec4:	e3a02002 	mov	r2, #2
   10ec8:	eb00550f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ecc:	eaffffed 	b	10e88 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   10ed0:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   10ed4:	e3401003 	movt	r1, #3
   10ed8:	e3000890 	movw	r0, #2192	; 0x890
   10edc:	e3400003 	movt	r0, #3
   10ee0:	e3a020af 	mov	r2, #175	; 0xaf
   10ee4:	eb005022 	bl	24f74 <assertion_failed>
   10ee8:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   10eec:	e3401003 	movt	r1, #3
   10ef0:	e3020024 	movw	r0, #8228	; 0x2024
   10ef4:	e3400003 	movt	r0, #3
   10ef8:	e3a020b8 	mov	r2, #184	; 0xb8
   10efc:	eb00501c 	bl	24f74 <assertion_failed>

00010f00 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   10f00:	e92d4070 	push	{r4, r5, r6, lr}
   10f04:	e1a04000 	mov	r4, r0
   10f08:	e1a05002 	mov	r5, r2
   10f0c:	ebfff5fa 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   10f10:	e59f2034 	ldr	r2, [pc, #52]	; 10f4c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
   10f14:	e3a03000 	mov	r3, #0
   10f18:	e3550000 	cmp	r5, #0
   10f1c:	e5845010 	str	r5, [r4, #16]
   10f20:	e5842000 	str	r2, [r4]
   10f24:	e5843014 	str	r3, [r4, #20]
   10f28:	e5843018 	str	r3, [r4, #24]
   10f2c:	e584301c 	str	r3, [r4, #28]
   10f30:	e5843020 	str	r3, [r4, #32]
   10f34:	0a000002 	beq	10f44 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
   10f38:	e1a00005 	mov	r0, r5
   10f3c:	eb006bf1 	bl	2bf08 <operator new[](unsigned int)>
   10f40:	e5840020 	str	r0, [r4, #32]
   10f44:	e1a00004 	mov	r0, r4
   10f48:	e8bd8070 	pop	{r4, r5, r6, pc}
   10f4c:	00031fcc 	.word	0x00031fcc

00010f50 <CUSBHIDDevice::~CUSBHIDDevice()>:
   10f50:	e92d4070 	push	{r4, r5, r6, lr}
   10f54:	e1a04000 	mov	r4, r0
   10f58:	e5900020 	ldr	r0, [r0, #32]
   10f5c:	e59f3074 	ldr	r3, [pc, #116]	; 10fd8 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   10f60:	e5843000 	str	r3, [r4]
   10f64:	e3500000 	cmp	r0, #0
   10f68:	0a000000 	beq	10f70 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   10f6c:	eb006bec 	bl	2bf24 <operator delete[](void*)>
   10f70:	e5945018 	ldr	r5, [r4, #24]
   10f74:	e3a03000 	mov	r3, #0
   10f78:	e5843020 	str	r3, [r4, #32]
   10f7c:	e1550003 	cmp	r5, r3
   10f80:	0a000004 	beq	10f98 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   10f84:	e1a00005 	mov	r0, r5
   10f88:	ebfff4d7 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   10f8c:	e1a00005 	mov	r0, r5
   10f90:	e3a01014 	mov	r1, #20
   10f94:	eb006be3 	bl	2bf28 <operator delete(void*, unsigned int)>
   10f98:	e5945014 	ldr	r5, [r4, #20]
   10f9c:	e3a03000 	mov	r3, #0
   10fa0:	e5843018 	str	r3, [r4, #24]
   10fa4:	e1550003 	cmp	r5, r3
   10fa8:	0a000004 	beq	10fc0 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   10fac:	e1a00005 	mov	r0, r5
   10fb0:	ebfff4cd 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   10fb4:	e1a00005 	mov	r0, r5
   10fb8:	e3a01014 	mov	r1, #20
   10fbc:	eb006bd9 	bl	2bf28 <operator delete(void*, unsigned int)>
   10fc0:	e3a03000 	mov	r3, #0
   10fc4:	e1a00004 	mov	r0, r4
   10fc8:	e5843014 	str	r3, [r4, #20]
   10fcc:	ebfff533 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   10fd0:	e1a00004 	mov	r0, r4
   10fd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   10fd8:	00031fcc 	.word	0x00031fcc

00010fdc <CUSBHIDDevice::~CUSBHIDDevice()>:
   10fdc:	e92d4010 	push	{r4, lr}
   10fe0:	e1a04000 	mov	r4, r0
   10fe4:	ebffffd9 	bl	10f50 <CUSBHIDDevice::~CUSBHIDDevice()>
   10fe8:	e1a00004 	mov	r0, r4
   10fec:	e3a01024 	mov	r1, #36	; 0x24
   10ff0:	eb006bcc 	bl	2bf28 <operator delete(void*, unsigned int)>
   10ff4:	e1a00004 	mov	r0, r4
   10ff8:	e8bd8010 	pop	{r4, pc}

00010ffc <CUSBHIDDevice::Configure(unsigned int)>:
   10ffc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11000:	e1a07001 	mov	r7, r1
   11004:	e1a05000 	mov	r5, r0
   11008:	e24dd010 	sub	sp, sp, #16
   1100c:	ebfff610 	bl	e854 <CUSBFunction::GetNumEndpoints() const>
   11010:	e2506000 	subs	r6, r0, #0
   11014:	1a000004 	bne	1102c <CUSBHIDDevice::Configure(unsigned int)+0x30>
   11018:	ea000041 	b	11124 <CUSBHIDDevice::Configure(unsigned int)+0x128>
   1101c:	e5d43003 	ldrb	r3, [r4, #3]
   11020:	e203303f 	and	r3, r3, #63	; 0x3f
   11024:	e3530003 	cmp	r3, #3
   11028:	0a00001e 	beq	110a8 <CUSBHIDDevice::Configure(unsigned int)+0xac>
   1102c:	e3a01005 	mov	r1, #5
   11030:	e1a00005 	mov	r0, r5
   11034:	ebfff632 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   11038:	e2504000 	subs	r4, r0, #0
   1103c:	1afffff6 	bne	1101c <CUSBHIDDevice::Configure(unsigned int)+0x20>
   11040:	e5956014 	ldr	r6, [r5, #20]
   11044:	e1a00005 	mov	r0, r5
   11048:	e3560000 	cmp	r6, #0
   1104c:	0a000045 	beq	11168 <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   11050:	ebfff53b 	bl	e544 <CUSBFunction::Configure()>
   11054:	e2506000 	subs	r6, r0, #0
   11058:	0a000038 	beq	11140 <CUSBHIDDevice::Configure(unsigned int)+0x144>
   1105c:	e1a00005 	mov	r0, r5
   11060:	ebfff687 	bl	ea84 <CUSBFunction::GetInterfaceClass() const>
   11064:	e3500003 	cmp	r0, #3
   11068:	0a00004d 	beq	111a4 <CUSBHIDDevice::Configure(unsigned int)+0x1a8>
   1106c:	e5953010 	ldr	r3, [r5, #16]
   11070:	e3530000 	cmp	r3, #0
   11074:	1a000041 	bne	11180 <CUSBHIDDevice::Configure(unsigned int)+0x184>
   11078:	e5857010 	str	r7, [r5, #16]
   1107c:	e3570000 	cmp	r7, #0
   11080:	0a00006e 	beq	11240 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   11084:	e5953020 	ldr	r3, [r5, #32]
   11088:	e3530000 	cmp	r3, #0
   1108c:	1a000071 	bne	11258 <CUSBHIDDevice::Configure(unsigned int)+0x25c>
   11090:	e1a00007 	mov	r0, r7
   11094:	eb006b9b 	bl	2bf08 <operator new[](unsigned int)>
   11098:	e5850020 	str	r0, [r5, #32]
   1109c:	e1a00006 	mov	r0, r6
   110a0:	e28dd010 	add	sp, sp, #16
   110a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110a8:	e1d430d2 	ldrsb	r3, [r4, #2]
   110ac:	e3530000 	cmp	r3, #0
   110b0:	ba00000d 	blt	110ec <CUSBHIDDevice::Configure(unsigned int)+0xf0>
   110b4:	e5953018 	ldr	r3, [r5, #24]
   110b8:	e1a00005 	mov	r0, r5
   110bc:	e3530000 	cmp	r3, #0
   110c0:	1a000059 	bne	1122c <CUSBHIDDevice::Configure(unsigned int)+0x230>
   110c4:	ebfff5ee 	bl	e884 <CUSBFunction::GetDevice() const>
   110c8:	e1a08000 	mov	r8, r0
   110cc:	e3a00014 	mov	r0, #20
   110d0:	eb006b86 	bl	2bef0 <operator new(unsigned int)>
   110d4:	e1a02004 	mov	r2, r4
   110d8:	e1a01008 	mov	r1, r8
   110dc:	e1a06000 	mov	r6, r0
   110e0:	ebfff41d 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   110e4:	e5856018 	str	r6, [r5, #24]
   110e8:	eaffffcf 	b	1102c <CUSBHIDDevice::Configure(unsigned int)+0x30>
   110ec:	e5953014 	ldr	r3, [r5, #20]
   110f0:	e1a00005 	mov	r0, r5
   110f4:	e3530000 	cmp	r3, #0
   110f8:	1a00004b 	bne	1122c <CUSBHIDDevice::Configure(unsigned int)+0x230>
   110fc:	ebfff5e0 	bl	e884 <CUSBFunction::GetDevice() const>
   11100:	e1a08000 	mov	r8, r0
   11104:	e3a00014 	mov	r0, #20
   11108:	eb006b78 	bl	2bef0 <operator new(unsigned int)>
   1110c:	e1a02004 	mov	r2, r4
   11110:	e1a01008 	mov	r1, r8
   11114:	e1a06000 	mov	r6, r0
   11118:	ebfff40f 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1111c:	e5856014 	str	r6, [r5, #20]
   11120:	eaffffc1 	b	1102c <CUSBHIDDevice::Configure(unsigned int)+0x30>
   11124:	e3011fbc 	movw	r1, #8124	; 0x1fbc
   11128:	e3401003 	movt	r1, #3
   1112c:	e1a00005 	mov	r0, r5
   11130:	ebfff5fe 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   11134:	e1a00006 	mov	r0, r6
   11138:	e28dd010 	add	sp, sp, #16
   1113c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11140:	eb005530 	bl	26608 <CLogger::Get()>
   11144:	e3a02001 	mov	r2, #1
   11148:	e3013948 	movw	r3, #6472	; 0x1948
   1114c:	e3403003 	movt	r3, #3
   11150:	e3011fbc 	movw	r1, #8124	; 0x1fbc
   11154:	e3401003 	movt	r1, #3
   11158:	eb00546b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1115c:	e1a00006 	mov	r0, r6
   11160:	e28dd010 	add	sp, sp, #16
   11164:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11168:	e3011fbc 	movw	r1, #8124	; 0x1fbc
   1116c:	e3401003 	movt	r1, #3
   11170:	ebfff5ee 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   11174:	e1a00006 	mov	r0, r6
   11178:	e28dd010 	add	sp, sp, #16
   1117c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11180:	e5953020 	ldr	r3, [r5, #32]
   11184:	e3530000 	cmp	r3, #0
   11188:	1affffe9 	bne	11134 <CUSBHIDDevice::Configure(unsigned int)+0x138>
   1118c:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11190:	e3401003 	movt	r1, #3
   11194:	e3020084 	movw	r0, #8324	; 0x2084
   11198:	e3400003 	movt	r0, #3
   1119c:	e3a02082 	mov	r2, #130	; 0x82
   111a0:	eb004f73 	bl	24f74 <assertion_failed>
   111a4:	e1a00005 	mov	r0, r5
   111a8:	ebfff641 	bl	eab4 <CUSBFunction::GetInterfaceSubClass() const>
   111ac:	e1a08000 	mov	r8, r0
   111b0:	e3500001 	cmp	r0, #1
   111b4:	1affffac 	bne	1106c <CUSBHIDDevice::Configure(unsigned int)+0x70>
   111b8:	e1a00005 	mov	r0, r5
   111bc:	ebfff5c5 	bl	e8d8 <CUSBFunction::GetHost() const>
   111c0:	e1a09000 	mov	r9, r0
   111c4:	e1a00005 	mov	r0, r5
   111c8:	ebfff5b7 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   111cc:	e1a0a000 	mov	sl, r0
   111d0:	e1a00005 	mov	r0, r5
   111d4:	ebfff61e 	bl	ea54 <CUSBFunction::GetInterfaceNumber() const>
   111d8:	e1a0100a 	mov	r1, sl
   111dc:	e6ff0070 	uxth	r0, r0
   111e0:	e58d400c 	str	r4, [sp, #12]
   111e4:	e58d0004 	str	r0, [sp, #4]
   111e8:	e3a0300b 	mov	r3, #11
   111ec:	e1a00009 	mov	r0, r9
   111f0:	e58d4008 	str	r4, [sp, #8]
   111f4:	e58d4000 	str	r4, [sp]
   111f8:	e3a02021 	mov	r2, #33	; 0x21
   111fc:	eb00013a 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11200:	e3500000 	cmp	r0, #0
   11204:	aaffff98 	bge	1106c <CUSBHIDDevice::Configure(unsigned int)+0x70>
   11208:	eb0054fe 	bl	26608 <CLogger::Get()>
   1120c:	e1a02008 	mov	r2, r8
   11210:	e3023038 	movw	r3, #8248	; 0x2038
   11214:	e3403003 	movt	r3, #3
   11218:	e3011fbc 	movw	r1, #8124	; 0x1fbc
   1121c:	e3401003 	movt	r1, #3
   11220:	e1a06004 	mov	r6, r4
   11224:	eb005438 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11228:	eaffffc1 	b	11134 <CUSBHIDDevice::Configure(unsigned int)+0x138>
   1122c:	e3011fbc 	movw	r1, #8124	; 0x1fbc
   11230:	e3401003 	movt	r1, #3
   11234:	ebfff5bd 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   11238:	e3a06000 	mov	r6, #0
   1123c:	eaffffbc 	b	11134 <CUSBHIDDevice::Configure(unsigned int)+0x138>
   11240:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11244:	e3401003 	movt	r1, #3
   11248:	e3020054 	movw	r0, #8276	; 0x2054
   1124c:	e3400003 	movt	r0, #3
   11250:	e3a0207d 	mov	r2, #125	; 0x7d
   11254:	eb004f46 	bl	24f74 <assertion_failed>
   11258:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   1125c:	e3401003 	movt	r1, #3
   11260:	e302006c 	movw	r0, #8300	; 0x206c
   11264:	e3400003 	movt	r0, #3
   11268:	e3a0207f 	mov	r2, #127	; 0x7f
   1126c:	eb004f40 	bl	24f74 <assertion_failed>

00011270 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   11270:	e590c018 	ldr	ip, [r0, #24]
   11274:	e35c0000 	cmp	ip, #0
   11278:	0a000013 	beq	112cc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   1127c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11280:	e3510000 	cmp	r1, #0
   11284:	e1a07003 	mov	r7, r3
   11288:	e24dd00c 	sub	sp, sp, #12
   1128c:	e1a06002 	mov	r6, r2
   11290:	e1a05001 	mov	r5, r1
   11294:	0a00000e 	beq	112d4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x64>
   11298:	e3520000 	cmp	r2, #0
   1129c:	0a000012 	beq	112ec <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x7c>
   112a0:	e1a04000 	mov	r4, r0
   112a4:	ebfff58b 	bl	e8d8 <CUSBFunction::GetHost() const>
   112a8:	e1a03006 	mov	r3, r6
   112ac:	e1a02005 	mov	r2, r5
   112b0:	e5941018 	ldr	r1, [r4, #24]
   112b4:	e58d7000 	str	r7, [sp]
   112b8:	eb00016b 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   112bc:	e1e00000 	mvn	r0, r0
   112c0:	e1a00fa0 	lsr	r0, r0, #31
   112c4:	e28dd00c 	add	sp, sp, #12
   112c8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   112cc:	e1a0000c 	mov	r0, ip
   112d0:	e12fff1e 	bx	lr
   112d4:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   112d8:	e3401003 	movt	r1, #3
   112dc:	e3020270 	movw	r0, #8816	; 0x2270
   112e0:	e3400003 	movt	r0, #3
   112e4:	e3a0208e 	mov	r2, #142	; 0x8e
   112e8:	eb004f21 	bl	24f74 <assertion_failed>
   112ec:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   112f0:	e3401003 	movt	r1, #3
   112f4:	e302009c 	movw	r0, #8348	; 0x209c
   112f8:	e3400003 	movt	r0, #3
   112fc:	e3a0208f 	mov	r2, #143	; 0x8f
   11300:	eb004f1b 	bl	24f74 <assertion_failed>

00011304 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   11304:	e590c018 	ldr	ip, [r0, #24]
   11308:	e35c0000 	cmp	ip, #0
   1130c:	0a000027 	beq	113b0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xac>
   11310:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11314:	e3510000 	cmp	r1, #0
   11318:	e1a07003 	mov	r7, r3
   1131c:	e24dd008 	sub	sp, sp, #8
   11320:	e1a05002 	mov	r5, r2
   11324:	e1a06001 	mov	r6, r1
   11328:	e1a04000 	mov	r4, r0
   1132c:	0a000021 	beq	113b8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb4>
   11330:	e3520000 	cmp	r2, #0
   11334:	0a000025 	beq	113d0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xcc>
   11338:	e1a00002 	mov	r0, r2
   1133c:	eb006af1 	bl	2bf08 <operator new[](unsigned int)>
   11340:	e1a02005 	mov	r2, r5
   11344:	e1a01006 	mov	r1, r6
   11348:	e1a08000 	mov	r8, r0
   1134c:	eb0069dd 	bl	2bac8 <memcpy>
   11350:	e3a00028 	mov	r0, #40	; 0x28
   11354:	eb000949 	bl	13880 <CUSBRequest::operator new(unsigned int)>
   11358:	e3a0c000 	mov	ip, #0
   1135c:	e1a06000 	mov	r6, r0
   11360:	e5941018 	ldr	r1, [r4, #24]
   11364:	e1a03005 	mov	r3, r5
   11368:	e58dc000 	str	ip, [sp]
   1136c:	e1a02008 	mov	r2, r8
   11370:	eb0008bf 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11374:	e1a03004 	mov	r3, r4
   11378:	e1a02008 	mov	r2, r8
   1137c:	e1a00006 	mov	r0, r6
   11380:	e3001e6c 	movw	r1, #3692	; 0xe6c
   11384:	e3401001 	movt	r1, #1
   11388:	eb00091d 	bl	13804 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1138c:	e1a00004 	mov	r0, r4
   11390:	ebfff550 	bl	e8d8 <CUSBFunction::GetHost() const>
   11394:	e5903000 	ldr	r3, [r0]
   11398:	e1a01006 	mov	r1, r6
   1139c:	e1a02007 	mov	r2, r7
   113a0:	e593300c 	ldr	r3, [r3, #12]
   113a4:	e28dd008 	add	sp, sp, #8
   113a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   113ac:	e12fff13 	bx	r3
   113b0:	e1a0000c 	mov	r0, ip
   113b4:	e12fff1e 	bx	lr
   113b8:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   113bc:	e3401003 	movt	r1, #3
   113c0:	e3020270 	movw	r0, #8816	; 0x2270
   113c4:	e3400003 	movt	r0, #3
   113c8:	e3a020a0 	mov	r2, #160	; 0xa0
   113cc:	eb004ee8 	bl	24f74 <assertion_failed>
   113d0:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   113d4:	e3401003 	movt	r1, #3
   113d8:	e302009c 	movw	r0, #8348	; 0x209c
   113dc:	e3400003 	movt	r0, #3
   113e0:	e3a020a1 	mov	r2, #161	; 0xa1
   113e4:	eb004ee2 	bl	24f74 <assertion_failed>

000113e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   113e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   113ec:	e1a06002 	mov	r6, r2
   113f0:	e590201c 	ldr	r2, [r0, #28]
   113f4:	e24dd00c 	sub	sp, sp, #12
   113f8:	e3520000 	cmp	r2, #0
   113fc:	1a000011 	bne	11448 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   11400:	e5902014 	ldr	r2, [r0, #20]
   11404:	e1a04000 	mov	r4, r0
   11408:	e3520000 	cmp	r2, #0
   1140c:	0a000013 	beq	11460 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x78>
   11410:	e1a05001 	mov	r5, r1
   11414:	e3510000 	cmp	r1, #0
   11418:	0a000016 	beq	11478 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   1141c:	e3560000 	cmp	r6, #0
   11420:	0a00001a 	beq	11490 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa8>
   11424:	e1a07003 	mov	r7, r3
   11428:	ebfff52a 	bl	e8d8 <CUSBFunction::GetHost() const>
   1142c:	e5941014 	ldr	r1, [r4, #20]
   11430:	e1a03006 	mov	r3, r6
   11434:	e58d7000 	str	r7, [sp]
   11438:	e1a02005 	mov	r2, r5
   1143c:	eb00010a 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11440:	e28dd00c 	add	sp, sp, #12
   11444:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11448:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   1144c:	e3401003 	movt	r1, #3
   11450:	e30200ac 	movw	r0, #8364	; 0x20ac
   11454:	e3400003 	movt	r0, #3
   11458:	e3a020be 	mov	r2, #190	; 0xbe
   1145c:	eb004ec4 	bl	24f74 <assertion_failed>
   11460:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11464:	e3401003 	movt	r1, #3
   11468:	e30200b8 	movw	r0, #8376	; 0x20b8
   1146c:	e3400003 	movt	r0, #3
   11470:	e3a020c0 	mov	r2, #192	; 0xc0
   11474:	eb004ebe 	bl	24f74 <assertion_failed>
   11478:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   1147c:	e3401003 	movt	r1, #3
   11480:	e3020270 	movw	r0, #8816	; 0x2270
   11484:	e3400003 	movt	r0, #3
   11488:	e3a020c1 	mov	r2, #193	; 0xc1
   1148c:	eb004eb8 	bl	24f74 <assertion_failed>
   11490:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11494:	e3401003 	movt	r1, #3
   11498:	e302009c 	movw	r0, #8348	; 0x209c
   1149c:	e3400003 	movt	r0, #3
   114a0:	e3a020c2 	mov	r2, #194	; 0xc2
   114a4:	eb004eb2 	bl	24f74 <assertion_failed>

000114a8 <CUSBHIDDevice::StartRequest()>:
   114a8:	e92d4070 	push	{r4, r5, r6, lr}
   114ac:	e5903014 	ldr	r3, [r0, #20]
   114b0:	e24dd008 	sub	sp, sp, #8
   114b4:	e3530000 	cmp	r3, #0
   114b8:	0a000021 	beq	11544 <CUSBHIDDevice::StartRequest()+0x9c>
   114bc:	e5903020 	ldr	r3, [r0, #32]
   114c0:	e1a04000 	mov	r4, r0
   114c4:	e3530000 	cmp	r3, #0
   114c8:	0a000023 	beq	1155c <CUSBHIDDevice::StartRequest()+0xb4>
   114cc:	e590501c 	ldr	r5, [r0, #28]
   114d0:	e3550000 	cmp	r5, #0
   114d4:	1a000026 	bne	11574 <CUSBHIDDevice::StartRequest()+0xcc>
   114d8:	e5903010 	ldr	r3, [r0, #16]
   114dc:	e3530000 	cmp	r3, #0
   114e0:	0a000029 	beq	1158c <CUSBHIDDevice::StartRequest()+0xe4>
   114e4:	e3a00028 	mov	r0, #40	; 0x28
   114e8:	eb0008e4 	bl	13880 <CUSBRequest::operator new(unsigned int)>
   114ec:	e5943010 	ldr	r3, [r4, #16]
   114f0:	e1a06000 	mov	r6, r0
   114f4:	e5942020 	ldr	r2, [r4, #32]
   114f8:	e5941014 	ldr	r1, [r4, #20]
   114fc:	e58d5000 	str	r5, [sp]
   11500:	eb00085b 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11504:	e1a03004 	mov	r3, r4
   11508:	e1a02005 	mov	r2, r5
   1150c:	e1a00006 	mov	r0, r6
   11510:	e584601c 	str	r6, [r4, #28]
   11514:	e3011690 	movw	r1, #5776	; 0x1690
   11518:	e3401001 	movt	r1, #1
   1151c:	eb0008b8 	bl	13804 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   11520:	e1a00004 	mov	r0, r4
   11524:	ebfff4eb 	bl	e8d8 <CUSBFunction::GetHost() const>
   11528:	e5903000 	ldr	r3, [r0]
   1152c:	e1a02005 	mov	r2, r5
   11530:	e594101c 	ldr	r1, [r4, #28]
   11534:	e593300c 	ldr	r3, [r3, #12]
   11538:	e28dd008 	add	sp, sp, #8
   1153c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11540:	e12fff13 	bx	r3
   11544:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11548:	e3401003 	movt	r1, #3
   1154c:	e30200b8 	movw	r0, #8376	; 0x20b8
   11550:	e3400003 	movt	r0, #3
   11554:	e3a020c8 	mov	r2, #200	; 0xc8
   11558:	eb004e85 	bl	24f74 <assertion_failed>
   1155c:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11560:	e3401003 	movt	r1, #3
   11564:	e3020084 	movw	r0, #8324	; 0x2084
   11568:	e3400003 	movt	r0, #3
   1156c:	e3a020c9 	mov	r2, #201	; 0xc9
   11570:	eb004e7f 	bl	24f74 <assertion_failed>
   11574:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11578:	e3401003 	movt	r1, #3
   1157c:	e30200ac 	movw	r0, #8364	; 0x20ac
   11580:	e3400003 	movt	r0, #3
   11584:	e3a020cb 	mov	r2, #203	; 0xcb
   11588:	eb004e79 	bl	24f74 <assertion_failed>
   1158c:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11590:	e3401003 	movt	r1, #3
   11594:	e3020054 	movw	r0, #8276	; 0x2054
   11598:	e3400003 	movt	r0, #3
   1159c:	e3a020cc 	mov	r2, #204	; 0xcc
   115a0:	eb004e73 	bl	24f74 <assertion_failed>

000115a4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   115a4:	e92d4070 	push	{r4, r5, r6, lr}
   115a8:	e3510000 	cmp	r1, #0
   115ac:	0a00002b 	beq	11660 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   115b0:	e590501c 	ldr	r5, [r0, #28]
   115b4:	e1a04000 	mov	r4, r0
   115b8:	e1550001 	cmp	r5, r1
   115bc:	1a00002d 	bne	11678 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   115c0:	e1a00005 	mov	r0, r5
   115c4:	eb00085a 	bl	13734 <CUSBRequest::GetStatus() const>
   115c8:	e5943000 	ldr	r3, [r4]
   115cc:	e2502000 	subs	r2, r0, #0
   115d0:	1a000019 	bne	1163c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x98>
   115d4:	e1a01002 	mov	r1, r2
   115d8:	e1a00004 	mov	r0, r4
   115dc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   115e0:	e12fff33 	blx	r3
   115e4:	e594501c 	ldr	r5, [r4, #28]
   115e8:	e3550000 	cmp	r5, #0
   115ec:	0a000004 	beq	11604 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   115f0:	e1a00005 	mov	r0, r5
   115f4:	eb00083f 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   115f8:	e1a00005 	mov	r0, r5
   115fc:	e3a01028 	mov	r1, #40	; 0x28
   11600:	eb0008b4 	bl	138d8 <CUSBRequest::operator delete(void*, unsigned int)>
   11604:	e3a03000 	mov	r3, #0
   11608:	e1a00004 	mov	r0, r4
   1160c:	e584301c 	str	r3, [r4, #28]
   11610:	ebffffa4 	bl	114a8 <CUSBHIDDevice::StartRequest()>
   11614:	e3500000 	cmp	r0, #0
   11618:	18bd8070 	popne	{r4, r5, r6, pc}
   1161c:	eb0053f9 	bl	26608 <CLogger::Get()>
   11620:	e30230e0 	movw	r3, #8416	; 0x20e0
   11624:	e3403003 	movt	r3, #3
   11628:	e3011fbc 	movw	r1, #8124	; 0x1fbc
   1162c:	e3401003 	movt	r1, #3
   11630:	e3a02001 	mov	r2, #1
   11634:	e8bd4070 	pop	{r4, r5, r6, lr}
   11638:	ea005333 	b	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1163c:	e5946020 	ldr	r6, [r4, #32]
   11640:	e1a00005 	mov	r0, r5
   11644:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   11648:	eb00083b 	bl	1373c <CUSBRequest::GetResultLength() const>
   1164c:	e1a01006 	mov	r1, r6
   11650:	e1a02000 	mov	r2, r0
   11654:	e1a00004 	mov	r0, r4
   11658:	e12fff35 	blx	r5
   1165c:	eaffffe0 	b	115e4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x40>
   11660:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   11664:	e3401003 	movt	r1, #3
   11668:	e3000890 	movw	r0, #2192	; 0x890
   1166c:	e3400003 	movt	r0, #3
   11670:	e3a020d6 	mov	r2, #214	; 0xd6
   11674:	eb004e3e 	bl	24f74 <assertion_failed>
   11678:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   1167c:	e3401003 	movt	r1, #3
   11680:	e30200d0 	movw	r0, #8400	; 0x20d0
   11684:	e3400003 	movt	r0, #3
   11688:	e3a020d7 	mov	r2, #215	; 0xd7
   1168c:	eb004e38 	bl	24f74 <assertion_failed>

00011690 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   11690:	e3520000 	cmp	r2, #0
   11694:	0a000002 	beq	116a4 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   11698:	e1a01000 	mov	r1, r0
   1169c:	e1a00002 	mov	r0, r2
   116a0:	eaffffbf 	b	115a4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   116a4:	e3011ff4 	movw	r1, #8180	; 0x1ff4
   116a8:	e3401003 	movt	r1, #3
   116ac:	e30007a4 	movw	r0, #1956	; 0x7a4
   116b0:	e3400003 	movt	r0, #3
   116b4:	e92d4010 	push	{r4, lr}
   116b8:	e3a020ee 	mov	r2, #238	; 0xee
   116bc:	eb004e2c 	bl	24f74 <assertion_failed>

000116c0 <CUSBHostController::CUSBHostController()>:
   116c0:	e59f3004 	ldr	r3, [pc, #4]	; 116cc <CUSBHostController::CUSBHostController()+0xc>
   116c4:	e5803000 	str	r3, [r0]
   116c8:	e12fff1e 	bx	lr
   116cc:	00032100 	.word	0x00032100

000116d0 <CUSBHostController::~CUSBHostController()>:
   116d0:	e12fff1e 	bx	lr

000116d4 <CUSBHostController::~CUSBHostController()>:
   116d4:	e92d4010 	push	{r4, lr}
   116d8:	e3a01004 	mov	r1, #4
   116dc:	e1a04000 	mov	r4, r0
   116e0:	eb006a10 	bl	2bf28 <operator delete(void*, unsigned int)>
   116e4:	e1a00004 	mov	r0, r4
   116e8:	e8bd8010 	pop	{r4, pc}

000116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   116ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f0:	e1a05000 	mov	r5, r0
   116f4:	e3a00008 	mov	r0, #8
   116f8:	e24dd034 	sub	sp, sp, #52	; 0x34
   116fc:	e1a0a002 	mov	sl, r2
   11700:	e1a09003 	mov	r9, r3
   11704:	e1a0b001 	mov	fp, r1
   11708:	e1dd66b4 	ldrh	r6, [sp, #100]	; 0x64
   1170c:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
   11710:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
   11714:	eb0069f5 	bl	2bef0 <operator new(unsigned int)>
   11718:	e1a04000 	mov	r4, r0
   1171c:	e58d0000 	str	r0, [sp]
   11720:	e1a0100b 	mov	r1, fp
   11724:	e5c0a000 	strb	sl, [r0]
   11728:	e5c09001 	strb	r9, [r0, #1]
   1172c:	e1a03006 	mov	r3, r6
   11730:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   11734:	e28d0008 	add	r0, sp, #8
   11738:	e1c480b2 	strh	r8, [r4, #2]
   1173c:	e1c470b4 	strh	r7, [r4, #4]
   11740:	e1c460b6 	strh	r6, [r4, #6]
   11744:	eb0007ca 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11748:	e5953000 	ldr	r3, [r5]
   1174c:	e1a00005 	mov	r0, r5
   11750:	e28d1008 	add	r1, sp, #8
   11754:	e3a02000 	mov	r2, #0
   11758:	e5933008 	ldr	r3, [r3, #8]
   1175c:	e12fff33 	blx	r3
   11760:	e3500000 	cmp	r0, #0
   11764:	0a00000a 	beq	11794 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa8>
   11768:	e28d0008 	add	r0, sp, #8
   1176c:	eb0007f2 	bl	1373c <CUSBRequest::GetResultLength() const>
   11770:	e1a05000 	mov	r5, r0
   11774:	e1a00004 	mov	r0, r4
   11778:	e3a01008 	mov	r1, #8
   1177c:	eb0069e9 	bl	2bf28 <operator delete(void*, unsigned int)>
   11780:	e28d0008 	add	r0, sp, #8
   11784:	eb0007db 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   11788:	e1a00005 	mov	r0, r5
   1178c:	e28dd034 	add	sp, sp, #52	; 0x34
   11790:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11794:	e3e05000 	mvn	r5, #0
   11798:	eafffff5 	b	11774 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0x88>

0001179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   1179c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   117a0:	e1832402 	orr	r2, r3, r2, lsl #8
   117a4:	e59de004 	ldr	lr, [sp, #4]
   117a8:	e5ddc00c 	ldrb	ip, [sp, #12]
   117ac:	e3a03006 	mov	r3, #6
   117b0:	e58d2004 	str	r2, [sp, #4]
   117b4:	e58de00c 	str	lr, [sp, #12]
   117b8:	e1a0200c 	mov	r2, ip
   117bc:	e1dde0b8 	ldrh	lr, [sp, #8]
   117c0:	e1ddc1b0 	ldrh	ip, [sp, #16]
   117c4:	e58dc008 	str	ip, [sp, #8]
   117c8:	e58de010 	str	lr, [sp, #16]
   117cc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   117d0:	eaffffc5 	b	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

000117d4 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   117d4:	e92d4010 	push	{r4, lr}
   117d8:	e3a04000 	mov	r4, #0
   117dc:	e3a03005 	mov	r3, #5
   117e0:	e24dd010 	sub	sp, sp, #16
   117e4:	e58d2000 	str	r2, [sp]
   117e8:	e1a02004 	mov	r2, r4
   117ec:	e58d400c 	str	r4, [sp, #12]
   117f0:	e58d4008 	str	r4, [sp, #8]
   117f4:	e58d4004 	str	r4, [sp, #4]
   117f8:	ebffffbb 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   117fc:	e1500004 	cmp	r0, r4
   11800:	b1a00004 	movlt	r0, r4
   11804:	ba000003 	blt	11818 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
   11808:	eb0066fa 	bl	2b3f8 <CTimer::Get()>
   1180c:	e3a00032 	mov	r0, #50	; 0x32
   11810:	eb0066bb 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
   11814:	e3a00001 	mov	r0, #1
   11818:	e28dd010 	add	sp, sp, #16
   1181c:	e8bd8010 	pop	{r4, pc}

00011820 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   11820:	e92d4010 	push	{r4, lr}
   11824:	e3a04000 	mov	r4, #0
   11828:	e3a03009 	mov	r3, #9
   1182c:	e24dd010 	sub	sp, sp, #16
   11830:	e58d2000 	str	r2, [sp]
   11834:	e1a02004 	mov	r2, r4
   11838:	e58d400c 	str	r4, [sp, #12]
   1183c:	e58d4008 	str	r4, [sp, #8]
   11840:	e58d4004 	str	r4, [sp, #4]
   11844:	ebffffa8 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11848:	e1500004 	cmp	r0, r4
   1184c:	b1a00004 	movlt	r0, r4
   11850:	ba000003 	blt	11864 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
   11854:	eb0066e7 	bl	2b3f8 <CTimer::Get()>
   11858:	e3a00032 	mov	r0, #50	; 0x32
   1185c:	eb0066a8 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
   11860:	e3a00001 	mov	r0, #1
   11864:	e28dd010 	add	sp, sp, #16
   11868:	e8bd8010 	pop	{r4, pc}

0001186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   1186c:	e92d4010 	push	{r4, lr}
   11870:	e1a04000 	mov	r4, r0
   11874:	e3a0c000 	mov	ip, #0
   11878:	e24dd030 	sub	sp, sp, #48	; 0x30
   1187c:	e28d0008 	add	r0, sp, #8
   11880:	e58dc000 	str	ip, [sp]
   11884:	eb00077a 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   11888:	e5943000 	ldr	r3, [r4]
   1188c:	e1a00004 	mov	r0, r4
   11890:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   11894:	e28d1008 	add	r1, sp, #8
   11898:	e5933008 	ldr	r3, [r3, #8]
   1189c:	e12fff33 	blx	r3
   118a0:	e3500000 	cmp	r0, #0
   118a4:	0a000007 	beq	118c8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   118a8:	e28d0008 	add	r0, sp, #8
   118ac:	eb0007a2 	bl	1373c <CUSBRequest::GetResultLength() const>
   118b0:	e1a04000 	mov	r4, r0
   118b4:	e28d0008 	add	r0, sp, #8
   118b8:	eb00078e 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   118bc:	e1a00004 	mov	r0, r4
   118c0:	e28dd030 	add	sp, sp, #48	; 0x30
   118c4:	e8bd8010 	pop	{r4, pc}
   118c8:	e3e04000 	mvn	r4, #0
   118cc:	eafffff8 	b	118b4 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

000118d0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   118d0:	e92d4070 	push	{r4, r5, r6, lr}
   118d4:	e1a04000 	mov	r4, r0
   118d8:	e3025110 	movw	r5, #8464	; 0x2110
   118dc:	e3405003 	movt	r5, #3
   118e0:	e2853008 	add	r3, r5, #8
   118e4:	e3a06000 	mov	r6, #0
   118e8:	e5803000 	str	r3, [r0]
   118ec:	e580643c 	str	r6, [r0, #1084]	; 0x43c
   118f0:	eb005049 	bl	25a1c <CDeviceNameService::Get()>
   118f4:	e1a03006 	mov	r3, r6
   118f8:	e2851030 	add	r1, r5, #48	; 0x30
   118fc:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   11900:	eb00506b 	bl	25ab4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   11904:	e2840024 	add	r0, r4, #36	; 0x24
   11908:	eb0016f9 	bl	174f4 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   1190c:	e1a00004 	mov	r0, r4
   11910:	ebfffd8e 	bl	10f50 <CUSBHIDDevice::~CUSBHIDDevice()>
   11914:	e1a00004 	mov	r0, r4
   11918:	e8bd8070 	pop	{r4, r5, r6, pc}

0001191c <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   1191c:	e92d4010 	push	{r4, lr}
   11920:	e1a04000 	mov	r4, r0
   11924:	ebffffe9 	bl	118d0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   11928:	e1a00004 	mov	r0, r4
   1192c:	e3a01e45 	mov	r1, #1104	; 0x450
   11930:	eb00697c 	bl	2bf28 <operator delete(void*, unsigned int)>
   11934:	e1a00004 	mov	r0, r4
   11938:	e8bd8010 	pop	{r4, pc}

0001193c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   1193c:	e2522008 	subs	r2, r2, #8
   11940:	13a02001 	movne	r2, #1
   11944:	e3510000 	cmp	r1, #0
   11948:	03a02001 	moveq	r2, #1
   1194c:	e3520000 	cmp	r2, #0
   11950:	112fff1e 	bxne	lr
   11954:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11958:	e1a05001 	mov	r5, r1
   1195c:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
   11960:	e24dd004 	sub	sp, sp, #4
   11964:	e4d52002 	ldrb	r2, [r5], #2
   11968:	e3530000 	cmp	r3, #0
   1196c:	0a000004 	beq	11984 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11970:	e1a01005 	mov	r1, r5
   11974:	e1a00002 	mov	r0, r2
   11978:	e28dd004 	add	sp, sp, #4
   1197c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11980:	e12fff13 	bx	r3
   11984:	e1a07001 	mov	r7, r1
   11988:	e1a06000 	mov	r6, r0
   1198c:	e1a04003 	mov	r4, r3
   11990:	e3a09001 	mov	r9, #1
   11994:	e2808024 	add	r8, r0, #36	; 0x24
   11998:	ea000005 	b	119b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
   1199c:	e3530000 	cmp	r3, #0
   119a0:	1a00000f 	bne	119e4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa8>
   119a4:	e2844001 	add	r4, r4, #1
   119a8:	e3540008 	cmp	r4, #8
   119ac:	0a000011 	beq	119f8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xbc>
   119b0:	e5d72000 	ldrb	r2, [r7]
   119b4:	e5d63440 	ldrb	r3, [r6, #1088]	; 0x440
   119b8:	e1a01419 	lsl	r1, r9, r4
   119bc:	e1120001 	tst	r2, r1
   119c0:	e0033001 	and	r3, r3, r1
   119c4:	0afffff4 	beq	1199c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x60>
   119c8:	e3530000 	cmp	r3, #0
   119cc:	1afffff4 	bne	119a4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
   119d0:	e2441080 	sub	r1, r4, #128	; 0x80
   119d4:	e1a00008 	mov	r0, r8
   119d8:	e6ef1071 	uxtb	r1, r1
   119dc:	eb001729 	bl	17688 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   119e0:	eaffffef 	b	119a4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
   119e4:	e2441080 	sub	r1, r4, #128	; 0x80
   119e8:	e1a00008 	mov	r0, r8
   119ec:	e6ef1071 	uxtb	r1, r1
   119f0:	eb001735 	bl	176cc <CKeyboardBehaviour::KeyReleased(unsigned char)>
   119f4:	eaffffea 	b	119a4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
   119f8:	e2869d11 	add	r9, r6, #1088	; 0x440
   119fc:	e287b008 	add	fp, r7, #8
   11a00:	e1a08009 	mov	r8, r9
   11a04:	e2899002 	add	r9, r9, #2
   11a08:	e2888008 	add	r8, r8, #8
   11a0c:	e1a0a009 	mov	sl, r9
   11a10:	e2864024 	add	r4, r6, #36	; 0x24
   11a14:	ea000001 	b	11a20 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   11a18:	e158000a 	cmp	r8, sl
   11a1c:	0a00000b 	beq	11a50 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x114>
   11a20:	e4da1001 	ldrb	r1, [sl], #1
   11a24:	e3510000 	cmp	r1, #0
   11a28:	11a03005 	movne	r3, r5
   11a2c:	0afffff9 	beq	11a18 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
   11a30:	e4d32001 	ldrb	r2, [r3], #1
   11a34:	e1520001 	cmp	r2, r1
   11a38:	0afffff6 	beq	11a18 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
   11a3c:	e15b0003 	cmp	fp, r3
   11a40:	1afffffa 	bne	11a30 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf4>
   11a44:	e1a00004 	mov	r0, r4
   11a48:	eb00171f 	bl	176cc <CKeyboardBehaviour::KeyReleased(unsigned char)>
   11a4c:	eafffff1 	b	11a18 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
   11a50:	e2874001 	add	r4, r7, #1
   11a54:	e287a007 	add	sl, r7, #7
   11a58:	e2865024 	add	r5, r6, #36	; 0x24
   11a5c:	ea000001 	b	11a68 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x12c>
   11a60:	e15a0004 	cmp	sl, r4
   11a64:	0a00000b 	beq	11a98 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
   11a68:	e5f41001 	ldrb	r1, [r4, #1]!
   11a6c:	e3510000 	cmp	r1, #0
   11a70:	11a03009 	movne	r3, r9
   11a74:	0afffff9 	beq	11a60 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
   11a78:	e4d32001 	ldrb	r2, [r3], #1
   11a7c:	e1520001 	cmp	r2, r1
   11a80:	0afffff6 	beq	11a60 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
   11a84:	e1530008 	cmp	r3, r8
   11a88:	1afffffa 	bne	11a78 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x13c>
   11a8c:	e1a00005 	mov	r0, r5
   11a90:	eb0016fc 	bl	17688 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   11a94:	eafffff1 	b	11a60 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
   11a98:	e1a01007 	mov	r1, r7
   11a9c:	e2860d11 	add	r0, r6, #1088	; 0x440
   11aa0:	e3a02008 	mov	r2, #8
   11aa4:	e28dd004 	add	sp, sp, #4
   11aa8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aac:	ea006805 	b	2bac8 <memcpy>

00011ab0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   11ab0:	e92d4010 	push	{r4, lr}
   11ab4:	e3a02008 	mov	r2, #8
   11ab8:	e1a04000 	mov	r4, r0
   11abc:	ebfffd0f 	bl	10f00 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   11ac0:	e1a00004 	mov	r0, r4
   11ac4:	e59f302c 	ldr	r3, [pc, #44]	; 11af8 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x48>
   11ac8:	e4803024 	str	r3, [r0], #36	; 0x24
   11acc:	eb00167c 	bl	174c4 <CKeyboardBehaviour::CKeyboardBehaviour()>
   11ad0:	e3a03000 	mov	r3, #0
   11ad4:	e1a01003 	mov	r1, r3
   11ad8:	e584343c 	str	r3, [r4, #1084]	; 0x43c
   11adc:	e5c43448 	strb	r3, [r4, #1096]	; 0x448
   11ae0:	e2840d11 	add	r0, r4, #1088	; 0x440
   11ae4:	e584344c 	str	r3, [r4, #1100]	; 0x44c
   11ae8:	e3a02008 	mov	r2, #8
   11aec:	eb00664d 	bl	2b428 <memset>
   11af0:	e1a00004 	mov	r0, r4
   11af4:	e8bd8010 	pop	{r4, pc}
   11af8:	00032118 	.word	0x00032118

00011afc <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   11afc:	e2800024 	add	r0, r0, #36	; 0x24
   11b00:	ea001685 	b	1751c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00011b04 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   11b04:	e2800024 	add	r0, r0, #36	; 0x24
   11b08:	ea00168e 	b	17548 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

00011b0c <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   11b0c:	e2800024 	add	r0, r0, #36	; 0x24
   11b10:	ea001697 	b	17574 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00011b14 <CUSBKeyboardDevice::GetLEDStatus() const>:
   11b14:	e92d4010 	push	{r4, lr}
   11b18:	e2800024 	add	r0, r0, #36	; 0x24
   11b1c:	eb00169f 	bl	175a0 <CKeyboardBehaviour::GetLEDStatus() const>
   11b20:	e2003001 	and	r3, r0, #1
   11b24:	e3100002 	tst	r0, #2
   11b28:	13833002 	orrne	r3, r3, #2
   11b2c:	e3100004 	tst	r0, #4
   11b30:	13833004 	orrne	r3, r3, #4
   11b34:	e1a00003 	mov	r0, r3
   11b38:	e8bd8010 	pop	{r4, pc}

00011b3c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   11b3c:	e3510000 	cmp	r1, #0
   11b40:	0a000001 	beq	11b4c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x10>
   11b44:	e580143c 	str	r1, [r0, #1084]	; 0x43c
   11b48:	e12fff1e 	bx	lr
   11b4c:	e3021150 	movw	r1, #8528	; 0x2150
   11b50:	e3401003 	movt	r1, #3
   11b54:	e3020160 	movw	r0, #8544	; 0x2160
   11b58:	e3400003 	movt	r0, #3
   11b5c:	e92d4010 	push	{r4, lr}
   11b60:	e3a0207d 	mov	r2, #125	; 0x7d
   11b64:	eb004d02 	bl	24f74 <assertion_failed>

00011b68 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   11b68:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11b6c:	e1a05000 	mov	r5, r0
   11b70:	e24dd01c 	sub	sp, sp, #28
   11b74:	e28d4018 	add	r4, sp, #24
   11b78:	e5641004 	strb	r1, [r4, #-4]!
   11b7c:	ebfff355 	bl	e8d8 <CUSBFunction::GetHost() const>
   11b80:	e1a06000 	mov	r6, r0
   11b84:	e1a00005 	mov	r0, r5
   11b88:	ebfff347 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   11b8c:	e1a07000 	mov	r7, r0
   11b90:	e1a00005 	mov	r0, r5
   11b94:	ebfff3ae 	bl	ea54 <CUSBFunction::GetInterfaceNumber() const>
   11b98:	e58d4008 	str	r4, [sp, #8]
   11b9c:	e6ff0070 	uxth	r0, r0
   11ba0:	e1a01007 	mov	r1, r7
   11ba4:	e58d0004 	str	r0, [sp, #4]
   11ba8:	e3a03001 	mov	r3, #1
   11bac:	e1a00006 	mov	r0, r6
   11bb0:	e58d300c 	str	r3, [sp, #12]
   11bb4:	e3a02c02 	mov	r2, #512	; 0x200
   11bb8:	e3a03009 	mov	r3, #9
   11bbc:	e58d2000 	str	r2, [sp]
   11bc0:	e3a02021 	mov	r2, #33	; 0x21
   11bc4:	ebfffec8 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11bc8:	e1e00000 	mvn	r0, r0
   11bcc:	e1a00fa0 	lsr	r0, r0, #31
   11bd0:	e28dd01c 	add	sp, sp, #28
   11bd4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00011bd8 <CUSBKeyboardDevice::Configure()>:
   11bd8:	e92d4030 	push	{r4, r5, lr}
   11bdc:	e3a01000 	mov	r1, #0
   11be0:	e1a04000 	mov	r4, r0
   11be4:	e24dd00c 	sub	sp, sp, #12
   11be8:	ebfffd03 	bl	10ffc <CUSBHIDDevice::Configure(unsigned int)>
   11bec:	e2505000 	subs	r5, r0, #0
   11bf0:	0a000013 	beq	11c44 <CUSBKeyboardDevice::Configure()+0x6c>
   11bf4:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
   11bf8:	e1a00004 	mov	r0, r4
   11bfc:	ebffffd9 	bl	11b68 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   11c00:	e3083f64 	movw	r3, #36708	; 0x8f64
   11c04:	e3403003 	movt	r3, #3
   11c08:	e5932000 	ldr	r2, [r3]
   11c0c:	e584244c 	str	r2, [r4, #1100]	; 0x44c
   11c10:	e2822001 	add	r2, r2, #1
   11c14:	e5832000 	str	r2, [r3]
   11c18:	eb004f7f 	bl	25a1c <CDeviceNameService::Get()>
   11c1c:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   11c20:	e3a01000 	mov	r1, #0
   11c24:	e1a03004 	mov	r3, r4
   11c28:	e58d1000 	str	r1, [sp]
   11c2c:	e59f1034 	ldr	r1, [pc, #52]	; 11c68 <CUSBKeyboardDevice::Configure()+0x90>
   11c30:	eb004f85 	bl	25a4c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   11c34:	e1a00004 	mov	r0, r4
   11c38:	e28dd00c 	add	sp, sp, #12
   11c3c:	e8bd4030 	pop	{r4, r5, lr}
   11c40:	eafffe18 	b	114a8 <CUSBHIDDevice::StartRequest()>
   11c44:	eb00526f 	bl	26608 <CLogger::Get()>
   11c48:	e3a02001 	mov	r2, #1
   11c4c:	e59f1018 	ldr	r1, [pc, #24]	; 11c6c <CUSBKeyboardDevice::Configure()+0x94>
   11c50:	e302317c 	movw	r3, #8572	; 0x217c
   11c54:	e3403003 	movt	r3, #3
   11c58:	eb0051ab 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c5c:	e1a00005 	mov	r0, r5
   11c60:	e28dd00c 	add	sp, sp, #12
   11c64:	e8bd8030 	pop	{r4, r5, pc}
   11c68:	00032140 	.word	0x00032140
   11c6c:	00032148 	.word	0x00032148

00011c70 <CUSBKeyboardDevice::UpdateLEDs()>:
   11c70:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
   11c74:	e3520000 	cmp	r2, #0
   11c78:	112fff1e 	bxne	lr
   11c7c:	e92d4010 	push	{r4, lr}
   11c80:	e1a04000 	mov	r4, r0
   11c84:	ebffffa2 	bl	11b14 <CUSBKeyboardDevice::GetLEDStatus() const>
   11c88:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
   11c8c:	e1530000 	cmp	r3, r0
   11c90:	08bd8010 	popeq	{r4, pc}
   11c94:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
   11c98:	e1a01000 	mov	r1, r0
   11c9c:	e1a00004 	mov	r0, r4
   11ca0:	ebffffb0 	bl	11b68 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   11ca4:	e3500000 	cmp	r0, #0
   11ca8:	18bd8010 	popne	{r4, pc}
   11cac:	eb005255 	bl	26608 <CLogger::Get()>
   11cb0:	e3023198 	movw	r3, #8600	; 0x2198
   11cb4:	e3403003 	movt	r3, #3
   11cb8:	e3a02001 	mov	r2, #1
   11cbc:	e59f1004 	ldr	r1, [pc, #4]	; 11cc8 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
   11cc0:	e8bd4010 	pop	{r4, lr}
   11cc4:	ea005190 	b	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11cc8:	00032148 	.word	0x00032148

00011ccc <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   11ccc:	e0802002 	add	r2, r0, r2
   11cd0:	ea000002 	b	11ce0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   11cd4:	e4d03001 	ldrb	r3, [r0], #1
   11cd8:	e1530001 	cmp	r3, r1
   11cdc:	0a000003 	beq	11cf0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   11ce0:	e1500002 	cmp	r0, r2
   11ce4:	1afffffa 	bne	11cd4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   11ce8:	e3a00000 	mov	r0, #0
   11cec:	e12fff1e 	bx	lr
   11cf0:	e3a00001 	mov	r0, #1
   11cf4:	e12fff1e 	bx	lr

00011cf8 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   11cf8:	e1c022f0 	strd	r2, [r0, #32]
   11cfc:	e1a01003 	mov	r1, r3
   11d00:	e1a00002 	mov	r0, r2
   11d04:	e12fff1e 	bx	lr

00011d08 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   11d08:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   11d0c:	e59f20f8 	ldr	r2, [pc, #248]	; 11e0c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x104>
   11d10:	e92d4070 	push	{r4, r5, r6, lr}
   11d14:	e3530000 	cmp	r3, #0
   11d18:	e1a04000 	mov	r4, r0
   11d1c:	e5802000 	str	r2, [r0]
   11d20:	1a000021 	bne	11dac <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   11d24:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   11d28:	e3550000 	cmp	r5, #0
   11d2c:	0a000004 	beq	11d44 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   11d30:	e1a00005 	mov	r0, r5
   11d34:	eb001924 	bl	181cc <CPartitionManager::~CPartitionManager()>
   11d38:	e1a00005 	mov	r0, r5
   11d3c:	e3a01024 	mov	r1, #36	; 0x24
   11d40:	eb006878 	bl	2bf28 <operator delete(void*, unsigned int)>
   11d44:	e5945014 	ldr	r5, [r4, #20]
   11d48:	e3a03000 	mov	r3, #0
   11d4c:	e5843028 	str	r3, [r4, #40]	; 0x28
   11d50:	e1550003 	cmp	r5, r3
   11d54:	0a000004 	beq	11d6c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   11d58:	e1a00005 	mov	r0, r5
   11d5c:	ebfff162 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   11d60:	e1a00005 	mov	r0, r5
   11d64:	e3a01014 	mov	r1, #20
   11d68:	eb00686e 	bl	2bf28 <operator delete(void*, unsigned int)>
   11d6c:	e5945010 	ldr	r5, [r4, #16]
   11d70:	e3a03000 	mov	r3, #0
   11d74:	e5843014 	str	r3, [r4, #20]
   11d78:	e1550003 	cmp	r5, r3
   11d7c:	0a000004 	beq	11d94 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   11d80:	e1a00005 	mov	r0, r5
   11d84:	ebfff158 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   11d88:	e1a00005 	mov	r0, r5
   11d8c:	e3a01014 	mov	r1, #20
   11d90:	eb006864 	bl	2bf28 <operator delete(void*, unsigned int)>
   11d94:	e3a03000 	mov	r3, #0
   11d98:	e1a00004 	mov	r0, r4
   11d9c:	e5843010 	str	r3, [r4, #16]
   11da0:	ebfff1be 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   11da4:	e1a00004 	mov	r0, r4
   11da8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11dac:	eb004f1a 	bl	25a1c <CDeviceNameService::Get()>
   11db0:	e3a03001 	mov	r3, #1
   11db4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   11db8:	e30211e4 	movw	r1, #8676	; 0x21e4
   11dbc:	e3401003 	movt	r1, #3
   11dc0:	eb004f3b 	bl	25ab4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   11dc4:	e3093400 	movw	r3, #37888	; 0x9400
   11dc8:	e3403003 	movt	r3, #3
   11dcc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11dd0:	e3a02001 	mov	r2, #1
   11dd4:	e5931000 	ldr	r1, [r3]
   11dd8:	e1a02012 	lsl	r2, r2, r0
   11ddc:	e1120001 	tst	r2, r1
   11de0:	11c12002 	bicne	r2, r1, r2
   11de4:	13a01000 	movne	r1, #0
   11de8:	15832000 	strne	r2, [r3]
   11dec:	1584102c 	strne	r1, [r4, #44]	; 0x2c
   11df0:	1affffcb 	bne	11d24 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   11df4:	e30211ec 	movw	r1, #8684	; 0x21ec
   11df8:	e3401003 	movt	r1, #3
   11dfc:	e3020200 	movw	r0, #8704	; 0x2200
   11e00:	e3400003 	movt	r0, #3
   11e04:	e3a020d4 	mov	r2, #212	; 0xd4
   11e08:	eb004c59 	bl	24f74 <assertion_failed>
   11e0c:	000321b8 	.word	0x000321b8

00011e10 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   11e10:	e92d4010 	push	{r4, lr}
   11e14:	e1a04000 	mov	r4, r0
   11e18:	ebffffba 	bl	11d08 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   11e1c:	e1a00004 	mov	r0, r4
   11e20:	e3a01030 	mov	r1, #48	; 0x30
   11e24:	eb00683f 	bl	2bf28 <operator delete(void*, unsigned int)>
   11e28:	e1a00004 	mov	r0, r4
   11e2c:	e8bd8010 	pop	{r4, pc}

00011e30 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   11e30:	e92d4010 	push	{r4, lr}
   11e34:	e1a04000 	mov	r4, r0
   11e38:	ebfff22f 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   11e3c:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   11e40:	e59f2028 	ldr	r2, [pc, #40]	; 11e70 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x40>
   11e44:	e3a03000 	mov	r3, #0
   11e48:	e1a00004 	mov	r0, r4
   11e4c:	e5842000 	str	r2, [r4]
   11e50:	e5843010 	str	r3, [r4, #16]
   11e54:	e5843014 	str	r3, [r4, #20]
   11e58:	edc40b08 	vstr	d16, [r4, #32]
   11e5c:	e5843018 	str	r3, [r4, #24]
   11e60:	e584301c 	str	r3, [r4, #28]
   11e64:	e5843028 	str	r3, [r4, #40]	; 0x28
   11e68:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11e6c:	e8bd8010 	pop	{r4, pc}
   11e70:	000321b8 	.word	0x000321b8

00011e74 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   11e74:	e590001c 	ldr	r0, [r0, #28]
   11e78:	e12fff1e 	bx	lr

00011e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   11e7c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11e80:	e2519000 	subs	r9, r1, #0
   11e84:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11e88:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   11e8c:	e5dd805c 	ldrb	r8, [sp, #92]	; 0x5c
   11e90:	0a000059 	beq	11ffc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x180>
   11e94:	e1a07003 	mov	r7, r3
   11e98:	e2423006 	sub	r3, r2, #6
   11e9c:	e1a06002 	mov	r6, r2
   11ea0:	e353000a 	cmp	r3, #10
   11ea4:	8a00005a 	bhi	12014 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x198>
   11ea8:	e2973000 	adds	r3, r7, #0
   11eac:	13a03001 	movne	r3, #1
   11eb0:	e3550000 	cmp	r5, #0
   11eb4:	03a03001 	moveq	r3, #1
   11eb8:	e3530000 	cmp	r3, #0
   11ebc:	0a00005a 	beq	1202c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1b0>
   11ec0:	e1a04000 	mov	r4, r0
   11ec4:	e3a0201f 	mov	r2, #31
   11ec8:	e3a01000 	mov	r1, #0
   11ecc:	e28d0018 	add	r0, sp, #24
   11ed0:	eb006554 	bl	2b428 <memset>
   11ed4:	e5ddc026 	ldrb	ip, [sp, #38]	; 0x26
   11ed8:	e5943018 	ldr	r3, [r4, #24]
   11edc:	e3580000 	cmp	r8, #0
   11ee0:	e5dde025 	ldrb	lr, [sp, #37]	; 0x25
   11ee4:	03a00000 	moveq	r0, #0
   11ee8:	13a00080 	movne	r0, #128	; 0x80
   11eec:	e2833001 	add	r3, r3, #1
   11ef0:	e1a02006 	mov	r2, r6
   11ef4:	e5843018 	str	r3, [r4, #24]
   11ef8:	e1a01009 	mov	r1, r9
   11efc:	e5cd0024 	strb	r0, [sp, #36]	; 0x24
   11f00:	e28d0027 	add	r0, sp, #39	; 0x27
   11f04:	e7c4c016 	bfi	ip, r6, #0, #5
   11f08:	e7c3e01f 	bfc	lr, #0, #4
   11f0c:	e58d301c 	str	r3, [sp, #28]
   11f10:	e5cde025 	strb	lr, [sp, #37]	; 0x25
   11f14:	e3053355 	movw	r3, #21333	; 0x5355
   11f18:	e3443342 	movt	r3, #17218	; 0x4342
   11f1c:	e58d3018 	str	r3, [sp, #24]
   11f20:	e5cdc026 	strb	ip, [sp, #38]	; 0x26
   11f24:	e58d5020 	str	r5, [sp, #32]
   11f28:	eb0066e6 	bl	2bac8 <memcpy>
   11f2c:	e1a00004 	mov	r0, r4
   11f30:	ebfff268 	bl	e8d8 <CUSBFunction::GetHost() const>
   11f34:	e2506000 	subs	r6, r0, #0
   11f38:	0a000041 	beq	12044 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c8>
   11f3c:	e5941014 	ldr	r1, [r4, #20]
   11f40:	e3a09000 	mov	r9, #0
   11f44:	e28d2018 	add	r2, sp, #24
   11f48:	e3a0301f 	mov	r3, #31
   11f4c:	e58d9000 	str	r9, [sp]
   11f50:	ebfffe45 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11f54:	e1500009 	cmp	r0, r9
   11f58:	ba000061 	blt	120e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x268>
   11f5c:	e3550000 	cmp	r5, #0
   11f60:	e5941010 	ldr	r1, [r4, #16]
   11f64:	0a00000a 	beq	11f94 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x118>
   11f68:	e5940014 	ldr	r0, [r4, #20]
   11f6c:	e3580000 	cmp	r8, #0
   11f70:	e1a03005 	mov	r3, r5
   11f74:	e58d9000 	str	r9, [sp]
   11f78:	01a01000 	moveq	r1, r0
   11f7c:	e1a02007 	mov	r2, r7
   11f80:	e1a00006 	mov	r0, r6
   11f84:	ebfffe38 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11f88:	e2505000 	subs	r5, r0, #0
   11f8c:	ba00005c 	blt	12104 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   11f90:	e5941010 	ldr	r1, [r4, #16]
   11f94:	e3a02000 	mov	r2, #0
   11f98:	e1a00006 	mov	r0, r6
   11f9c:	e58d2000 	str	r2, [sp]
   11fa0:	e3a0300d 	mov	r3, #13
   11fa4:	e28d2008 	add	r2, sp, #8
   11fa8:	ebfffe2f 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11fac:	e350000d 	cmp	r0, #13
   11fb0:	1a000029 	bne	1205c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1e0>
   11fb4:	e59d2008 	ldr	r2, [sp, #8]
   11fb8:	e3053355 	movw	r3, #21333	; 0x5355
   11fbc:	e3453342 	movt	r3, #21314	; 0x5342
   11fc0:	e1520003 	cmp	r2, r3
   11fc4:	1a00002e 	bne	12084 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x208>
   11fc8:	e5943018 	ldr	r3, [r4, #24]
   11fcc:	e59d200c 	ldr	r2, [sp, #12]
   11fd0:	e1520003 	cmp	r2, r3
   11fd4:	1a000032 	bne	120a4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x228>
   11fd8:	e5dd3014 	ldrb	r3, [sp, #20]
   11fdc:	e3530000 	cmp	r3, #0
   11fe0:	1a000025 	bne	1207c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x200>
   11fe4:	e59d3010 	ldr	r3, [sp, #16]
   11fe8:	e3530000 	cmp	r3, #0
   11fec:	1a000034 	bne	120c4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x248>
   11ff0:	e1a00005 	mov	r0, r5
   11ff4:	e28dd03c 	add	sp, sp, #60	; 0x3c
   11ff8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11ffc:	e30211ec 	movw	r1, #8684	; 0x21ec
   12000:	e3401003 	movt	r1, #3
   12004:	e302022c 	movw	r0, #8748	; 0x222c
   12008:	e3400003 	movt	r0, #3
   1200c:	e3a02f8e 	mov	r2, #568	; 0x238
   12010:	eb004bd7 	bl	24f74 <assertion_failed>
   12014:	e30211ec 	movw	r1, #8684	; 0x21ec
   12018:	e3401003 	movt	r1, #3
   1201c:	e302023c 	movw	r0, #8764	; 0x223c
   12020:	e3400003 	movt	r0, #3
   12024:	e3002239 	movw	r2, #569	; 0x239
   12028:	eb004bd1 	bl	24f74 <assertion_failed>
   1202c:	e30211ec 	movw	r1, #8684	; 0x21ec
   12030:	e3401003 	movt	r1, #3
   12034:	e3020260 	movw	r0, #8800	; 0x2260
   12038:	e3400003 	movt	r0, #3
   1203c:	e300223a 	movw	r2, #570	; 0x23a
   12040:	eb004bcb 	bl	24f74 <assertion_failed>
   12044:	e30211ec 	movw	r1, #8684	; 0x21ec
   12048:	e3401003 	movt	r1, #3
   1204c:	e3020280 	movw	r0, #8832	; 0x2280
   12050:	e3400003 	movt	r0, #3
   12054:	e3002249 	movw	r2, #585	; 0x249
   12058:	eb004bc5 	bl	24f74 <assertion_failed>
   1205c:	eb005169 	bl	26608 <CLogger::Get()>
   12060:	e30232b8 	movw	r3, #8888	; 0x22b8
   12064:	e3403003 	movt	r3, #3
   12068:	e3a02001 	mov	r2, #1
   1206c:	e59f10b0 	ldr	r1, [pc, #176]	; 12124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   12070:	eb0050a5 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12074:	e3e05000 	mvn	r5, #0
   12078:	eaffffdc 	b	11ff0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   1207c:	e3e05000 	mvn	r5, #0
   12080:	eaffffda 	b	11ff0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12084:	eb00515f 	bl	26608 <CLogger::Get()>
   12088:	e30232cc 	movw	r3, #8908	; 0x22cc
   1208c:	e3403003 	movt	r3, #3
   12090:	e3a02001 	mov	r2, #1
   12094:	e59f1088 	ldr	r1, [pc, #136]	; 12124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   12098:	eb00509b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1209c:	e3e05000 	mvn	r5, #0
   120a0:	eaffffd2 	b	11ff0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   120a4:	eb005157 	bl	26608 <CLogger::Get()>
   120a8:	e30232e4 	movw	r3, #8932	; 0x22e4
   120ac:	e3403003 	movt	r3, #3
   120b0:	e3a02001 	mov	r2, #1
   120b4:	e59f1068 	ldr	r1, [pc, #104]	; 12124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   120b8:	eb005093 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   120bc:	e3e05000 	mvn	r5, #0
   120c0:	eaffffca 	b	11ff0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   120c4:	eb00514f 	bl	26608 <CLogger::Get()>
   120c8:	e30232f8 	movw	r3, #8952	; 0x22f8
   120cc:	e3403003 	movt	r3, #3
   120d0:	e3a02001 	mov	r2, #1
   120d4:	e59f1048 	ldr	r1, [pc, #72]	; 12124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   120d8:	eb00508b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   120dc:	e3e05000 	mvn	r5, #0
   120e0:	eaffffc2 	b	11ff0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   120e4:	eb005147 	bl	26608 <CLogger::Get()>
   120e8:	e302328c 	movw	r3, #8844	; 0x228c
   120ec:	e3403003 	movt	r3, #3
   120f0:	e3a02001 	mov	r2, #1
   120f4:	e59f1028 	ldr	r1, [pc, #40]	; 12124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   120f8:	eb005083 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   120fc:	e3e05000 	mvn	r5, #0
   12100:	eaffffba 	b	11ff0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12104:	eb00513f 	bl	26608 <CLogger::Get()>
   12108:	e30232a0 	movw	r3, #8864	; 0x22a0
   1210c:	e3403003 	movt	r3, #3
   12110:	e3a02001 	mov	r2, #1
   12114:	e59f1008 	ldr	r1, [pc, #8]	; 12124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   12118:	eb00507b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1211c:	e3e05000 	mvn	r5, #0
   12120:	eaffffb2 	b	11ff0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12124:	000321dc 	.word	0x000321dc

00012128 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   12128:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1212c:	e3510000 	cmp	r1, #0
   12130:	e24dd01c 	sub	sp, sp, #28
   12134:	0a000029 	beq	121e0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb8>
   12138:	e1a04002 	mov	r4, r2
   1213c:	e3a07000 	mov	r7, #0
   12140:	e1c022d0 	ldrd	r2, [r0, #32]
   12144:	e30061ff 	movw	r6, #511	; 0x1ff
   12148:	e30091ff 	movw	r9, #511	; 0x1ff
   1214c:	e3e08000 	mvn	r8, #0
   12150:	e006a002 	and	sl, r6, r2
   12154:	e007b003 	and	fp, r7, r3
   12158:	e19ac00b 	orrs	ip, sl, fp
   1215c:	13a0c001 	movne	ip, #1
   12160:	03a0c000 	moveq	ip, #0
   12164:	e1530009 	cmp	r3, r9
   12168:	01520008 	cmpeq	r2, r8
   1216c:	838cc001 	orrhi	ip, ip, #1
   12170:	e35c0000 	cmp	ip, #0
   12174:	1a00001f 	bne	121f8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd0>
   12178:	e7e8c054 	ubfx	ip, r4, #0, #9
   1217c:	e1a064a2 	lsr	r6, r2, #9
   12180:	e1866b83 	orr	r6, r6, r3, lsl #23
   12184:	e35c0000 	cmp	ip, #0
   12188:	1a00001a 	bne	121f8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd0>
   1218c:	e1a03001 	mov	r3, r1
   12190:	e6bf2f36 	rev	r2, r6
   12194:	e58d4000 	str	r4, [sp]
   12198:	e1a0e4a4 	lsr	lr, r4, #9
   1219c:	e58d200e 	str	r2, [sp, #14]
   121a0:	e3a05001 	mov	r5, #1
   121a4:	e3a0200a 	mov	r2, #10
   121a8:	e58d5004 	str	r5, [sp, #4]
   121ac:	e28d100c 	add	r1, sp, #12
   121b0:	e5cdc012 	strb	ip, [sp, #18]
   121b4:	e6bfefbe 	rev16	lr, lr
   121b8:	e5cdc015 	strb	ip, [sp, #21]
   121bc:	e1cde1b3 	strh	lr, [sp, #19]
   121c0:	e3a0c028 	mov	ip, #40	; 0x28
   121c4:	e1cdc0bc 	strh	ip, [sp, #12]
   121c8:	ebffff2b 	bl	11e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   121cc:	e1500004 	cmp	r0, r4
   121d0:	1a00000a 	bne	12200 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd8>
   121d4:	e1a00004 	mov	r0, r4
   121d8:	e28dd01c 	add	sp, sp, #28
   121dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e0:	e30211ec 	movw	r1, #8684	; 0x21ec
   121e4:	e3401003 	movt	r1, #3
   121e8:	e3020270 	movw	r0, #8816	; 0x2270
   121ec:	e3400003 	movt	r0, #3
   121f0:	e30021ed 	movw	r2, #493	; 0x1ed
   121f4:	eb004b5e 	bl	24f74 <assertion_failed>
   121f8:	e3e04000 	mvn	r4, #0
   121fc:	eafffff4 	b	121d4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xac>
   12200:	eb005100 	bl	26608 <CLogger::Get()>
   12204:	e1a02005 	mov	r2, r5
   12208:	e3023310 	movw	r3, #8976	; 0x2310
   1220c:	e3403003 	movt	r3, #3
   12210:	e59f1008 	ldr	r1, [pc, #8]	; 12220 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf8>
   12214:	e3e04000 	mvn	r4, #0
   12218:	eb00503b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1221c:	eaffffec 	b	121d4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xac>
   12220:	000321dc 	.word	0x000321dc

00012224 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   12224:	e92d4fd0 	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   12228:	e3510000 	cmp	r1, #0
   1222c:	e24dd018 	sub	sp, sp, #24
   12230:	0a000028 	beq	122d8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xb4>
   12234:	e1a04002 	mov	r4, r2
   12238:	e3a07000 	mov	r7, #0
   1223c:	e1c022d0 	ldrd	r2, [r0, #32]
   12240:	e30061ff 	movw	r6, #511	; 0x1ff
   12244:	e30091ff 	movw	r9, #511	; 0x1ff
   12248:	e3e08000 	mvn	r8, #0
   1224c:	e006a002 	and	sl, r6, r2
   12250:	e007b003 	and	fp, r7, r3
   12254:	e19ac00b 	orrs	ip, sl, fp
   12258:	13a0c001 	movne	ip, #1
   1225c:	03a0c000 	moveq	ip, #0
   12260:	e1530009 	cmp	r3, r9
   12264:	01520008 	cmpeq	r2, r8
   12268:	838cc001 	orrhi	ip, ip, #1
   1226c:	e35c0000 	cmp	ip, #0
   12270:	1a00001e 	bne	122f0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xcc>
   12274:	e7e8e054 	ubfx	lr, r4, #0, #9
   12278:	e1a064a2 	lsr	r6, r2, #9
   1227c:	e1866b83 	orr	r6, r6, r3, lsl #23
   12280:	e35e0000 	cmp	lr, #0
   12284:	1a000019 	bne	122f0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xcc>
   12288:	e58de004 	str	lr, [sp, #4]
   1228c:	e1a03001 	mov	r3, r1
   12290:	e58d4000 	str	r4, [sp]
   12294:	e6bf1f36 	rev	r1, r6
   12298:	e1a0c4a4 	lsr	ip, r4, #9
   1229c:	e58d100e 	str	r1, [sp, #14]
   122a0:	e3a0200a 	mov	r2, #10
   122a4:	e28d100c 	add	r1, sp, #12
   122a8:	e5cde012 	strb	lr, [sp, #18]
   122ac:	e6bfcfbc 	rev16	ip, ip
   122b0:	e5cde015 	strb	lr, [sp, #21]
   122b4:	e300e82a 	movw	lr, #2090	; 0x82a
   122b8:	e1cdc1b3 	strh	ip, [sp, #19]
   122bc:	e1cde0bc 	strh	lr, [sp, #12]
   122c0:	ebfffeed 	bl	11e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   122c4:	e3500000 	cmp	r0, #0
   122c8:	a1a00004 	movge	r0, r4
   122cc:	ba000009 	blt	122f8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd4>
   122d0:	e28dd018 	add	sp, sp, #24
   122d4:	e8bd8fd0 	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   122d8:	e30211ec 	movw	r1, #8684	; 0x21ec
   122dc:	e3401003 	movt	r1, #3
   122e0:	e3020270 	movw	r0, #8816	; 0x2270
   122e4:	e3400003 	movt	r0, #3
   122e8:	e3002212 	movw	r2, #530	; 0x212
   122ec:	eb004b20 	bl	24f74 <assertion_failed>
   122f0:	e3e00000 	mvn	r0, #0
   122f4:	eafffff5 	b	122d0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xac>
   122f8:	eb0050c2 	bl	26608 <CLogger::Get()>
   122fc:	e3023320 	movw	r3, #8992	; 0x2320
   12300:	e3403003 	movt	r3, #3
   12304:	e3a02001 	mov	r2, #1
   12308:	e59f1008 	ldr	r1, [pc, #8]	; 12318 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xf4>
   1230c:	eb004ffe 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12310:	e3e00000 	mvn	r0, #0
   12314:	eaffffed 	b	122d0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xac>
   12318:	000321dc 	.word	0x000321dc

0001231c <CUSBBulkOnlyMassStorageDevice::Reset()>:
   1231c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12320:	e1a05000 	mov	r5, r0
   12324:	e24dd014 	sub	sp, sp, #20
   12328:	ebfff16a 	bl	e8d8 <CUSBFunction::GetHost() const>
   1232c:	e2506000 	subs	r6, r0, #0
   12330:	0a00002f 	beq	123f4 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd8>
   12334:	e1a00005 	mov	r0, r5
   12338:	e3a04000 	mov	r4, #0
   1233c:	ebfff15a 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   12340:	e58d400c 	str	r4, [sp, #12]
   12344:	e1a01000 	mov	r1, r0
   12348:	e58d4008 	str	r4, [sp, #8]
   1234c:	e58d4004 	str	r4, [sp, #4]
   12350:	e3a030ff 	mov	r3, #255	; 0xff
   12354:	e58d4000 	str	r4, [sp]
   12358:	e3a02021 	mov	r2, #33	; 0x21
   1235c:	e1a00006 	mov	r0, r6
   12360:	ebfffce1 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12364:	e1500004 	cmp	r0, r4
   12368:	ba000027 	blt	1240c <CUSBBulkOnlyMassStorageDevice::Reset()+0xf0>
   1236c:	e3a07001 	mov	r7, #1
   12370:	e1a00005 	mov	r0, r5
   12374:	ebfff14c 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   12378:	e58d400c 	str	r4, [sp, #12]
   1237c:	e1a01000 	mov	r1, r0
   12380:	e58d4008 	str	r4, [sp, #8]
   12384:	e58d4000 	str	r4, [sp]
   12388:	e1a03007 	mov	r3, r7
   1238c:	e58d7004 	str	r7, [sp, #4]
   12390:	e3a02002 	mov	r2, #2
   12394:	e1a00006 	mov	r0, r6
   12398:	ebfffcd3 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1239c:	e3500000 	cmp	r0, #0
   123a0:	ba000021 	blt	1242c <CUSBBulkOnlyMassStorageDevice::Reset()+0x110>
   123a4:	e1a00005 	mov	r0, r5
   123a8:	ebfff13f 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   123ac:	e3a02002 	mov	r2, #2
   123b0:	e1a01000 	mov	r1, r0
   123b4:	e58d400c 	str	r4, [sp, #12]
   123b8:	e58d4008 	str	r4, [sp, #8]
   123bc:	e1a03007 	mov	r3, r7
   123c0:	e58d4000 	str	r4, [sp]
   123c4:	e1a00006 	mov	r0, r6
   123c8:	e58d2004 	str	r2, [sp, #4]
   123cc:	ebfffcc6 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   123d0:	e3500000 	cmp	r0, #0
   123d4:	ba00001c 	blt	1244c <CUSBBulkOnlyMassStorageDevice::Reset()+0x130>
   123d8:	e5950010 	ldr	r0, [r5, #16]
   123dc:	ebfff01f 	bl	e460 <CUSBEndpoint::ResetPID()>
   123e0:	e5950014 	ldr	r0, [r5, #20]
   123e4:	ebfff01d 	bl	e460 <CUSBEndpoint::ResetPID()>
   123e8:	e1a00004 	mov	r0, r4
   123ec:	e28dd014 	add	sp, sp, #20
   123f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   123f4:	e30211ec 	movw	r1, #8684	; 0x21ec
   123f8:	e3401003 	movt	r1, #3
   123fc:	e3020280 	movw	r0, #8832	; 0x2280
   12400:	e3400003 	movt	r0, #3
   12404:	e3a02fa2 	mov	r2, #648	; 0x288
   12408:	eb004ad9 	bl	24f74 <assertion_failed>
   1240c:	eb00507d 	bl	26608 <CLogger::Get()>
   12410:	e3023330 	movw	r3, #9008	; 0x2330
   12414:	e3403003 	movt	r3, #3
   12418:	e3a02004 	mov	r2, #4
   1241c:	e59f1048 	ldr	r1, [pc, #72]	; 1246c <CUSBBulkOnlyMassStorageDevice::Reset()+0x150>
   12420:	eb004fb9 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12424:	e3e00000 	mvn	r0, #0
   12428:	eaffffef 	b	123ec <CUSBBulkOnlyMassStorageDevice::Reset()+0xd0>
   1242c:	eb005075 	bl	26608 <CLogger::Get()>
   12430:	e3023344 	movw	r3, #9028	; 0x2344
   12434:	e3403003 	movt	r3, #3
   12438:	e3a02004 	mov	r2, #4
   1243c:	e59f1028 	ldr	r1, [pc, #40]	; 1246c <CUSBBulkOnlyMassStorageDevice::Reset()+0x150>
   12440:	eb004fb1 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12444:	e3e00000 	mvn	r0, #0
   12448:	eaffffe7 	b	123ec <CUSBBulkOnlyMassStorageDevice::Reset()+0xd0>
   1244c:	eb00506d 	bl	26608 <CLogger::Get()>
   12450:	e3023364 	movw	r3, #9060	; 0x2364
   12454:	e3403003 	movt	r3, #3
   12458:	e3a02004 	mov	r2, #4
   1245c:	e59f1008 	ldr	r1, [pc, #8]	; 1246c <CUSBBulkOnlyMassStorageDevice::Reset()+0x150>
   12460:	eb004fa9 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12464:	e3e00000 	mvn	r0, #0
   12468:	eaffffdf 	b	123ec <CUSBBulkOnlyMassStorageDevice::Reset()+0xd0>
   1246c:	000321dc 	.word	0x000321dc

00012470 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   12470:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12474:	e1a07000 	mov	r7, r0
   12478:	e1a08001 	mov	r8, r1
   1247c:	e1a06002 	mov	r6, r2
   12480:	e3a04004 	mov	r4, #4
   12484:	e1a02006 	mov	r2, r6
   12488:	e1a01008 	mov	r1, r8
   1248c:	e1a00007 	mov	r0, r7
   12490:	ebffff24 	bl	12128 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   12494:	e1a05000 	mov	r5, r0
   12498:	e1550006 	cmp	r5, r6
   1249c:	e1a00007 	mov	r0, r7
   124a0:	1a000001 	bne	124ac <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   124a4:	e1a00005 	mov	r0, r5
   124a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   124ac:	ebffff9a 	bl	1231c <CUSBBulkOnlyMassStorageDevice::Reset()>
   124b0:	e3500000 	cmp	r0, #0
   124b4:	1a000003 	bne	124c8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x58>
   124b8:	e2544001 	subs	r4, r4, #1
   124bc:	1afffff0 	bne	12484 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x14>
   124c0:	e1a00005 	mov	r0, r5
   124c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   124c8:	e1a05000 	mov	r5, r0
   124cc:	eafffff4 	b	124a4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

000124d0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   124d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   124d4:	e1a07000 	mov	r7, r0
   124d8:	e1a08001 	mov	r8, r1
   124dc:	e1a06002 	mov	r6, r2
   124e0:	e3a04004 	mov	r4, #4
   124e4:	e1a02006 	mov	r2, r6
   124e8:	e1a01008 	mov	r1, r8
   124ec:	e1a00007 	mov	r0, r7
   124f0:	ebffff4b 	bl	12224 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   124f4:	e1a05000 	mov	r5, r0
   124f8:	e1550006 	cmp	r5, r6
   124fc:	e1a00007 	mov	r0, r7
   12500:	1a000001 	bne	1250c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   12504:	e1a00005 	mov	r0, r5
   12508:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1250c:	ebffff82 	bl	1231c <CUSBBulkOnlyMassStorageDevice::Reset()>
   12510:	e3500000 	cmp	r0, #0
   12514:	1a000003 	bne	12528 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x58>
   12518:	e2544001 	subs	r4, r4, #1
   1251c:	1afffff0 	bne	124e4 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x14>
   12520:	e1a00005 	mov	r0, r5
   12524:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12528:	e1a05000 	mov	r5, r0
   1252c:	eafffff4 	b	12504 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

00012530 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   12530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12534:	e1a05000 	mov	r5, r0
   12538:	e24dd060 	sub	sp, sp, #96	; 0x60
   1253c:	ebfff0c4 	bl	e854 <CUSBFunction::GetNumEndpoints() const>
   12540:	e3500001 	cmp	r0, #1
   12544:	8a000004 	bhi	1255c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   12548:	ea0000c6 	b	12868 <CUSBBulkOnlyMassStorageDevice::Configure()+0x338>
   1254c:	e5d43003 	ldrb	r3, [r4, #3]
   12550:	e203303f 	and	r3, r3, #63	; 0x3f
   12554:	e3530002 	cmp	r3, #2
   12558:	0a000095 	beq	127b4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x284>
   1255c:	e3a01005 	mov	r1, #5
   12560:	e1a00005 	mov	r0, r5
   12564:	ebfff0e6 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   12568:	e2504000 	subs	r4, r0, #0
   1256c:	1afffff6 	bne	1254c <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
   12570:	e5953010 	ldr	r3, [r5, #16]
   12574:	e1a00005 	mov	r0, r5
   12578:	e3530000 	cmp	r3, #0
   1257c:	0a00009d 	beq	127f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c8>
   12580:	e5953014 	ldr	r3, [r5, #20]
   12584:	e3530000 	cmp	r3, #0
   12588:	0a00009a 	beq	127f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c8>
   1258c:	ebffefec 	bl	e544 <CUSBFunction::Configure()>
   12590:	e2506000 	subs	r6, r0, #0
   12594:	0a0000ba 	beq	12884 <CUSBBulkOnlyMassStorageDevice::Configure()+0x354>
   12598:	e3a0c024 	mov	ip, #36	; 0x24
   1259c:	e3a06001 	mov	r6, #1
   125a0:	e58dc000 	str	ip, [sp]
   125a4:	e28d303c 	add	r3, sp, #60	; 0x3c
   125a8:	e58d6004 	str	r6, [sp, #4]
   125ac:	e3a02006 	mov	r2, #6
   125b0:	e28d100c 	add	r1, sp, #12
   125b4:	e1a00005 	mov	r0, r5
   125b8:	e1cdc1b0 	strh	ip, [sp, #16]
   125bc:	e3a0c012 	mov	ip, #18
   125c0:	e58dc00c 	str	ip, [sp, #12]
   125c4:	ebfffe2c 	bl	11e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   125c8:	e3500024 	cmp	r0, #36	; 0x24
   125cc:	1a00009d 	bne	12848 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   125d0:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   125d4:	e213301f 	ands	r3, r3, #31
   125d8:	01a04003 	moveq	r4, r3
   125dc:	03a06063 	moveq	r6, #99	; 0x63
   125e0:	0a000010 	beq	12628 <CUSBBulkOnlyMassStorageDevice::Configure()+0xf8>
   125e4:	ea0000b7 	b	128c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x398>
   125e8:	e3a0c012 	mov	ip, #18
   125ec:	e3a07001 	mov	r7, #1
   125f0:	e58dc000 	str	ip, [sp]
   125f4:	e28d3028 	add	r3, sp, #40	; 0x28
   125f8:	e58d7004 	str	r7, [sp, #4]
   125fc:	e3a02006 	mov	r2, #6
   12600:	e28d101c 	add	r1, sp, #28
   12604:	e1a00005 	mov	r0, r5
   12608:	e1cdc2b0 	strh	ip, [sp, #32]
   1260c:	e3a0c003 	mov	ip, #3
   12610:	e58dc01c 	str	ip, [sp, #28]
   12614:	ebfffe18 	bl	11e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12618:	e3500000 	cmp	r0, #0
   1261c:	ba0000a1 	blt	128a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x378>
   12620:	e2566001 	subs	r6, r6, #1
   12624:	0a0000b2 	beq	128f4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c4>
   12628:	eb006372 	bl	2b3f8 <CTimer::Get()>
   1262c:	e3a00064 	mov	r0, #100	; 0x64
   12630:	eb006333 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
   12634:	e58d4004 	str	r4, [sp, #4]
   12638:	e58d4000 	str	r4, [sp]
   1263c:	e3a03000 	mov	r3, #0
   12640:	e3a02006 	mov	r2, #6
   12644:	e28d1014 	add	r1, sp, #20
   12648:	e1a00005 	mov	r0, r5
   1264c:	e58d4014 	str	r4, [sp, #20]
   12650:	e1cd41b8 	strh	r4, [sp, #24]
   12654:	ebfffe08 	bl	11e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12658:	e3500000 	cmp	r0, #0
   1265c:	baffffe1 	blt	125e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0xb8>
   12660:	e3a00008 	mov	r0, #8
   12664:	e28d3014 	add	r3, sp, #20
   12668:	e58d0000 	str	r0, [sp]
   1266c:	e28d101c 	add	r1, sp, #28
   12670:	e3a06001 	mov	r6, #1
   12674:	e3a0200a 	mov	r2, #10
   12678:	e58d6004 	str	r6, [sp, #4]
   1267c:	e1a00005 	mov	r0, r5
   12680:	e3a0c025 	mov	ip, #37	; 0x25
   12684:	e58d4020 	str	r4, [sp, #32]
   12688:	e1cd42b4 	strh	r4, [sp, #36]	; 0x24
   1268c:	e58dc01c 	str	ip, [sp, #28]
   12690:	ebfffdf9 	bl	11e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12694:	e3500008 	cmp	r0, #8
   12698:	1a00009c 	bne	12910 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e0>
   1269c:	e59d4018 	ldr	r4, [sp, #24]
   126a0:	e6bf4f34 	rev	r4, r4
   126a4:	e3540c02 	cmp	r4, #512	; 0x200
   126a8:	1a0000a0 	bne	12930 <CUSBBulkOnlyMassStorageDevice::Configure()+0x400>
   126ac:	e59d3014 	ldr	r3, [sp, #20]
   126b0:	e6bf3f33 	rev	r3, r3
   126b4:	e585301c 	str	r3, [r5, #28]
   126b8:	e3730001 	cmn	r3, #1
   126bc:	0a0000a4 	beq	12954 <CUSBBulkOnlyMassStorageDevice::Configure()+0x424>
   126c0:	e2833001 	add	r3, r3, #1
   126c4:	e585301c 	str	r3, [r5, #28]
   126c8:	eb004fce 	bl	26608 <CLogger::Get()>
   126cc:	e595101c 	ldr	r1, [r5, #28]
   126d0:	e3094400 	movw	r4, #37888	; 0x9400
   126d4:	e3404003 	movt	r4, #3
   126d8:	e3023424 	movw	r3, #9252	; 0x2424
   126dc:	e3403003 	movt	r3, #3
   126e0:	e1a015a1 	lsr	r1, r1, #11
   126e4:	e3a02004 	mov	r2, #4
   126e8:	e58d1000 	str	r1, [sp]
   126ec:	e1a07006 	mov	r7, r6
   126f0:	e59f12f4 	ldr	r1, [pc, #756]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   126f4:	eb004f04 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126f8:	e1a03006 	mov	r3, r6
   126fc:	e5941000 	ldr	r1, [r4]
   12700:	ea000002 	b	12710 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1e0>
   12704:	e2833001 	add	r3, r3, #1
   12708:	e3530020 	cmp	r3, #32
   1270c:	0a0000a2 	beq	1299c <CUSBBulkOnlyMassStorageDevice::Configure()+0x46c>
   12710:	e1a02317 	lsl	r2, r7, r3
   12714:	e1120001 	tst	r2, r1
   12718:	1afffff9 	bne	12704 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1d4>
   1271c:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   12720:	e1822001 	orr	r2, r2, r1
   12724:	e5842000 	str	r2, [r4]
   12728:	e3500000 	cmp	r0, #0
   1272c:	1a0000a8 	bne	129d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a4>
   12730:	e585302c 	str	r3, [r5, #44]	; 0x2c
   12734:	e28d0028 	add	r0, sp, #40	; 0x28
   12738:	eb005bab 	bl	295ec <CString::CString()>
   1273c:	e28d0028 	add	r0, sp, #40	; 0x28
   12740:	e3021454 	movw	r1, #9300	; 0x2454
   12744:	e3401003 	movt	r1, #3
   12748:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   1274c:	eb005f76 	bl	2a52c <CString::Format(char const*, ...)>
   12750:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   12754:	e3530000 	cmp	r3, #0
   12758:	1a000097 	bne	129bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x48c>
   1275c:	e28d0028 	add	r0, sp, #40	; 0x28
   12760:	eb005bb8 	bl	29648 <CString::operator char const*() const>
   12764:	e1a08000 	mov	r8, r0
   12768:	e3a00024 	mov	r0, #36	; 0x24
   1276c:	eb0065df 	bl	2bef0 <operator new(unsigned int)>
   12770:	e1a02008 	mov	r2, r8
   12774:	e1a06000 	mov	r6, r0
   12778:	e1a01005 	mov	r1, r5
   1277c:	eb001686 	bl	1819c <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   12780:	e5856028 	str	r6, [r5, #40]	; 0x28
   12784:	e1a00006 	mov	r0, r6
   12788:	eb0016c0 	bl	18290 <CPartitionManager::Initialize()>
   1278c:	e2506000 	subs	r6, r0, #0
   12790:	1a000077 	bne	12974 <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   12794:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   12798:	e5943000 	ldr	r3, [r4]
   1279c:	e585602c 	str	r6, [r5, #44]	; 0x2c
   127a0:	e1c37217 	bic	r7, r3, r7, lsl r2
   127a4:	e5847000 	str	r7, [r4]
   127a8:	e28d0028 	add	r0, sp, #40	; 0x28
   127ac:	eb005b5b 	bl	29520 <CString::~CString()>
   127b0:	ea000013 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   127b4:	e1d430d2 	ldrsb	r3, [r4, #2]
   127b8:	e3530000 	cmp	r3, #0
   127bc:	ba000013 	blt	12810 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2e0>
   127c0:	e5953014 	ldr	r3, [r5, #20]
   127c4:	e1a00005 	mov	r0, r5
   127c8:	e3530000 	cmp	r3, #0
   127cc:	1a000009 	bne	127f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c8>
   127d0:	ebfff02b 	bl	e884 <CUSBFunction::GetDevice() const>
   127d4:	e1a07000 	mov	r7, r0
   127d8:	e3a00014 	mov	r0, #20
   127dc:	eb0065c3 	bl	2bef0 <operator new(unsigned int)>
   127e0:	e1a02004 	mov	r2, r4
   127e4:	e1a01007 	mov	r1, r7
   127e8:	e1a06000 	mov	r6, r0
   127ec:	ebffee5a 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   127f0:	e5856014 	str	r6, [r5, #20]
   127f4:	eaffff58 	b	1255c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   127f8:	e3a06000 	mov	r6, #0
   127fc:	e59f11e8 	ldr	r1, [pc, #488]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   12800:	ebfff04a 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   12804:	e1a00006 	mov	r0, r6
   12808:	e28dd060 	add	sp, sp, #96	; 0x60
   1280c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12810:	e5953010 	ldr	r3, [r5, #16]
   12814:	e1a00005 	mov	r0, r5
   12818:	e3530000 	cmp	r3, #0
   1281c:	1afffff5 	bne	127f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c8>
   12820:	ebfff017 	bl	e884 <CUSBFunction::GetDevice() const>
   12824:	e1a07000 	mov	r7, r0
   12828:	e3a00014 	mov	r0, #20
   1282c:	eb0065af 	bl	2bef0 <operator new(unsigned int)>
   12830:	e1a02004 	mov	r2, r4
   12834:	e1a01007 	mov	r1, r7
   12838:	e1a06000 	mov	r6, r0
   1283c:	ebffee46 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12840:	e5856010 	str	r6, [r5, #16]
   12844:	eaffff44 	b	1255c <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   12848:	eb004f6e 	bl	26608 <CLogger::Get()>
   1284c:	e1a02006 	mov	r2, r6
   12850:	e3023384 	movw	r3, #9092	; 0x2384
   12854:	e3403003 	movt	r3, #3
   12858:	e59f118c 	ldr	r1, [pc, #396]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   1285c:	e1a06004 	mov	r6, r4
   12860:	eb004ea9 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12864:	eaffffe6 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   12868:	e1a00005 	mov	r0, r5
   1286c:	e59f1178 	ldr	r1, [pc, #376]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   12870:	e3a06000 	mov	r6, #0
   12874:	ebfff02d 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   12878:	e1a00006 	mov	r0, r6
   1287c:	e28dd060 	add	sp, sp, #96	; 0x60
   12880:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12884:	eb004f5f 	bl	26608 <CLogger::Get()>
   12888:	e3a02001 	mov	r2, #1
   1288c:	e59f1158 	ldr	r1, [pc, #344]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   12890:	e3013948 	movw	r3, #6472	; 0x1948
   12894:	e3403003 	movt	r3, #3
   12898:	eb004e9b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1289c:	e1a00006 	mov	r0, r6
   128a0:	e28dd060 	add	sp, sp, #96	; 0x60
   128a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   128a8:	eb004f56 	bl	26608 <CLogger::Get()>
   128ac:	e1a02007 	mov	r2, r7
   128b0:	e30233bc 	movw	r3, #9148	; 0x23bc
   128b4:	e3403003 	movt	r3, #3
   128b8:	e59f112c 	ldr	r1, [pc, #300]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   128bc:	e3a06000 	mov	r6, #0
   128c0:	eb004e91 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   128c4:	eaffffce 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   128c8:	eb004f4e 	bl	26608 <CLogger::Get()>
   128cc:	e5dd103c 	ldrb	r1, [sp, #60]	; 0x3c
   128d0:	e1a02006 	mov	r2, r6
   128d4:	e302339c 	movw	r3, #9116	; 0x239c
   128d8:	e3403003 	movt	r3, #3
   128dc:	e201101f 	and	r1, r1, #31
   128e0:	e58d1000 	str	r1, [sp]
   128e4:	e59f1100 	ldr	r1, [pc, #256]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   128e8:	e1a06004 	mov	r6, r4
   128ec:	eb004e86 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   128f0:	eaffffc3 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   128f4:	eb004f43 	bl	26608 <CLogger::Get()>
   128f8:	e1a02007 	mov	r2, r7
   128fc:	e3023478 	movw	r3, #9336	; 0x2478
   12900:	e3403003 	movt	r3, #3
   12904:	e59f10e0 	ldr	r1, [pc, #224]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   12908:	eb004e7f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1290c:	eaffffbc 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   12910:	eb004f3c 	bl	26608 <CLogger::Get()>
   12914:	e1a02006 	mov	r2, r6
   12918:	e30233d4 	movw	r3, #9172	; 0x23d4
   1291c:	e3403003 	movt	r3, #3
   12920:	e59f10c4 	ldr	r1, [pc, #196]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   12924:	e3a06000 	mov	r6, #0
   12928:	eb004e77 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1292c:	eaffffb4 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   12930:	eb004f34 	bl	26608 <CLogger::Get()>
   12934:	e1a02006 	mov	r2, r6
   12938:	e58d4000 	str	r4, [sp]
   1293c:	e30233ec 	movw	r3, #9196	; 0x23ec
   12940:	e3403003 	movt	r3, #3
   12944:	e59f10a0 	ldr	r1, [pc, #160]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   12948:	e3a06000 	mov	r6, #0
   1294c:	eb004e6e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12950:	eaffffab 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   12954:	eb004f2b 	bl	26608 <CLogger::Get()>
   12958:	e1a02006 	mov	r2, r6
   1295c:	e3023408 	movw	r3, #9224	; 0x2408
   12960:	e3403003 	movt	r3, #3
   12964:	e59f1080 	ldr	r1, [pc, #128]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   12968:	e3a06000 	mov	r6, #0
   1296c:	eb004e66 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12970:	eaffffa3 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   12974:	eb004c28 	bl	25a1c <CDeviceNameService::Get()>
   12978:	e1a04000 	mov	r4, r0
   1297c:	e28d0028 	add	r0, sp, #40	; 0x28
   12980:	eb005b30 	bl	29648 <CString::operator char const*() const>
   12984:	e1a02005 	mov	r2, r5
   12988:	e1a01000 	mov	r1, r0
   1298c:	e3a03001 	mov	r3, #1
   12990:	e1a00004 	mov	r0, r4
   12994:	eb004b66 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   12998:	eaffff82 	b	127a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x278>
   1299c:	eb004f19 	bl	26608 <CLogger::Get()>
   129a0:	e3013620 	movw	r3, #5664	; 0x1620
   129a4:	e3403003 	movt	r3, #3
   129a8:	e3a02001 	mov	r2, #1
   129ac:	e59f1038 	ldr	r1, [pc, #56]	; 129ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4bc>
   129b0:	eb004e55 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   129b4:	e3a06000 	mov	r6, #0
   129b8:	eaffff91 	b	12804 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d4>
   129bc:	e30211ec 	movw	r1, #8684	; 0x21ec
   129c0:	e3401003 	movt	r1, #3
   129c4:	e302045c 	movw	r0, #9308	; 0x245c
   129c8:	e3400003 	movt	r0, #3
   129cc:	e300219d 	movw	r2, #413	; 0x19d
   129d0:	eb004967 	bl	24f74 <assertion_failed>
   129d4:	e30211ec 	movw	r1, #8684	; 0x21ec
   129d8:	e3401003 	movt	r1, #3
   129dc:	e302043c 	movw	r0, #9276	; 0x243c
   129e0:	e3400003 	movt	r0, #3
   129e4:	e3002197 	movw	r2, #407	; 0x197
   129e8:	eb004961 	bl	24f74 <assertion_failed>
   129ec:	000321dc 	.word	0x000321dc

000129f0 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   129f0:	e92d4070 	push	{r4, r5, r6, lr}
   129f4:	e1a04000 	mov	r4, r0
   129f8:	e5900020 	ldr	r0, [r0, #32]
   129fc:	e59f304c 	ldr	r3, [pc, #76]	; 12a50 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   12a00:	e5843000 	str	r3, [r4]
   12a04:	e3500000 	cmp	r0, #0
   12a08:	0a000002 	beq	12a18 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   12a0c:	eb006544 	bl	2bf24 <operator delete[](void*)>
   12a10:	e3a03000 	mov	r3, #0
   12a14:	e5843020 	str	r3, [r4, #32]
   12a18:	e5945010 	ldr	r5, [r4, #16]
   12a1c:	e3550000 	cmp	r5, #0
   12a20:	0a000006 	beq	12a40 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   12a24:	e1a00005 	mov	r0, r5
   12a28:	ebffee2f 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   12a2c:	e1a00005 	mov	r0, r5
   12a30:	e3a01014 	mov	r1, #20
   12a34:	eb00653b 	bl	2bf28 <operator delete(void*, unsigned int)>
   12a38:	e3a03000 	mov	r3, #0
   12a3c:	e5843010 	str	r3, [r4, #16]
   12a40:	e1a00004 	mov	r0, r4
   12a44:	ebffee95 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   12a48:	e1a00004 	mov	r0, r4
   12a4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12a50:	00032494 	.word	0x00032494

00012a54 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   12a54:	e92d4010 	push	{r4, lr}
   12a58:	e1a04000 	mov	r4, r0
   12a5c:	ebffffe3 	bl	129f0 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   12a60:	e1a00004 	mov	r0, r4
   12a64:	e3a01028 	mov	r1, #40	; 0x28
   12a68:	eb00652e 	bl	2bf28 <operator delete(void*, unsigned int)>
   12a6c:	e1a00004 	mov	r0, r4
   12a70:	e8bd8010 	pop	{r4, pc}

00012a74 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   12a74:	e92d4010 	push	{r4, lr}
   12a78:	e1a04000 	mov	r4, r0
   12a7c:	ebffef1e 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12a80:	e59f2020 	ldr	r2, [pc, #32]	; 12aa8 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   12a84:	e3a03000 	mov	r3, #0
   12a88:	e1a00004 	mov	r0, r4
   12a8c:	e5842000 	str	r2, [r4]
   12a90:	e5843010 	str	r3, [r4, #16]
   12a94:	e5843014 	str	r3, [r4, #20]
   12a98:	e5843018 	str	r3, [r4, #24]
   12a9c:	e5843020 	str	r3, [r4, #32]
   12aa0:	e5843024 	str	r3, [r4, #36]	; 0x24
   12aa4:	e8bd8010 	pop	{r4, pc}
   12aa8:	00032494 	.word	0x00032494

00012aac <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   12aac:	e5903014 	ldr	r3, [r0, #20]
   12ab0:	e92d4010 	push	{r4, lr}
   12ab4:	e3530000 	cmp	r3, #0
   12ab8:	1a000008 	bne	12ae0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x34>
   12abc:	e3510000 	cmp	r1, #0
   12ac0:	e5801014 	str	r1, [r0, #20]
   12ac4:	18bd8010 	popne	{r4, pc}
   12ac8:	e3021500 	movw	r1, #9472	; 0x2500
   12acc:	e3401003 	movt	r1, #3
   12ad0:	e3020524 	movw	r0, #9508	; 0x2524
   12ad4:	e3400003 	movt	r0, #3
   12ad8:	e3a0209b 	mov	r2, #155	; 0x9b
   12adc:	eb004924 	bl	24f74 <assertion_failed>
   12ae0:	e3021500 	movw	r1, #9472	; 0x2500
   12ae4:	e3401003 	movt	r1, #3
   12ae8:	e302050c 	movw	r0, #9484	; 0x250c
   12aec:	e3400003 	movt	r0, #3
   12af0:	e3a02099 	mov	r2, #153	; 0x99
   12af4:	eb00491e 	bl	24f74 <assertion_failed>

00012af8 <CUSBMIDIDevice::StartRequest()>:
   12af8:	e92d4070 	push	{r4, r5, r6, lr}
   12afc:	e5903010 	ldr	r3, [r0, #16]
   12b00:	e24dd008 	sub	sp, sp, #8
   12b04:	e3530000 	cmp	r3, #0
   12b08:	0a000023 	beq	12b9c <CUSBMIDIDevice::StartRequest()+0xa4>
   12b0c:	e5903020 	ldr	r3, [r0, #32]
   12b10:	e1a04000 	mov	r4, r0
   12b14:	e3530000 	cmp	r3, #0
   12b18:	0a000025 	beq	12bb4 <CUSBMIDIDevice::StartRequest()+0xbc>
   12b1c:	e5905018 	ldr	r5, [r0, #24]
   12b20:	e3550000 	cmp	r5, #0
   12b24:	1a000028 	bne	12bcc <CUSBMIDIDevice::StartRequest()+0xd4>
   12b28:	e1d031bc 	ldrh	r3, [r0, #28]
   12b2c:	e3530000 	cmp	r3, #0
   12b30:	0a00002b 	beq	12be4 <CUSBMIDIDevice::StartRequest()+0xec>
   12b34:	e3a00028 	mov	r0, #40	; 0x28
   12b38:	eb000350 	bl	13880 <CUSBRequest::operator new(unsigned int)>
   12b3c:	e1d431bc 	ldrh	r3, [r4, #28]
   12b40:	e1a06000 	mov	r6, r0
   12b44:	e5942020 	ldr	r2, [r4, #32]
   12b48:	e5941010 	ldr	r1, [r4, #16]
   12b4c:	e58d5000 	str	r5, [sp]
   12b50:	eb0002c7 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12b54:	e1a03004 	mov	r3, r4
   12b58:	e1a02005 	mov	r2, r5
   12b5c:	e1a00006 	mov	r0, r6
   12b60:	e5846018 	str	r6, [r4, #24]
   12b64:	e3021e68 	movw	r1, #11880	; 0x2e68
   12b68:	e3401001 	movt	r1, #1
   12b6c:	eb000324 	bl	13804 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12b70:	e5940018 	ldr	r0, [r4, #24]
   12b74:	eb00033c 	bl	1386c <CUSBRequest::SetCompleteOnNAK()>
   12b78:	e1a00004 	mov	r0, r4
   12b7c:	ebffef55 	bl	e8d8 <CUSBFunction::GetHost() const>
   12b80:	e5903000 	ldr	r3, [r0]
   12b84:	e1a02005 	mov	r2, r5
   12b88:	e5941018 	ldr	r1, [r4, #24]
   12b8c:	e593300c 	ldr	r3, [r3, #12]
   12b90:	e28dd008 	add	sp, sp, #8
   12b94:	e8bd4070 	pop	{r4, r5, r6, lr}
   12b98:	e12fff13 	bx	r3
   12b9c:	e3021500 	movw	r1, #9472	; 0x2500
   12ba0:	e3401003 	movt	r1, #3
   12ba4:	e302053c 	movw	r0, #9532	; 0x253c
   12ba8:	e3400003 	movt	r0, #3
   12bac:	e3a020a0 	mov	r2, #160	; 0xa0
   12bb0:	eb0048ef 	bl	24f74 <assertion_failed>
   12bb4:	e3021500 	movw	r1, #9472	; 0x2500
   12bb8:	e3401003 	movt	r1, #3
   12bbc:	e3020550 	movw	r0, #9552	; 0x2550
   12bc0:	e3400003 	movt	r0, #3
   12bc4:	e3a020a1 	mov	r2, #161	; 0xa1
   12bc8:	eb0048e9 	bl	24f74 <assertion_failed>
   12bcc:	e3021500 	movw	r1, #9472	; 0x2500
   12bd0:	e3401003 	movt	r1, #3
   12bd4:	e30200ac 	movw	r0, #8364	; 0x20ac
   12bd8:	e3400003 	movt	r0, #3
   12bdc:	e3a020a3 	mov	r2, #163	; 0xa3
   12be0:	eb0048e3 	bl	24f74 <assertion_failed>
   12be4:	e3021500 	movw	r1, #9472	; 0x2500
   12be8:	e3401003 	movt	r1, #3
   12bec:	e3020568 	movw	r0, #9576	; 0x2568
   12bf0:	e3400003 	movt	r0, #3
   12bf4:	e3a020a4 	mov	r2, #164	; 0xa4
   12bf8:	eb0048dd 	bl	24f74 <assertion_failed>

00012bfc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   12bfc:	e92d4010 	push	{r4, lr}
   12c00:	e3520000 	cmp	r2, #0
   12c04:	0a000007 	beq	12c28 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   12c08:	e5923024 	ldr	r3, [r2, #36]	; 0x24
   12c0c:	e1500003 	cmp	r0, r3
   12c10:	1a00000a 	bne	12c40 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x44>
   12c14:	e3a03000 	mov	r3, #0
   12c18:	e1a00002 	mov	r0, r2
   12c1c:	e5823024 	str	r3, [r2, #36]	; 0x24
   12c20:	e8bd4010 	pop	{r4, lr}
   12c24:	eaffffb3 	b	12af8 <CUSBMIDIDevice::StartRequest()>
   12c28:	e3021500 	movw	r1, #9472	; 0x2500
   12c2c:	e3401003 	movt	r1, #3
   12c30:	e30007a4 	movw	r0, #1956	; 0x7a4
   12c34:	e3400003 	movt	r0, #3
   12c38:	e3a020f0 	mov	r2, #240	; 0xf0
   12c3c:	eb0048cc 	bl	24f74 <assertion_failed>
   12c40:	e3021500 	movw	r1, #9472	; 0x2500
   12c44:	e3401003 	movt	r1, #3
   12c48:	e302057c 	movw	r0, #9596	; 0x257c
   12c4c:	e3400003 	movt	r0, #3
   12c50:	e3a020e7 	mov	r2, #231	; 0xe7
   12c54:	eb0048c6 	bl	24f74 <assertion_failed>

00012c58 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   12c58:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12c5c:	e3510000 	cmp	r1, #0
   12c60:	e24dd00c 	sub	sp, sp, #12
   12c64:	0a00005b 	beq	12dd8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x180>
   12c68:	e5905018 	ldr	r5, [r0, #24]
   12c6c:	e1a04000 	mov	r4, r0
   12c70:	e1550001 	cmp	r5, r1
   12c74:	1a00005d 	bne	12df0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   12c78:	e1a00005 	mov	r0, r5
   12c7c:	eb0002ac 	bl	13734 <CUSBRequest::GetStatus() const>
   12c80:	e3500000 	cmp	r0, #0
   12c84:	1a000018 	bne	12cec <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x94>
   12c88:	e5945018 	ldr	r5, [r4, #24]
   12c8c:	e3550000 	cmp	r5, #0
   12c90:	0a000006 	beq	12cb0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   12c94:	e1a00005 	mov	r0, r5
   12c98:	eb000296 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   12c9c:	e1a00005 	mov	r0, r5
   12ca0:	e3a01028 	mov	r1, #40	; 0x28
   12ca4:	eb00030b 	bl	138d8 <CUSBRequest::operator delete(void*, unsigned int)>
   12ca8:	e3a03000 	mov	r3, #0
   12cac:	e5843018 	str	r3, [r4, #24]
   12cb0:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   12cb4:	e3550000 	cmp	r5, #0
   12cb8:	1a000052 	bne	12e08 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   12cbc:	eb0061cd 	bl	2b3f8 <CTimer::Get()>
   12cc0:	e58d4000 	str	r4, [sp]
   12cc4:	e1a03005 	mov	r3, r5
   12cc8:	e3022bfc 	movw	r2, #11260	; 0x2bfc
   12ccc:	e3402001 	movt	r2, #1
   12cd0:	e3a01001 	mov	r1, #1
   12cd4:	eb005ff4 	bl	2acac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   12cd8:	e3500000 	cmp	r0, #0
   12cdc:	e5840024 	str	r0, [r4, #36]	; 0x24
   12ce0:	0a000036 	beq	12dc0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x168>
   12ce4:	e28dd00c 	add	sp, sp, #12
   12ce8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12cec:	e1a00005 	mov	r0, r5
   12cf0:	eb000291 	bl	1373c <CUSBRequest::GetResultLength() const>
   12cf4:	e2107003 	ands	r7, r0, #3
   12cf8:	1affffe2 	bne	12c88 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   12cfc:	e5946020 	ldr	r6, [r4, #32]
   12d00:	e3560000 	cmp	r6, #0
   12d04:	0a000051 	beq	12e50 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1f8>
   12d08:	e1a00005 	mov	r0, r5
   12d0c:	eb00028a 	bl	1373c <CUSBRequest::GetResultLength() const>
   12d10:	e5945020 	ldr	r5, [r4, #32]
   12d14:	e0860000 	add	r0, r6, r0
   12d18:	e1500005 	cmp	r0, r5
   12d1c:	9a000041 	bls	12e28 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1d0>
   12d20:	e1e06005 	mvn	r6, r5
   12d24:	e2853005 	add	r3, r5, #5
   12d28:	e0806006 	add	r6, r0, r6
   12d2c:	e302848c 	movw	r8, #9356	; 0x248c
   12d30:	e3408003 	movt	r8, #3
   12d34:	e3c66003 	bic	r6, r6, #3
   12d38:	e2855001 	add	r5, r5, #1
   12d3c:	e0866003 	add	r6, r6, r3
   12d40:	e5550001 	ldrb	r0, [r5, #-1]
   12d44:	e3500000 	cmp	r0, #0
   12d48:	0a000009 	beq	12d74 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   12d4c:	e5949014 	ldr	r9, [r4, #20]
   12d50:	e3590000 	cmp	r9, #0
   12d54:	0a000031 	beq	12e20 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c8>
   12d58:	e200300f 	and	r3, r0, #15
   12d5c:	e1a01005 	mov	r1, r5
   12d60:	e0883103 	add	r3, r8, r3, lsl #2
   12d64:	e1a00220 	lsr	r0, r0, #4
   12d68:	e3a07001 	mov	r7, #1
   12d6c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   12d70:	e12fff39 	blx	r9
   12d74:	e2855004 	add	r5, r5, #4
   12d78:	e1560005 	cmp	r6, r5
   12d7c:	1affffef 	bne	12d40 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   12d80:	e5945018 	ldr	r5, [r4, #24]
   12d84:	e3550000 	cmp	r5, #0
   12d88:	0a000004 	beq	12da0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x148>
   12d8c:	e1a00005 	mov	r0, r5
   12d90:	eb000258 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   12d94:	e1a00005 	mov	r0, r5
   12d98:	e3a01028 	mov	r1, #40	; 0x28
   12d9c:	eb0002cd 	bl	138d8 <CUSBRequest::operator delete(void*, unsigned int)>
   12da0:	e3a03000 	mov	r3, #0
   12da4:	e3570000 	cmp	r7, #0
   12da8:	e5843018 	str	r3, [r4, #24]
   12dac:	0affffbf 	beq	12cb0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   12db0:	e1a00004 	mov	r0, r4
   12db4:	e28dd00c 	add	sp, sp, #12
   12db8:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   12dbc:	eaffff4d 	b	12af8 <CUSBMIDIDevice::StartRequest()>
   12dc0:	e3021500 	movw	r1, #9472	; 0x2500
   12dc4:	e3401003 	movt	r1, #3
   12dc8:	e30205a0 	movw	r0, #9632	; 0x25a0
   12dcc:	e3400003 	movt	r0, #3
   12dd0:	e3a020d9 	mov	r2, #217	; 0xd9
   12dd4:	eb004866 	bl	24f74 <assertion_failed>
   12dd8:	e3021500 	movw	r1, #9472	; 0x2500
   12ddc:	e3401003 	movt	r1, #3
   12de0:	e3000890 	movw	r0, #2192	; 0x890
   12de4:	e3400003 	movt	r0, #3
   12de8:	e3a020b0 	mov	r2, #176	; 0xb0
   12dec:	eb004860 	bl	24f74 <assertion_failed>
   12df0:	e3021500 	movw	r1, #9472	; 0x2500
   12df4:	e3401003 	movt	r1, #3
   12df8:	e30200d0 	movw	r0, #8400	; 0x20d0
   12dfc:	e3400003 	movt	r0, #3
   12e00:	e3a020b1 	mov	r2, #177	; 0xb1
   12e04:	eb00485a 	bl	24f74 <assertion_failed>
   12e08:	e3021500 	movw	r1, #9472	; 0x2500
   12e0c:	e3401003 	movt	r1, #3
   12e10:	e3020590 	movw	r0, #9616	; 0x2590
   12e14:	e3400003 	movt	r0, #3
   12e18:	e3a020d7 	mov	r2, #215	; 0xd7
   12e1c:	eb004854 	bl	24f74 <assertion_failed>
   12e20:	e3a07001 	mov	r7, #1
   12e24:	eaffffd2 	b	12d74 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   12e28:	e5945018 	ldr	r5, [r4, #24]
   12e2c:	e3550000 	cmp	r5, #0
   12e30:	0affff9e 	beq	12cb0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   12e34:	e1a00005 	mov	r0, r5
   12e38:	eb00022e 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   12e3c:	e1a00005 	mov	r0, r5
   12e40:	e3a01028 	mov	r1, #40	; 0x28
   12e44:	eb0002a3 	bl	138d8 <CUSBRequest::operator delete(void*, unsigned int)>
   12e48:	e5847018 	str	r7, [r4, #24]
   12e4c:	eaffff97 	b	12cb0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x58>
   12e50:	e3021500 	movw	r1, #9472	; 0x2500
   12e54:	e3401003 	movt	r1, #3
   12e58:	e3020550 	movw	r0, #9552	; 0x2550
   12e5c:	e3400003 	movt	r0, #3
   12e60:	e3a020b8 	mov	r2, #184	; 0xb8
   12e64:	eb004842 	bl	24f74 <assertion_failed>

00012e68 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   12e68:	e3520000 	cmp	r2, #0
   12e6c:	0a000002 	beq	12e7c <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   12e70:	e1a01000 	mov	r1, r0
   12e74:	e1a00002 	mov	r0, r2
   12e78:	eaffff76 	b	12c58 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   12e7c:	e3021500 	movw	r1, #9472	; 0x2500
   12e80:	e3401003 	movt	r1, #3
   12e84:	e30007a4 	movw	r0, #1956	; 0x7a4
   12e88:	e3400003 	movt	r0, #3
   12e8c:	e92d4010 	push	{r4, lr}
   12e90:	e3a020e0 	mov	r2, #224	; 0xe0
   12e94:	eb004836 	bl	24f74 <assertion_failed>

00012e98 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   12e98:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   12e9c:	e1520001 	cmp	r2, r1
   12ea0:	1a000002 	bne	12eb0 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
   12ea4:	e3a02000 	mov	r2, #0
   12ea8:	e5802024 	str	r2, [r0, #36]	; 0x24
   12eac:	eaffff11 	b	12af8 <CUSBMIDIDevice::StartRequest()>
   12eb0:	e3021500 	movw	r1, #9472	; 0x2500
   12eb4:	e3401003 	movt	r1, #3
   12eb8:	e302057c 	movw	r0, #9596	; 0x257c
   12ebc:	e3400003 	movt	r0, #3
   12ec0:	e92d4010 	push	{r4, lr}
   12ec4:	e3a020e7 	mov	r2, #231	; 0xe7
   12ec8:	eb004829 	bl	24f74 <assertion_failed>

00012ecc <CUSBMIDIDevice::Configure()>:
   12ecc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12ed0:	e1a05000 	mov	r5, r0
   12ed4:	e24dd010 	sub	sp, sp, #16
   12ed8:	ebffee5d 	bl	e854 <CUSBFunction::GetNumEndpoints() const>
   12edc:	e2506000 	subs	r6, r0, #0
   12ee0:	e1a00005 	mov	r0, r5
   12ee4:	0a000031 	beq	12fb0 <CUSBMIDIDevice::Configure()+0xe4>
   12ee8:	ebffee65 	bl	e884 <CUSBFunction::GetDevice() const>
   12eec:	ebffe8f8 	bl	d2d4 <CUSBDevice::GetDeviceDescriptor() const>
   12ef0:	e3500000 	cmp	r0, #0
   12ef4:	0a000068 	beq	1309c <CUSBMIDIDevice::Configure()+0x1d0>
   12ef8:	e1d020b8 	ldrh	r2, [r0, #8]
   12efc:	e3003582 	movw	r3, #1410	; 0x582
   12f00:	e1520003 	cmp	r2, r3
   12f04:	13a06000 	movne	r6, #0
   12f08:	0300312a 	movweq	r3, #298	; 0x12a
   12f0c:	01d060ba 	ldrheq	r6, [r0, #10]
   12f10:	00466003 	subeq	r6, r6, r3
   12f14:	016f6f16 	clzeq	r6, r6
   12f18:	01a062a6 	lsreq	r6, r6, #5
   12f1c:	e3a01005 	mov	r1, #5
   12f20:	e1a00005 	mov	r0, r5
   12f24:	ebffee76 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   12f28:	e2504000 	subs	r4, r0, #0
   12f2c:	0a00002e 	beq	12fec <CUSBMIDIDevice::Configure()+0x120>
   12f30:	e1d430d2 	ldrsb	r3, [r4, #2]
   12f34:	e3530000 	cmp	r3, #0
   12f38:	aafffff7 	bge	12f1c <CUSBMIDIDevice::Configure()+0x50>
   12f3c:	e5d43003 	ldrb	r3, [r4, #3]
   12f40:	e203303f 	and	r3, r3, #63	; 0x3f
   12f44:	e3530002 	cmp	r3, #2
   12f48:	1afffff3 	bne	12f1c <CUSBMIDIDevice::Configure()+0x50>
   12f4c:	e3560000 	cmp	r6, #0
   12f50:	0a00001b 	beq	12fc4 <CUSBMIDIDevice::Configure()+0xf8>
   12f54:	e5953010 	ldr	r3, [r5, #16]
   12f58:	e3530000 	cmp	r3, #0
   12f5c:	1a00005a 	bne	130cc <CUSBMIDIDevice::Configure()+0x200>
   12f60:	e1a00005 	mov	r0, r5
   12f64:	ebffee46 	bl	e884 <CUSBFunction::GetDevice() const>
   12f68:	e1a08000 	mov	r8, r0
   12f6c:	e3a00014 	mov	r0, #20
   12f70:	eb0063de 	bl	2bef0 <operator new(unsigned int)>
   12f74:	e1a02004 	mov	r2, r4
   12f78:	e1a01008 	mov	r1, r8
   12f7c:	e1a07000 	mov	r7, r0
   12f80:	ebffec75 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12f84:	e5857010 	str	r7, [r5, #16]
   12f88:	e5952020 	ldr	r2, [r5, #32]
   12f8c:	e30f0ffc 	movw	r0, #65532	; 0xfffc
   12f90:	e1d430b4 	ldrh	r3, [r4, #4]
   12f94:	e3520000 	cmp	r2, #0
   12f98:	e0000003 	and	r0, r0, r3
   12f9c:	e1c501bc 	strh	r0, [r5, #28]
   12fa0:	1a000043 	bne	130b4 <CUSBMIDIDevice::Configure()+0x1e8>
   12fa4:	eb0063d7 	bl	2bf08 <operator new[](unsigned int)>
   12fa8:	e5850020 	str	r0, [r5, #32]
   12fac:	eaffffda 	b	12f1c <CUSBMIDIDevice::Configure()+0x50>
   12fb0:	e59f1128 	ldr	r1, [pc, #296]	; 130e0 <CUSBMIDIDevice::Configure()+0x214>
   12fb4:	ebffee5d 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   12fb8:	e1a00006 	mov	r0, r6
   12fbc:	e28dd010 	add	sp, sp, #16
   12fc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12fc4:	e3a01025 	mov	r1, #37	; 0x25
   12fc8:	e1a00005 	mov	r0, r5
   12fcc:	ebffee4c 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   12fd0:	e3500000 	cmp	r0, #0
   12fd4:	0affffd0 	beq	12f1c <CUSBMIDIDevice::Configure()+0x50>
   12fd8:	e5d43000 	ldrb	r3, [r4]
   12fdc:	e0843003 	add	r3, r4, r3
   12fe0:	e1500003 	cmp	r0, r3
   12fe4:	1affffcc 	bne	12f1c <CUSBMIDIDevice::Configure()+0x50>
   12fe8:	eaffffd9 	b	12f54 <CUSBMIDIDevice::Configure()+0x88>
   12fec:	e5956010 	ldr	r6, [r5, #16]
   12ff0:	e1a00005 	mov	r0, r5
   12ff4:	e3560000 	cmp	r6, #0
   12ff8:	0affffec 	beq	12fb0 <CUSBMIDIDevice::Configure()+0xe4>
   12ffc:	ebffed50 	bl	e544 <CUSBFunction::Configure()>
   13000:	e2506000 	subs	r6, r0, #0
   13004:	0a00001b 	beq	13078 <CUSBMIDIDevice::Configure()+0x1ac>
   13008:	e1a0000d 	mov	r0, sp
   1300c:	eb005976 	bl	295ec <CString::CString()>
   13010:	e3083f68 	movw	r3, #36712	; 0x8f68
   13014:	e3403003 	movt	r3, #3
   13018:	e1a0000d 	mov	r0, sp
   1301c:	e30215dc 	movw	r1, #9692	; 0x25dc
   13020:	e3401003 	movt	r1, #3
   13024:	e5932000 	ldr	r2, [r3]
   13028:	e282c001 	add	ip, r2, #1
   1302c:	e583c000 	str	ip, [r3]
   13030:	eb005d3d 	bl	2a52c <CString::Format(char const*, ...)>
   13034:	eb004a78 	bl	25a1c <CDeviceNameService::Get()>
   13038:	e1a06000 	mov	r6, r0
   1303c:	e1a0000d 	mov	r0, sp
   13040:	eb005980 	bl	29648 <CString::operator char const*() const>
   13044:	e1a03004 	mov	r3, r4
   13048:	e1a01000 	mov	r1, r0
   1304c:	e1a02005 	mov	r2, r5
   13050:	e1a00006 	mov	r0, r6
   13054:	eb0049b6 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13058:	e1a00005 	mov	r0, r5
   1305c:	ebfffea5 	bl	12af8 <CUSBMIDIDevice::StartRequest()>
   13060:	e1a06000 	mov	r6, r0
   13064:	e1a0000d 	mov	r0, sp
   13068:	eb00592c 	bl	29520 <CString::~CString()>
   1306c:	e1a00006 	mov	r0, r6
   13070:	e28dd010 	add	sp, sp, #16
   13074:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13078:	eb004d62 	bl	26608 <CLogger::Get()>
   1307c:	e3a02001 	mov	r2, #1
   13080:	e59f1058 	ldr	r1, [pc, #88]	; 130e0 <CUSBMIDIDevice::Configure()+0x214>
   13084:	e3013948 	movw	r3, #6472	; 0x1948
   13088:	e3403003 	movt	r3, #3
   1308c:	eb004c9e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13090:	e1a00006 	mov	r0, r6
   13094:	e28dd010 	add	sp, sp, #16
   13098:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1309c:	e3021500 	movw	r1, #9472	; 0x2500
   130a0:	e3401003 	movt	r1, #3
   130a4:	e30205b0 	movw	r0, #9648	; 0x25b0
   130a8:	e3400003 	movt	r0, #3
   130ac:	e3a02051 	mov	r2, #81	; 0x51
   130b0:	eb0047af 	bl	24f74 <assertion_failed>
   130b4:	e3021500 	movw	r1, #9472	; 0x2500
   130b8:	e3401003 	movt	r1, #3
   130bc:	e30205c4 	movw	r0, #9668	; 0x25c4
   130c0:	e3400003 	movt	r0, #3
   130c4:	e3a0207d 	mov	r2, #125	; 0x7d
   130c8:	eb0047a9 	bl	24f74 <assertion_failed>
   130cc:	e1a00005 	mov	r0, r5
   130d0:	e59f1008 	ldr	r1, [pc, #8]	; 130e0 <CUSBMIDIDevice::Configure()+0x214>
   130d4:	ebffee15 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   130d8:	e3a06000 	mov	r6, #0
   130dc:	eaffffb5 	b	12fb8 <CUSBMIDIDevice::Configure()+0xec>
   130e0:	000324f8 	.word	0x000324f8

000130e4 <CUSBMouseDevice::~CUSBMouseDevice()>:
   130e4:	e92d4010 	push	{r4, lr}
   130e8:	e1a04000 	mov	r4, r0
   130ec:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   130f0:	e59f3044 	ldr	r3, [pc, #68]	; 1313c <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   130f4:	e5843000 	str	r3, [r4]
   130f8:	e3500000 	cmp	r0, #0
   130fc:	0a000002 	beq	1310c <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   13100:	e5903000 	ldr	r3, [r0]
   13104:	e5933004 	ldr	r3, [r3, #4]
   13108:	e12fff33 	blx	r3
   1310c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13110:	e3a03000 	mov	r3, #0
   13114:	e5843024 	str	r3, [r4, #36]	; 0x24
   13118:	e1500003 	cmp	r0, r3
   1311c:	0a000000 	beq	13124 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   13120:	eb00637f 	bl	2bf24 <operator delete[](void*)>
   13124:	e3a03000 	mov	r3, #0
   13128:	e1a00004 	mov	r0, r4
   1312c:	e5843028 	str	r3, [r4, #40]	; 0x28
   13130:	ebfff786 	bl	10f50 <CUSBHIDDevice::~CUSBHIDDevice()>
   13134:	e1a00004 	mov	r0, r4
   13138:	e8bd8010 	pop	{r4, pc}
   1313c:	000325ec 	.word	0x000325ec

00013140 <CUSBMouseDevice::~CUSBMouseDevice()>:
   13140:	e92d4010 	push	{r4, lr}
   13144:	e1a04000 	mov	r4, r0
   13148:	ebffffe5 	bl	130e4 <CUSBMouseDevice::~CUSBMouseDevice()>
   1314c:	e1a00004 	mov	r0, r4
   13150:	e3a01030 	mov	r1, #48	; 0x30
   13154:	eb006373 	bl	2bf28 <operator delete(void*, unsigned int)>
   13158:	e1a00004 	mov	r0, r4
   1315c:	e8bd8010 	pop	{r4, pc}

00013160 <CUSBMouseDevice::Configure()>:
   13160:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13164:	e3a01021 	mov	r1, #33	; 0x21
   13168:	e1a04000 	mov	r4, r0
   1316c:	e24dd014 	sub	sp, sp, #20
   13170:	ebffede3 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   13174:	e2505000 	subs	r5, r0, #0
   13178:	0a000003 	beq	1318c <CUSBMouseDevice::Configure()+0x2c>
   1317c:	e1d530b7 	ldrh	r3, [r5, #7]
   13180:	e6ff0073 	uxth	r0, r3
   13184:	e3500000 	cmp	r0, #0
   13188:	1a000005 	bne	131a4 <CUSBMouseDevice::Configure()+0x44>
   1318c:	e1a00004 	mov	r0, r4
   13190:	e59f10f4 	ldr	r1, [pc, #244]	; 1328c <CUSBMouseDevice::Configure()+0x12c>
   13194:	ebffede5 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   13198:	e3a00000 	mov	r0, #0
   1319c:	e28dd014 	add	sp, sp, #20
   131a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   131a4:	e1c432bc 	strh	r3, [r4, #44]	; 0x2c
   131a8:	eb006356 	bl	2bf08 <operator new[](unsigned int)>
   131ac:	e5840028 	str	r0, [r4, #40]	; 0x28
   131b0:	e1a00004 	mov	r0, r4
   131b4:	ebffedc7 	bl	e8d8 <CUSBFunction::GetHost() const>
   131b8:	e1a06000 	mov	r6, r0
   131bc:	e1a00004 	mov	r0, r4
   131c0:	ebffedb9 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   131c4:	e5d55006 	ldrb	r5, [r5, #6]
   131c8:	e1a07000 	mov	r7, r0
   131cc:	e5949028 	ldr	r9, [r4, #40]	; 0x28
   131d0:	e1d482bc 	ldrh	r8, [r4, #44]	; 0x2c
   131d4:	e1a00004 	mov	r0, r4
   131d8:	ebffee1d 	bl	ea54 <CUSBFunction::GetInterfaceNumber() const>
   131dc:	e3a0c081 	mov	ip, #129	; 0x81
   131e0:	e6ff0070 	uxth	r0, r0
   131e4:	e3a03000 	mov	r3, #0
   131e8:	e58d000c 	str	r0, [sp, #12]
   131ec:	e1a02005 	mov	r2, r5
   131f0:	e58d9000 	str	r9, [sp]
   131f4:	e1a01007 	mov	r1, r7
   131f8:	e58d8004 	str	r8, [sp, #4]
   131fc:	e1a00006 	mov	r0, r6
   13200:	e58dc008 	str	ip, [sp, #8]
   13204:	ebfff964 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13208:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   1320c:	e1500003 	cmp	r0, r3
   13210:	0a000008 	beq	13238 <CUSBMouseDevice::Configure()+0xd8>
   13214:	eb004cfb 	bl	26608 <CLogger::Get()>
   13218:	e3a02001 	mov	r2, #1
   1321c:	e59f1068 	ldr	r1, [pc, #104]	; 1328c <CUSBMouseDevice::Configure()+0x12c>
   13220:	e3013c54 	movw	r3, #7252	; 0x1c54
   13224:	e3403003 	movt	r3, #3
   13228:	eb004c37 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1322c:	e3a00000 	mov	r0, #0
   13230:	e28dd014 	add	sp, sp, #20
   13234:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13238:	e3a01000 	mov	r1, #0
   1323c:	e1a00004 	mov	r0, r4
   13240:	ebfff76d 	bl	10ffc <CUSBHIDDevice::Configure(unsigned int)>
   13244:	e3500000 	cmp	r0, #0
   13248:	0a000008 	beq	13270 <CUSBMouseDevice::Configure()+0x110>
   1324c:	e3a00028 	mov	r0, #40	; 0x28
   13250:	eb006326 	bl	2bef0 <operator new(unsigned int)>
   13254:	e1a05000 	mov	r5, r0
   13258:	eb001262 	bl	17be8 <CMouseDevice::CMouseDevice()>
   1325c:	e5845024 	str	r5, [r4, #36]	; 0x24
   13260:	e1a00004 	mov	r0, r4
   13264:	e28dd014 	add	sp, sp, #20
   13268:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   1326c:	eafff88d 	b	114a8 <CUSBHIDDevice::StartRequest()>
   13270:	eb004ce4 	bl	26608 <CLogger::Get()>
   13274:	e302317c 	movw	r3, #8572	; 0x217c
   13278:	e3403003 	movt	r3, #3
   1327c:	e3a02001 	mov	r2, #1
   13280:	e59f1004 	ldr	r1, [pc, #4]	; 1328c <CUSBMouseDevice::Configure()+0x12c>
   13284:	eb004c20 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13288:	eaffffc2 	b	13198 <CUSBMouseDevice::Configure()+0x38>
   1328c:	00032614 	.word	0x00032614

00013290 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   13290:	e2422003 	sub	r2, r2, #3
   13294:	e3510000 	cmp	r1, #0
   13298:	e16f2f12 	clz	r2, r2
   1329c:	e1a0c001 	mov	ip, r1
   132a0:	e1a022a2 	lsr	r2, r2, #5
   132a4:	03a02000 	moveq	r2, #0
   132a8:	e3520000 	cmp	r2, #0
   132ac:	012fff1e 	bxeq	lr
   132b0:	e5d13000 	ldrb	r3, [r1]
   132b4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   132b8:	e3130002 	tst	r3, #2
   132bc:	e2031001 	and	r1, r3, #1
   132c0:	13811002 	orrne	r1, r1, #2
   132c4:	e3130004 	tst	r3, #4
   132c8:	13811004 	orrne	r1, r1, #4
   132cc:	e3500000 	cmp	r0, #0
   132d0:	012fff1e 	bxeq	lr
   132d4:	e1dc30d2 	ldrsb	r3, [ip, #2]
   132d8:	e1dc20d1 	ldrsb	r2, [ip, #1]
   132dc:	ea00127c 	b	17cd4 <CMouseDevice::ReportHandler(unsigned int, int, int)>

000132e0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   132e0:	e92d4010 	push	{r4, lr}
   132e4:	e1a04000 	mov	r4, r0
   132e8:	e3a02003 	mov	r2, #3
   132ec:	ebfff703 	bl	10f00 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   132f0:	e59f2014 	ldr	r2, [pc, #20]	; 1330c <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   132f4:	e3a03000 	mov	r3, #0
   132f8:	e1a00004 	mov	r0, r4
   132fc:	e5842000 	str	r2, [r4]
   13300:	e5843024 	str	r3, [r4, #36]	; 0x24
   13304:	e5843028 	str	r3, [r4, #40]	; 0x28
   13308:	e8bd8010 	pop	{r4, pc}
   1330c:	000325ec 	.word	0x000325ec

00013310 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   13310:	e92d4070 	push	{r4, r5, r6, lr}
   13314:	e1a04000 	mov	r4, r0
   13318:	e5905018 	ldr	r5, [r0, #24]
   1331c:	e59f305c 	ldr	r3, [pc, #92]	; 13380 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   13320:	e5803000 	str	r3, [r0]
   13324:	e3550000 	cmp	r5, #0
   13328:	0a000004 	beq	13340 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   1332c:	e1a00005 	mov	r0, r5
   13330:	ebffebed 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   13334:	e1a00005 	mov	r0, r5
   13338:	e3a01014 	mov	r1, #20
   1333c:	eb0062f9 	bl	2bf28 <operator delete(void*, unsigned int)>
   13340:	e5945014 	ldr	r5, [r4, #20]
   13344:	e3a03000 	mov	r3, #0
   13348:	e5843018 	str	r3, [r4, #24]
   1334c:	e1550003 	cmp	r5, r3
   13350:	0a000004 	beq	13368 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   13354:	e1a00005 	mov	r0, r5
   13358:	ebffebe3 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   1335c:	e1a00005 	mov	r0, r5
   13360:	e3a01014 	mov	r1, #20
   13364:	eb0062ef 	bl	2bf28 <operator delete(void*, unsigned int)>
   13368:	e3a03000 	mov	r3, #0
   1336c:	e1a00004 	mov	r0, r4
   13370:	e5843014 	str	r3, [r4, #20]
   13374:	ebffec49 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   13378:	e1a00004 	mov	r0, r4
   1337c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13380:	00032624 	.word	0x00032624

00013384 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   13384:	e92d4010 	push	{r4, lr}
   13388:	e1a04000 	mov	r4, r0
   1338c:	ebffffdf 	bl	13310 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   13390:	e1a00004 	mov	r0, r4
   13394:	e3a0101c 	mov	r1, #28
   13398:	eb0062e2 	bl	2bf28 <operator delete(void*, unsigned int)>
   1339c:	e1a00004 	mov	r0, r4
   133a0:	e8bd8010 	pop	{r4, pc}

000133a4 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   133a4:	e92d4070 	push	{r4, r5, r6, lr}
   133a8:	e2515000 	subs	r5, r1, #0
   133ac:	e24dd008 	sub	sp, sp, #8
   133b0:	0a000011 	beq	133fc <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   133b4:	e1a04002 	mov	r4, r2
   133b8:	e3520000 	cmp	r2, #0
   133bc:	0a000014 	beq	13414 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x70>
   133c0:	e1a06000 	mov	r6, r0
   133c4:	ebffed43 	bl	e8d8 <CUSBFunction::GetHost() const>
   133c8:	e3500000 	cmp	r0, #0
   133cc:	0a000016 	beq	1342c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   133d0:	e5961018 	ldr	r1, [r6, #24]
   133d4:	e1a02005 	mov	r2, r5
   133d8:	e3a03000 	mov	r3, #0
   133dc:	e58d3000 	str	r3, [sp]
   133e0:	e1a03004 	mov	r3, r4
   133e4:	ebfff920 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   133e8:	e3500000 	cmp	r0, #0
   133ec:	a1a00004 	movge	r0, r4
   133f0:	b3e00000 	mvnlt	r0, #0
   133f4:	e28dd008 	add	sp, sp, #8
   133f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   133fc:	e3021650 	movw	r1, #9808	; 0x2650
   13400:	e3401003 	movt	r1, #3
   13404:	e3020270 	movw	r0, #8816	; 0x2270
   13408:	e3400003 	movt	r0, #3
   1340c:	e3a0207e 	mov	r2, #126	; 0x7e
   13410:	eb0046d7 	bl	24f74 <assertion_failed>
   13414:	e3021650 	movw	r1, #9808	; 0x2650
   13418:	e3401003 	movt	r1, #3
   1341c:	e3020660 	movw	r0, #9824	; 0x2660
   13420:	e3400003 	movt	r0, #3
   13424:	e3a0207f 	mov	r2, #127	; 0x7f
   13428:	eb0046d1 	bl	24f74 <assertion_failed>
   1342c:	e3021650 	movw	r1, #9808	; 0x2650
   13430:	e3401003 	movt	r1, #3
   13434:	e3020280 	movw	r0, #8832	; 0x2280
   13438:	e3400003 	movt	r0, #3
   1343c:	e3a02082 	mov	r2, #130	; 0x82
   13440:	eb0046cb 	bl	24f74 <assertion_failed>

00013444 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   13444:	e92d4010 	push	{r4, lr}
   13448:	e1a04000 	mov	r4, r0
   1344c:	ebffecaa 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13450:	e59f2018 	ldr	r2, [pc, #24]	; 13470 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   13454:	e3a03000 	mov	r3, #0
   13458:	e1a00004 	mov	r0, r4
   1345c:	e5842000 	str	r2, [r4]
   13460:	e5c43010 	strb	r3, [r4, #16]
   13464:	e5843014 	str	r3, [r4, #20]
   13468:	e5843018 	str	r3, [r4, #24]
   1346c:	e8bd8010 	pop	{r4, pc}
   13470:	00032624 	.word	0x00032624

00013474 <CUSBPrinterDevice::Configure()>:
   13474:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13478:	e1a04000 	mov	r4, r0
   1347c:	e24dd01c 	sub	sp, sp, #28
   13480:	ebffed97 	bl	eae4 <CUSBFunction::GetInterfaceProtocol() const>
   13484:	e2403001 	sub	r3, r0, #1
   13488:	e5c40010 	strb	r0, [r4, #16]
   1348c:	e3530001 	cmp	r3, #1
   13490:	9a00000b 	bls	134c4 <CUSBPrinterDevice::Configure()+0x50>
   13494:	e3a05000 	mov	r5, #0
   13498:	eb004c5a 	bl	26608 <CLogger::Get()>
   1349c:	e5d43010 	ldrb	r3, [r4, #16]
   134a0:	e3a02001 	mov	r2, #1
   134a4:	e58d3000 	str	r3, [sp]
   134a8:	e302366c 	movw	r3, #9836	; 0x266c
   134ac:	e3403003 	movt	r3, #3
   134b0:	e59f11b8 	ldr	r1, [pc, #440]	; 13670 <CUSBPrinterDevice::Configure()+0x1fc>
   134b4:	eb004b94 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   134b8:	e1a00005 	mov	r0, r5
   134bc:	e28dd01c 	add	sp, sp, #28
   134c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   134c4:	e1a00004 	mov	r0, r4
   134c8:	ebffece1 	bl	e854 <CUSBFunction::GetNumEndpoints() const>
   134cc:	e5d43010 	ldrb	r3, [r4, #16]
   134d0:	e3530001 	cmp	r3, #1
   134d4:	03a03001 	moveq	r3, #1
   134d8:	13a03002 	movne	r3, #2
   134dc:	e1500003 	cmp	r0, r3
   134e0:	aa000004 	bge	134f8 <CUSBPrinterDevice::Configure()+0x84>
   134e4:	ea00004c 	b	1361c <CUSBPrinterDevice::Configure()+0x1a8>
   134e8:	e5d53003 	ldrb	r3, [r5, #3]
   134ec:	e203303f 	and	r3, r3, #63	; 0x3f
   134f0:	e3530002 	cmp	r3, #2
   134f4:	0a00002a 	beq	135a4 <CUSBPrinterDevice::Configure()+0x130>
   134f8:	e3a01005 	mov	r1, #5
   134fc:	e1a00004 	mov	r0, r4
   13500:	ebffecff 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   13504:	e2505000 	subs	r5, r0, #0
   13508:	1afffff6 	bne	134e8 <CUSBPrinterDevice::Configure()+0x74>
   1350c:	e5945018 	ldr	r5, [r4, #24]
   13510:	e3550000 	cmp	r5, #0
   13514:	0a00004e 	beq	13654 <CUSBPrinterDevice::Configure()+0x1e0>
   13518:	e5d43010 	ldrb	r3, [r4, #16]
   1351c:	e1a00004 	mov	r0, r4
   13520:	e3530001 	cmp	r3, #1
   13524:	0a000002 	beq	13534 <CUSBPrinterDevice::Configure()+0xc0>
   13528:	e5945014 	ldr	r5, [r4, #20]
   1352c:	e3550000 	cmp	r5, #0
   13530:	0a00004b 	beq	13664 <CUSBPrinterDevice::Configure()+0x1f0>
   13534:	ebffec02 	bl	e544 <CUSBFunction::Configure()>
   13538:	e2505000 	subs	r5, r0, #0
   1353c:	0a00003d 	beq	13638 <CUSBPrinterDevice::Configure()+0x1c4>
   13540:	e28d0008 	add	r0, sp, #8
   13544:	eb005828 	bl	295ec <CString::CString()>
   13548:	e3083f6c 	movw	r3, #36716	; 0x8f6c
   1354c:	e3403003 	movt	r3, #3
   13550:	e28d0008 	add	r0, sp, #8
   13554:	e302168c 	movw	r1, #9868	; 0x268c
   13558:	e3401003 	movt	r1, #3
   1355c:	e5932000 	ldr	r2, [r3]
   13560:	e282c001 	add	ip, r2, #1
   13564:	e583c000 	str	ip, [r3]
   13568:	eb005bef 	bl	2a52c <CString::Format(char const*, ...)>
   1356c:	eb00492a 	bl	25a1c <CDeviceNameService::Get()>
   13570:	e1a06000 	mov	r6, r0
   13574:	e28d0008 	add	r0, sp, #8
   13578:	eb005832 	bl	29648 <CString::operator char const*() const>
   1357c:	e1a02004 	mov	r2, r4
   13580:	e1a01000 	mov	r1, r0
   13584:	e3a03000 	mov	r3, #0
   13588:	e1a00006 	mov	r0, r6
   1358c:	eb004868 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13590:	e28d0008 	add	r0, sp, #8
   13594:	eb0057e1 	bl	29520 <CString::~CString()>
   13598:	e1a00005 	mov	r0, r5
   1359c:	e28dd01c 	add	sp, sp, #28
   135a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   135a4:	e1d530d2 	ldrsb	r3, [r5, #2]
   135a8:	e1a00004 	mov	r0, r4
   135ac:	e3530000 	cmp	r3, #0
   135b0:	ba00000c 	blt	135e8 <CUSBPrinterDevice::Configure()+0x174>
   135b4:	e5943018 	ldr	r3, [r4, #24]
   135b8:	e3530000 	cmp	r3, #0
   135bc:	1a000016 	bne	1361c <CUSBPrinterDevice::Configure()+0x1a8>
   135c0:	ebffecaf 	bl	e884 <CUSBFunction::GetDevice() const>
   135c4:	e1a07000 	mov	r7, r0
   135c8:	e3a00014 	mov	r0, #20
   135cc:	eb006247 	bl	2bef0 <operator new(unsigned int)>
   135d0:	e1a02005 	mov	r2, r5
   135d4:	e1a01007 	mov	r1, r7
   135d8:	e1a06000 	mov	r6, r0
   135dc:	ebffeade 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   135e0:	e5846018 	str	r6, [r4, #24]
   135e4:	eaffffc3 	b	134f8 <CUSBPrinterDevice::Configure()+0x84>
   135e8:	e5943014 	ldr	r3, [r4, #20]
   135ec:	e3530000 	cmp	r3, #0
   135f0:	1a00000a 	bne	13620 <CUSBPrinterDevice::Configure()+0x1ac>
   135f4:	ebffeca2 	bl	e884 <CUSBFunction::GetDevice() const>
   135f8:	e1a07000 	mov	r7, r0
   135fc:	e3a00014 	mov	r0, #20
   13600:	eb00623a 	bl	2bef0 <operator new(unsigned int)>
   13604:	e1a02005 	mov	r2, r5
   13608:	e1a01007 	mov	r1, r7
   1360c:	e1a06000 	mov	r6, r0
   13610:	ebffead1 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13614:	e5846014 	str	r6, [r4, #20]
   13618:	eaffffb6 	b	134f8 <CUSBPrinterDevice::Configure()+0x84>
   1361c:	e1a00004 	mov	r0, r4
   13620:	e59f1048 	ldr	r1, [pc, #72]	; 13670 <CUSBPrinterDevice::Configure()+0x1fc>
   13624:	e3a05000 	mov	r5, #0
   13628:	ebffecc0 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   1362c:	e1a00005 	mov	r0, r5
   13630:	e28dd01c 	add	sp, sp, #28
   13634:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13638:	eb004bf2 	bl	26608 <CLogger::Get()>
   1363c:	e3013948 	movw	r3, #6472	; 0x1948
   13640:	e3403003 	movt	r3, #3
   13644:	e3a02001 	mov	r2, #1
   13648:	e59f1020 	ldr	r1, [pc, #32]	; 13670 <CUSBPrinterDevice::Configure()+0x1fc>
   1364c:	eb004b2e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13650:	eaffff98 	b	134b8 <CUSBPrinterDevice::Configure()+0x44>
   13654:	e1a00004 	mov	r0, r4
   13658:	e59f1010 	ldr	r1, [pc, #16]	; 13670 <CUSBPrinterDevice::Configure()+0x1fc>
   1365c:	ebffecb3 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   13660:	eaffff94 	b	134b8 <CUSBPrinterDevice::Configure()+0x44>
   13664:	e59f1004 	ldr	r1, [pc, #4]	; 13670 <CUSBPrinterDevice::Configure()+0x1fc>
   13668:	ebffecb0 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   1366c:	eaffff91 	b	134b8 <CUSBPrinterDevice::Configure()+0x44>
   13670:	00032648 	.word	0x00032648

00013674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   13674:	e92d4010 	push	{r4, lr}
   13678:	e3510000 	cmp	r1, #0
   1367c:	e59de008 	ldr	lr, [sp, #8]
   13680:	e5801000 	str	r1, [r0]
   13684:	e3a01000 	mov	r1, #0
   13688:	e1c020f8 	strd	r2, [r0, #8]
   1368c:	e580e004 	str	lr, [r0, #4]
   13690:	e5801010 	str	r1, [r0, #16]
   13694:	e5801014 	str	r1, [r0, #20]
   13698:	e5801018 	str	r1, [r0, #24]
   1369c:	e580101c 	str	r1, [r0, #28]
   136a0:	e5801020 	str	r1, [r0, #32]
   136a4:	e5c01024 	strb	r1, [r0, #36]	; 0x24
   136a8:	0a00000c 	beq	136e0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x6c>
   136ac:	e2922000 	adds	r2, r2, #0
   136b0:	13a02001 	movne	r2, #1
   136b4:	e3530000 	cmp	r3, #0
   136b8:	11a03002 	movne	r3, r2
   136bc:	03a03001 	moveq	r3, #1
   136c0:	e3530000 	cmp	r3, #0
   136c4:	18bd8010 	popne	{r4, pc}
   136c8:	e3021694 	movw	r1, #9876	; 0x2694
   136cc:	e3401003 	movt	r1, #3
   136d0:	e30206a4 	movw	r0, #9892	; 0x26a4
   136d4:	e3400003 	movt	r0, #3
   136d8:	e3a02024 	mov	r2, #36	; 0x24
   136dc:	eb004624 	bl	24f74 <assertion_failed>
   136e0:	e3021694 	movw	r1, #9876	; 0x2694
   136e4:	e3401003 	movt	r1, #3
   136e8:	e3010154 	movw	r0, #4436	; 0x1154
   136ec:	e3400003 	movt	r0, #3
   136f0:	e3a02023 	mov	r2, #35	; 0x23
   136f4:	eb00461e 	bl	24f74 <assertion_failed>

000136f8 <CUSBRequest::~CUSBRequest()>:
   136f8:	e12fff1e 	bx	lr

000136fc <CUSBRequest::GetEndpoint() const>:
   136fc:	e5900000 	ldr	r0, [r0]
   13700:	e3500000 	cmp	r0, #0
   13704:	112fff1e 	bxne	lr
   13708:	e3021694 	movw	r1, #9876	; 0x2694
   1370c:	e3401003 	movt	r1, #3
   13710:	e3010154 	movw	r0, #4436	; 0x1154
   13714:	e3400003 	movt	r0, #3
   13718:	e92d4010 	push	{r4, lr}
   1371c:	e3a02031 	mov	r2, #49	; 0x31
   13720:	eb004613 	bl	24f74 <assertion_failed>

00013724 <CUSBRequest::SetStatus(int)>:
   13724:	e5801010 	str	r1, [r0, #16]
   13728:	e12fff1e 	bx	lr

0001372c <CUSBRequest::SetResultLen(unsigned int)>:
   1372c:	e5801014 	str	r1, [r0, #20]
   13730:	e12fff1e 	bx	lr

00013734 <CUSBRequest::GetStatus() const>:
   13734:	e5900010 	ldr	r0, [r0, #16]
   13738:	e12fff1e 	bx	lr

0001373c <CUSBRequest::GetResultLength() const>:
   1373c:	e5903010 	ldr	r3, [r0, #16]
   13740:	e3530000 	cmp	r3, #0
   13744:	0a000001 	beq	13750 <CUSBRequest::GetResultLength() const+0x14>
   13748:	e5900014 	ldr	r0, [r0, #20]
   1374c:	e12fff1e 	bx	lr
   13750:	e3021694 	movw	r1, #9876	; 0x2694
   13754:	e3401003 	movt	r1, #3
   13758:	e30206c8 	movw	r0, #9928	; 0x26c8
   1375c:	e3400003 	movt	r0, #3
   13760:	e92d4010 	push	{r4, lr}
   13764:	e3a02046 	mov	r2, #70	; 0x46
   13768:	eb004601 	bl	24f74 <assertion_failed>

0001376c <CUSBRequest::GetSetupData()>:
   1376c:	e92d4010 	push	{r4, lr}
   13770:	e1a04000 	mov	r4, r0
   13774:	e5900000 	ldr	r0, [r0]
   13778:	ebffeae8 	bl	e320 <CUSBEndpoint::GetType() const>
   1377c:	e3500000 	cmp	r0, #0
   13780:	1a000008 	bne	137a8 <CUSBRequest::GetSetupData()+0x3c>
   13784:	e5940004 	ldr	r0, [r4, #4]
   13788:	e3500000 	cmp	r0, #0
   1378c:	18bd8010 	popne	{r4, pc}
   13790:	e3021694 	movw	r1, #9876	; 0x2694
   13794:	e3401003 	movt	r1, #3
   13798:	e3020704 	movw	r0, #9988	; 0x2704
   1379c:	e3400003 	movt	r0, #3
   137a0:	e3a0204e 	mov	r2, #78	; 0x4e
   137a4:	eb0045f2 	bl	24f74 <assertion_failed>
   137a8:	e3021694 	movw	r1, #9876	; 0x2694
   137ac:	e3401003 	movt	r1, #3
   137b0:	e30206d4 	movw	r0, #9940	; 0x26d4
   137b4:	e3400003 	movt	r0, #3
   137b8:	e3a0204d 	mov	r2, #77	; 0x4d
   137bc:	eb0045ec 	bl	24f74 <assertion_failed>

000137c0 <CUSBRequest::GetBuffer()>:
   137c0:	e5903008 	ldr	r3, [r0, #8]
   137c4:	e3530000 	cmp	r3, #0
   137c8:	0a000001 	beq	137d4 <CUSBRequest::GetBuffer()+0x14>
   137cc:	e1a00003 	mov	r0, r3
   137d0:	e12fff1e 	bx	lr
   137d4:	e590200c 	ldr	r2, [r0, #12]
   137d8:	e3520000 	cmp	r2, #0
   137dc:	0afffffa 	beq	137cc <CUSBRequest::GetBuffer()+0xc>
   137e0:	e3021694 	movw	r1, #9876	; 0x2694
   137e4:	e3401003 	movt	r1, #3
   137e8:	e30206a4 	movw	r0, #9892	; 0x26a4
   137ec:	e3400003 	movt	r0, #3
   137f0:	e92d4010 	push	{r4, lr}
   137f4:	e3a02056 	mov	r2, #86	; 0x56
   137f8:	eb0045dd 	bl	24f74 <assertion_failed>

000137fc <CUSBRequest::GetBufLen() const>:
   137fc:	e590000c 	ldr	r0, [r0, #12]
   13800:	e12fff1e 	bx	lr

00013804 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   13804:	e3510000 	cmp	r1, #0
   13808:	e1c021fc 	strd	r2, [r0, #28]
   1380c:	e5801018 	str	r1, [r0, #24]
   13810:	112fff1e 	bxne	lr
   13814:	e3021694 	movw	r1, #9876	; 0x2694
   13818:	e3401003 	movt	r1, #3
   1381c:	e3020718 	movw	r0, #10008	; 0x2718
   13820:	e3400003 	movt	r0, #3
   13824:	e92d4010 	push	{r4, lr}
   13828:	e3a02066 	mov	r2, #102	; 0x66
   1382c:	eb0045d0 	bl	24f74 <assertion_failed>

00013830 <CUSBRequest::CallCompletionRoutine()>:
   13830:	e92d4010 	push	{r4, lr}
   13834:	e590e018 	ldr	lr, [r0, #24]
   13838:	e35e0000 	cmp	lr, #0
   1383c:	0a000004 	beq	13854 <CUSBRequest::CallCompletionRoutine()+0x24>
   13840:	e1a0300e 	mov	r3, lr
   13844:	e5902020 	ldr	r2, [r0, #32]
   13848:	e590101c 	ldr	r1, [r0, #28]
   1384c:	e8bd4010 	pop	{r4, lr}
   13850:	e12fff13 	bx	r3
   13854:	e3021694 	movw	r1, #9876	; 0x2694
   13858:	e3401003 	movt	r1, #3
   1385c:	e3020718 	movw	r0, #10008	; 0x2718
   13860:	e3400003 	movt	r0, #3
   13864:	e3a0206b 	mov	r2, #107	; 0x6b
   13868:	eb0045c1 	bl	24f74 <assertion_failed>

0001386c <CUSBRequest::SetCompleteOnNAK()>:
   1386c:	e3a03001 	mov	r3, #1
   13870:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   13874:	e12fff1e 	bx	lr

00013878 <CUSBRequest::IsCompleteOnNAK() const>:
   13878:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
   1387c:	e12fff1e 	bx	lr

00013880 <CUSBRequest::operator new(unsigned int)>:
   13880:	e92d4010 	push	{r4, lr}
   13884:	e3500028 	cmp	r0, #40	; 0x28
   13888:	1a000006 	bne	138a8 <CUSBRequest::operator new(unsigned int)+0x28>
   1388c:	e3093404 	movw	r3, #37892	; 0x9404
   13890:	e3403003 	movt	r3, #3
   13894:	e5930000 	ldr	r0, [r3]
   13898:	e3500000 	cmp	r0, #0
   1389c:	0a000007 	beq	138c0 <CUSBRequest::operator new(unsigned int)+0x40>
   138a0:	e8bd4010 	pop	{r4, lr}
   138a4:	ea004692 	b	252f4 <CClassAllocator::Allocate()>
   138a8:	e3021694 	movw	r1, #9876	; 0x2694
   138ac:	e3401003 	movt	r1, #3
   138b0:	e3020734 	movw	r0, #10036	; 0x2734
   138b4:	e3400003 	movt	r0, #3
   138b8:	e3a0207a 	mov	r2, #122	; 0x7a
   138bc:	eb0045ac 	bl	24f74 <assertion_failed>
   138c0:	e3021694 	movw	r1, #9876	; 0x2694
   138c4:	e3401003 	movt	r1, #3
   138c8:	e3000dc0 	movw	r0, #3520	; 0xdc0
   138cc:	e3400003 	movt	r0, #3
   138d0:	e3a0207a 	mov	r2, #122	; 0x7a
   138d4:	eb0045a6 	bl	24f74 <assertion_failed>

000138d8 <CUSBRequest::operator delete(void*, unsigned int)>:
   138d8:	e92d4010 	push	{r4, lr}
   138dc:	e3510028 	cmp	r1, #40	; 0x28
   138e0:	1a000008 	bne	13908 <CUSBRequest::operator delete(void*, unsigned int)+0x30>
   138e4:	e3093404 	movw	r3, #37892	; 0x9404
   138e8:	e3403003 	movt	r3, #3
   138ec:	e5933000 	ldr	r3, [r3]
   138f0:	e3530000 	cmp	r3, #0
   138f4:	0a000009 	beq	13920 <CUSBRequest::operator delete(void*, unsigned int)+0x48>
   138f8:	e1a01000 	mov	r1, r0
   138fc:	e1a00003 	mov	r0, r3
   13900:	e8bd4010 	pop	{r4, lr}
   13904:	ea0046b5 	b	253e0 <CClassAllocator::Free(void*)>
   13908:	e3021694 	movw	r1, #9876	; 0x2694
   1390c:	e3401003 	movt	r1, #3
   13910:	e3020734 	movw	r0, #10036	; 0x2734
   13914:	e3400003 	movt	r0, #3
   13918:	e3a0207a 	mov	r2, #122	; 0x7a
   1391c:	eb004594 	bl	24f74 <assertion_failed>
   13920:	e3021694 	movw	r1, #9876	; 0x2694
   13924:	e3401003 	movt	r1, #3
   13928:	e3000dc0 	movw	r0, #3520	; 0xdc0
   1392c:	e3400003 	movt	r0, #3
   13930:	e3a0207a 	mov	r2, #122	; 0x7a
   13934:	eb00458e 	bl	24f74 <assertion_failed>

00013938 <CUSBRequest::InitAllocator(unsigned int)>:
   13938:	e92d4070 	push	{r4, r5, r6, lr}
   1393c:	e3094404 	movw	r4, #37892	; 0x9404
   13940:	e3404003 	movt	r4, #3
   13944:	e5943000 	ldr	r3, [r4]
   13948:	e3530000 	cmp	r3, #0
   1394c:	1a00000a 	bne	1397c <CUSBRequest::InitAllocator(unsigned int)+0x44>
   13950:	e1a05000 	mov	r5, r0
   13954:	e3a0001c 	mov	r0, #28
   13958:	eb006164 	bl	2bef0 <operator new(unsigned int)>
   1395c:	e1a02005 	mov	r2, r5
   13960:	e3023754 	movw	r3, #10068	; 0x2754
   13964:	e3403003 	movt	r3, #3
   13968:	e3a01028 	mov	r1, #40	; 0x28
   1396c:	e1a06000 	mov	r6, r0
   13970:	eb004646 	bl	25290 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   13974:	e5846000 	str	r6, [r4]
   13978:	e8bd8070 	pop	{r4, r5, r6, pc}
   1397c:	e3021694 	movw	r1, #9876	; 0x2694
   13980:	e3401003 	movt	r1, #3
   13984:	e3000dd4 	movw	r0, #3540	; 0xdd4
   13988:	e3400003 	movt	r0, #3
   1398c:	e3a0207a 	mov	r2, #122	; 0x7a
   13990:	eb004577 	bl	24f74 <assertion_failed>

00013994 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   13994:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13998:	e3094404 	movw	r4, #37892	; 0x9404
   1399c:	e3404003 	movt	r4, #3
   139a0:	e1a05000 	mov	r5, r0
   139a4:	e24dd00c 	sub	sp, sp, #12
   139a8:	e5940000 	ldr	r0, [r4]
   139ac:	e3500000 	cmp	r0, #0
   139b0:	1a00000d 	bne	139ec <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x58>
   139b4:	e1a06001 	mov	r6, r1
   139b8:	e3a0001c 	mov	r0, #28
   139bc:	eb00614b 	bl	2bef0 <operator new(unsigned int)>
   139c0:	e1a03006 	mov	r3, r6
   139c4:	e1a02005 	mov	r2, r5
   139c8:	e3021754 	movw	r1, #10068	; 0x2754
   139cc:	e3401003 	movt	r1, #3
   139d0:	e58d1000 	str	r1, [sp]
   139d4:	e3a01028 	mov	r1, #40	; 0x28
   139d8:	e1a07000 	mov	r7, r0
   139dc:	eb004637 	bl	252c0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   139e0:	e5847000 	str	r7, [r4]
   139e4:	e28dd00c 	add	sp, sp, #12
   139e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   139ec:	e3021694 	movw	r1, #9876	; 0x2694
   139f0:	e3401003 	movt	r1, #3
   139f4:	e3000dd4 	movw	r0, #3540	; 0xdd4
   139f8:	e3400003 	movt	r0, #3
   139fc:	e3a0207a 	mov	r2, #122	; 0x7a
   13a00:	eb00455b 	bl	24f74 <assertion_failed>

00013a04 <CUSBStandardHub::~CUSBStandardHub()>:
   13a04:	e5903018 	ldr	r3, [r0, #24]
   13a08:	e59f20ac 	ldr	r2, [pc, #172]	; 13abc <CUSBStandardHub::~CUSBStandardHub()+0xb8>
   13a0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13a10:	e3530000 	cmp	r3, #0
   13a14:	e1a07000 	mov	r7, r0
   13a18:	e5802000 	str	r2, [r0]
   13a1c:	0a000012 	beq	13a6c <CUSBStandardHub::~CUSBStandardHub()+0x68>
   13a20:	e3a04000 	mov	r4, #0
   13a24:	e280601c 	add	r6, r0, #28
   13a28:	e1a08004 	mov	r8, r4
   13a2c:	e2805040 	add	r5, r0, #64	; 0x40
   13a30:	e5950000 	ldr	r0, [r5]
   13a34:	e3a01004 	mov	r1, #4
   13a38:	eb00613a 	bl	2bf28 <operator delete(void*, unsigned int)>
   13a3c:	e5b63004 	ldr	r3, [r6, #4]!
   13a40:	e2844001 	add	r4, r4, #1
   13a44:	e4858004 	str	r8, [r5], #4
   13a48:	e2530000 	subs	r0, r3, #0
   13a4c:	0a000002 	beq	13a5c <CUSBStandardHub::~CUSBStandardHub()+0x58>
   13a50:	e5933000 	ldr	r3, [r3]
   13a54:	e5933004 	ldr	r3, [r3, #4]
   13a58:	e12fff33 	blx	r3
   13a5c:	e5973018 	ldr	r3, [r7, #24]
   13a60:	e5868000 	str	r8, [r6]
   13a64:	e1530004 	cmp	r3, r4
   13a68:	8afffff0 	bhi	13a30 <CUSBStandardHub::~CUSBStandardHub()+0x2c>
   13a6c:	e5974014 	ldr	r4, [r7, #20]
   13a70:	e3a03000 	mov	r3, #0
   13a74:	e5873018 	str	r3, [r7, #24]
   13a78:	e1540003 	cmp	r4, r3
   13a7c:	0a000004 	beq	13a94 <CUSBStandardHub::~CUSBStandardHub()+0x90>
   13a80:	e1a00004 	mov	r0, r4
   13a84:	ebffea18 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   13a88:	e1a00004 	mov	r0, r4
   13a8c:	e3a01014 	mov	r1, #20
   13a90:	eb006124 	bl	2bf28 <operator delete(void*, unsigned int)>
   13a94:	e3a04000 	mov	r4, #0
   13a98:	e3a01009 	mov	r1, #9
   13a9c:	e5970010 	ldr	r0, [r7, #16]
   13aa0:	e5874014 	str	r4, [r7, #20]
   13aa4:	eb00611f 	bl	2bf28 <operator delete(void*, unsigned int)>
   13aa8:	e5874010 	str	r4, [r7, #16]
   13aac:	e1a00007 	mov	r0, r7
   13ab0:	ebffea7a 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   13ab4:	e1a00007 	mov	r0, r7
   13ab8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13abc:	00032768 	.word	0x00032768

00013ac0 <CUSBStandardHub::~CUSBStandardHub()>:
   13ac0:	e92d4010 	push	{r4, lr}
   13ac4:	e1a04000 	mov	r4, r0
   13ac8:	ebffffcd 	bl	13a04 <CUSBStandardHub::~CUSBStandardHub()>
   13acc:	e1a00004 	mov	r0, r4
   13ad0:	e3a01068 	mov	r1, #104	; 0x68
   13ad4:	eb006113 	bl	2bf28 <operator delete(void*, unsigned int)>
   13ad8:	e1a00004 	mov	r0, r4
   13adc:	e8bd8010 	pop	{r4, pc}

00013ae0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   13ae0:	e92d4010 	push	{r4, lr}
   13ae4:	e1a04000 	mov	r4, r0
   13ae8:	ebffeb03 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13aec:	e3a0e000 	mov	lr, #0
   13af0:	e59f3040 	ldr	r3, [pc, #64]	; 13b38 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x58>
   13af4:	e2841040 	add	r1, r4, #64	; 0x40
   13af8:	e5843000 	str	r3, [r4]
   13afc:	e1a0c001 	mov	ip, r1
   13b00:	e2842020 	add	r2, r4, #32
   13b04:	e2840060 	add	r0, r4, #96	; 0x60
   13b08:	e1a0300e 	mov	r3, lr
   13b0c:	e584e010 	str	lr, [r4, #16]
   13b10:	e584e014 	str	lr, [r4, #20]
   13b14:	e584e018 	str	lr, [r4, #24]
   13b18:	e5c4e01c 	strb	lr, [r4, #28]
   13b1c:	e4823004 	str	r3, [r2], #4
   13b20:	e4813004 	str	r3, [r1], #4
   13b24:	e152000c 	cmp	r2, ip
   13b28:	e4c03001 	strb	r3, [r0], #1
   13b2c:	1afffffa 	bne	13b1c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x3c>
   13b30:	e1a00004 	mov	r0, r4
   13b34:	e8bd8010 	pop	{r4, pc}
   13b38:	00032768 	.word	0x00032768

00013b3c <CUSBStandardHub::DisablePort(unsigned int)>:
   13b3c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13b40:	e5903018 	ldr	r3, [r0, #24]
   13b44:	e24dd014 	sub	sp, sp, #20
   13b48:	e1530001 	cmp	r3, r1
   13b4c:	9a000023 	bls	13be0 <CUSBStandardHub::DisablePort(unsigned int)+0xa4>
   13b50:	e1a06001 	mov	r6, r1
   13b54:	e1a05000 	mov	r5, r0
   13b58:	e3a04001 	mov	r4, #1
   13b5c:	ebffeb5d 	bl	e8d8 <CUSBFunction::GetHost() const>
   13b60:	e2868001 	add	r8, r6, #1
   13b64:	e1a09000 	mov	r9, r0
   13b68:	e1a00005 	mov	r0, r5
   13b6c:	e3a07000 	mov	r7, #0
   13b70:	ebffeb4d 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   13b74:	e6ff3078 	uxth	r3, r8
   13b78:	e1a01000 	mov	r1, r0
   13b7c:	e58d3004 	str	r3, [sp, #4]
   13b80:	e1a00009 	mov	r0, r9
   13b84:	e58d4000 	str	r4, [sp]
   13b88:	e1a03004 	mov	r3, r4
   13b8c:	e58d700c 	str	r7, [sp, #12]
   13b90:	e3a02023 	mov	r2, #35	; 0x23
   13b94:	e58d7008 	str	r7, [sp, #8]
   13b98:	ebfff6d3 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13b9c:	e1500007 	cmp	r0, r7
   13ba0:	a0855006 	addge	r5, r5, r6
   13ba4:	a1a00004 	movge	r0, r4
   13ba8:	a5c57060 	strbge	r7, [r5, #96]	; 0x60
   13bac:	ba000001 	blt	13bb8 <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   13bb0:	e28dd014 	add	sp, sp, #20
   13bb4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13bb8:	eb004a92 	bl	26608 <CLogger::Get()>
   13bbc:	e58d8000 	str	r8, [sp]
   13bc0:	e1a02004 	mov	r2, r4
   13bc4:	e59f102c 	ldr	r1, [pc, #44]	; 13bf8 <CUSBStandardHub::DisablePort(unsigned int)+0xbc>
   13bc8:	e30237c0 	movw	r3, #10176	; 0x27c0
   13bcc:	e3403003 	movt	r3, #3
   13bd0:	eb0049cd 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13bd4:	e1a00007 	mov	r0, r7
   13bd8:	e28dd014 	add	sp, sp, #20
   13bdc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13be0:	e3021794 	movw	r1, #10132	; 0x2794
   13be4:	e3401003 	movt	r1, #3
   13be8:	e30207a8 	movw	r0, #10152	; 0x27a8
   13bec:	e3400003 	movt	r0, #3
   13bf0:	e3a020c7 	mov	r2, #199	; 0xc7
   13bf4:	eb0044de 	bl	24f74 <assertion_failed>
   13bf8:	0003278c 	.word	0x0003278c

00013bfc <CUSBStandardHub::RemoveDevice(unsigned int)>:
   13bfc:	e92d4070 	push	{r4, r5, r6, lr}
   13c00:	e1a04000 	mov	r4, r0
   13c04:	e1a06001 	mov	r6, r1
   13c08:	ebffffcb 	bl	13b3c <CUSBStandardHub::DisablePort(unsigned int)>
   13c0c:	e2505000 	subs	r5, r0, #0
   13c10:	0a000008 	beq	13c38 <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
   13c14:	e0844106 	add	r4, r4, r6, lsl #2
   13c18:	e5940020 	ldr	r0, [r4, #32]
   13c1c:	e3500000 	cmp	r0, #0
   13c20:	0a000002 	beq	13c30 <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
   13c24:	e5903000 	ldr	r3, [r0]
   13c28:	e5933004 	ldr	r3, [r3, #4]
   13c2c:	e12fff33 	blx	r3
   13c30:	e3a03000 	mov	r3, #0
   13c34:	e5843020 	str	r3, [r4, #32]
   13c38:	e1a00005 	mov	r0, r5
   13c3c:	e8bd8070 	pop	{r4, r5, r6, pc}

00013c40 <CUSBStandardHub::Initialize()>:
   13c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13c44:	e1a04000 	mov	r4, r0
   13c48:	e24dd010 	sub	sp, sp, #16
   13c4c:	ebffea0f 	bl	e490 <CUSBFunction::Initialize()>
   13c50:	e2506000 	subs	r6, r0, #0
   13c54:	0a00001e 	beq	13cd4 <CUSBStandardHub::Initialize()+0x94>
   13c58:	e5945010 	ldr	r5, [r4, #16]
   13c5c:	e3550000 	cmp	r5, #0
   13c60:	1a00003a 	bne	13d50 <CUSBStandardHub::Initialize()+0x110>
   13c64:	e3a00009 	mov	r0, #9
   13c68:	e1a07000 	mov	r7, r0
   13c6c:	eb00609f 	bl	2bef0 <operator new(unsigned int)>
   13c70:	e5840010 	str	r0, [r4, #16]
   13c74:	e1a00004 	mov	r0, r4
   13c78:	ebffeb16 	bl	e8d8 <CUSBFunction::GetHost() const>
   13c7c:	e1a08000 	mov	r8, r0
   13c80:	e1a00004 	mov	r0, r4
   13c84:	ebffeb08 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   13c88:	e5943010 	ldr	r3, [r4, #16]
   13c8c:	e1a01000 	mov	r1, r0
   13c90:	e58d3000 	str	r3, [sp]
   13c94:	e1a00008 	mov	r0, r8
   13c98:	e3a030a0 	mov	r3, #160	; 0xa0
   13c9c:	e58d500c 	str	r5, [sp, #12]
   13ca0:	e3a02029 	mov	r2, #41	; 0x29
   13ca4:	e58d3008 	str	r3, [sp, #8]
   13ca8:	e1a03005 	mov	r3, r5
   13cac:	e58d7004 	str	r7, [sp, #4]
   13cb0:	ebfff6b9 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13cb4:	e1a08000 	mov	r8, r0
   13cb8:	e1500007 	cmp	r0, r7
   13cbc:	1a000007 	bne	13ce0 <CUSBStandardHub::Initialize()+0xa0>
   13cc0:	e5943010 	ldr	r3, [r4, #16]
   13cc4:	e5d33002 	ldrb	r3, [r3, #2]
   13cc8:	e5843018 	str	r3, [r4, #24]
   13ccc:	e3530008 	cmp	r3, #8
   13cd0:	8a000010 	bhi	13d18 <CUSBStandardHub::Initialize()+0xd8>
   13cd4:	e1a00006 	mov	r0, r6
   13cd8:	e28dd010 	add	sp, sp, #16
   13cdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13ce0:	eb004a48 	bl	26608 <CLogger::Get()>
   13ce4:	e3a02001 	mov	r2, #1
   13ce8:	e59f1078 	ldr	r1, [pc, #120]	; 13d68 <CUSBStandardHub::Initialize()+0x128>
   13cec:	e30237e8 	movw	r3, #10216	; 0x27e8
   13cf0:	e3403003 	movt	r3, #3
   13cf4:	eb004984 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13cf8:	e1a06005 	mov	r6, r5
   13cfc:	e5940010 	ldr	r0, [r4, #16]
   13d00:	e1a01007 	mov	r1, r7
   13d04:	eb006087 	bl	2bf28 <operator delete(void*, unsigned int)>
   13d08:	e1a00006 	mov	r0, r6
   13d0c:	e5845010 	str	r5, [r4, #16]
   13d10:	e28dd010 	add	sp, sp, #16
   13d14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13d18:	eb004a3a 	bl	26608 <CLogger::Get()>
   13d1c:	e5943018 	ldr	r3, [r4, #24]
   13d20:	e58d3000 	str	r3, [sp]
   13d24:	e3a02001 	mov	r2, #1
   13d28:	e59f1038 	ldr	r1, [pc, #56]	; 13d68 <CUSBStandardHub::Initialize()+0x128>
   13d2c:	e3023804 	movw	r3, #10244	; 0x2804
   13d30:	e3403003 	movt	r3, #3
   13d34:	eb004974 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13d38:	e1a01008 	mov	r1, r8
   13d3c:	e5940010 	ldr	r0, [r4, #16]
   13d40:	e1a06005 	mov	r6, r5
   13d44:	eb006077 	bl	2bf28 <operator delete(void*, unsigned int)>
   13d48:	e5845010 	str	r5, [r4, #16]
   13d4c:	eaffffe0 	b	13cd4 <CUSBStandardHub::Initialize()+0x94>
   13d50:	e3021794 	movw	r1, #10132	; 0x2794
   13d54:	e3401003 	movt	r1, #3
   13d58:	e30207d8 	movw	r0, #10200	; 0x27d8
   13d5c:	e3400003 	movt	r0, #3
   13d60:	e3a02055 	mov	r2, #85	; 0x55
   13d64:	eb004482 	bl	24f74 <assertion_failed>
   13d68:	0003278c 	.word	0x0003278c

00013d6c <CUSBStandardHub::EnumeratePorts()>:
   13d6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d70:	e1a08000 	mov	r8, r0
   13d74:	e24dd024 	sub	sp, sp, #36	; 0x24
   13d78:	ebffead6 	bl	e8d8 <CUSBFunction::GetHost() const>
   13d7c:	e2509000 	subs	r9, r0, #0
   13d80:	0a000147 	beq	142a4 <CUSBStandardHub::EnumeratePorts()+0x538>
   13d84:	e1a00008 	mov	r0, r8
   13d88:	ebffeac7 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   13d8c:	e2503000 	subs	r3, r0, #0
   13d90:	e58d3014 	str	r3, [sp, #20]
   13d94:	0a000148 	beq	142bc <CUSBStandardHub::EnumeratePorts()+0x550>
   13d98:	e5983018 	ldr	r3, [r8, #24]
   13d9c:	e3530000 	cmp	r3, #0
   13da0:	0a000155 	beq	142fc <CUSBStandardHub::EnumeratePorts()+0x590>
   13da4:	e5d8501c 	ldrb	r5, [r8, #28]
   13da8:	e3550000 	cmp	r5, #0
   13dac:	0a0000df 	beq	14130 <CUSBStandardHub::EnumeratePorts()+0x3c4>
   13db0:	e2884020 	add	r4, r8, #32
   13db4:	e3a06000 	mov	r6, #0
   13db8:	e30238bc 	movw	r3, #10428	; 0x28bc
   13dbc:	e3403003 	movt	r3, #3
   13dc0:	e58d301c 	str	r3, [sp, #28]
   13dc4:	e30238a4 	movw	r3, #10404	; 0x28a4
   13dc8:	e3403003 	movt	r3, #3
   13dcc:	e58d3018 	str	r3, [sp, #24]
   13dd0:	e4940004 	ldr	r0, [r4], #4
   13dd4:	e3500000 	cmp	r0, #0
   13dd8:	1a0000bd 	bne	140d4 <CUSBStandardHub::EnumeratePorts()+0x368>
   13ddc:	e594001c 	ldr	r0, [r4, #28]
   13de0:	e3500000 	cmp	r0, #0
   13de4:	0a0000cd 	beq	14120 <CUSBStandardHub::EnumeratePorts()+0x3b4>
   13de8:	e3a05000 	mov	r5, #0
   13dec:	e2867001 	add	r7, r6, #1
   13df0:	e58d0008 	str	r0, [sp, #8]
   13df4:	e3a01004 	mov	r1, #4
   13df8:	e6ffa077 	uxth	sl, r7
   13dfc:	e58d100c 	str	r1, [sp, #12]
   13e00:	e58d5000 	str	r5, [sp]
   13e04:	e1a03005 	mov	r3, r5
   13e08:	e58da004 	str	sl, [sp, #4]
   13e0c:	e3a020a3 	mov	r2, #163	; 0xa3
   13e10:	e59d1014 	ldr	r1, [sp, #20]
   13e14:	e1a00009 	mov	r0, r9
   13e18:	ebfff633 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13e1c:	e1a0b000 	mov	fp, r0
   13e20:	e3500004 	cmp	r0, #4
   13e24:	1a0000b1 	bne	140f0 <CUSBStandardHub::EnumeratePorts()+0x384>
   13e28:	e594301c 	ldr	r3, [r4, #28]
   13e2c:	e1d330b0 	ldrh	r3, [r3]
   13e30:	e3130c01 	tst	r3, #256	; 0x100
   13e34:	0a0000ee 	beq	141f4 <CUSBStandardHub::EnumeratePorts()+0x488>
   13e38:	e3130001 	tst	r3, #1
   13e3c:	0a000031 	beq	13f08 <CUSBStandardHub::EnumeratePorts()+0x19c>
   13e40:	e58d0000 	str	r0, [sp]
   13e44:	e3a03003 	mov	r3, #3
   13e48:	e58d500c 	str	r5, [sp, #12]
   13e4c:	e3a02023 	mov	r2, #35	; 0x23
   13e50:	e58d5008 	str	r5, [sp, #8]
   13e54:	e1a00009 	mov	r0, r9
   13e58:	e58da004 	str	sl, [sp, #4]
   13e5c:	e59d1014 	ldr	r1, [sp, #20]
   13e60:	ebfff621 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13e64:	e3500000 	cmp	r0, #0
   13e68:	ba0000e7 	blt	1420c <CUSBStandardHub::EnumeratePorts()+0x4a0>
   13e6c:	eb005d61 	bl	2b3f8 <CTimer::Get()>
   13e70:	e3a00064 	mov	r0, #100	; 0x64
   13e74:	eb005d22 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
   13e78:	e58db00c 	str	fp, [sp, #12]
   13e7c:	e1a03005 	mov	r3, r5
   13e80:	e3a020a3 	mov	r2, #163	; 0xa3
   13e84:	e594001c 	ldr	r0, [r4, #28]
   13e88:	e58d0008 	str	r0, [sp, #8]
   13e8c:	e1a00009 	mov	r0, r9
   13e90:	e59d1014 	ldr	r1, [sp, #20]
   13e94:	e88d0420 	stm	sp, {r5, sl}
   13e98:	ebfff613 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13e9c:	e3500004 	cmp	r0, #4
   13ea0:	1a000088 	bne	140c8 <CUSBStandardHub::EnumeratePorts()+0x35c>
   13ea4:	e594301c 	ldr	r3, [r4, #28]
   13ea8:	e1d330b0 	ldrh	r3, [r3]
   13eac:	e3130002 	tst	r3, #2
   13eb0:	0a0000f0 	beq	14278 <CUSBStandardHub::EnumeratePorts()+0x50c>
   13eb4:	e2132008 	ands	r2, r3, #8
   13eb8:	1a000155 	bne	14414 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   13ebc:	e3130c02 	tst	r3, #512	; 0x200
   13ec0:	11a05002 	movne	r5, r2
   13ec4:	0a0000b9 	beq	141b0 <CUSBStandardHub::EnumeratePorts()+0x444>
   13ec8:	e5143004 	ldr	r3, [r4, #-4]
   13ecc:	e3530000 	cmp	r3, #0
   13ed0:	1a00010f 	bne	14314 <CUSBStandardHub::EnumeratePorts()+0x5a8>
   13ed4:	e3a00058 	mov	r0, #88	; 0x58
   13ed8:	eb006004 	bl	2bef0 <operator new(unsigned int)>
   13edc:	e1a02005 	mov	r2, r5
   13ee0:	e1a0a000 	mov	sl, r0
   13ee4:	e1a03008 	mov	r3, r8
   13ee8:	e1a01009 	mov	r1, r9
   13eec:	e58d6000 	str	r6, [sp]
   13ef0:	ebffe3d0 	bl	ce38 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   13ef4:	e504a004 	str	sl, [r4, #-4]
   13ef8:	e1a0000a 	mov	r0, sl
   13efc:	ebffe54a 	bl	d42c <CUSBDevice::Initialize()>
   13f00:	e3500000 	cmp	r0, #0
   13f04:	0a0000ad 	beq	141c0 <CUSBStandardHub::EnumeratePorts()+0x454>
   13f08:	e5983018 	ldr	r3, [r8, #24]
   13f0c:	e1a06007 	mov	r6, r7
   13f10:	e1530007 	cmp	r3, r7
   13f14:	8affffad 	bhi	13dd0 <CUSBStandardHub::EnumeratePorts()+0x64>
   13f18:	e3530000 	cmp	r3, #0
   13f1c:	0a000035 	beq	13ff8 <CUSBStandardHub::EnumeratePorts()+0x28c>
   13f20:	e30f7fa1 	movw	r7, #65441	; 0xffa1
   13f24:	e34f7fff 	movt	r7, #65535	; 0xffff
   13f28:	e302a934 	movw	sl, #10548	; 0x2934
   13f2c:	e340a003 	movt	sl, #3
   13f30:	e3022910 	movw	r2, #10512	; 0x2910
   13f34:	e3402003 	movt	r2, #3
   13f38:	e59fb51c 	ldr	fp, [pc, #1308]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   13f3c:	e0477008 	sub	r7, r7, r8
   13f40:	e58d2018 	str	r2, [sp, #24]
   13f44:	e288601c 	add	r6, r8, #28
   13f48:	e2884060 	add	r4, r8, #96	; 0x60
   13f4c:	ea000009 	b	13f78 <CUSBStandardHub::EnumeratePorts()+0x20c>
   13f50:	eb0049ac 	bl	26608 <CLogger::Get()>
   13f54:	e1a0300a 	mov	r3, sl
   13f58:	e58d5000 	str	r5, [sp]
   13f5c:	e3a02004 	mov	r2, #4
   13f60:	e1a0100b 	mov	r1, fp
   13f64:	eb0048e8 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13f68:	e5983018 	ldr	r3, [r8, #24]
   13f6c:	e2844001 	add	r4, r4, #1
   13f70:	e1530005 	cmp	r3, r5
   13f74:	9a00001f 	bls	13ff8 <CUSBStandardHub::EnumeratePorts()+0x28c>
   13f78:	e5b60004 	ldr	r0, [r6, #4]!
   13f7c:	e0875004 	add	r5, r7, r4
   13f80:	e3500000 	cmp	r0, #0
   13f84:	0afffff8 	beq	13f6c <CUSBStandardHub::EnumeratePorts()+0x200>
   13f88:	e5d42000 	ldrb	r2, [r4]
   13f8c:	e3520000 	cmp	r2, #0
   13f90:	1afffff5 	bne	13f6c <CUSBStandardHub::EnumeratePorts()+0x200>
   13f94:	e5903000 	ldr	r3, [r0]
   13f98:	e3a02001 	mov	r2, #1
   13f9c:	e5c42000 	strb	r2, [r4]
   13fa0:	e593300c 	ldr	r3, [r3, #12]
   13fa4:	e12fff33 	blx	r3
   13fa8:	e3500000 	cmp	r0, #0
   13fac:	1affffe7 	bne	13f50 <CUSBStandardHub::EnumeratePorts()+0x1e4>
   13fb0:	eb004994 	bl	26608 <CLogger::Get()>
   13fb4:	e58d5000 	str	r5, [sp]
   13fb8:	e59d3018 	ldr	r3, [sp, #24]
   13fbc:	e3a02002 	mov	r2, #2
   13fc0:	e1a0100b 	mov	r1, fp
   13fc4:	eb0048d0 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13fc8:	e5960000 	ldr	r0, [r6]
   13fcc:	e3500000 	cmp	r0, #0
   13fd0:	0a000002 	beq	13fe0 <CUSBStandardHub::EnumeratePorts()+0x274>
   13fd4:	e5903000 	ldr	r3, [r0]
   13fd8:	e5933004 	ldr	r3, [r3, #4]
   13fdc:	e12fff33 	blx	r3
   13fe0:	e3a03000 	mov	r3, #0
   13fe4:	e5863000 	str	r3, [r6]
   13fe8:	e5983018 	ldr	r3, [r8, #24]
   13fec:	e2844001 	add	r4, r4, #1
   13ff0:	e1530005 	cmp	r3, r5
   13ff4:	8affffdf 	bhi	13f78 <CUSBStandardHub::EnumeratePorts()+0x20c>
   13ff8:	e3a05000 	mov	r5, #0
   13ffc:	e3a00004 	mov	r0, #4
   14000:	eb005fba 	bl	2bef0 <operator new(unsigned int)>
   14004:	e3a04004 	mov	r4, #4
   14008:	e58d0008 	str	r0, [sp, #8]
   1400c:	e1a06000 	mov	r6, r0
   14010:	e58d5004 	str	r5, [sp, #4]
   14014:	e1a03005 	mov	r3, r5
   14018:	e58d5000 	str	r5, [sp]
   1401c:	e3a020a0 	mov	r2, #160	; 0xa0
   14020:	e58d400c 	str	r4, [sp, #12]
   14024:	e1a00009 	mov	r0, r9
   14028:	e59d1014 	ldr	r1, [sp, #20]
   1402c:	ebfff5ae 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14030:	e1a0b000 	mov	fp, r0
   14034:	e1500004 	cmp	r0, r4
   14038:	1a0000a5 	bne	142d4 <CUSBStandardHub::EnumeratePorts()+0x568>
   1403c:	e1d630b0 	ldrh	r3, [r6]
   14040:	e3130002 	tst	r3, #2
   14044:	0a0000b8 	beq	1432c <CUSBStandardHub::EnumeratePorts()+0x5c0>
   14048:	e5983018 	ldr	r3, [r8, #24]
   1404c:	e3530000 	cmp	r3, #0
   14050:	0a000012 	beq	140a0 <CUSBStandardHub::EnumeratePorts()+0x334>
   14054:	e3a04001 	mov	r4, #1
   14058:	e3a07008 	mov	r7, #8
   1405c:	e59da014 	ldr	sl, [sp, #20]
   14060:	ea000000 	b	14068 <CUSBStandardHub::EnumeratePorts()+0x2fc>
   14064:	e1a04002 	mov	r4, r2
   14068:	e6ff1074 	uxth	r1, r4
   1406c:	e3a03001 	mov	r3, #1
   14070:	e3a02023 	mov	r2, #35	; 0x23
   14074:	e58d1004 	str	r1, [sp, #4]
   14078:	e58d500c 	str	r5, [sp, #12]
   1407c:	e1a0100a 	mov	r1, sl
   14080:	e58d5008 	str	r5, [sp, #8]
   14084:	e1a00009 	mov	r0, r9
   14088:	e58d7000 	str	r7, [sp]
   1408c:	ebfff596 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14090:	e5983018 	ldr	r3, [r8, #24]
   14094:	e2842001 	add	r2, r4, #1
   14098:	e1530004 	cmp	r3, r4
   1409c:	8afffff0 	bhi	14064 <CUSBStandardHub::EnumeratePorts()+0x2f8>
   140a0:	eb004958 	bl	26608 <CLogger::Get()>
   140a4:	e59f13b0 	ldr	r1, [pc, #944]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   140a8:	e3023968 	movw	r3, #10600	; 0x2968
   140ac:	e3403003 	movt	r3, #3
   140b0:	e3a02001 	mov	r2, #1
   140b4:	e3a05000 	mov	r5, #0
   140b8:	eb004893 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   140bc:	e1a00006 	mov	r0, r6
   140c0:	e3a01004 	mov	r1, #4
   140c4:	eb005f97 	bl	2bf28 <operator delete(void*, unsigned int)>
   140c8:	e1a00005 	mov	r0, r5
   140cc:	e28dd024 	add	sp, sp, #36	; 0x24
   140d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d4:	ebffe3b2 	bl	cfa4 <CUSBDevice::ReScanDevices()>
   140d8:	e5983018 	ldr	r3, [r8, #24]
   140dc:	e2867001 	add	r7, r6, #1
   140e0:	e1a06007 	mov	r6, r7
   140e4:	e1530007 	cmp	r3, r7
   140e8:	8affff38 	bhi	13dd0 <CUSBStandardHub::EnumeratePorts()+0x64>
   140ec:	eaffff89 	b	13f18 <CUSBStandardHub::EnumeratePorts()+0x1ac>
   140f0:	eb004944 	bl	26608 <CLogger::Get()>
   140f4:	e58d7000 	str	r7, [sp]
   140f8:	e3023850 	movw	r3, #10320	; 0x2850
   140fc:	e3403003 	movt	r3, #3
   14100:	e3a02001 	mov	r2, #1
   14104:	e59f1350 	ldr	r1, [pc, #848]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   14108:	eb00487f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1410c:	e5983018 	ldr	r3, [r8, #24]
   14110:	e1a06007 	mov	r6, r7
   14114:	e1530007 	cmp	r3, r7
   14118:	8affff2c 	bhi	13dd0 <CUSBStandardHub::EnumeratePorts()+0x64>
   1411c:	eaffff7d 	b	13f18 <CUSBStandardHub::EnumeratePorts()+0x1ac>
   14120:	e3a00004 	mov	r0, #4
   14124:	eb005f71 	bl	2bef0 <operator new(unsigned int)>
   14128:	e584001c 	str	r0, [r4, #28]
   1412c:	eaffff2d 	b	13de8 <CUSBStandardHub::EnumeratePorts()+0x7c>
   14130:	e3a04001 	mov	r4, #1
   14134:	e1a06005 	mov	r6, r5
   14138:	e3a07008 	mov	r7, #8
   1413c:	e59da014 	ldr	sl, [sp, #20]
   14140:	ea000004 	b	14158 <CUSBStandardHub::EnumeratePorts()+0x3ec>
   14144:	e5983018 	ldr	r3, [r8, #24]
   14148:	e2842001 	add	r2, r4, #1
   1414c:	e1530004 	cmp	r3, r4
   14150:	9a000038 	bls	14238 <CUSBStandardHub::EnumeratePorts()+0x4cc>
   14154:	e1a04002 	mov	r4, r2
   14158:	e6ff1074 	uxth	r1, r4
   1415c:	e58d600c 	str	r6, [sp, #12]
   14160:	e58d1004 	str	r1, [sp, #4]
   14164:	e3a03003 	mov	r3, #3
   14168:	e58d6008 	str	r6, [sp, #8]
   1416c:	e3a02023 	mov	r2, #35	; 0x23
   14170:	e58d7000 	str	r7, [sp]
   14174:	e1a0100a 	mov	r1, sl
   14178:	e1a00009 	mov	r0, r9
   1417c:	ebfff55a 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14180:	e3500000 	cmp	r0, #0
   14184:	aaffffee 	bge	14144 <CUSBStandardHub::EnumeratePorts()+0x3d8>
   14188:	eb00491e 	bl	26608 <CLogger::Get()>
   1418c:	e58d4000 	str	r4, [sp]
   14190:	e3a02001 	mov	r2, #1
   14194:	e59f12c0 	ldr	r1, [pc, #704]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   14198:	e3023838 	movw	r3, #10296	; 0x2838
   1419c:	e3403003 	movt	r3, #3
   141a0:	eb004859 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   141a4:	e1a00005 	mov	r0, r5
   141a8:	e28dd024 	add	sp, sp, #36	; 0x24
   141ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141b0:	e3130b01 	tst	r3, #1024	; 0x400
   141b4:	03a05001 	moveq	r5, #1
   141b8:	13a05002 	movne	r5, #2
   141bc:	eaffff41 	b	13ec8 <CUSBStandardHub::EnumeratePorts()+0x15c>
   141c0:	e5140004 	ldr	r0, [r4, #-4]
   141c4:	e3500000 	cmp	r0, #0
   141c8:	0a000002 	beq	141d8 <CUSBStandardHub::EnumeratePorts()+0x46c>
   141cc:	e5903000 	ldr	r3, [r0]
   141d0:	e5933004 	ldr	r3, [r3, #4]
   141d4:	e12fff33 	blx	r3
   141d8:	e3a03000 	mov	r3, #0
   141dc:	e5043004 	str	r3, [r4, #-4]
   141e0:	e5983018 	ldr	r3, [r8, #24]
   141e4:	e1a06007 	mov	r6, r7
   141e8:	e1530007 	cmp	r3, r7
   141ec:	8afffef7 	bhi	13dd0 <CUSBStandardHub::EnumeratePorts()+0x64>
   141f0:	eaffff48 	b	13f18 <CUSBStandardHub::EnumeratePorts()+0x1ac>
   141f4:	e3021794 	movw	r1, #10132	; 0x2794
   141f8:	e3401003 	movt	r1, #3
   141fc:	e3020870 	movw	r0, #10352	; 0x2870
   14200:	e3400003 	movt	r0, #3
   14204:	e3002125 	movw	r2, #293	; 0x125
   14208:	eb004359 	bl	24f74 <assertion_failed>
   1420c:	eb0048fd 	bl	26608 <CLogger::Get()>
   14210:	e59d3018 	ldr	r3, [sp, #24]
   14214:	e58d7000 	str	r7, [sp]
   14218:	e3a02001 	mov	r2, #1
   1421c:	e59f1238 	ldr	r1, [pc, #568]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   14220:	e1a06007 	mov	r6, r7
   14224:	eb004838 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14228:	e5983018 	ldr	r3, [r8, #24]
   1422c:	e1530007 	cmp	r3, r7
   14230:	8afffee6 	bhi	13dd0 <CUSBStandardHub::EnumeratePorts()+0x64>
   14234:	eaffff37 	b	13f18 <CUSBStandardHub::EnumeratePorts()+0x1ac>
   14238:	e3a03001 	mov	r3, #1
   1423c:	e5c8301c 	strb	r3, [r8, #28]
   14240:	eb0046c3 	bl	25d54 <CKernelOptions::Get()>
   14244:	e3500000 	cmp	r0, #0
   14248:	0a000002 	beq	14258 <CUSBStandardHub::EnumeratePorts()+0x4ec>
   1424c:	eb0046b5 	bl	25d28 <CKernelOptions::GetUSBPowerDelay() const>
   14250:	e2504000 	subs	r4, r0, #0
   14254:	1a000000 	bne	1425c <CUSBStandardHub::EnumeratePorts()+0x4f0>
   14258:	e30041fe 	movw	r4, #510	; 0x1fe
   1425c:	eb005c65 	bl	2b3f8 <CTimer::Get()>
   14260:	e1a00004 	mov	r0, r4
   14264:	eb005c26 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
   14268:	e5983018 	ldr	r3, [r8, #24]
   1426c:	e3530000 	cmp	r3, #0
   14270:	1afffece 	bne	13db0 <CUSBStandardHub::EnumeratePorts()+0x44>
   14274:	eaffff5f 	b	13ff8 <CUSBStandardHub::EnumeratePorts()+0x28c>
   14278:	eb0048e2 	bl	26608 <CLogger::Get()>
   1427c:	e59d301c 	ldr	r3, [sp, #28]
   14280:	e58d7000 	str	r7, [sp]
   14284:	e3a02001 	mov	r2, #1
   14288:	e59f11cc 	ldr	r1, [pc, #460]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   1428c:	e1a06007 	mov	r6, r7
   14290:	eb00481d 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14294:	e5983018 	ldr	r3, [r8, #24]
   14298:	e1530007 	cmp	r3, r7
   1429c:	8afffecb 	bhi	13dd0 <CUSBStandardHub::EnumeratePorts()+0x64>
   142a0:	eaffff1c 	b	13f18 <CUSBStandardHub::EnumeratePorts()+0x1ac>
   142a4:	e3021794 	movw	r1, #10132	; 0x2794
   142a8:	e3401003 	movt	r1, #3
   142ac:	e3020280 	movw	r0, #8832	; 0x2280
   142b0:	e3400003 	movt	r0, #3
   142b4:	e3a020e3 	mov	r2, #227	; 0xe3
   142b8:	eb00432d 	bl	24f74 <assertion_failed>
   142bc:	e3021794 	movw	r1, #10132	; 0x2794
   142c0:	e3401003 	movt	r1, #3
   142c4:	e3020818 	movw	r0, #10264	; 0x2818
   142c8:	e3400003 	movt	r0, #3
   142cc:	e3a020e6 	mov	r2, #230	; 0xe6
   142d0:	eb004327 	bl	24f74 <assertion_failed>
   142d4:	eb0048cb 	bl	26608 <CLogger::Get()>
   142d8:	e3a02001 	mov	r2, #1
   142dc:	e59f1178 	ldr	r1, [pc, #376]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   142e0:	e3023950 	movw	r3, #10576	; 0x2950
   142e4:	e3403003 	movt	r3, #3
   142e8:	eb004807 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   142ec:	e1a01004 	mov	r1, r4
   142f0:	e1a00006 	mov	r0, r6
   142f4:	eb005f0b 	bl	2bf28 <operator delete(void*, unsigned int)>
   142f8:	eaffff72 	b	140c8 <CUSBStandardHub::EnumeratePorts()+0x35c>
   142fc:	e3021794 	movw	r1, #10132	; 0x2794
   14300:	e3401003 	movt	r1, #3
   14304:	e3020828 	movw	r0, #10280	; 0x2828
   14308:	e3400003 	movt	r0, #3
   1430c:	e3a020e8 	mov	r2, #232	; 0xe8
   14310:	eb004317 	bl	24f74 <assertion_failed>
   14314:	e3021794 	movw	r1, #10132	; 0x2794
   14318:	e3401003 	movt	r1, #3
   1431c:	e30208f8 	movw	r0, #10488	; 0x28f8
   14320:	e3400003 	movt	r0, #3
   14324:	e3002162 	movw	r2, #354	; 0x162
   14328:	eb004311 	bl	24f74 <assertion_failed>
   1432c:	e1a00006 	mov	r0, r6
   14330:	e1a0100b 	mov	r1, fp
   14334:	eb005efb 	bl	2bf28 <operator delete(void*, unsigned int)>
   14338:	e5983018 	ldr	r3, [r8, #24]
   1433c:	e3530000 	cmp	r3, #0
   14340:	03a05001 	moveq	r5, #1
   14344:	0affff5f 	beq	140c8 <CUSBStandardHub::EnumeratePorts()+0x35c>
   14348:	e3a04001 	mov	r4, #1
   1434c:	e30238d4 	movw	r3, #10452	; 0x28d4
   14350:	e3403003 	movt	r3, #3
   14354:	e58d3018 	str	r3, [sp, #24]
   14358:	e59da014 	ldr	sl, [sp, #20]
   1435c:	e288703c 	add	r7, r8, #60	; 0x3c
   14360:	e58d4014 	str	r4, [sp, #20]
   14364:	ea000004 	b	1437c <CUSBStandardHub::EnumeratePorts()+0x610>
   14368:	e5983018 	ldr	r3, [r8, #24]
   1436c:	e2842001 	add	r2, r4, #1
   14370:	e1530004 	cmp	r3, r4
   14374:	9a000024 	bls	1440c <CUSBStandardHub::EnumeratePorts()+0x6a0>
   14378:	e1a04002 	mov	r4, r2
   1437c:	e5b72004 	ldr	r2, [r7, #4]!
   14380:	e3a05000 	mov	r5, #0
   14384:	e58d2008 	str	r2, [sp, #8]
   14388:	e1a03005 	mov	r3, r5
   1438c:	e58db00c 	str	fp, [sp, #12]
   14390:	e6ff6074 	uxth	r6, r4
   14394:	e58d5000 	str	r5, [sp]
   14398:	e3a020a3 	mov	r2, #163	; 0xa3
   1439c:	e58d6004 	str	r6, [sp, #4]
   143a0:	e1a0100a 	mov	r1, sl
   143a4:	e1a00009 	mov	r0, r9
   143a8:	ebfff4cf 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   143ac:	e3500004 	cmp	r0, #4
   143b0:	1affffec 	bne	14368 <CUSBStandardHub::EnumeratePorts()+0x5fc>
   143b4:	e5973000 	ldr	r3, [r7]
   143b8:	e1d330b0 	ldrh	r3, [r3]
   143bc:	e3130008 	tst	r3, #8
   143c0:	0affffe8 	beq	14368 <CUSBStandardHub::EnumeratePorts()+0x5fc>
   143c4:	e1a0100a 	mov	r1, sl
   143c8:	e3a03001 	mov	r3, #1
   143cc:	e58d500c 	str	r5, [sp, #12]
   143d0:	e3a02008 	mov	r2, #8
   143d4:	e58d5008 	str	r5, [sp, #8]
   143d8:	e1a00009 	mov	r0, r9
   143dc:	e58d2000 	str	r2, [sp]
   143e0:	e3a02023 	mov	r2, #35	; 0x23
   143e4:	e58d6004 	str	r6, [sp, #4]
   143e8:	e58d5014 	str	r5, [sp, #20]
   143ec:	ebfff4be 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   143f0:	eb004884 	bl	26608 <CLogger::Get()>
   143f4:	e58d4000 	str	r4, [sp]
   143f8:	e59d3018 	ldr	r3, [sp, #24]
   143fc:	e3a02001 	mov	r2, #1
   14400:	e59f1054 	ldr	r1, [pc, #84]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   14404:	eb0047c0 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14408:	eaffffd6 	b	14368 <CUSBStandardHub::EnumeratePorts()+0x5fc>
   1440c:	e59d5014 	ldr	r5, [sp, #20]
   14410:	eaffff2c 	b	140c8 <CUSBStandardHub::EnumeratePorts()+0x35c>
   14414:	e59d1014 	ldr	r1, [sp, #20]
   14418:	e3a03001 	mov	r3, #1
   1441c:	e58d500c 	str	r5, [sp, #12]
   14420:	e1a00009 	mov	r0, r9
   14424:	e58d5008 	str	r5, [sp, #8]
   14428:	e3a02008 	mov	r2, #8
   1442c:	e58da004 	str	sl, [sp, #4]
   14430:	e58d2000 	str	r2, [sp]
   14434:	e3a02023 	mov	r2, #35	; 0x23
   14438:	ebfff4ab 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1443c:	eb004871 	bl	26608 <CLogger::Get()>
   14440:	e58d7000 	str	r7, [sp]
   14444:	e30238d4 	movw	r3, #10452	; 0x28d4
   14448:	e3403003 	movt	r3, #3
   1444c:	e3a02001 	mov	r2, #1
   14450:	e59f1004 	ldr	r1, [pc, #4]	; 1445c <CUSBStandardHub::EnumeratePorts()+0x6f0>
   14454:	eb0047ac 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14458:	eaffff1a 	b	140c8 <CUSBStandardHub::EnumeratePorts()+0x35c>
   1445c:	0003278c 	.word	0x0003278c

00014460 <CUSBStandardHub::ReScanDevices()>:
   14460:	eafffe41 	b	13d6c <CUSBStandardHub::EnumeratePorts()>

00014464 <CUSBStandardHub::Configure()>:
   14464:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14468:	e1a04000 	mov	r4, r0
   1446c:	e24dd010 	sub	sp, sp, #16
   14470:	ebffe8f7 	bl	e854 <CUSBFunction::GetNumEndpoints() const>
   14474:	e3500001 	cmp	r0, #1
   14478:	0a000006 	beq	14498 <CUSBStandardHub::Configure()+0x34>
   1447c:	e3a06000 	mov	r6, #0
   14480:	e1a00004 	mov	r0, r4
   14484:	e59f111c 	ldr	r1, [pc, #284]	; 145a8 <CUSBStandardHub::Configure()+0x144>
   14488:	ebffe928 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   1448c:	e1a00006 	mov	r0, r6
   14490:	e28dd010 	add	sp, sp, #16
   14494:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14498:	e1a05000 	mov	r5, r0
   1449c:	e3a01005 	mov	r1, #5
   144a0:	e1a00004 	mov	r0, r4
   144a4:	ebffe916 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   144a8:	e2506000 	subs	r6, r0, #0
   144ac:	0afffff2 	beq	1447c <CUSBStandardHub::Configure()+0x18>
   144b0:	e1d630d2 	ldrsb	r3, [r6, #2]
   144b4:	e3530000 	cmp	r3, #0
   144b8:	aaffffef 	bge	1447c <CUSBStandardHub::Configure()+0x18>
   144bc:	e5d63003 	ldrb	r3, [r6, #3]
   144c0:	e203303f 	and	r3, r3, #63	; 0x3f
   144c4:	e3530003 	cmp	r3, #3
   144c8:	1affffeb 	bne	1447c <CUSBStandardHub::Configure()+0x18>
   144cc:	e1a00004 	mov	r0, r4
   144d0:	ebffe8eb 	bl	e884 <CUSBFunction::GetDevice() const>
   144d4:	e1a08000 	mov	r8, r0
   144d8:	e3a00014 	mov	r0, #20
   144dc:	eb005e83 	bl	2bef0 <operator new(unsigned int)>
   144e0:	e1a02006 	mov	r2, r6
   144e4:	e1a01008 	mov	r1, r8
   144e8:	e1a07000 	mov	r7, r0
   144ec:	ebffe71a 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   144f0:	e5847014 	str	r7, [r4, #20]
   144f4:	e1a00004 	mov	r0, r4
   144f8:	ebffe811 	bl	e544 <CUSBFunction::Configure()>
   144fc:	e2506000 	subs	r6, r0, #0
   14500:	0a00001a 	beq	14570 <CUSBStandardHub::Configure()+0x10c>
   14504:	e1a0000d 	mov	r0, sp
   14508:	eb005437 	bl	295ec <CString::CString()>
   1450c:	e3083f70 	movw	r3, #36720	; 0x8f70
   14510:	e3403003 	movt	r3, #3
   14514:	e1a0000d 	mov	r0, sp
   14518:	e3021984 	movw	r1, #10628	; 0x2984
   1451c:	e3401003 	movt	r1, #3
   14520:	e5932000 	ldr	r2, [r3]
   14524:	e282c001 	add	ip, r2, #1
   14528:	e583c000 	str	ip, [r3]
   1452c:	eb0057fe 	bl	2a52c <CString::Format(char const*, ...)>
   14530:	eb004539 	bl	25a1c <CDeviceNameService::Get()>
   14534:	e1a06000 	mov	r6, r0
   14538:	e1a0000d 	mov	r0, sp
   1453c:	eb005441 	bl	29648 <CString::operator char const*() const>
   14540:	e3a03000 	mov	r3, #0
   14544:	e1a01000 	mov	r1, r0
   14548:	e1a02004 	mov	r2, r4
   1454c:	e1a00006 	mov	r0, r6
   14550:	eb004477 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14554:	e1a00004 	mov	r0, r4
   14558:	ebfffe03 	bl	13d6c <CUSBStandardHub::EnumeratePorts()>
   1455c:	e2506000 	subs	r6, r0, #0
   14560:	0a000009 	beq	1458c <CUSBStandardHub::Configure()+0x128>
   14564:	e1a0000d 	mov	r0, sp
   14568:	eb0053ec 	bl	29520 <CString::~CString()>
   1456c:	eaffffc6 	b	1448c <CUSBStandardHub::Configure()+0x28>
   14570:	eb004824 	bl	26608 <CLogger::Get()>
   14574:	e1a02005 	mov	r2, r5
   14578:	e3013948 	movw	r3, #6472	; 0x1948
   1457c:	e3403003 	movt	r3, #3
   14580:	e59f1020 	ldr	r1, [pc, #32]	; 145a8 <CUSBStandardHub::Configure()+0x144>
   14584:	eb004760 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14588:	eaffffbf 	b	1448c <CUSBStandardHub::Configure()+0x28>
   1458c:	eb00481d 	bl	26608 <CLogger::Get()>
   14590:	e1a02005 	mov	r2, r5
   14594:	e302398c 	movw	r3, #10636	; 0x298c
   14598:	e3403003 	movt	r3, #3
   1459c:	e59f1004 	ldr	r1, [pc, #4]	; 145a8 <CUSBStandardHub::Configure()+0x144>
   145a0:	eb004759 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   145a4:	eaffffee 	b	14564 <CUSBStandardHub::Configure()+0x100>
   145a8:	0003278c 	.word	0x0003278c

000145ac <CLAN7800Device::GetMACAddress() const>:
   145ac:	e280001c 	add	r0, r0, #28
   145b0:	e12fff1e 	bx	lr

000145b4 <CLAN7800Device::~CLAN7800Device()>:
   145b4:	e92d4070 	push	{r4, r5, r6, lr}
   145b8:	e1a04000 	mov	r4, r0
   145bc:	e59f3070 	ldr	r3, [pc, #112]	; 14634 <CLAN7800Device::~CLAN7800Device()+0x80>
   145c0:	e5905018 	ldr	r5, [r0, #24]
   145c4:	e2832040 	add	r2, r3, #64	; 0x40
   145c8:	e5803000 	str	r3, [r0]
   145cc:	e5802010 	str	r2, [r0, #16]
   145d0:	e3550000 	cmp	r5, #0
   145d4:	0a000004 	beq	145ec <CLAN7800Device::~CLAN7800Device()+0x38>
   145d8:	e1a00005 	mov	r0, r5
   145dc:	ebffe742 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   145e0:	e1a00005 	mov	r0, r5
   145e4:	e3a01014 	mov	r1, #20
   145e8:	eb005e4e 	bl	2bf28 <operator delete(void*, unsigned int)>
   145ec:	e5945014 	ldr	r5, [r4, #20]
   145f0:	e3a03000 	mov	r3, #0
   145f4:	e5843018 	str	r3, [r4, #24]
   145f8:	e1550003 	cmp	r5, r3
   145fc:	0a000004 	beq	14614 <CLAN7800Device::~CLAN7800Device()+0x60>
   14600:	e1a00005 	mov	r0, r5
   14604:	ebffe738 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   14608:	e1a00005 	mov	r0, r5
   1460c:	e3a01014 	mov	r1, #20
   14610:	eb005e44 	bl	2bf28 <operator delete(void*, unsigned int)>
   14614:	e3a03000 	mov	r3, #0
   14618:	e284001c 	add	r0, r4, #28
   1461c:	e5843014 	str	r3, [r4, #20]
   14620:	eb005d70 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   14624:	e1a00004 	mov	r0, r4
   14628:	ebffe79c 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   1462c:	e1a00004 	mov	r0, r4
   14630:	e8bd8070 	pop	{r4, r5, r6, pc}
   14634:	000329ac 	.word	0x000329ac

00014638 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   14638:	e2400010 	sub	r0, r0, #16
   1463c:	eaffffdc 	b	145b4 <CLAN7800Device::~CLAN7800Device()>

00014640 <CLAN7800Device::~CLAN7800Device()>:
   14640:	e92d4010 	push	{r4, lr}
   14644:	e1a04000 	mov	r4, r0
   14648:	ebffffd9 	bl	145b4 <CLAN7800Device::~CLAN7800Device()>
   1464c:	e1a00004 	mov	r0, r4
   14650:	e3a01024 	mov	r1, #36	; 0x24
   14654:	eb005e33 	bl	2bf28 <operator delete(void*, unsigned int)>
   14658:	e1a00004 	mov	r0, r4
   1465c:	e8bd8010 	pop	{r4, pc}

00014660 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   14660:	e2400010 	sub	r0, r0, #16
   14664:	eafffff5 	b	14640 <CLAN7800Device::~CLAN7800Device()>

00014668 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   14668:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1466c:	e1a04001 	mov	r4, r1
   14670:	e5901014 	ldr	r1, [r0, #20]
   14674:	e24dd030 	sub	sp, sp, #48	; 0x30
   14678:	e3510000 	cmp	r1, #0
   1467c:	0a00003c 	beq	14774 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x10c>
   14680:	e3540000 	cmp	r4, #0
   14684:	0a000040 	beq	1478c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x124>
   14688:	e1a05000 	mov	r5, r0
   1468c:	e3a03d19 	mov	r3, #1600	; 0x640
   14690:	e3a06000 	mov	r6, #0
   14694:	e1a07002 	mov	r7, r2
   14698:	e28d0008 	add	r0, sp, #8
   1469c:	e1a02004 	mov	r2, r4
   146a0:	e58d6000 	str	r6, [sp]
   146a4:	ebfffbf2 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   146a8:	e1a00005 	mov	r0, r5
   146ac:	ebffe889 	bl	e8d8 <CUSBFunction::GetHost() const>
   146b0:	e5903000 	ldr	r3, [r0]
   146b4:	e1a02006 	mov	r2, r6
   146b8:	e28d1008 	add	r1, sp, #8
   146bc:	e5933008 	ldr	r3, [r3, #8]
   146c0:	e12fff33 	blx	r3
   146c4:	e2505000 	subs	r5, r0, #0
   146c8:	0a00001a 	beq	14738 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   146cc:	e28d0008 	add	r0, sp, #8
   146d0:	ebfffc19 	bl	1373c <CUSBRequest::GetResultLength() const>
   146d4:	e3500009 	cmp	r0, #9
   146d8:	9a000016 	bls	14738 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   146dc:	e5948000 	ldr	r8, [r4]
   146e0:	e3180501 	tst	r8, #4194304	; 0x400000
   146e4:	1a000019 	bne	14750 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   146e8:	e7ed8058 	ubfx	r8, r8, #0, #14
   146ec:	e240300a 	sub	r3, r0, #10
   146f0:	e1530008 	cmp	r3, r8
   146f4:	1a00002a 	bne	147a4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x13c>
   146f8:	e3530004 	cmp	r3, #4
   146fc:	9a00002e 	bls	147bc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   14700:	e240600e 	sub	r6, r0, #14
   14704:	e284100a 	add	r1, r4, #10
   14708:	e1a02006 	mov	r2, r6
   1470c:	e1a00004 	mov	r0, r4
   14710:	eb005cec 	bl	2bac8 <memcpy>
   14714:	e3570000 	cmp	r7, #0
   14718:	15876000 	strne	r6, [r7]
   1471c:	1a000006 	bne	1473c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   14720:	e3021a18 	movw	r1, #10776	; 0x2a18
   14724:	e3401003 	movt	r1, #3
   14728:	e3020a98 	movw	r0, #10904	; 0x2a98
   1472c:	e3400003 	movt	r0, #3
   14730:	e30021e3 	movw	r2, #483	; 0x1e3
   14734:	eb00420e 	bl	24f74 <assertion_failed>
   14738:	e3a05000 	mov	r5, #0
   1473c:	e28d0008 	add	r0, sp, #8
   14740:	ebfffbec 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   14744:	e1a00005 	mov	r0, r5
   14748:	e28dd030 	add	sp, sp, #48	; 0x30
   1474c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14750:	eb0047ac 	bl	26608 <CLogger::Get()>
   14754:	e58d8000 	str	r8, [sp]
   14758:	e3023a3c 	movw	r3, #10812	; 0x2a3c
   1475c:	e3403003 	movt	r3, #3
   14760:	e3a02002 	mov	r2, #2
   14764:	e59f1068 	ldr	r1, [pc, #104]	; 147d4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   14768:	e1a05006 	mov	r5, r6
   1476c:	eb0046e6 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14770:	eafffff1 	b	1473c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   14774:	e3021a18 	movw	r1, #10776	; 0x2a18
   14778:	e3401003 	movt	r1, #3
   1477c:	e3020a24 	movw	r0, #10788	; 0x2a24
   14780:	e3400003 	movt	r0, #3
   14784:	e30021bf 	movw	r2, #447	; 0x1bf
   14788:	eb0041f9 	bl	24f74 <assertion_failed>
   1478c:	e3021a18 	movw	r1, #10776	; 0x2a18
   14790:	e3401003 	movt	r1, #3
   14794:	e3020270 	movw	r0, #8816	; 0x2270
   14798:	e3400003 	movt	r0, #3
   1479c:	e3a02d07 	mov	r2, #448	; 0x1c0
   147a0:	eb0041f3 	bl	24f74 <assertion_failed>
   147a4:	e3021a18 	movw	r1, #10776	; 0x2a18
   147a8:	e3401003 	movt	r1, #3
   147ac:	e3020a54 	movw	r0, #10836	; 0x2a54
   147b0:	e3400003 	movt	r0, #3
   147b4:	e30021d7 	movw	r2, #471	; 0x1d7
   147b8:	eb0041ed 	bl	24f74 <assertion_failed>
   147bc:	e3021a18 	movw	r1, #10776	; 0x2a18
   147c0:	e3401003 	movt	r1, #3
   147c4:	e3020a84 	movw	r0, #10884	; 0x2a84
   147c8:	e3400003 	movt	r0, #3
   147cc:	e3a02f76 	mov	r2, #472	; 0x1d8
   147d0:	eb0041e7 	bl	24f74 <assertion_failed>
   147d4:	00032a10 	.word	0x00032a10

000147d8 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   147d8:	e2400010 	sub	r0, r0, #16
   147dc:	eaffffa1 	b	14668 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

000147e0 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   147e0:	e3520d19 	cmp	r2, #1600	; 0x640
   147e4:	8a00001d 	bhi	14860 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x80>
   147e8:	e92d4070 	push	{r4, r5, r6, lr}
   147ec:	e3510000 	cmp	r1, #0
   147f0:	e1a05000 	mov	r5, r0
   147f4:	e24dde65 	sub	sp, sp, #1616	; 0x650
   147f8:	e24dd008 	sub	sp, sp, #8
   147fc:	0a000019 	beq	14868 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x88>
   14800:	e28d0018 	add	r0, sp, #24
   14804:	e1a04002 	mov	r4, r2
   14808:	e2403008 	sub	r3, r0, #8
   1480c:	e58d300c 	str	r3, [sp, #12]
   14810:	eb005cac 	bl	2bac8 <memcpy>
   14814:	e5952018 	ldr	r2, [r5, #24]
   14818:	e3a06000 	mov	r6, #0
   1481c:	e3843501 	orr	r3, r4, #4194304	; 0x400000
   14820:	e58d6014 	str	r6, [sp, #20]
   14824:	e1520006 	cmp	r2, r6
   14828:	e58d3010 	str	r3, [sp, #16]
   1482c:	0a000013 	beq	14880 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa0>
   14830:	e1a00005 	mov	r0, r5
   14834:	ebffe827 	bl	e8d8 <CUSBFunction::GetHost() const>
   14838:	e5951018 	ldr	r1, [r5, #24]
   1483c:	e2843008 	add	r3, r4, #8
   14840:	e58d6000 	str	r6, [sp]
   14844:	e59d200c 	ldr	r2, [sp, #12]
   14848:	ebfff407 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1484c:	e1e00000 	mvn	r0, r0
   14850:	e1a00fa0 	lsr	r0, r0, #31
   14854:	e28dde65 	add	sp, sp, #1616	; 0x650
   14858:	e28dd008 	add	sp, sp, #8
   1485c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14860:	e3a00000 	mov	r0, #0
   14864:	e12fff1e 	bx	lr
   14868:	e3021a18 	movw	r1, #10776	; 0x2a18
   1486c:	e3401003 	movt	r1, #3
   14870:	e3020270 	movw	r0, #8816	; 0x2270
   14874:	e3400003 	movt	r0, #3
   14878:	e30021b2 	movw	r2, #434	; 0x1b2
   1487c:	eb0041bc 	bl	24f74 <assertion_failed>
   14880:	e3021a18 	movw	r1, #10776	; 0x2a18
   14884:	e3401003 	movt	r1, #3
   14888:	e3020aac 	movw	r0, #10924	; 0x2aac
   1488c:	e3400003 	movt	r0, #3
   14890:	e30021b9 	movw	r2, #441	; 0x1b9
   14894:	eb0041b6 	bl	24f74 <assertion_failed>

00014898 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   14898:	e2400010 	sub	r0, r0, #16
   1489c:	eaffffcf 	b	147e0 <CLAN7800Device::SendFrame(void const*, unsigned int)>

000148a0 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   148a0:	e280000c 	add	r0, r0, #12
   148a4:	e12fff1e 	bx	lr

000148a8 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   148a8:	e92d4010 	push	{r4, lr}
   148ac:	e1a04000 	mov	r4, r0
   148b0:	ebffe791 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   148b4:	e30239a4 	movw	r3, #10660	; 0x29a4
   148b8:	e3403003 	movt	r3, #3
   148bc:	e2832008 	add	r2, r3, #8
   148c0:	e284001c 	add	r0, r4, #28
   148c4:	e2833048 	add	r3, r3, #72	; 0x48
   148c8:	e5842000 	str	r2, [r4]
   148cc:	e5843010 	str	r3, [r4, #16]
   148d0:	e3a02000 	mov	r2, #0
   148d4:	e5842014 	str	r2, [r4, #20]
   148d8:	e5842018 	str	r2, [r4, #24]
   148dc:	eb005cbe 	bl	2bbdc <CMACAddress::CMACAddress()>
   148e0:	e1a00004 	mov	r0, r4
   148e4:	e8bd8010 	pop	{r4, pc}

000148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   148e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   148ec:	e1a08000 	mov	r8, r0
   148f0:	e1a06001 	mov	r6, r1
   148f4:	e24dd018 	sub	sp, sp, #24
   148f8:	e3a04000 	mov	r4, #0
   148fc:	e28d5018 	add	r5, sp, #24
   14900:	e5252004 	str	r2, [r5, #-4]!
   14904:	ebffe7f3 	bl	e8d8 <CUSBFunction::GetHost() const>
   14908:	e1a07000 	mov	r7, r0
   1490c:	e1a00008 	mov	r0, r8
   14910:	ebffe7e5 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   14914:	e6ff3076 	uxth	r3, r6
   14918:	e1a01000 	mov	r1, r0
   1491c:	e58d3004 	str	r3, [sp, #4]
   14920:	e58d5008 	str	r5, [sp, #8]
   14924:	e3a03004 	mov	r3, #4
   14928:	e1a00007 	mov	r0, r7
   1492c:	e58d300c 	str	r3, [sp, #12]
   14930:	e58d4000 	str	r4, [sp]
   14934:	e3a030a0 	mov	r3, #160	; 0xa0
   14938:	e3a02040 	mov	r2, #64	; 0x40
   1493c:	ebfff36a 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14940:	e1500004 	cmp	r0, r4
   14944:	a3a00001 	movge	r0, #1
   14948:	ba000001 	blt	14954 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   1494c:	e28dd018 	add	sp, sp, #24
   14950:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14954:	eb00472b 	bl	26608 <CLogger::Get()>
   14958:	e58d6000 	str	r6, [sp]
   1495c:	e3a02002 	mov	r2, #2
   14960:	e59f1014 	ldr	r1, [pc, #20]	; 1497c <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   14964:	e3023ac4 	movw	r3, #10948	; 0x2ac4
   14968:	e3403003 	movt	r3, #3
   1496c:	eb004666 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14970:	e1a00004 	mov	r0, r4
   14974:	e28dd018 	add	sp, sp, #24
   14978:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1497c:	00032a10 	.word	0x00032a10

00014980 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   14980:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14984:	e1a04000 	mov	r4, r0
   14988:	e1a05001 	mov	r5, r1
   1498c:	e24dd014 	sub	sp, sp, #20
   14990:	e1a07002 	mov	r7, r2
   14994:	ebffe7cf 	bl	e8d8 <CUSBFunction::GetHost() const>
   14998:	e1a06000 	mov	r6, r0
   1499c:	e1a00004 	mov	r0, r4
   149a0:	e3a04000 	mov	r4, #0
   149a4:	ebffe7c0 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   149a8:	e6ff3075 	uxth	r3, r5
   149ac:	e1a01000 	mov	r1, r0
   149b0:	e58d3004 	str	r3, [sp, #4]
   149b4:	e3a02004 	mov	r2, #4
   149b8:	e58d7008 	str	r7, [sp, #8]
   149bc:	e58d200c 	str	r2, [sp, #12]
   149c0:	e1a00006 	mov	r0, r6
   149c4:	e58d4000 	str	r4, [sp]
   149c8:	e3a030a1 	mov	r3, #161	; 0xa1
   149cc:	e3a020c0 	mov	r2, #192	; 0xc0
   149d0:	ebfff345 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   149d4:	e3500004 	cmp	r0, #4
   149d8:	03a00001 	moveq	r0, #1
   149dc:	0a000007 	beq	14a00 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x80>
   149e0:	eb004708 	bl	26608 <CLogger::Get()>
   149e4:	e58d5000 	str	r5, [sp]
   149e8:	e3023ae0 	movw	r3, #10976	; 0x2ae0
   149ec:	e3403003 	movt	r3, #3
   149f0:	e3a02002 	mov	r2, #2
   149f4:	e59f100c 	ldr	r1, [pc, #12]	; 14a08 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   149f8:	eb004643 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   149fc:	e1a00004 	mov	r0, r4
   14a00:	e28dd014 	add	sp, sp, #20
   14a04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14a08:	00032a10 	.word	0x00032a10

00014a0c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   14a0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a10:	e1a08000 	mov	r8, r0
   14a14:	e1a09001 	mov	r9, r1
   14a18:	e24dd00c 	sub	sp, sp, #12
   14a1c:	e1a0a002 	mov	sl, r2
   14a20:	e1a0b003 	mov	fp, r3
   14a24:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   14a28:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
   14a2c:	eb005a71 	bl	2b3f8 <CTimer::Get()>
   14a30:	e2505000 	subs	r5, r0, #0
   14a34:	0a000019 	beq	14aa0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   14a38:	eb0057a3 	bl	2a8cc <CTimer::GetTicks() const>
   14a3c:	e1a07000 	mov	r7, r0
   14a40:	ea00000e 	b	14a80 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   14a44:	e1a00005 	mov	r0, r5
   14a48:	eb00579f 	bl	2a8cc <CTimer::GetTicks() const>
   14a4c:	e0400007 	sub	r0, r0, r7
   14a50:	e1500006 	cmp	r0, r6
   14a54:	2a00000e 	bcs	14a94 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   14a58:	e28d2004 	add	r2, sp, #4
   14a5c:	e1a01009 	mov	r1, r9
   14a60:	e1a00008 	mov	r0, r8
   14a64:	ebffffc5 	bl	14980 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   14a68:	e3500000 	cmp	r0, #0
   14a6c:	0a000008 	beq	14a94 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   14a70:	e59d3004 	ldr	r3, [sp, #4]
   14a74:	e003300a 	and	r3, r3, sl
   14a78:	e153000b 	cmp	r3, fp
   14a7c:	0a000005 	beq	14a98 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   14a80:	e3540000 	cmp	r4, #0
   14a84:	0affffee 	beq	14a44 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   14a88:	e1a00004 	mov	r0, r4
   14a8c:	eb005a23 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
   14a90:	eaffffeb 	b	14a44 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   14a94:	e3a00000 	mov	r0, #0
   14a98:	e28dd00c 	add	sp, sp, #12
   14a9c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aa0:	e3021a18 	movw	r1, #10776	; 0x2a18
   14aa4:	e3401003 	movt	r1, #3
   14aa8:	e3020afc 	movw	r0, #11004	; 0x2afc
   14aac:	e3400003 	movt	r0, #3
   14ab0:	e300228e 	movw	r2, #654	; 0x28e
   14ab4:	eb00412e 	bl	24f74 <assertion_failed>

00014ab8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   14ab8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14abc:	e351001f 	cmp	r1, #31
   14ac0:	e24dd008 	sub	sp, sp, #8
   14ac4:	8a000024 	bhi	14b5c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa4>
   14ac8:	e3a04000 	mov	r4, #0
   14acc:	e1a05001 	mov	r5, r1
   14ad0:	e1a08002 	mov	r8, r2
   14ad4:	e3a06064 	mov	r6, #100	; 0x64
   14ad8:	e58d4000 	str	r4, [sp]
   14adc:	e1a03004 	mov	r3, r4
   14ae0:	e58d6004 	str	r6, [sp, #4]
   14ae4:	e3a02001 	mov	r2, #1
   14ae8:	e3a01e12 	mov	r1, #288	; 0x120
   14aec:	e1a07000 	mov	r7, r0
   14af0:	ebffffc5 	bl	14a0c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   14af4:	e1500004 	cmp	r0, r4
   14af8:	1a000002 	bne	14b08 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x50>
   14afc:	e3a00000 	mov	r0, #0
   14b00:	e28dd008 	add	sp, sp, #8
   14b04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14b08:	e1a02008 	mov	r2, r8
   14b0c:	e3a01f49 	mov	r1, #292	; 0x124
   14b10:	e1a00007 	mov	r0, r7
   14b14:	ebffff73 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14b18:	e3500000 	cmp	r0, #0
   14b1c:	0afffff6 	beq	14afc <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   14b20:	e3002803 	movw	r2, #2051	; 0x803
   14b24:	e3a01e12 	mov	r1, #288	; 0x120
   14b28:	e1822305 	orr	r2, r2, r5, lsl #6
   14b2c:	e1a00007 	mov	r0, r7
   14b30:	ebffff6c 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14b34:	e3500000 	cmp	r0, #0
   14b38:	0affffef 	beq	14afc <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   14b3c:	e58d6004 	str	r6, [sp, #4]
   14b40:	e1a03004 	mov	r3, r4
   14b44:	e58d4000 	str	r4, [sp]
   14b48:	e1a00007 	mov	r0, r7
   14b4c:	e3a02001 	mov	r2, #1
   14b50:	e3a01e12 	mov	r1, #288	; 0x120
   14b54:	ebffffac 	bl	14a0c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   14b58:	eaffffe8 	b	14b00 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x48>
   14b5c:	e3021a18 	movw	r1, #10776	; 0x2a18
   14b60:	e3401003 	movt	r1, #3
   14b64:	e3020b08 	movw	r0, #11016	; 0x2b08
   14b68:	e3400003 	movt	r0, #3
   14b6c:	e3002259 	movw	r2, #601	; 0x259
   14b70:	eb0040ff 	bl	24f74 <assertion_failed>

00014b74 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   14b74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14b78:	e351001f 	cmp	r1, #31
   14b7c:	e24dd010 	sub	sp, sp, #16
   14b80:	8a00002f 	bhi	14c44 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd0>
   14b84:	e3a04000 	mov	r4, #0
   14b88:	e1a05001 	mov	r5, r1
   14b8c:	e1a08002 	mov	r8, r2
   14b90:	e3a06064 	mov	r6, #100	; 0x64
   14b94:	e58d4000 	str	r4, [sp]
   14b98:	e1a03004 	mov	r3, r4
   14b9c:	e58d6004 	str	r6, [sp, #4]
   14ba0:	e3a02001 	mov	r2, #1
   14ba4:	e3a01e12 	mov	r1, #288	; 0x120
   14ba8:	e1a07000 	mov	r7, r0
   14bac:	ebffff96 	bl	14a0c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   14bb0:	e1500004 	cmp	r0, r4
   14bb4:	1a000002 	bne	14bc4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x50>
   14bb8:	e3a00000 	mov	r0, #0
   14bbc:	e28dd010 	add	sp, sp, #16
   14bc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14bc4:	e3002801 	movw	r2, #2049	; 0x801
   14bc8:	e3a01e12 	mov	r1, #288	; 0x120
   14bcc:	e1822305 	orr	r2, r2, r5, lsl #6
   14bd0:	e1a00007 	mov	r0, r7
   14bd4:	ebffff43 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14bd8:	e3500000 	cmp	r0, #0
   14bdc:	0afffff5 	beq	14bb8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   14be0:	e58d6004 	str	r6, [sp, #4]
   14be4:	e1a03004 	mov	r3, r4
   14be8:	e58d4000 	str	r4, [sp]
   14bec:	e3a02001 	mov	r2, #1
   14bf0:	e3a01e12 	mov	r1, #288	; 0x120
   14bf4:	e1a00007 	mov	r0, r7
   14bf8:	ebffff83 	bl	14a0c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   14bfc:	e3500000 	cmp	r0, #0
   14c00:	0affffec 	beq	14bb8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   14c04:	e1a00007 	mov	r0, r7
   14c08:	e28d200c 	add	r2, sp, #12
   14c0c:	e3a01f49 	mov	r1, #292	; 0x124
   14c10:	ebffff5a 	bl	14980 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   14c14:	e3500000 	cmp	r0, #0
   14c18:	0affffe6 	beq	14bb8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   14c1c:	e3580000 	cmp	r8, #0
   14c20:	159d300c 	ldrne	r3, [sp, #12]
   14c24:	11c830b0 	strhne	r3, [r8]
   14c28:	1affffe3 	bne	14bbc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   14c2c:	e3021a18 	movw	r1, #10776	; 0x2a18
   14c30:	e3401003 	movt	r1, #3
   14c34:	e3020b18 	movw	r0, #11032	; 0x2b18
   14c38:	e3400003 	movt	r0, #3
   14c3c:	e3a02fa1 	mov	r2, #644	; 0x284
   14c40:	eb0040cb 	bl	24f74 <assertion_failed>
   14c44:	e3021a18 	movw	r1, #10776	; 0x2a18
   14c48:	e3401003 	movt	r1, #3
   14c4c:	e3020b08 	movw	r0, #11016	; 0x2b08
   14c50:	e3400003 	movt	r0, #3
   14c54:	e3a02e27 	mov	r2, #624	; 0x270
   14c58:	eb0040c5 	bl	24f74 <assertion_failed>

00014c5c <CLAN7800Device::IsLinkUp()>:
   14c5c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   14c60:	e3a01001 	mov	r1, #1
   14c64:	e24dd00c 	sub	sp, sp, #12
   14c68:	e28d2006 	add	r2, sp, #6
   14c6c:	ebffffc0 	bl	14b74 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   14c70:	e3500000 	cmp	r0, #0
   14c74:	11dd00b6 	ldrhne	r0, [sp, #6]
   14c78:	17e00150 	ubfxne	r0, r0, #2, #1
   14c7c:	e28dd00c 	add	sp, sp, #12
   14c80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00014c84 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   14c84:	e2400010 	sub	r0, r0, #16
   14c88:	eafffff3 	b	14c5c <CLAN7800Device::IsLinkUp()>

00014c8c <CLAN7800Device::GetLinkSpeed()>:
   14c8c:	e92d4010 	push	{r4, lr}
   14c90:	e3a02000 	mov	r2, #0
   14c94:	e3a0101f 	mov	r1, #31
   14c98:	e24dd008 	sub	sp, sp, #8
   14c9c:	e1a04000 	mov	r4, r0
   14ca0:	ebffff84 	bl	14ab8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   14ca4:	e3500000 	cmp	r0, #0
   14ca8:	0a000015 	beq	14d04 <CLAN7800Device::GetLinkSpeed()+0x78>
   14cac:	e1a00004 	mov	r0, r4
   14cb0:	e28d2006 	add	r2, sp, #6
   14cb4:	e3a0101c 	mov	r1, #28
   14cb8:	ebffffad 	bl	14b74 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   14cbc:	e3500000 	cmp	r0, #0
   14cc0:	0a00000f 	beq	14d04 <CLAN7800Device::GetLinkSpeed()+0x78>
   14cc4:	e1dd30b6 	ldrh	r3, [sp, #6]
   14cc8:	e3130901 	tst	r3, #16384	; 0x4000
   14ccc:	1a00001b 	bne	14d40 <CLAN7800Device::GetLinkSpeed()+0xb4>
   14cd0:	e3130902 	tst	r3, #32768	; 0x8000
   14cd4:	0a00000a 	beq	14d04 <CLAN7800Device::GetLinkSpeed()+0x78>
   14cd8:	e7e231d3 	ubfx	r3, r3, #3, #3
   14cdc:	e3530006 	cmp	r3, #6
   14ce0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   14ce4:	ea000006 	b	14d04 <CLAN7800Device::GetLinkSpeed()+0x78>
   14ce8:	00014d10 	.word	0x00014d10
   14cec:	00014d38 	.word	0x00014d38
   14cf0:	00014d30 	.word	0x00014d30
   14cf4:	00014d04 	.word	0x00014d04
   14cf8:	00014d28 	.word	0x00014d28
   14cfc:	00014d20 	.word	0x00014d20
   14d00:	00014d18 	.word	0x00014d18
   14d04:	e3a00006 	mov	r0, #6
   14d08:	e28dd008 	add	sp, sp, #8
   14d0c:	e8bd8010 	pop	{r4, pc}
   14d10:	e3a00000 	mov	r0, #0
   14d14:	eafffffb 	b	14d08 <CLAN7800Device::GetLinkSpeed()+0x7c>
   14d18:	e3a00005 	mov	r0, #5
   14d1c:	eafffff9 	b	14d08 <CLAN7800Device::GetLinkSpeed()+0x7c>
   14d20:	e3a00003 	mov	r0, #3
   14d24:	eafffff7 	b	14d08 <CLAN7800Device::GetLinkSpeed()+0x7c>
   14d28:	e3a00001 	mov	r0, #1
   14d2c:	eafffff5 	b	14d08 <CLAN7800Device::GetLinkSpeed()+0x7c>
   14d30:	e3a00004 	mov	r0, #4
   14d34:	eafffff3 	b	14d08 <CLAN7800Device::GetLinkSpeed()+0x7c>
   14d38:	e3a00002 	mov	r0, #2
   14d3c:	eafffff1 	b	14d08 <CLAN7800Device::GetLinkSpeed()+0x7c>
   14d40:	e3021a18 	movw	r1, #10776	; 0x2a18
   14d44:	e3401003 	movt	r1, #3
   14d48:	e3020b24 	movw	r0, #11044	; 0x2b24
   14d4c:	e3400003 	movt	r0, #3
   14d50:	e3002203 	movw	r2, #515	; 0x203
   14d54:	eb004086 	bl	24f74 <assertion_failed>

00014d58 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   14d58:	e2400010 	sub	r0, r0, #16
   14d5c:	eaffffca 	b	14c8c <CLAN7800Device::GetLinkSpeed()>

00014d60 <CLAN7800Device::InitPHY()>:
   14d60:	e92d4010 	push	{r4, lr}
   14d64:	e3a02000 	mov	r2, #0
   14d68:	e3a0101f 	mov	r1, #31
   14d6c:	e24dd008 	sub	sp, sp, #8
   14d70:	e1a04000 	mov	r4, r0
   14d74:	ebffff4f 	bl	14ab8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   14d78:	e3500000 	cmp	r0, #0
   14d7c:	1a000001 	bne	14d88 <CLAN7800Device::InitPHY()+0x28>
   14d80:	e28dd008 	add	sp, sp, #8
   14d84:	e8bd8010 	pop	{r4, pc}
   14d88:	e28d2006 	add	r2, sp, #6
   14d8c:	e3a0101d 	mov	r1, #29
   14d90:	e1a00004 	mov	r0, r4
   14d94:	ebffff76 	bl	14b74 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   14d98:	e3500000 	cmp	r0, #0
   14d9c:	0afffff7 	beq	14d80 <CLAN7800Device::InitPHY()+0x20>
   14da0:	e1dd20b6 	ldrh	r2, [sp, #6]
   14da4:	e1a00004 	mov	r0, r4
   14da8:	e3a0101d 	mov	r1, #29
   14dac:	e3c220ff 	bic	r2, r2, #255	; 0xff
   14db0:	e3822061 	orr	r2, r2, #97	; 0x61
   14db4:	e1cd20b6 	strh	r2, [sp, #6]
   14db8:	ebffff3e 	bl	14ab8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   14dbc:	e28dd008 	add	sp, sp, #8
   14dc0:	e8bd8010 	pop	{r4, pc}

00014dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   14dc4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14dc8:	e1a05002 	mov	r5, r2
   14dcc:	e1a04003 	mov	r4, r3
   14dd0:	e24dd00c 	sub	sp, sp, #12
   14dd4:	e1a06000 	mov	r6, r0
   14dd8:	e28d2004 	add	r2, sp, #4
   14ddc:	e1a07001 	mov	r7, r1
   14de0:	ebfffee6 	bl	14980 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   14de4:	e3500000 	cmp	r0, #0
   14de8:	0a000006 	beq	14e08 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x44>
   14dec:	e59d2004 	ldr	r2, [sp, #4]
   14df0:	e1a01007 	mov	r1, r7
   14df4:	e1a00006 	mov	r0, r6
   14df8:	e0022004 	and	r2, r2, r4
   14dfc:	e1822005 	orr	r2, r2, r5
   14e00:	e58d2004 	str	r2, [sp, #4]
   14e04:	ebfffeb7 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14e08:	e28dd00c 	add	sp, sp, #12
   14e0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00014e10 <CLAN7800Device::InitMACAddress()>:
   14e10:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14e14:	e3a01000 	mov	r1, #0
   14e18:	e1a04000 	mov	r4, r0
   14e1c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   14e20:	e28d000c 	add	r0, sp, #12
   14e24:	eb004073 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   14e28:	e3a03000 	mov	r3, #0
   14e2c:	e28d000c 	add	r0, sp, #12
   14e30:	e58d3000 	str	r3, [sp]
   14e34:	e3a01003 	mov	r1, #3
   14e38:	e3401001 	movt	r1, #1
   14e3c:	e3a03014 	mov	r3, #20
   14e40:	e28d2024 	add	r2, sp, #36	; 0x24
   14e44:	eb0040b4 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   14e48:	e3500000 	cmp	r0, #0
   14e4c:	1a000005 	bne	14e68 <CLAN7800Device::InitMACAddress()+0x58>
   14e50:	e3a04000 	mov	r4, #0
   14e54:	e28d000c 	add	r0, sp, #12
   14e58:	eb00406d 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   14e5c:	e1a00004 	mov	r0, r4
   14e60:	e28dd03c 	add	sp, sp, #60	; 0x3c
   14e64:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14e68:	e284601c 	add	r6, r4, #28
   14e6c:	e28d1030 	add	r1, sp, #48	; 0x30
   14e70:	e1a00006 	mov	r0, r6
   14e74:	eb005b7b 	bl	2bc68 <CMACAddress::Set(unsigned char const*)>
   14e78:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   14e7c:	e3a01f47 	mov	r1, #284	; 0x11c
   14e80:	e1a00004 	mov	r0, r4
   14e84:	e1a02005 	mov	r2, r5
   14e88:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   14e8c:	ebfffe95 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14e90:	e3500000 	cmp	r0, #0
   14e94:	0affffed 	beq	14e50 <CLAN7800Device::InitMACAddress()+0x40>
   14e98:	e1a02007 	mov	r2, r7
   14e9c:	e3a01f46 	mov	r1, #280	; 0x118
   14ea0:	e1a00004 	mov	r0, r4
   14ea4:	ebfffe8f 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14ea8:	e3500000 	cmp	r0, #0
   14eac:	0affffe7 	beq	14e50 <CLAN7800Device::InitMACAddress()+0x40>
   14eb0:	e1a02005 	mov	r2, r5
   14eb4:	e3001404 	movw	r1, #1028	; 0x404
   14eb8:	e1a00004 	mov	r0, r4
   14ebc:	ebfffe89 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14ec0:	e3500000 	cmp	r0, #0
   14ec4:	0affffe1 	beq	14e50 <CLAN7800Device::InitMACAddress()+0x40>
   14ec8:	e1a00004 	mov	r0, r4
   14ecc:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   14ed0:	e3a01b01 	mov	r1, #1024	; 0x400
   14ed4:	ebfffe83 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14ed8:	e2504000 	subs	r4, r0, #0
   14edc:	0affffdb 	beq	14e50 <CLAN7800Device::InitMACAddress()+0x40>
   14ee0:	e28d0014 	add	r0, sp, #20
   14ee4:	eb0051c0 	bl	295ec <CString::CString()>
   14ee8:	e28d1014 	add	r1, sp, #20
   14eec:	e1a00006 	mov	r0, r6
   14ef0:	eb005bb6 	bl	2bdd0 <CMACAddress::Format(CString*) const>
   14ef4:	eb0045c3 	bl	26608 <CLogger::Get()>
   14ef8:	e1a05000 	mov	r5, r0
   14efc:	e28d0014 	add	r0, sp, #20
   14f00:	eb0051d0 	bl	29648 <CString::operator char const*() const>
   14f04:	e3a02004 	mov	r2, #4
   14f08:	e58d0000 	str	r0, [sp]
   14f0c:	e3023b4c 	movw	r3, #11084	; 0x2b4c
   14f10:	e3403003 	movt	r3, #3
   14f14:	e1a00005 	mov	r0, r5
   14f18:	e59f100c 	ldr	r1, [pc, #12]	; 14f2c <CLAN7800Device::InitMACAddress()+0x11c>
   14f1c:	eb0044fa 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f20:	e28d0014 	add	r0, sp, #20
   14f24:	eb00517d 	bl	29520 <CString::~CString()>
   14f28:	eaffffc9 	b	14e54 <CLAN7800Device::InitMACAddress()+0x44>
   14f2c:	00032a10 	.word	0x00032a10

00014f30 <CLAN7800Device::Configure()>:
   14f30:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14f34:	e1a05000 	mov	r5, r0
   14f38:	e24dd014 	sub	sp, sp, #20
   14f3c:	ebffe644 	bl	e854 <CUSBFunction::GetNumEndpoints() const>
   14f40:	e3500003 	cmp	r0, #3
   14f44:	0a000004 	beq	14f5c <CLAN7800Device::Configure()+0x2c>
   14f48:	ea000027 	b	14fec <CLAN7800Device::Configure()+0xbc>
   14f4c:	e5d43003 	ldrb	r3, [r4, #3]
   14f50:	e203303f 	and	r3, r3, #63	; 0x3f
   14f54:	e3530002 	cmp	r3, #2
   14f58:	0a00002a 	beq	15008 <CLAN7800Device::Configure()+0xd8>
   14f5c:	e3a01005 	mov	r1, #5
   14f60:	e1a00005 	mov	r0, r5
   14f64:	ebffe666 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   14f68:	e2504000 	subs	r4, r0, #0
   14f6c:	1afffff6 	bne	14f4c <CLAN7800Device::Configure()+0x1c>
   14f70:	e5953014 	ldr	r3, [r5, #20]
   14f74:	e1a00005 	mov	r0, r5
   14f78:	e3530000 	cmp	r3, #0
   14f7c:	0a00001b 	beq	14ff0 <CLAN7800Device::Configure()+0xc0>
   14f80:	e5953018 	ldr	r3, [r5, #24]
   14f84:	e3530000 	cmp	r3, #0
   14f88:	0a000018 	beq	14ff0 <CLAN7800Device::Configure()+0xc0>
   14f8c:	ebffe56c 	bl	e544 <CUSBFunction::Configure()>
   14f90:	e2506000 	subs	r6, r0, #0
   14f94:	0a00002c 	beq	1504c <CLAN7800Device::Configure()+0x11c>
   14f98:	e28d200c 	add	r2, sp, #12
   14f9c:	e1a01004 	mov	r1, r4
   14fa0:	e1a00005 	mov	r0, r5
   14fa4:	ebfffe75 	bl	14980 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   14fa8:	e3500000 	cmp	r0, #0
   14fac:	0a000002 	beq	14fbc <CLAN7800Device::Configure()+0x8c>
   14fb0:	e1dd30be 	ldrh	r3, [sp, #14]
   14fb4:	e3530b1e 	cmp	r3, #30720	; 0x7800
   14fb8:	0a000039 	beq	150a4 <CLAN7800Device::Configure()+0x174>
   14fbc:	eb004591 	bl	26608 <CLogger::Get()>
   14fc0:	e1dd30be 	ldrh	r3, [sp, #14]
   14fc4:	e58d3000 	str	r3, [sp]
   14fc8:	e3a02001 	mov	r2, #1
   14fcc:	e59f13a4 	ldr	r1, [pc, #932]	; 15378 <CLAN7800Device::Configure()+0x448>
   14fd0:	e3a06000 	mov	r6, #0
   14fd4:	e3023b60 	movw	r3, #11104	; 0x2b60
   14fd8:	e3403003 	movt	r3, #3
   14fdc:	eb0044ca 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fe0:	e1a00006 	mov	r0, r6
   14fe4:	e28dd014 	add	sp, sp, #20
   14fe8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14fec:	e1a00005 	mov	r0, r5
   14ff0:	e59f1380 	ldr	r1, [pc, #896]	; 15378 <CLAN7800Device::Configure()+0x448>
   14ff4:	ebffe64d 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   14ff8:	e3a06000 	mov	r6, #0
   14ffc:	e1a00006 	mov	r0, r6
   15000:	e28dd014 	add	sp, sp, #20
   15004:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15008:	e1d430d2 	ldrsb	r3, [r4, #2]
   1500c:	e1a00005 	mov	r0, r5
   15010:	e3530000 	cmp	r3, #0
   15014:	ba000015 	blt	15070 <CLAN7800Device::Configure()+0x140>
   15018:	e5953018 	ldr	r3, [r5, #24]
   1501c:	e3530000 	cmp	r3, #0
   15020:	1afffff1 	bne	14fec <CLAN7800Device::Configure()+0xbc>
   15024:	ebffe616 	bl	e884 <CUSBFunction::GetDevice() const>
   15028:	e1a07000 	mov	r7, r0
   1502c:	e3a00014 	mov	r0, #20
   15030:	eb005bae 	bl	2bef0 <operator new(unsigned int)>
   15034:	e1a02004 	mov	r2, r4
   15038:	e1a01007 	mov	r1, r7
   1503c:	e1a06000 	mov	r6, r0
   15040:	ebffe445 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15044:	e5856018 	str	r6, [r5, #24]
   15048:	eaffffc3 	b	14f5c <CLAN7800Device::Configure()+0x2c>
   1504c:	eb00456d 	bl	26608 <CLogger::Get()>
   15050:	e3a02001 	mov	r2, #1
   15054:	e59f131c 	ldr	r1, [pc, #796]	; 15378 <CLAN7800Device::Configure()+0x448>
   15058:	e3013948 	movw	r3, #6472	; 0x1948
   1505c:	e3403003 	movt	r3, #3
   15060:	eb0044a9 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15064:	e1a00006 	mov	r0, r6
   15068:	e28dd014 	add	sp, sp, #20
   1506c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15070:	e5953014 	ldr	r3, [r5, #20]
   15074:	e3530000 	cmp	r3, #0
   15078:	1affffdc 	bne	14ff0 <CLAN7800Device::Configure()+0xc0>
   1507c:	ebffe600 	bl	e884 <CUSBFunction::GetDevice() const>
   15080:	e1a07000 	mov	r7, r0
   15084:	e3a00014 	mov	r0, #20
   15088:	eb005b98 	bl	2bef0 <operator new(unsigned int)>
   1508c:	e1a02004 	mov	r2, r4
   15090:	e1a01007 	mov	r1, r7
   15094:	e1a06000 	mov	r6, r0
   15098:	ebffe42f 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1509c:	e5856014 	str	r6, [r5, #20]
   150a0:	eaffffad 	b	14f5c <CLAN7800Device::Configure()+0x2c>
   150a4:	e3e03000 	mvn	r3, #0
   150a8:	e3a02002 	mov	r2, #2
   150ac:	e3a01010 	mov	r1, #16
   150b0:	e1a00005 	mov	r0, r5
   150b4:	ebffff42 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   150b8:	e3500000 	cmp	r0, #0
   150bc:	0a000009 	beq	150e8 <CLAN7800Device::Configure()+0x1b8>
   150c0:	e1a03004 	mov	r3, r4
   150c4:	e3a06ffa 	mov	r6, #1000	; 0x3e8
   150c8:	e3a07064 	mov	r7, #100	; 0x64
   150cc:	e3a02002 	mov	r2, #2
   150d0:	e1cd60f0 	strd	r6, [sp]
   150d4:	e3a01010 	mov	r1, #16
   150d8:	e1a00005 	mov	r0, r5
   150dc:	ebfffe4a 	bl	14a0c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   150e0:	e3500000 	cmp	r0, #0
   150e4:	1a000007 	bne	15108 <CLAN7800Device::Configure()+0x1d8>
   150e8:	eb004546 	bl	26608 <CLogger::Get()>
   150ec:	e3023b78 	movw	r3, #11128	; 0x2b78
   150f0:	e3403003 	movt	r3, #3
   150f4:	e3a02001 	mov	r2, #1
   150f8:	e59f1278 	ldr	r1, [pc, #632]	; 15378 <CLAN7800Device::Configure()+0x448>
   150fc:	eb004482 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15100:	e3a06000 	mov	r6, #0
   15104:	eaffffbc 	b	14ffc <CLAN7800Device::Configure()+0xcc>
   15108:	e1a00005 	mov	r0, r5
   1510c:	ebffff3f 	bl	14e10 <CLAN7800Device::InitMACAddress()>
   15110:	e2506000 	subs	r6, r0, #0
   15114:	0a00005d 	beq	15290 <CLAN7800Device::Configure()+0x360>
   15118:	e3a02018 	mov	r2, #24
   1511c:	e3a01090 	mov	r1, #144	; 0x90
   15120:	e1a00005 	mov	r0, r5
   15124:	ebfffdef 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15128:	e3500000 	cmp	r0, #0
   1512c:	0affffb1 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15130:	e3a02b02 	mov	r2, #2048	; 0x800
   15134:	e3a01094 	mov	r1, #148	; 0x94
   15138:	e1a00005 	mov	r0, r5
   1513c:	ebfffde9 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15140:	e3500000 	cmp	r0, #0
   15144:	0affffab 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15148:	e3e03010 	mvn	r3, #16
   1514c:	e3a02603 	mov	r2, #3145728	; 0x300000
   15150:	e3a01010 	mov	r1, #16
   15154:	e1a00005 	mov	r0, r5
   15158:	ebffff19 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1515c:	e3500000 	cmp	r0, #0
   15160:	0affffa4 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15164:	e3e03040 	mvn	r3, #64	; 0x40
   15168:	e3a02020 	mov	r2, #32
   1516c:	e3a01080 	mov	r1, #128	; 0x80
   15170:	e1a00005 	mov	r0, r5
   15174:	ebffff12 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15178:	e3500000 	cmp	r0, #0
   1517c:	0affff9d 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15180:	e3a02017 	mov	r2, #23
   15184:	e3a010c8 	mov	r1, #200	; 0xc8
   15188:	e1a00005 	mov	r0, r5
   1518c:	ebfffdd5 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15190:	e3500000 	cmp	r0, #0
   15194:	0affff97 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15198:	e3a02017 	mov	r2, #23
   1519c:	e3a010cc 	mov	r1, #204	; 0xcc
   151a0:	e1a00005 	mov	r0, r5
   151a4:	ebfffdcf 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   151a8:	e3500000 	cmp	r0, #0
   151ac:	0affff91 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   151b0:	e3a02000 	mov	r2, #0
   151b4:	e3a01098 	mov	r1, #152	; 0x98
   151b8:	e1a00005 	mov	r0, r5
   151bc:	ebfffdc9 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   151c0:	e3500000 	cmp	r0, #0
   151c4:	0affff8b 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   151c8:	e3e02000 	mvn	r2, #0
   151cc:	e3a0100c 	mov	r1, #12
   151d0:	e1a00005 	mov	r0, r5
   151d4:	ebfffdc3 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   151d8:	e3500000 	cmp	r0, #0
   151dc:	0affff85 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   151e0:	e3a02000 	mov	r2, #0
   151e4:	e3a01f43 	mov	r1, #268	; 0x10c
   151e8:	e1a00005 	mov	r0, r5
   151ec:	ebfffdbd 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   151f0:	e3500000 	cmp	r0, #0
   151f4:	0affff7f 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   151f8:	e3a02000 	mov	r2, #0
   151fc:	e3a010d0 	mov	r1, #208	; 0xd0
   15200:	e1a00005 	mov	r0, r5
   15204:	ebfffdb7 	bl	148e8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15208:	e3500000 	cmp	r0, #0
   1520c:	0affff79 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15210:	e3e03000 	mvn	r3, #0
   15214:	e3002402 	movw	r2, #1026	; 0x402
   15218:	e3a010b0 	mov	r1, #176	; 0xb0
   1521c:	e1a00005 	mov	r0, r5
   15220:	ebfffee7 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15224:	e3500000 	cmp	r0, #0
   15228:	0affff72 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   1522c:	e3e03000 	mvn	r3, #0
   15230:	e3a02010 	mov	r2, #16
   15234:	e3a01014 	mov	r1, #20
   15238:	e1a00005 	mov	r0, r5
   1523c:	ebfffee0 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15240:	e3500000 	cmp	r0, #0
   15244:	0a00000a 	beq	15274 <CLAN7800Device::Configure()+0x344>
   15248:	e3a03064 	mov	r3, #100	; 0x64
   1524c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15250:	e58d3004 	str	r3, [sp, #4]
   15254:	e3a01014 	mov	r1, #20
   15258:	e58d2000 	str	r2, [sp]
   1525c:	e3a03080 	mov	r3, #128	; 0x80
   15260:	e3a02090 	mov	r2, #144	; 0x90
   15264:	e1a00005 	mov	r0, r5
   15268:	ebfffde7 	bl	14a0c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1526c:	e3500000 	cmp	r0, #0
   15270:	1a00000d 	bne	152ac <CLAN7800Device::Configure()+0x37c>
   15274:	eb0044e3 	bl	26608 <CLogger::Get()>
   15278:	e3023ba0 	movw	r3, #11168	; 0x2ba0
   1527c:	e3403003 	movt	r3, #3
   15280:	e3a02001 	mov	r2, #1
   15284:	e59f10ec 	ldr	r1, [pc, #236]	; 15378 <CLAN7800Device::Configure()+0x448>
   15288:	eb00441f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1528c:	eaffff59 	b	14ff8 <CLAN7800Device::Configure()+0xc8>
   15290:	eb0044dc 	bl	26608 <CLogger::Get()>
   15294:	e3023b88 	movw	r3, #11144	; 0x2b88
   15298:	e3403003 	movt	r3, #3
   1529c:	e3a02001 	mov	r2, #1
   152a0:	e59f10d0 	ldr	r1, [pc, #208]	; 15378 <CLAN7800Device::Configure()+0x448>
   152a4:	eb004418 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   152a8:	eaffff53 	b	14ffc <CLAN7800Device::Configure()+0xcc>
   152ac:	e3e03000 	mvn	r3, #0
   152b0:	e3a02b06 	mov	r2, #6144	; 0x1800
   152b4:	e3a01c01 	mov	r1, #256	; 0x100
   152b8:	e1a00005 	mov	r0, r5
   152bc:	ebfffec0 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   152c0:	e3500000 	cmp	r0, #0
   152c4:	0affff4b 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   152c8:	e3e03000 	mvn	r3, #0
   152cc:	e3a02001 	mov	r2, #1
   152d0:	e3a01f42 	mov	r1, #264	; 0x108
   152d4:	e1a00005 	mov	r0, r5
   152d8:	ebfffeb9 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   152dc:	e3500000 	cmp	r0, #0
   152e0:	0affff44 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   152e4:	e3e03000 	mvn	r3, #0
   152e8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   152ec:	e3a010c4 	mov	r1, #196	; 0xc4
   152f0:	e1a00005 	mov	r0, r5
   152f4:	ebfffeb2 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   152f8:	e3500000 	cmp	r0, #0
   152fc:	0affff3d 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15300:	e30f3fff 	movw	r3, #65535	; 0xffff
   15304:	e34c3000 	movt	r3, #49152	; 0xc000
   15308:	e3a02001 	mov	r2, #1
   1530c:	e34025ee 	movt	r2, #1518	; 0x5ee
   15310:	e3a01f41 	mov	r1, #260	; 0x104
   15314:	e1a00005 	mov	r0, r5
   15318:	ebfffea9 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1531c:	e3500000 	cmp	r0, #0
   15320:	0affff34 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15324:	e3e03000 	mvn	r3, #0
   15328:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   1532c:	e3a010c0 	mov	r1, #192	; 0xc0
   15330:	e1a00005 	mov	r0, r5
   15334:	ebfffea2 	bl	14dc4 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15338:	e3500000 	cmp	r0, #0
   1533c:	0affff2d 	beq	14ff8 <CLAN7800Device::Configure()+0xc8>
   15340:	e1a00005 	mov	r0, r5
   15344:	ebfffe85 	bl	14d60 <CLAN7800Device::InitPHY()>
   15348:	e2506000 	subs	r6, r0, #0
   1534c:	0a000002 	beq	1535c <CLAN7800Device::Configure()+0x42c>
   15350:	e2850010 	add	r0, r5, #16
   15354:	eb005ac0 	bl	2be5c <CNetDevice::AddNetDevice()>
   15358:	eaffff27 	b	14ffc <CLAN7800Device::Configure()+0xcc>
   1535c:	eb0044a9 	bl	26608 <CLogger::Get()>
   15360:	e3023bb4 	movw	r3, #11188	; 0x2bb4
   15364:	e3403003 	movt	r3, #3
   15368:	e3a02001 	mov	r2, #1
   1536c:	e59f1004 	ldr	r1, [pc, #4]	; 15378 <CLAN7800Device::Configure()+0x448>
   15370:	eb0043e5 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15374:	eaffff20 	b	14ffc <CLAN7800Device::Configure()+0xcc>
   15378:	00032a10 	.word	0x00032a10

0001537c <CNetDevice::IsSendFrameAdvisable()>:
   1537c:	e3a00001 	mov	r0, #1
   15380:	e12fff1e 	bx	lr

00015384 <CNetDevice::UpdatePHY()>:
   15384:	e3a00000 	mov	r0, #0
   15388:	e12fff1e 	bx	lr

0001538c <CSMSC951xDevice::GetMACAddress() const>:
   1538c:	e280001c 	add	r0, r0, #28
   15390:	e12fff1e 	bx	lr

00015394 <CSMSC951xDevice::~CSMSC951xDevice()>:
   15394:	e92d4070 	push	{r4, r5, r6, lr}
   15398:	e1a04000 	mov	r4, r0
   1539c:	e59f3070 	ldr	r3, [pc, #112]	; 15414 <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   153a0:	e5905018 	ldr	r5, [r0, #24]
   153a4:	e2832040 	add	r2, r3, #64	; 0x40
   153a8:	e5803000 	str	r3, [r0]
   153ac:	e5802010 	str	r2, [r0, #16]
   153b0:	e3550000 	cmp	r5, #0
   153b4:	0a000004 	beq	153cc <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   153b8:	e1a00005 	mov	r0, r5
   153bc:	ebffe3ca 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   153c0:	e1a00005 	mov	r0, r5
   153c4:	e3a01014 	mov	r1, #20
   153c8:	eb005ad6 	bl	2bf28 <operator delete(void*, unsigned int)>
   153cc:	e5945014 	ldr	r5, [r4, #20]
   153d0:	e3a03000 	mov	r3, #0
   153d4:	e5843018 	str	r3, [r4, #24]
   153d8:	e1550003 	cmp	r5, r3
   153dc:	0a000004 	beq	153f4 <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   153e0:	e1a00005 	mov	r0, r5
   153e4:	ebffe3c0 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   153e8:	e1a00005 	mov	r0, r5
   153ec:	e3a01014 	mov	r1, #20
   153f0:	eb005acc 	bl	2bf28 <operator delete(void*, unsigned int)>
   153f4:	e3a03000 	mov	r3, #0
   153f8:	e284001c 	add	r0, r4, #28
   153fc:	e5843014 	str	r3, [r4, #20]
   15400:	eb0059f8 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   15404:	e1a00004 	mov	r0, r4
   15408:	ebffe424 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   1540c:	e1a00004 	mov	r0, r4
   15410:	e8bd8070 	pop	{r4, r5, r6, pc}
   15414:	00032bcc 	.word	0x00032bcc

00015418 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   15418:	e2400010 	sub	r0, r0, #16
   1541c:	eaffffdc 	b	15394 <CSMSC951xDevice::~CSMSC951xDevice()>

00015420 <CSMSC951xDevice::~CSMSC951xDevice()>:
   15420:	e92d4010 	push	{r4, lr}
   15424:	e1a04000 	mov	r4, r0
   15428:	ebffffd9 	bl	15394 <CSMSC951xDevice::~CSMSC951xDevice()>
   1542c:	e1a00004 	mov	r0, r4
   15430:	e3a01024 	mov	r1, #36	; 0x24
   15434:	eb005abb 	bl	2bf28 <operator delete(void*, unsigned int)>
   15438:	e1a00004 	mov	r0, r4
   1543c:	e8bd8010 	pop	{r4, pc}

00015440 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   15440:	e2400010 	sub	r0, r0, #16
   15444:	eafffff5 	b	15420 <CSMSC951xDevice::~CSMSC951xDevice()>

00015448 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   15448:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1544c:	e1a04001 	mov	r4, r1
   15450:	e5901014 	ldr	r1, [r0, #20]
   15454:	e24dd030 	sub	sp, sp, #48	; 0x30
   15458:	e3510000 	cmp	r1, #0
   1545c:	0a00003f 	beq	15560 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x118>
   15460:	e3540000 	cmp	r4, #0
   15464:	0a000043 	beq	15578 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   15468:	e1a05000 	mov	r5, r0
   1546c:	e3a03d19 	mov	r3, #1600	; 0x640
   15470:	e3a06000 	mov	r6, #0
   15474:	e1a07002 	mov	r7, r2
   15478:	e28d0008 	add	r0, sp, #8
   1547c:	e1a02004 	mov	r2, r4
   15480:	e58d6000 	str	r6, [sp]
   15484:	ebfff87a 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15488:	e1a00005 	mov	r0, r5
   1548c:	ebffe511 	bl	e8d8 <CUSBFunction::GetHost() const>
   15490:	e5903000 	ldr	r3, [r0]
   15494:	e1a02006 	mov	r2, r6
   15498:	e28d1008 	add	r1, sp, #8
   1549c:	e5933008 	ldr	r3, [r3, #8]
   154a0:	e12fff33 	blx	r3
   154a4:	e2505000 	subs	r5, r0, #0
   154a8:	0a00001d 	beq	15524 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   154ac:	e28d0008 	add	r0, sp, #8
   154b0:	ebfff8a1 	bl	1373c <CUSBRequest::GetResultLength() const>
   154b4:	e3500003 	cmp	r0, #3
   154b8:	9a000019 	bls	15524 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   154bc:	e5948000 	ldr	r8, [r4]
   154c0:	e30930de 	movw	r3, #37086	; 0x90de
   154c4:	e3443000 	movt	r3, #16384	; 0x4000
   154c8:	e0033008 	and	r3, r3, r8
   154cc:	e3530000 	cmp	r3, #0
   154d0:	1a000019 	bne	1553c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   154d4:	e7ed8858 	ubfx	r8, r8, #16, #14
   154d8:	e2403004 	sub	r3, r0, #4
   154dc:	e1530008 	cmp	r3, r8
   154e0:	1a00002a 	bne	15590 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x148>
   154e4:	e3530004 	cmp	r3, #4
   154e8:	9a00002e 	bls	155a8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   154ec:	e2406008 	sub	r6, r0, #8
   154f0:	e2841004 	add	r1, r4, #4
   154f4:	e1a02006 	mov	r2, r6
   154f8:	e1a00004 	mov	r0, r4
   154fc:	eb005971 	bl	2bac8 <memcpy>
   15500:	e3570000 	cmp	r7, #0
   15504:	15876000 	strne	r6, [r7]
   15508:	1a000006 	bne	15528 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xe0>
   1550c:	e3021c44 	movw	r1, #11332	; 0x2c44
   15510:	e3401003 	movt	r1, #3
   15514:	e3020a98 	movw	r0, #10904	; 0x2a98
   15518:	e3400003 	movt	r0, #3
   1551c:	e3002137 	movw	r2, #311	; 0x137
   15520:	eb003e93 	bl	24f74 <assertion_failed>
   15524:	e3a05000 	mov	r5, #0
   15528:	e28d0008 	add	r0, sp, #8
   1552c:	ebfff871 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   15530:	e1a00005 	mov	r0, r5
   15534:	e28dd030 	add	sp, sp, #48	; 0x30
   15538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1553c:	eb004431 	bl	26608 <CLogger::Get()>
   15540:	e58d8000 	str	r8, [sp]
   15544:	e3023a3c 	movw	r3, #10812	; 0x2a3c
   15548:	e3403003 	movt	r3, #3
   1554c:	e3a02002 	mov	r2, #2
   15550:	e59f1068 	ldr	r1, [pc, #104]	; 155c0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   15554:	e1a05006 	mov	r5, r6
   15558:	eb00436b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1555c:	eafffff1 	b	15528 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xe0>
   15560:	e3021c44 	movw	r1, #11332	; 0x2c44
   15564:	e3401003 	movt	r1, #3
   15568:	e3020a24 	movw	r0, #10788	; 0x2a24
   1556c:	e3400003 	movt	r0, #3
   15570:	e3002113 	movw	r2, #275	; 0x113
   15574:	eb003e7e 	bl	24f74 <assertion_failed>
   15578:	e3021c44 	movw	r1, #11332	; 0x2c44
   1557c:	e3401003 	movt	r1, #3
   15580:	e3020270 	movw	r0, #8816	; 0x2270
   15584:	e3400003 	movt	r0, #3
   15588:	e3a02f45 	mov	r2, #276	; 0x114
   1558c:	eb003e78 	bl	24f74 <assertion_failed>
   15590:	e3021c44 	movw	r1, #11332	; 0x2c44
   15594:	e3401003 	movt	r1, #3
   15598:	e3020c54 	movw	r0, #11348	; 0x2c54
   1559c:	e3400003 	movt	r0, #3
   155a0:	e300212b 	movw	r2, #299	; 0x12b
   155a4:	eb003e72 	bl	24f74 <assertion_failed>
   155a8:	e3021c44 	movw	r1, #11332	; 0x2c44
   155ac:	e3401003 	movt	r1, #3
   155b0:	e3020a84 	movw	r0, #10884	; 0x2a84
   155b4:	e3400003 	movt	r0, #3
   155b8:	e3a02f4b 	mov	r2, #300	; 0x12c
   155bc:	eb003e6c 	bl	24f74 <assertion_failed>
   155c0:	00032c30 	.word	0x00032c30

000155c4 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   155c4:	e2400010 	sub	r0, r0, #16
   155c8:	eaffff9e 	b	15448 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

000155cc <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   155cc:	e3520d19 	cmp	r2, #1600	; 0x640
   155d0:	8a00001d 	bhi	1564c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   155d4:	e92d4030 	push	{r4, r5, lr}
   155d8:	e3510000 	cmp	r1, #0
   155dc:	e1a05000 	mov	r5, r0
   155e0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   155e4:	e24dd00c 	sub	sp, sp, #12
   155e8:	0a000019 	beq	15654 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   155ec:	e28d0018 	add	r0, sp, #24
   155f0:	e1a04002 	mov	r4, r2
   155f4:	e2403008 	sub	r3, r0, #8
   155f8:	e58d300c 	str	r3, [sp, #12]
   155fc:	eb005931 	bl	2bac8 <memcpy>
   15600:	e5952018 	ldr	r2, [r5, #24]
   15604:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   15608:	e58d4014 	str	r4, [sp, #20]
   1560c:	e3520000 	cmp	r2, #0
   15610:	e58d3010 	str	r3, [sp, #16]
   15614:	0a000014 	beq	1566c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa0>
   15618:	e1a00005 	mov	r0, r5
   1561c:	ebffe4ad 	bl	e8d8 <CUSBFunction::GetHost() const>
   15620:	e5951018 	ldr	r1, [r5, #24]
   15624:	e3a0c000 	mov	ip, #0
   15628:	e2843008 	add	r3, r4, #8
   1562c:	e59d200c 	ldr	r2, [sp, #12]
   15630:	e58dc000 	str	ip, [sp]
   15634:	ebfff08c 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15638:	e1e00000 	mvn	r0, r0
   1563c:	e1a00fa0 	lsr	r0, r0, #31
   15640:	e28dde65 	add	sp, sp, #1616	; 0x650
   15644:	e28dd00c 	add	sp, sp, #12
   15648:	e8bd8030 	pop	{r4, r5, pc}
   1564c:	e3a00000 	mov	r0, #0
   15650:	e12fff1e 	bx	lr
   15654:	e3021c44 	movw	r1, #11332	; 0x2c44
   15658:	e3401003 	movt	r1, #3
   1565c:	e3020270 	movw	r0, #8816	; 0x2270
   15660:	e3400003 	movt	r0, #3
   15664:	e3002106 	movw	r2, #262	; 0x106
   15668:	eb003e41 	bl	24f74 <assertion_failed>
   1566c:	e3021c44 	movw	r1, #11332	; 0x2c44
   15670:	e3401003 	movt	r1, #3
   15674:	e3020aac 	movw	r0, #10924	; 0x2aac
   15678:	e3400003 	movt	r0, #3
   1567c:	e300210d 	movw	r2, #269	; 0x10d
   15680:	eb003e3b 	bl	24f74 <assertion_failed>

00015684 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   15684:	e2400010 	sub	r0, r0, #16
   15688:	eaffffcf 	b	155cc <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

0001568c <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   1568c:	e280000c 	add	r0, r0, #12
   15690:	e12fff1e 	bx	lr

00015694 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   15694:	e92d4010 	push	{r4, lr}
   15698:	e1a04000 	mov	r4, r0
   1569c:	ebffe416 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   156a0:	e3023bc4 	movw	r3, #11204	; 0x2bc4
   156a4:	e3403003 	movt	r3, #3
   156a8:	e2832008 	add	r2, r3, #8
   156ac:	e284001c 	add	r0, r4, #28
   156b0:	e2833048 	add	r3, r3, #72	; 0x48
   156b4:	e5842000 	str	r2, [r4]
   156b8:	e5843010 	str	r3, [r4, #16]
   156bc:	e3a02000 	mov	r2, #0
   156c0:	e5842014 	str	r2, [r4, #20]
   156c4:	e5842018 	str	r2, [r4, #24]
   156c8:	eb005943 	bl	2bbdc <CMACAddress::CMACAddress()>
   156cc:	e1a00004 	mov	r0, r4
   156d0:	e8bd8010 	pop	{r4, pc}

000156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   156d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   156d8:	e1a07000 	mov	r7, r0
   156dc:	e1a04001 	mov	r4, r1
   156e0:	e24dd01c 	sub	sp, sp, #28
   156e4:	e6ff4074 	uxth	r4, r4
   156e8:	e28d5018 	add	r5, sp, #24
   156ec:	e5252004 	str	r2, [r5, #-4]!
   156f0:	ebffe478 	bl	e8d8 <CUSBFunction::GetHost() const>
   156f4:	e1a06000 	mov	r6, r0
   156f8:	e1a00007 	mov	r0, r7
   156fc:	ebffe46a 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   15700:	e58d5008 	str	r5, [sp, #8]
   15704:	e1a01000 	mov	r1, r0
   15708:	e58d4004 	str	r4, [sp, #4]
   1570c:	e1a00006 	mov	r0, r6
   15710:	e3a03004 	mov	r3, #4
   15714:	e3a02000 	mov	r2, #0
   15718:	e58d300c 	str	r3, [sp, #12]
   1571c:	e58d2000 	str	r2, [sp]
   15720:	e3a030a0 	mov	r3, #160	; 0xa0
   15724:	e3a02040 	mov	r2, #64	; 0x40
   15728:	ebffefef 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1572c:	e1e00000 	mvn	r0, r0
   15730:	e1a00fa0 	lsr	r0, r0, #31
   15734:	e28dd01c 	add	sp, sp, #28
   15738:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001573c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   1573c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15740:	e1a07000 	mov	r7, r0
   15744:	e1a06002 	mov	r6, r2
   15748:	e24dd014 	sub	sp, sp, #20
   1574c:	e1a04001 	mov	r4, r1
   15750:	ebffe460 	bl	e8d8 <CUSBFunction::GetHost() const>
   15754:	e1a05000 	mov	r5, r0
   15758:	e1a00007 	mov	r0, r7
   1575c:	e6ff4074 	uxth	r4, r4
   15760:	ebffe451 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   15764:	e58d6008 	str	r6, [sp, #8]
   15768:	e1a01000 	mov	r1, r0
   1576c:	e58d4004 	str	r4, [sp, #4]
   15770:	e1a00005 	mov	r0, r5
   15774:	e3a03004 	mov	r3, #4
   15778:	e3a02000 	mov	r2, #0
   1577c:	e58d300c 	str	r3, [sp, #12]
   15780:	e58d2000 	str	r2, [sp]
   15784:	e3a030a1 	mov	r3, #161	; 0xa1
   15788:	e3a020c0 	mov	r2, #192	; 0xc0
   1578c:	ebffefd6 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15790:	e2400004 	sub	r0, r0, #4
   15794:	e16f0f10 	clz	r0, r0
   15798:	e1a002a0 	lsr	r0, r0, #5
   1579c:	e28dd014 	add	sp, sp, #20
   157a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000157a4 <CSMSC951xDevice::PHYWaitNotBusy()>:
   157a4:	e92d4070 	push	{r4, r5, r6, lr}
   157a8:	e1a06000 	mov	r6, r0
   157ac:	e24dd008 	sub	sp, sp, #8
   157b0:	eb005710 	bl	2b3f8 <CTimer::Get()>
   157b4:	e2504000 	subs	r4, r0, #0
   157b8:	0a000013 	beq	1580c <CSMSC951xDevice::PHYWaitNotBusy()+0x68>
   157bc:	eb005442 	bl	2a8cc <CTimer::GetTicks() const>
   157c0:	e1a05000 	mov	r5, r0
   157c4:	ea000008 	b	157ec <CSMSC951xDevice::PHYWaitNotBusy()+0x48>
   157c8:	e28d2004 	add	r2, sp, #4
   157cc:	e3a01f45 	mov	r1, #276	; 0x114
   157d0:	e1a00006 	mov	r0, r6
   157d4:	ebffffd8 	bl	1573c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   157d8:	e3500000 	cmp	r0, #0
   157dc:	0a000007 	beq	15800 <CSMSC951xDevice::PHYWaitNotBusy()+0x5c>
   157e0:	e59d3004 	ldr	r3, [sp, #4]
   157e4:	e3130001 	tst	r3, #1
   157e8:	0a000005 	beq	15804 <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   157ec:	e1a00004 	mov	r0, r4
   157f0:	eb005435 	bl	2a8cc <CTimer::GetTicks() const>
   157f4:	e0400005 	sub	r0, r0, r5
   157f8:	e3500063 	cmp	r0, #99	; 0x63
   157fc:	9afffff1 	bls	157c8 <CSMSC951xDevice::PHYWaitNotBusy()+0x24>
   15800:	e3a00000 	mov	r0, #0
   15804:	e28dd008 	add	sp, sp, #8
   15808:	e8bd8070 	pop	{r4, r5, r6, pc}
   1580c:	e3021c44 	movw	r1, #11332	; 0x2c44
   15810:	e3401003 	movt	r1, #3
   15814:	e3020afc 	movw	r0, #11004	; 0x2afc
   15818:	e3400003 	movt	r0, #3
   1581c:	e300218e 	movw	r2, #398	; 0x18e
   15820:	eb003dd3 	bl	24f74 <assertion_failed>

00015824 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   15824:	e92d4070 	push	{r4, r5, r6, lr}
   15828:	e351001f 	cmp	r1, #31
   1582c:	8a000017 	bhi	15890 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   15830:	e1a04001 	mov	r4, r1
   15834:	e1a06002 	mov	r6, r2
   15838:	e1a05000 	mov	r5, r0
   1583c:	ebffffd8 	bl	157a4 <CSMSC951xDevice::PHYWaitNotBusy()>
   15840:	e3500000 	cmp	r0, #0
   15844:	1a000001 	bne	15850 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   15848:	e3a00000 	mov	r0, #0
   1584c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15850:	e1a02006 	mov	r2, r6
   15854:	e3a01f46 	mov	r1, #280	; 0x118
   15858:	e1a00005 	mov	r0, r5
   1585c:	ebffff9c 	bl	156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15860:	e3500000 	cmp	r0, #0
   15864:	0afffff7 	beq	15848 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   15868:	e3002803 	movw	r2, #2051	; 0x803
   1586c:	e3a01f45 	mov	r1, #276	; 0x114
   15870:	e1822304 	orr	r2, r2, r4, lsl #6
   15874:	e1a00005 	mov	r0, r5
   15878:	ebffff95 	bl	156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1587c:	e3500000 	cmp	r0, #0
   15880:	0afffff0 	beq	15848 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   15884:	e1a00005 	mov	r0, r5
   15888:	e8bd4070 	pop	{r4, r5, r6, lr}
   1588c:	eaffffc4 	b	157a4 <CSMSC951xDevice::PHYWaitNotBusy()>
   15890:	e3021c44 	movw	r1, #11332	; 0x2c44
   15894:	e3401003 	movt	r1, #3
   15898:	e3020b08 	movw	r0, #11016	; 0x2b08
   1589c:	e3400003 	movt	r0, #3
   158a0:	e3002162 	movw	r2, #354	; 0x162
   158a4:	eb003db2 	bl	24f74 <assertion_failed>

000158a8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   158a8:	e92d4070 	push	{r4, r5, r6, lr}
   158ac:	e351001f 	cmp	r1, #31
   158b0:	e24dd008 	sub	sp, sp, #8
   158b4:	8a000023 	bhi	15948 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   158b8:	e1a04001 	mov	r4, r1
   158bc:	e1a06002 	mov	r6, r2
   158c0:	e1a05000 	mov	r5, r0
   158c4:	ebffffb6 	bl	157a4 <CSMSC951xDevice::PHYWaitNotBusy()>
   158c8:	e3500000 	cmp	r0, #0
   158cc:	1a000002 	bne	158dc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x34>
   158d0:	e3a00000 	mov	r0, #0
   158d4:	e28dd008 	add	sp, sp, #8
   158d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   158dc:	e3002801 	movw	r2, #2049	; 0x801
   158e0:	e3a01f45 	mov	r1, #276	; 0x114
   158e4:	e1822304 	orr	r2, r2, r4, lsl #6
   158e8:	e1a00005 	mov	r0, r5
   158ec:	ebffff78 	bl	156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   158f0:	e3500000 	cmp	r0, #0
   158f4:	0afffff5 	beq	158d0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   158f8:	e1a00005 	mov	r0, r5
   158fc:	ebffffa8 	bl	157a4 <CSMSC951xDevice::PHYWaitNotBusy()>
   15900:	e3500000 	cmp	r0, #0
   15904:	0afffff1 	beq	158d0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   15908:	e1a00005 	mov	r0, r5
   1590c:	e28d2004 	add	r2, sp, #4
   15910:	e3a01f46 	mov	r1, #280	; 0x118
   15914:	ebffff88 	bl	1573c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   15918:	e3500000 	cmp	r0, #0
   1591c:	0affffec 	beq	158d4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>
   15920:	e3560000 	cmp	r6, #0
   15924:	159d3004 	ldrne	r3, [sp, #4]
   15928:	11c630b0 	strhne	r3, [r6]
   1592c:	1affffe8 	bne	158d4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>
   15930:	e3021c44 	movw	r1, #11332	; 0x2c44
   15934:	e3401003 	movt	r1, #3
   15938:	e3020b18 	movw	r0, #11032	; 0x2b18
   1593c:	e3400003 	movt	r0, #3
   15940:	e3002185 	movw	r2, #389	; 0x185
   15944:	eb003d8a 	bl	24f74 <assertion_failed>
   15948:	e3021c44 	movw	r1, #11332	; 0x2c44
   1594c:	e3401003 	movt	r1, #3
   15950:	e3020b08 	movw	r0, #11016	; 0x2b08
   15954:	e3400003 	movt	r0, #3
   15958:	e3002175 	movw	r2, #373	; 0x175
   1595c:	eb003d84 	bl	24f74 <assertion_failed>

00015960 <CSMSC951xDevice::IsLinkUp()>:
   15960:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15964:	e3a01001 	mov	r1, #1
   15968:	e24dd00c 	sub	sp, sp, #12
   1596c:	e28d2006 	add	r2, sp, #6
   15970:	ebffffcc 	bl	158a8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   15974:	e3500000 	cmp	r0, #0
   15978:	11dd00b6 	ldrhne	r0, [sp, #6]
   1597c:	17e00150 	ubfxne	r0, r0, #2, #1
   15980:	e28dd00c 	add	sp, sp, #12
   15984:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015988 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   15988:	e2400010 	sub	r0, r0, #16
   1598c:	eafffff3 	b	15960 <CSMSC951xDevice::IsLinkUp()>

00015990 <CSMSC951xDevice::GetLinkSpeed()>:
   15990:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15994:	e3a0101f 	mov	r1, #31
   15998:	e24dd00c 	sub	sp, sp, #12
   1599c:	e28d2006 	add	r2, sp, #6
   159a0:	ebffffc0 	bl	158a8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   159a4:	e3500000 	cmp	r0, #0
   159a8:	0a00000c 	beq	159e0 <CSMSC951xDevice::GetLinkSpeed()+0x50>
   159ac:	e1dd30b6 	ldrh	r3, [sp, #6]
   159b0:	e3130a01 	tst	r3, #4096	; 0x1000
   159b4:	0a000009 	beq	159e0 <CSMSC951xDevice::GetLinkSpeed()+0x50>
   159b8:	e7e23153 	ubfx	r3, r3, #2, #3
   159bc:	e2433001 	sub	r3, r3, #1
   159c0:	e3530005 	cmp	r3, #5
   159c4:	8a000005 	bhi	159e0 <CSMSC951xDevice::GetLinkSpeed()+0x50>
   159c8:	e3022bc4 	movw	r2, #11204	; 0x2bc4
   159cc:	e3402003 	movt	r2, #3
   159d0:	e0823003 	add	r3, r2, r3
   159d4:	e5d30078 	ldrb	r0, [r3, #120]	; 0x78
   159d8:	e28dd00c 	add	sp, sp, #12
   159dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   159e0:	e3a00006 	mov	r0, #6
   159e4:	e28dd00c 	add	sp, sp, #12
   159e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000159ec <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   159ec:	e2400010 	sub	r0, r0, #16
   159f0:	eaffffe6 	b	15990 <CSMSC951xDevice::GetLinkSpeed()>

000159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   159f4:	e92d4030 	push	{r4, r5, lr}
   159f8:	e1a04002 	mov	r4, r2
   159fc:	e1a05001 	mov	r5, r1
   15a00:	e24dd014 	sub	sp, sp, #20
   15a04:	e1a01004 	mov	r1, r4
   15a08:	e28d200c 	add	r2, sp, #12
   15a0c:	ebffff4a 	bl	1573c <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   15a10:	e3500000 	cmp	r0, #0
   15a14:	0a00000a 	beq	15a44 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x50>
   15a18:	eb0042fa 	bl	26608 <CLogger::Get()>
   15a1c:	e59d200c 	ldr	r2, [sp, #12]
   15a20:	e58d2000 	str	r2, [sp]
   15a24:	e3023c74 	movw	r3, #11380	; 0x2c74
   15a28:	e3403003 	movt	r3, #3
   15a2c:	e58d5004 	str	r5, [sp, #4]
   15a30:	e3a02004 	mov	r2, #4
   15a34:	e59f102c 	ldr	r1, [pc, #44]	; 15a68 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x74>
   15a38:	eb004233 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a3c:	e28dd014 	add	sp, sp, #20
   15a40:	e8bd8030 	pop	{r4, r5, pc}
   15a44:	eb0042ef 	bl	26608 <CLogger::Get()>
   15a48:	e58d4000 	str	r4, [sp]
   15a4c:	e3a02001 	mov	r2, #1
   15a50:	e59f1010 	ldr	r1, [pc, #16]	; 15a68 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x74>
   15a54:	e3023ae0 	movw	r3, #10976	; 0x2ae0
   15a58:	e3403003 	movt	r3, #3
   15a5c:	eb00422a 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a60:	e28dd014 	add	sp, sp, #20
   15a64:	e8bd8030 	pop	{r4, r5, pc}
   15a68:	00032c30 	.word	0x00032c30

00015a6c <CSMSC951xDevice::DumpRegs()>:
   15a6c:	e92d4010 	push	{r4, lr}
   15a70:	e3a02000 	mov	r2, #0
   15a74:	e1a04000 	mov	r4, r0
   15a78:	e3021c7c 	movw	r1, #11388	; 0x2c7c
   15a7c:	e3401003 	movt	r1, #3
   15a80:	ebffffdb 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15a84:	e1a00004 	mov	r0, r4
   15a88:	e3a02008 	mov	r2, #8
   15a8c:	e3021c84 	movw	r1, #11396	; 0x2c84
   15a90:	e3401003 	movt	r1, #3
   15a94:	ebffffd6 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15a98:	e1a00004 	mov	r0, r4
   15a9c:	e3a0200c 	mov	r2, #12
   15aa0:	e3021c8c 	movw	r1, #11404	; 0x2c8c
   15aa4:	e3401003 	movt	r1, #3
   15aa8:	ebffffd1 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15aac:	e1a00004 	mov	r0, r4
   15ab0:	e3a02010 	mov	r2, #16
   15ab4:	e3021c94 	movw	r1, #11412	; 0x2c94
   15ab8:	e3401003 	movt	r1, #3
   15abc:	ebffffcc 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15ac0:	e1a00004 	mov	r0, r4
   15ac4:	e3a02014 	mov	r2, #20
   15ac8:	e3021c9c 	movw	r1, #11420	; 0x2c9c
   15acc:	e3401003 	movt	r1, #3
   15ad0:	ebffffc7 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15ad4:	e1a00004 	mov	r0, r4
   15ad8:	e3a02018 	mov	r2, #24
   15adc:	e3021ca4 	movw	r1, #11428	; 0x2ca4
   15ae0:	e3401003 	movt	r1, #3
   15ae4:	ebffffc2 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15ae8:	e1a00004 	mov	r0, r4
   15aec:	e3a02020 	mov	r2, #32
   15af0:	e3021cb0 	movw	r1, #11440	; 0x2cb0
   15af4:	e3401003 	movt	r1, #3
   15af8:	ebffffbd 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15afc:	e1a00004 	mov	r0, r4
   15b00:	e3a02024 	mov	r2, #36	; 0x24
   15b04:	e3021cb8 	movw	r1, #11448	; 0x2cb8
   15b08:	e3401003 	movt	r1, #3
   15b0c:	ebffffb8 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15b10:	e1a00004 	mov	r0, r4
   15b14:	e3a02028 	mov	r2, #40	; 0x28
   15b18:	e3021cbc 	movw	r1, #11452	; 0x2cbc
   15b1c:	e3401003 	movt	r1, #3
   15b20:	ebffffb3 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15b24:	e1a00004 	mov	r0, r4
   15b28:	e3a0202c 	mov	r2, #44	; 0x2c
   15b2c:	e3021cc8 	movw	r1, #11464	; 0x2cc8
   15b30:	e3401003 	movt	r1, #3
   15b34:	ebffffae 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15b38:	e1a00004 	mov	r0, r4
   15b3c:	e3a02038 	mov	r2, #56	; 0x38
   15b40:	e3021cd0 	movw	r1, #11472	; 0x2cd0
   15b44:	e3401003 	movt	r1, #3
   15b48:	ebffffa9 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15b4c:	e1a00004 	mov	r0, r4
   15b50:	e3a02068 	mov	r2, #104	; 0x68
   15b54:	e3021cdc 	movw	r1, #11484	; 0x2cdc
   15b58:	e3401003 	movt	r1, #3
   15b5c:	ebffffa4 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15b60:	e1a00004 	mov	r0, r4
   15b64:	e3a0206c 	mov	r2, #108	; 0x6c
   15b68:	e3021ce8 	movw	r1, #11496	; 0x2ce8
   15b6c:	e3401003 	movt	r1, #3
   15b70:	ebffff9f 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15b74:	e1a00004 	mov	r0, r4
   15b78:	e3a02c01 	mov	r2, #256	; 0x100
   15b7c:	e3021cf4 	movw	r1, #11508	; 0x2cf4
   15b80:	e3401003 	movt	r1, #3
   15b84:	ebffff9a 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15b88:	e1a00004 	mov	r0, r4
   15b8c:	e3a02f41 	mov	r2, #260	; 0x104
   15b90:	e3021cfc 	movw	r1, #11516	; 0x2cfc
   15b94:	e3401003 	movt	r1, #3
   15b98:	ebffff95 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15b9c:	e1a00004 	mov	r0, r4
   15ba0:	e3a02f42 	mov	r2, #264	; 0x108
   15ba4:	e3021d04 	movw	r1, #11524	; 0x2d04
   15ba8:	e3401003 	movt	r1, #3
   15bac:	ebffff90 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15bb0:	e1a00004 	mov	r0, r4
   15bb4:	e3a02f43 	mov	r2, #268	; 0x10c
   15bb8:	e3021d0c 	movw	r1, #11532	; 0x2d0c
   15bbc:	e3401003 	movt	r1, #3
   15bc0:	ebffff8b 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15bc4:	e1a00004 	mov	r0, r4
   15bc8:	e3a02e11 	mov	r2, #272	; 0x110
   15bcc:	e3021d14 	movw	r1, #11540	; 0x2d14
   15bd0:	e3401003 	movt	r1, #3
   15bd4:	ebffff86 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15bd8:	e1a00004 	mov	r0, r4
   15bdc:	e3a02f47 	mov	r2, #284	; 0x11c
   15be0:	e3021d1c 	movw	r1, #11548	; 0x2d1c
   15be4:	e3401003 	movt	r1, #3
   15be8:	ebffff81 	bl	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15bec:	e1a00004 	mov	r0, r4
   15bf0:	e3021d24 	movw	r1, #11556	; 0x2d24
   15bf4:	e3401003 	movt	r1, #3
   15bf8:	e3a02f4b 	mov	r2, #300	; 0x12c
   15bfc:	e8bd4010 	pop	{r4, lr}
   15c00:	eaffff7b 	b	159f4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>

00015c04 <CSMSC951xDevice::Configure()>:
   15c04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15c08:	e3a01000 	mov	r1, #0
   15c0c:	e1a04000 	mov	r4, r0
   15c10:	e24dd040 	sub	sp, sp, #64	; 0x40
   15c14:	e3a06000 	mov	r6, #0
   15c18:	e28d0014 	add	r0, sp, #20
   15c1c:	eb003cf5 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   15c20:	e28d0014 	add	r0, sp, #20
   15c24:	e58d6000 	str	r6, [sp]
   15c28:	e3a01003 	mov	r1, #3
   15c2c:	e3401001 	movt	r1, #1
   15c30:	e3a03014 	mov	r3, #20
   15c34:	e28d202c 	add	r2, sp, #44	; 0x2c
   15c38:	eb003d37 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15c3c:	e2505000 	subs	r5, r0, #0
   15c40:	0a00003c 	beq	15d38 <CSMSC951xDevice::Configure()+0x134>
   15c44:	e284701c 	add	r7, r4, #28
   15c48:	e28d1038 	add	r1, sp, #56	; 0x38
   15c4c:	e1a00007 	mov	r0, r7
   15c50:	eb005804 	bl	2bc68 <CMACAddress::Set(unsigned char const*)>
   15c54:	e28d001c 	add	r0, sp, #28
   15c58:	eb004e63 	bl	295ec <CString::CString()>
   15c5c:	e28d101c 	add	r1, sp, #28
   15c60:	e1a00007 	mov	r0, r7
   15c64:	eb005859 	bl	2bdd0 <CMACAddress::Format(CString*) const>
   15c68:	eb004266 	bl	26608 <CLogger::Get()>
   15c6c:	e1a05000 	mov	r5, r0
   15c70:	e28d001c 	add	r0, sp, #28
   15c74:	eb004e73 	bl	29648 <CString::operator char const*() const>
   15c78:	e3a02004 	mov	r2, #4
   15c7c:	e58d0000 	str	r0, [sp]
   15c80:	e3023b4c 	movw	r3, #11084	; 0x2b4c
   15c84:	e3403003 	movt	r3, #3
   15c88:	e1a00005 	mov	r0, r5
   15c8c:	e59f122c 	ldr	r1, [pc, #556]	; 15ec0 <CSMSC951xDevice::Configure()+0x2bc>
   15c90:	eb00419d 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15c94:	e1a00004 	mov	r0, r4
   15c98:	ebffe2ed 	bl	e854 <CUSBFunction::GetNumEndpoints() const>
   15c9c:	e3500003 	cmp	r0, #3
   15ca0:	0a00000e 	beq	15ce0 <CSMSC951xDevice::Configure()+0xdc>
   15ca4:	e1a00004 	mov	r0, r4
   15ca8:	e59f1210 	ldr	r1, [pc, #528]	; 15ec0 <CSMSC951xDevice::Configure()+0x2bc>
   15cac:	e1a05006 	mov	r5, r6
   15cb0:	ebffe31e 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   15cb4:	e28d001c 	add	r0, sp, #28
   15cb8:	eb004e18 	bl	29520 <CString::~CString()>
   15cbc:	e28d0014 	add	r0, sp, #20
   15cc0:	eb003cd3 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   15cc4:	e1a00005 	mov	r0, r5
   15cc8:	e28dd040 	add	sp, sp, #64	; 0x40
   15ccc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15cd0:	e5d53003 	ldrb	r3, [r5, #3]
   15cd4:	e203303f 	and	r3, r3, #63	; 0x3f
   15cd8:	e3530002 	cmp	r3, #2
   15cdc:	0a00001c 	beq	15d54 <CSMSC951xDevice::Configure()+0x150>
   15ce0:	e3a01005 	mov	r1, #5
   15ce4:	e1a00004 	mov	r0, r4
   15ce8:	ebffe305 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   15cec:	e2505000 	subs	r5, r0, #0
   15cf0:	1afffff6 	bne	15cd0 <CSMSC951xDevice::Configure()+0xcc>
   15cf4:	e5943014 	ldr	r3, [r4, #20]
   15cf8:	e1a00004 	mov	r0, r4
   15cfc:	e3530000 	cmp	r3, #0
   15d00:	0a000024 	beq	15d98 <CSMSC951xDevice::Configure()+0x194>
   15d04:	e5943018 	ldr	r3, [r4, #24]
   15d08:	e3530000 	cmp	r3, #0
   15d0c:	0a000021 	beq	15d98 <CSMSC951xDevice::Configure()+0x194>
   15d10:	ebffe20b 	bl	e544 <CUSBFunction::Configure()>
   15d14:	e2505000 	subs	r5, r0, #0
   15d18:	1a00002f 	bne	15ddc <CSMSC951xDevice::Configure()+0x1d8>
   15d1c:	eb004239 	bl	26608 <CLogger::Get()>
   15d20:	e3013948 	movw	r3, #6472	; 0x1948
   15d24:	e3403003 	movt	r3, #3
   15d28:	e3a02001 	mov	r2, #1
   15d2c:	e59f118c 	ldr	r1, [pc, #396]	; 15ec0 <CSMSC951xDevice::Configure()+0x2bc>
   15d30:	eb004175 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15d34:	eaffffde 	b	15cb4 <CSMSC951xDevice::Configure()+0xb0>
   15d38:	eb004232 	bl	26608 <CLogger::Get()>
   15d3c:	e3023d2c 	movw	r3, #11564	; 0x2d2c
   15d40:	e3403003 	movt	r3, #3
   15d44:	e3a02001 	mov	r2, #1
   15d48:	e59f1170 	ldr	r1, [pc, #368]	; 15ec0 <CSMSC951xDevice::Configure()+0x2bc>
   15d4c:	eb00416e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15d50:	eaffffd9 	b	15cbc <CSMSC951xDevice::Configure()+0xb8>
   15d54:	e1d530d2 	ldrsb	r3, [r5, #2]
   15d58:	e1a00004 	mov	r0, r4
   15d5c:	e3530000 	cmp	r3, #0
   15d60:	ba000010 	blt	15da8 <CSMSC951xDevice::Configure()+0x1a4>
   15d64:	e5943018 	ldr	r3, [r4, #24]
   15d68:	e3530000 	cmp	r3, #0
   15d6c:	1a000009 	bne	15d98 <CSMSC951xDevice::Configure()+0x194>
   15d70:	ebffe2c3 	bl	e884 <CUSBFunction::GetDevice() const>
   15d74:	e1a08000 	mov	r8, r0
   15d78:	e3a00014 	mov	r0, #20
   15d7c:	eb00585b 	bl	2bef0 <operator new(unsigned int)>
   15d80:	e1a02005 	mov	r2, r5
   15d84:	e1a01008 	mov	r1, r8
   15d88:	e1a06000 	mov	r6, r0
   15d8c:	ebffe0f2 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15d90:	e5846018 	str	r6, [r4, #24]
   15d94:	eaffffd1 	b	15ce0 <CSMSC951xDevice::Configure()+0xdc>
   15d98:	e59f1120 	ldr	r1, [pc, #288]	; 15ec0 <CSMSC951xDevice::Configure()+0x2bc>
   15d9c:	e3a05000 	mov	r5, #0
   15da0:	ebffe2e2 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   15da4:	eaffffc2 	b	15cb4 <CSMSC951xDevice::Configure()+0xb0>
   15da8:	e5943014 	ldr	r3, [r4, #20]
   15dac:	e3530000 	cmp	r3, #0
   15db0:	1afffff8 	bne	15d98 <CSMSC951xDevice::Configure()+0x194>
   15db4:	ebffe2b2 	bl	e884 <CUSBFunction::GetDevice() const>
   15db8:	e1a08000 	mov	r8, r0
   15dbc:	e3a00014 	mov	r0, #20
   15dc0:	eb00584a 	bl	2bef0 <operator new(unsigned int)>
   15dc4:	e1a02005 	mov	r2, r5
   15dc8:	e1a01008 	mov	r1, r8
   15dcc:	e1a06000 	mov	r6, r0
   15dd0:	ebffe0e1 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15dd4:	e5846014 	str	r6, [r4, #20]
   15dd8:	eaffffc0 	b	15ce0 <CSMSC951xDevice::Configure()+0xdc>
   15ddc:	e1a00007 	mov	r0, r7
   15de0:	e28d100c 	add	r1, sp, #12
   15de4:	eb0057c9 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   15de8:	e5dd2011 	ldrb	r2, [sp, #17]
   15dec:	e5dd3010 	ldrb	r3, [sp, #16]
   15df0:	e3a01f41 	mov	r1, #260	; 0x104
   15df4:	e1a00004 	mov	r0, r4
   15df8:	e59d500c 	ldr	r5, [sp, #12]
   15dfc:	e1832402 	orr	r2, r3, r2, lsl #8
   15e00:	ebfffe33 	bl	156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15e04:	e3500000 	cmp	r0, #0
   15e08:	0a00001b 	beq	15e7c <CSMSC951xDevice::Configure()+0x278>
   15e0c:	e1a02005 	mov	r2, r5
   15e10:	e3a01f42 	mov	r1, #264	; 0x108
   15e14:	e1a00004 	mov	r0, r4
   15e18:	ebfffe2d 	bl	156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15e1c:	e3500000 	cmp	r0, #0
   15e20:	0a000015 	beq	15e7c <CSMSC951xDevice::Configure()+0x278>
   15e24:	e3a02000 	mov	r2, #0
   15e28:	e3402111 	movt	r2, #273	; 0x111
   15e2c:	e3a01024 	mov	r1, #36	; 0x24
   15e30:	e1a00004 	mov	r0, r4
   15e34:	ebfffe26 	bl	156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15e38:	e3500000 	cmp	r0, #0
   15e3c:	0a000006 	beq	15e5c <CSMSC951xDevice::Configure()+0x258>
   15e40:	e3a0200c 	mov	r2, #12
   15e44:	e3402080 	movt	r2, #128	; 0x80
   15e48:	e3a01c01 	mov	r1, #256	; 0x100
   15e4c:	e1a00004 	mov	r0, r4
   15e50:	ebfffe1f 	bl	156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15e54:	e3500000 	cmp	r0, #0
   15e58:	1a00000f 	bne	15e9c <CSMSC951xDevice::Configure()+0x298>
   15e5c:	eb0041e9 	bl	26608 <CLogger::Get()>
   15e60:	e3023d5c 	movw	r3, #11612	; 0x2d5c
   15e64:	e3403003 	movt	r3, #3
   15e68:	e3a02001 	mov	r2, #1
   15e6c:	e59f104c 	ldr	r1, [pc, #76]	; 15ec0 <CSMSC951xDevice::Configure()+0x2bc>
   15e70:	e3a05000 	mov	r5, #0
   15e74:	eb004124 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15e78:	eaffff8d 	b	15cb4 <CSMSC951xDevice::Configure()+0xb0>
   15e7c:	eb0041e1 	bl	26608 <CLogger::Get()>
   15e80:	e3023d44 	movw	r3, #11588	; 0x2d44
   15e84:	e3403003 	movt	r3, #3
   15e88:	e3a02001 	mov	r2, #1
   15e8c:	e59f102c 	ldr	r1, [pc, #44]	; 15ec0 <CSMSC951xDevice::Configure()+0x2bc>
   15e90:	eb00411d 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15e94:	e3a05000 	mov	r5, #0
   15e98:	eaffff85 	b	15cb4 <CSMSC951xDevice::Configure()+0xb0>
   15e9c:	e3a02004 	mov	r2, #4
   15ea0:	e3a01010 	mov	r1, #16
   15ea4:	e1a00004 	mov	r0, r4
   15ea8:	ebfffe09 	bl	156d4 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15eac:	e2505000 	subs	r5, r0, #0
   15eb0:	0affffe9 	beq	15e5c <CSMSC951xDevice::Configure()+0x258>
   15eb4:	e2840010 	add	r0, r4, #16
   15eb8:	eb0057e7 	bl	2be5c <CNetDevice::AddNetDevice()>
   15ebc:	eaffff7c 	b	15cb4 <CSMSC951xDevice::Configure()+0xb0>
   15ec0:	00032c30 	.word	0x00032c30

00015ec4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   15ec4:	e92d4070 	push	{r4, r5, r6, lr}
   15ec8:	e1a04000 	mov	r4, r0
   15ecc:	e5900020 	ldr	r0, [r0, #32]
   15ed0:	e3a03000 	mov	r3, #0
   15ed4:	e59f20a0 	ldr	r2, [pc, #160]	; 15f7c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   15ed8:	e5842000 	str	r2, [r4]
   15edc:	e1500003 	cmp	r0, r3
   15ee0:	e5843024 	str	r3, [r4, #36]	; 0x24
   15ee4:	0a000000 	beq	15eec <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   15ee8:	eb00580d 	bl	2bf24 <operator delete[](void*)>
   15eec:	e5945018 	ldr	r5, [r4, #24]
   15ef0:	e3a03000 	mov	r3, #0
   15ef4:	e5843020 	str	r3, [r4, #32]
   15ef8:	e1550003 	cmp	r5, r3
   15efc:	0a000004 	beq	15f14 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   15f00:	e1a00005 	mov	r0, r5
   15f04:	ebffe0f8 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   15f08:	e1a00005 	mov	r0, r5
   15f0c:	e3a01014 	mov	r1, #20
   15f10:	eb005804 	bl	2bf28 <operator delete(void*, unsigned int)>
   15f14:	e5945014 	ldr	r5, [r4, #20]
   15f18:	e3a03000 	mov	r3, #0
   15f1c:	e5843018 	str	r3, [r4, #24]
   15f20:	e1550003 	cmp	r5, r3
   15f24:	0a000004 	beq	15f3c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   15f28:	e1a00005 	mov	r0, r5
   15f2c:	ebffe0ee 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   15f30:	e1a00005 	mov	r0, r5
   15f34:	e3a01014 	mov	r1, #20
   15f38:	eb0057fa 	bl	2bf28 <operator delete(void*, unsigned int)>
   15f3c:	e5945010 	ldr	r5, [r4, #16]
   15f40:	e3a03000 	mov	r3, #0
   15f44:	e5843014 	str	r3, [r4, #20]
   15f48:	e1550003 	cmp	r5, r3
   15f4c:	0a000004 	beq	15f64 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   15f50:	e1a00005 	mov	r0, r5
   15f54:	ebffe0e4 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   15f58:	e1a00005 	mov	r0, r5
   15f5c:	e3a01014 	mov	r1, #20
   15f60:	eb0057f0 	bl	2bf28 <operator delete(void*, unsigned int)>
   15f64:	e3a03000 	mov	r3, #0
   15f68:	e1a00004 	mov	r0, r4
   15f6c:	e5843010 	str	r3, [r4, #16]
   15f70:	ebffe14a 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   15f74:	e1a00004 	mov	r0, r4
   15f78:	e8bd8070 	pop	{r4, r5, r6, pc}
   15f7c:	00032d78 	.word	0x00032d78

00015f80 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   15f80:	e92d4010 	push	{r4, lr}
   15f84:	e1a04000 	mov	r4, r0
   15f88:	ebffffcd 	bl	15ec4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   15f8c:	e1a00004 	mov	r0, r4
   15f90:	e3a01028 	mov	r1, #40	; 0x28
   15f94:	eb0057e3 	bl	2bf28 <operator delete(void*, unsigned int)>
   15f98:	e1a00004 	mov	r0, r4
   15f9c:	e8bd8010 	pop	{r4, pc}

00015fa0 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   15fa0:	e92d4010 	push	{r4, lr}
   15fa4:	e1a04000 	mov	r4, r0
   15fa8:	ebffe1d3 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15fac:	e59f2024 	ldr	r2, [pc, #36]	; 15fd8 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   15fb0:	e3a03000 	mov	r3, #0
   15fb4:	e1a00004 	mov	r0, r4
   15fb8:	e5842000 	str	r2, [r4]
   15fbc:	e5843010 	str	r3, [r4, #16]
   15fc0:	e5843014 	str	r3, [r4, #20]
   15fc4:	e5843018 	str	r3, [r4, #24]
   15fc8:	e584301c 	str	r3, [r4, #28]
   15fcc:	e5843020 	str	r3, [r4, #32]
   15fd0:	e5843024 	str	r3, [r4, #36]	; 0x24
   15fd4:	e8bd8010 	pop	{r4, pc}
   15fd8:	00032d78 	.word	0x00032d78

00015fdc <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   15fdc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15fe0:	e1a07000 	mov	r7, r0
   15fe4:	e1a06001 	mov	r6, r1
   15fe8:	e24dd014 	sub	sp, sp, #20
   15fec:	e1a04002 	mov	r4, r2
   15ff0:	ebffe238 	bl	e8d8 <CUSBFunction::GetHost() const>
   15ff4:	e1a05000 	mov	r5, r0
   15ff8:	e1a00007 	mov	r0, r7
   15ffc:	e6ff4074 	uxth	r4, r4
   16000:	ebffe229 	bl	e8ac <CUSBFunction::GetEndpoint0() const>
   16004:	e3a0c000 	mov	ip, #0
   16008:	e1a01000 	mov	r1, r0
   1600c:	e58d6008 	str	r6, [sp, #8]
   16010:	e1a00005 	mov	r0, r5
   16014:	e58d400c 	str	r4, [sp, #12]
   16018:	e1a0300c 	mov	r3, ip
   1601c:	e58dc004 	str	ip, [sp, #4]
   16020:	e3a02020 	mov	r2, #32
   16024:	e58dc000 	str	ip, [sp]
   16028:	ebffedaf 	bl	116ec <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1602c:	e1e00000 	mvn	r0, r0
   16030:	e1a00fa0 	lsr	r0, r0, #31
   16034:	e28dd014 	add	sp, sp, #20
   16038:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001603c <CUSBBluetoothDevice::StartRequest()>:
   1603c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16040:	e1a04000 	mov	r4, r0
   16044:	e5900010 	ldr	r0, [r0, #16]
   16048:	e24dd00c 	sub	sp, sp, #12
   1604c:	e3500000 	cmp	r0, #0
   16050:	0a00001f 	beq	160d4 <CUSBBluetoothDevice::StartRequest()+0x98>
   16054:	e5943020 	ldr	r3, [r4, #32]
   16058:	e3530000 	cmp	r3, #0
   1605c:	0a000022 	beq	160ec <CUSBBluetoothDevice::StartRequest()+0xb0>
   16060:	e594501c 	ldr	r5, [r4, #28]
   16064:	e3550000 	cmp	r5, #0
   16068:	1a000025 	bne	16104 <CUSBBluetoothDevice::StartRequest()+0xc8>
   1606c:	ebffe0b2 	bl	e33c <CUSBEndpoint::GetMaxPacketSize() const>
   16070:	e1a07000 	mov	r7, r0
   16074:	e3a00028 	mov	r0, #40	; 0x28
   16078:	ebfff600 	bl	13880 <CUSBRequest::operator new(unsigned int)>
   1607c:	e5942020 	ldr	r2, [r4, #32]
   16080:	e1a06000 	mov	r6, r0
   16084:	e5941010 	ldr	r1, [r4, #16]
   16088:	e1a03007 	mov	r3, r7
   1608c:	e58d5000 	str	r5, [sp]
   16090:	ebfff577 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16094:	e1a03004 	mov	r3, r4
   16098:	e1a02005 	mov	r2, r5
   1609c:	e1a00006 	mov	r0, r6
   160a0:	e584601c 	str	r6, [r4, #28]
   160a4:	e3061278 	movw	r1, #25208	; 0x6278
   160a8:	e3401001 	movt	r1, #1
   160ac:	ebfff5d4 	bl	13804 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   160b0:	e1a00004 	mov	r0, r4
   160b4:	ebffe207 	bl	e8d8 <CUSBFunction::GetHost() const>
   160b8:	e5903000 	ldr	r3, [r0]
   160bc:	e1a02005 	mov	r2, r5
   160c0:	e594101c 	ldr	r1, [r4, #28]
   160c4:	e593300c 	ldr	r3, [r3, #12]
   160c8:	e28dd00c 	add	sp, sp, #12
   160cc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   160d0:	e12fff13 	bx	r3
   160d4:	e3021da4 	movw	r1, #11684	; 0x2da4
   160d8:	e3401003 	movt	r1, #3
   160dc:	e3020db8 	movw	r0, #11704	; 0x2db8
   160e0:	e3400003 	movt	r0, #3
   160e4:	e3a020a3 	mov	r2, #163	; 0xa3
   160e8:	eb003ba1 	bl	24f74 <assertion_failed>
   160ec:	e3021da4 	movw	r1, #11684	; 0x2da4
   160f0:	e3401003 	movt	r1, #3
   160f4:	e3020dd4 	movw	r0, #11732	; 0x2dd4
   160f8:	e3400003 	movt	r0, #3
   160fc:	e3a020a4 	mov	r2, #164	; 0xa4
   16100:	eb003b9b 	bl	24f74 <assertion_failed>
   16104:	e3021da4 	movw	r1, #11684	; 0x2da4
   16108:	e3401003 	movt	r1, #3
   1610c:	e30200ac 	movw	r0, #8364	; 0x20ac
   16110:	e3400003 	movt	r0, #3
   16114:	e3a020a6 	mov	r2, #166	; 0xa6
   16118:	eb003b95 	bl	24f74 <assertion_failed>

0001611c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   1611c:	e5801024 	str	r1, [r0, #36]	; 0x24
   16120:	e3510000 	cmp	r1, #0
   16124:	0a000000 	beq	1612c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   16128:	eaffffc3 	b	1603c <CUSBBluetoothDevice::StartRequest()>
   1612c:	e3021da4 	movw	r1, #11684	; 0x2da4
   16130:	e3401003 	movt	r1, #3
   16134:	e3020de8 	movw	r0, #11752	; 0x2de8
   16138:	e3400003 	movt	r0, #3
   1613c:	e92d4010 	push	{r4, lr}
   16140:	e3a0209c 	mov	r2, #156	; 0x9c
   16144:	eb003b8a 	bl	24f74 <assertion_failed>

00016148 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   16148:	e92d4070 	push	{r4, r5, r6, lr}
   1614c:	e3510000 	cmp	r1, #0
   16150:	0a00002f 	beq	16214 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xcc>
   16154:	e590501c 	ldr	r5, [r0, #28]
   16158:	e1a04000 	mov	r4, r0
   1615c:	e1550001 	cmp	r5, r1
   16160:	1a000031 	bne	1622c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   16164:	e5903020 	ldr	r3, [r0, #32]
   16168:	e3530000 	cmp	r3, #0
   1616c:	0a000034 	beq	16244 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xfc>
   16170:	e1a00005 	mov	r0, r5
   16174:	ebfff56e 	bl	13734 <CUSBRequest::GetStatus() const>
   16178:	e3500000 	cmp	r0, #0
   1617c:	0a00001d 	beq	161f8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   16180:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   16184:	e3560000 	cmp	r6, #0
   16188:	0a000033 	beq	1625c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   1618c:	e1a00005 	mov	r0, r5
   16190:	e5945020 	ldr	r5, [r4, #32]
   16194:	ebfff568 	bl	1373c <CUSBRequest::GetResultLength() const>
   16198:	e1a01000 	mov	r1, r0
   1619c:	e1a00005 	mov	r0, r5
   161a0:	e12fff36 	blx	r6
   161a4:	e594501c 	ldr	r5, [r4, #28]
   161a8:	e3550000 	cmp	r5, #0
   161ac:	0a000004 	beq	161c4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   161b0:	e1a00005 	mov	r0, r5
   161b4:	ebfff54f 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   161b8:	e1a00005 	mov	r0, r5
   161bc:	e3a01028 	mov	r1, #40	; 0x28
   161c0:	ebfff5c4 	bl	138d8 <CUSBRequest::operator delete(void*, unsigned int)>
   161c4:	e3a03000 	mov	r3, #0
   161c8:	e1a00004 	mov	r0, r4
   161cc:	e584301c 	str	r3, [r4, #28]
   161d0:	ebffff99 	bl	1603c <CUSBBluetoothDevice::StartRequest()>
   161d4:	e3500000 	cmp	r0, #0
   161d8:	18bd8070 	popne	{r4, r5, r6, pc}
   161dc:	eb004109 	bl	26608 <CLogger::Get()>
   161e0:	e30230e0 	movw	r3, #8416	; 0x20e0
   161e4:	e3403003 	movt	r3, #3
   161e8:	e3a02001 	mov	r2, #1
   161ec:	e59f1080 	ldr	r1, [pc, #128]	; 16274 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x12c>
   161f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   161f4:	ea004044 	b	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   161f8:	eb004102 	bl	26608 <CLogger::Get()>
   161fc:	e3023e00 	movw	r3, #11776	; 0x2e00
   16200:	e3403003 	movt	r3, #3
   16204:	e3a02002 	mov	r2, #2
   16208:	e59f1064 	ldr	r1, [pc, #100]	; 16274 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x12c>
   1620c:	eb00403e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16210:	eaffffe3 	b	161a4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   16214:	e3021da4 	movw	r1, #11684	; 0x2da4
   16218:	e3401003 	movt	r1, #3
   1621c:	e3000890 	movw	r0, #2192	; 0x890
   16220:	e3400003 	movt	r0, #3
   16224:	e3a020b2 	mov	r2, #178	; 0xb2
   16228:	eb003b51 	bl	24f74 <assertion_failed>
   1622c:	e3021da4 	movw	r1, #11684	; 0x2da4
   16230:	e3401003 	movt	r1, #3
   16234:	e30200d0 	movw	r0, #8400	; 0x20d0
   16238:	e3400003 	movt	r0, #3
   1623c:	e3a020b3 	mov	r2, #179	; 0xb3
   16240:	eb003b4b 	bl	24f74 <assertion_failed>
   16244:	e3021da4 	movw	r1, #11684	; 0x2da4
   16248:	e3401003 	movt	r1, #3
   1624c:	e3020dd4 	movw	r0, #11732	; 0x2dd4
   16250:	e3400003 	movt	r0, #3
   16254:	e3a020b4 	mov	r2, #180	; 0xb4
   16258:	eb003b45 	bl	24f74 <assertion_failed>
   1625c:	e3021da4 	movw	r1, #11684	; 0x2da4
   16260:	e3401003 	movt	r1, #3
   16264:	e3020de8 	movw	r0, #11752	; 0x2de8
   16268:	e3400003 	movt	r0, #3
   1626c:	e3a020b8 	mov	r2, #184	; 0xb8
   16270:	eb003b3f 	bl	24f74 <assertion_failed>
   16274:	00032d9c 	.word	0x00032d9c

00016278 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   16278:	e3520000 	cmp	r2, #0
   1627c:	0a000002 	beq	1628c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   16280:	e1a01000 	mov	r1, r0
   16284:	e1a00002 	mov	r0, r2
   16288:	eaffffae 	b	16148 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   1628c:	e3021da4 	movw	r1, #11684	; 0x2da4
   16290:	e3401003 	movt	r1, #3
   16294:	e30007a4 	movw	r0, #1956	; 0x7a4
   16298:	e3400003 	movt	r0, #3
   1629c:	e92d4010 	push	{r4, lr}
   162a0:	e3a020cc 	mov	r2, #204	; 0xcc
   162a4:	eb003b32 	bl	24f74 <assertion_failed>

000162a8 <CUSBBluetoothDevice::Configure()>:
   162a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   162ac:	e1a04000 	mov	r4, r0
   162b0:	e24dd014 	sub	sp, sp, #20
   162b4:	ebffe1e6 	bl	ea54 <CUSBFunction::GetInterfaceNumber() const>
   162b8:	e2506000 	subs	r6, r0, #0
   162bc:	1a000040 	bne	163c4 <CUSBBluetoothDevice::Configure()+0x11c>
   162c0:	e1a00004 	mov	r0, r4
   162c4:	ebffe162 	bl	e854 <CUSBFunction::GetNumEndpoints() const>
   162c8:	e3500003 	cmp	r0, #3
   162cc:	1a000036 	bne	163ac <CUSBBluetoothDevice::Configure()+0x104>
   162d0:	e3a01005 	mov	r1, #5
   162d4:	e1a00004 	mov	r0, r4
   162d8:	ebffe189 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   162dc:	e2505000 	subs	r5, r0, #0
   162e0:	0a000048 	beq	16408 <CUSBBluetoothDevice::Configure()+0x160>
   162e4:	e5d52003 	ldrb	r2, [r5, #3]
   162e8:	e202203f 	and	r2, r2, #63	; 0x3f
   162ec:	e3520002 	cmp	r2, #2
   162f0:	0a00000f 	beq	16334 <CUSBBluetoothDevice::Configure()+0x8c>
   162f4:	e3520003 	cmp	r2, #3
   162f8:	1afffff4 	bne	162d0 <CUSBBluetoothDevice::Configure()+0x28>
   162fc:	e5943010 	ldr	r3, [r4, #16]
   16300:	e1a00004 	mov	r0, r4
   16304:	e3530000 	cmp	r3, #0
   16308:	1a000038 	bne	163f0 <CUSBBluetoothDevice::Configure()+0x148>
   1630c:	ebffe15c 	bl	e884 <CUSBFunction::GetDevice() const>
   16310:	e1a07000 	mov	r7, r0
   16314:	e3a00014 	mov	r0, #20
   16318:	eb0056f4 	bl	2bef0 <operator new(unsigned int)>
   1631c:	e1a02005 	mov	r2, r5
   16320:	e1a01007 	mov	r1, r7
   16324:	e1a06000 	mov	r6, r0
   16328:	ebffdf8b 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1632c:	e5846010 	str	r6, [r4, #16]
   16330:	eaffffe6 	b	162d0 <CUSBBluetoothDevice::Configure()+0x28>
   16334:	e1d530d2 	ldrsb	r3, [r5, #2]
   16338:	e1a00004 	mov	r0, r4
   1633c:	e3530000 	cmp	r3, #0
   16340:	ba00000c 	blt	16378 <CUSBBluetoothDevice::Configure()+0xd0>
   16344:	e5943018 	ldr	r3, [r4, #24]
   16348:	e3530000 	cmp	r3, #0
   1634c:	1a000026 	bne	163ec <CUSBBluetoothDevice::Configure()+0x144>
   16350:	ebffe14b 	bl	e884 <CUSBFunction::GetDevice() const>
   16354:	e1a07000 	mov	r7, r0
   16358:	e3a00014 	mov	r0, #20
   1635c:	eb0056e3 	bl	2bef0 <operator new(unsigned int)>
   16360:	e1a02005 	mov	r2, r5
   16364:	e1a01007 	mov	r1, r7
   16368:	e1a06000 	mov	r6, r0
   1636c:	ebffdf7a 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16370:	e5846018 	str	r6, [r4, #24]
   16374:	eaffffd5 	b	162d0 <CUSBBluetoothDevice::Configure()+0x28>
   16378:	e5943014 	ldr	r3, [r4, #20]
   1637c:	e3530000 	cmp	r3, #0
   16380:	1a00001a 	bne	163f0 <CUSBBluetoothDevice::Configure()+0x148>
   16384:	ebffe13e 	bl	e884 <CUSBFunction::GetDevice() const>
   16388:	e1a07000 	mov	r7, r0
   1638c:	e3a00014 	mov	r0, #20
   16390:	eb0056d6 	bl	2bef0 <operator new(unsigned int)>
   16394:	e1a02005 	mov	r2, r5
   16398:	e1a01007 	mov	r1, r7
   1639c:	e1a06000 	mov	r6, r0
   163a0:	ebffdf6d 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   163a4:	e5846014 	str	r6, [r4, #20]
   163a8:	eaffffc8 	b	162d0 <CUSBBluetoothDevice::Configure()+0x28>
   163ac:	e1a00004 	mov	r0, r4
   163b0:	e59f110c 	ldr	r1, [pc, #268]	; 164c4 <CUSBBluetoothDevice::Configure()+0x21c>
   163b4:	ebffe15d 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   163b8:	e1a00006 	mov	r0, r6
   163bc:	e28dd014 	add	sp, sp, #20
   163c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   163c4:	eb00408f 	bl	26608 <CLogger::Get()>
   163c8:	e3a06000 	mov	r6, #0
   163cc:	e3a02002 	mov	r2, #2
   163d0:	e59f10ec 	ldr	r1, [pc, #236]	; 164c4 <CUSBBluetoothDevice::Configure()+0x21c>
   163d4:	e3023e10 	movw	r3, #11792	; 0x2e10
   163d8:	e3403003 	movt	r3, #3
   163dc:	eb003fca 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   163e0:	e1a00006 	mov	r0, r6
   163e4:	e28dd014 	add	sp, sp, #20
   163e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   163ec:	e1a00004 	mov	r0, r4
   163f0:	e59f10cc 	ldr	r1, [pc, #204]	; 164c4 <CUSBBluetoothDevice::Configure()+0x21c>
   163f4:	e3a06000 	mov	r6, #0
   163f8:	ebffe14c 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   163fc:	e1a00006 	mov	r0, r6
   16400:	e28dd014 	add	sp, sp, #20
   16404:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16408:	e5943014 	ldr	r3, [r4, #20]
   1640c:	e3530000 	cmp	r3, #0
   16410:	0afffff5 	beq	163ec <CUSBBluetoothDevice::Configure()+0x144>
   16414:	e5943018 	ldr	r3, [r4, #24]
   16418:	e3530000 	cmp	r3, #0
   1641c:	0afffff2 	beq	163ec <CUSBBluetoothDevice::Configure()+0x144>
   16420:	e5943010 	ldr	r3, [r4, #16]
   16424:	e3530000 	cmp	r3, #0
   16428:	0affffef 	beq	163ec <CUSBBluetoothDevice::Configure()+0x144>
   1642c:	e1a00004 	mov	r0, r4
   16430:	ebffe043 	bl	e544 <CUSBFunction::Configure()>
   16434:	e2506000 	subs	r6, r0, #0
   16438:	0a00001a 	beq	164a8 <CUSBBluetoothDevice::Configure()+0x200>
   1643c:	e5940010 	ldr	r0, [r4, #16]
   16440:	ebffdfbd 	bl	e33c <CUSBEndpoint::GetMaxPacketSize() const>
   16444:	eb0056af 	bl	2bf08 <operator new[](unsigned int)>
   16448:	e5840020 	str	r0, [r4, #32]
   1644c:	e1a0000d 	mov	r0, sp
   16450:	eb004c65 	bl	295ec <CString::CString()>
   16454:	e3083f74 	movw	r3, #36724	; 0x8f74
   16458:	e3403003 	movt	r3, #3
   1645c:	e1a0000d 	mov	r0, sp
   16460:	e3021e34 	movw	r1, #11828	; 0x2e34
   16464:	e3401003 	movt	r1, #3
   16468:	e5932000 	ldr	r2, [r3]
   1646c:	e282c001 	add	ip, r2, #1
   16470:	e583c000 	str	ip, [r3]
   16474:	eb00502c 	bl	2a52c <CString::Format(char const*, ...)>
   16478:	eb003d67 	bl	25a1c <CDeviceNameService::Get()>
   1647c:	e1a07000 	mov	r7, r0
   16480:	e1a0000d 	mov	r0, sp
   16484:	eb004c6f 	bl	29648 <CString::operator char const*() const>
   16488:	e1a03005 	mov	r3, r5
   1648c:	e1a01000 	mov	r1, r0
   16490:	e1a02004 	mov	r2, r4
   16494:	e1a00007 	mov	r0, r7
   16498:	eb003ca5 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1649c:	e1a0000d 	mov	r0, sp
   164a0:	eb004c1e 	bl	29520 <CString::~CString()>
   164a4:	eaffffc3 	b	163b8 <CUSBBluetoothDevice::Configure()+0x110>
   164a8:	eb004056 	bl	26608 <CLogger::Get()>
   164ac:	e3013948 	movw	r3, #6472	; 0x1948
   164b0:	e3403003 	movt	r3, #3
   164b4:	e3a02001 	mov	r2, #1
   164b8:	e59f1004 	ldr	r1, [pc, #4]	; 164c4 <CUSBBluetoothDevice::Configure()+0x21c>
   164bc:	eb003f92 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   164c0:	eaffffbc 	b	163b8 <CUSBBluetoothDevice::Configure()+0x110>
   164c4:	00032d9c 	.word	0x00032d9c

000164c8 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   164c8:	e280001c 	add	r0, r0, #28
   164cc:	e12fff1e 	bx	lr

000164d0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   164d0:	e92d4070 	push	{r4, r5, r6, lr}
   164d4:	e1a04000 	mov	r4, r0
   164d8:	e59f3070 	ldr	r3, [pc, #112]	; 16550 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   164dc:	e5905018 	ldr	r5, [r0, #24]
   164e0:	e2832038 	add	r2, r3, #56	; 0x38
   164e4:	e5803000 	str	r3, [r0]
   164e8:	e5802010 	str	r2, [r0, #16]
   164ec:	e3550000 	cmp	r5, #0
   164f0:	0a000004 	beq	16508 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   164f4:	e1a00005 	mov	r0, r5
   164f8:	ebffdf7b 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   164fc:	e1a00005 	mov	r0, r5
   16500:	e3a01014 	mov	r1, #20
   16504:	eb005687 	bl	2bf28 <operator delete(void*, unsigned int)>
   16508:	e5945014 	ldr	r5, [r4, #20]
   1650c:	e3a03000 	mov	r3, #0
   16510:	e5843018 	str	r3, [r4, #24]
   16514:	e1550003 	cmp	r5, r3
   16518:	0a000004 	beq	16530 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   1651c:	e1a00005 	mov	r0, r5
   16520:	ebffdf71 	bl	e2ec <CUSBEndpoint::~CUSBEndpoint()>
   16524:	e1a00005 	mov	r0, r5
   16528:	e3a01014 	mov	r1, #20
   1652c:	eb00567d 	bl	2bf28 <operator delete(void*, unsigned int)>
   16530:	e3a03000 	mov	r3, #0
   16534:	e284001c 	add	r0, r4, #28
   16538:	e5843014 	str	r3, [r4, #20]
   1653c:	eb0055a9 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   16540:	e1a00004 	mov	r0, r4
   16544:	ebffdfd5 	bl	e4a0 <CUSBFunction::~CUSBFunction()>
   16548:	e1a00004 	mov	r0, r4
   1654c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16550:	00032e44 	.word	0x00032e44

00016554 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16554:	e2400010 	sub	r0, r0, #16
   16558:	eaffffdc 	b	164d0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

0001655c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1655c:	e92d4010 	push	{r4, lr}
   16560:	e1a04000 	mov	r4, r0
   16564:	ebffffd9 	bl	164d0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   16568:	e1a00004 	mov	r0, r4
   1656c:	e3a01024 	mov	r1, #36	; 0x24
   16570:	eb00566c 	bl	2bf28 <operator delete(void*, unsigned int)>
   16574:	e1a00004 	mov	r0, r4
   16578:	e8bd8010 	pop	{r4, pc}

0001657c <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1657c:	e2400010 	sub	r0, r0, #16
   16580:	eafffff5 	b	1655c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00016584 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   16584:	e92d4070 	push	{r4, r5, r6, lr}
   16588:	e5903014 	ldr	r3, [r0, #20]
   1658c:	e24dd030 	sub	sp, sp, #48	; 0x30
   16590:	e3530000 	cmp	r3, #0
   16594:	0a000028 	beq	1663c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb8>
   16598:	e3510000 	cmp	r1, #0
   1659c:	0a00002c 	beq	16654 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   165a0:	e1a04000 	mov	r4, r0
   165a4:	e3a05000 	mov	r5, #0
   165a8:	e1a06002 	mov	r6, r2
   165ac:	e28d0008 	add	r0, sp, #8
   165b0:	e1a02001 	mov	r2, r1
   165b4:	e58d5000 	str	r5, [sp]
   165b8:	e1a01003 	mov	r1, r3
   165bc:	e3a03d19 	mov	r3, #1600	; 0x640
   165c0:	ebfff42b 	bl	13674 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   165c4:	e28d0008 	add	r0, sp, #8
   165c8:	ebfff4a7 	bl	1386c <CUSBRequest::SetCompleteOnNAK()>
   165cc:	e1a00004 	mov	r0, r4
   165d0:	ebffe0c0 	bl	e8d8 <CUSBFunction::GetHost() const>
   165d4:	e5903000 	ldr	r3, [r0]
   165d8:	e1a02005 	mov	r2, r5
   165dc:	e28d1008 	add	r1, sp, #8
   165e0:	e5933008 	ldr	r3, [r3, #8]
   165e4:	e12fff33 	blx	r3
   165e8:	e2504000 	subs	r4, r0, #0
   165ec:	0a00000c 	beq	16624 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa0>
   165f0:	e28d0008 	add	r0, sp, #8
   165f4:	ebfff450 	bl	1373c <CUSBRequest::GetResultLength() const>
   165f8:	e3500000 	cmp	r0, #0
   165fc:	0a000008 	beq	16624 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa0>
   16600:	e3560000 	cmp	r6, #0
   16604:	15860000 	strne	r0, [r6]
   16608:	1a000006 	bne	16628 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa4>
   1660c:	e3021ea8 	movw	r1, #11944	; 0x2ea8
   16610:	e3401003 	movt	r1, #3
   16614:	e3020a98 	movw	r0, #10904	; 0x2a98
   16618:	e3400003 	movt	r0, #3
   1661c:	e3a020c3 	mov	r2, #195	; 0xc3
   16620:	eb003a53 	bl	24f74 <assertion_failed>
   16624:	e3a04000 	mov	r4, #0
   16628:	e28d0008 	add	r0, sp, #8
   1662c:	ebfff431 	bl	136f8 <CUSBRequest::~CUSBRequest()>
   16630:	e1a00004 	mov	r0, r4
   16634:	e28dd030 	add	sp, sp, #48	; 0x30
   16638:	e8bd8070 	pop	{r4, r5, r6, pc}
   1663c:	e3021ea8 	movw	r1, #11944	; 0x2ea8
   16640:	e3401003 	movt	r1, #3
   16644:	e3020a24 	movw	r0, #10788	; 0x2a24
   16648:	e3400003 	movt	r0, #3
   1664c:	e3a020b2 	mov	r2, #178	; 0xb2
   16650:	eb003a47 	bl	24f74 <assertion_failed>
   16654:	e3021ea8 	movw	r1, #11944	; 0x2ea8
   16658:	e3401003 	movt	r1, #3
   1665c:	e3020270 	movw	r0, #8816	; 0x2270
   16660:	e3400003 	movt	r0, #3
   16664:	e3a020b3 	mov	r2, #179	; 0xb3
   16668:	eb003a41 	bl	24f74 <assertion_failed>

0001666c <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1666c:	e2400010 	sub	r0, r0, #16
   16670:	eaffffc3 	b	16584 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

00016674 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   16674:	e92d4070 	push	{r4, r5, r6, lr}
   16678:	e5903018 	ldr	r3, [r0, #24]
   1667c:	e24dd008 	sub	sp, sp, #8
   16680:	e3530000 	cmp	r3, #0
   16684:	0a000011 	beq	166d0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   16688:	e1a05001 	mov	r5, r1
   1668c:	e3510000 	cmp	r1, #0
   16690:	0a000014 	beq	166e8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x74>
   16694:	e1a06002 	mov	r6, r2
   16698:	e3520d19 	cmp	r2, #1600	; 0x640
   1669c:	8a000017 	bhi	16700 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   166a0:	e1a04000 	mov	r4, r0
   166a4:	ebffe08b 	bl	e8d8 <CUSBFunction::GetHost() const>
   166a8:	e3a0c000 	mov	ip, #0
   166ac:	e1a03006 	mov	r3, r6
   166b0:	e1a02005 	mov	r2, r5
   166b4:	e5941018 	ldr	r1, [r4, #24]
   166b8:	e58dc000 	str	ip, [sp]
   166bc:	ebffec6a 	bl	1186c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   166c0:	e1e00000 	mvn	r0, r0
   166c4:	e1a00fa0 	lsr	r0, r0, #31
   166c8:	e28dd008 	add	sp, sp, #8
   166cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   166d0:	e3021ea8 	movw	r1, #11944	; 0x2ea8
   166d4:	e3401003 	movt	r1, #3
   166d8:	e3020aac 	movw	r0, #10924	; 0x2aac
   166dc:	e3400003 	movt	r0, #3
   166e0:	e3a020aa 	mov	r2, #170	; 0xaa
   166e4:	eb003a22 	bl	24f74 <assertion_failed>
   166e8:	e3021ea8 	movw	r1, #11944	; 0x2ea8
   166ec:	e3401003 	movt	r1, #3
   166f0:	e3020270 	movw	r0, #8816	; 0x2270
   166f4:	e3400003 	movt	r0, #3
   166f8:	e3a020ab 	mov	r2, #171	; 0xab
   166fc:	eb003a1c 	bl	24f74 <assertion_failed>
   16700:	e3021ea8 	movw	r1, #11944	; 0x2ea8
   16704:	e3401003 	movt	r1, #3
   16708:	e3020ebc 	movw	r0, #11964	; 0x2ebc
   1670c:	e3400003 	movt	r0, #3
   16710:	e3a020ac 	mov	r2, #172	; 0xac
   16714:	eb003a16 	bl	24f74 <assertion_failed>

00016718 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   16718:	e2400010 	sub	r0, r0, #16
   1671c:	eaffffd4 	b	16674 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

00016720 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   16720:	e280000c 	add	r0, r0, #12
   16724:	e12fff1e 	bx	lr

00016728 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   16728:	e92d4010 	push	{r4, lr}
   1672c:	e1a04000 	mov	r4, r0
   16730:	ebffdff1 	bl	e6fc <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16734:	e3023e3c 	movw	r3, #11836	; 0x2e3c
   16738:	e3403003 	movt	r3, #3
   1673c:	e2832008 	add	r2, r3, #8
   16740:	e284001c 	add	r0, r4, #28
   16744:	e2833040 	add	r3, r3, #64	; 0x40
   16748:	e5842000 	str	r2, [r4]
   1674c:	e5843010 	str	r3, [r4, #16]
   16750:	e3a02000 	mov	r2, #0
   16754:	e5842014 	str	r2, [r4, #20]
   16758:	e5842018 	str	r2, [r4, #24]
   1675c:	eb00551e 	bl	2bbdc <CMACAddress::CMACAddress()>
   16760:	e1a00004 	mov	r0, r4
   16764:	e8bd8010 	pop	{r4, pc}

00016768 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   16768:	e92d4030 	push	{r4, r5, lr}
   1676c:	e1a04001 	mov	r4, r1
   16770:	e1a05000 	mov	r5, r0
   16774:	e24dd01c 	sub	sp, sp, #28
   16778:	ebffe041 	bl	e884 <CUSBFunction::GetDevice() const>
   1677c:	e1a01000 	mov	r1, r0
   16780:	e28d000c 	add	r0, sp, #12
   16784:	eb000217 	bl	16fe8 <CUSBString::CUSBString(CUSBDevice*)>
   16788:	e3540000 	cmp	r4, #0
   1678c:	0a000007 	beq	167b0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x48>
   16790:	e28d000c 	add	r0, sp, #12
   16794:	eb0002f1 	bl	17360 <CUSBString::GetLanguageID()>
   16798:	e1a01004 	mov	r1, r4
   1679c:	e1a02000 	mov	r2, r0
   167a0:	e28d000c 	add	r0, sp, #12
   167a4:	eb000265 	bl	17140 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   167a8:	e2504000 	subs	r4, r0, #0
   167ac:	1a000005 	bne	167c8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x60>
   167b0:	e3a04000 	mov	r4, #0
   167b4:	e28d000c 	add	r0, sp, #12
   167b8:	eb000250 	bl	17100 <CUSBString::~CUSBString()>
   167bc:	e1a00004 	mov	r0, r4
   167c0:	e28dd01c 	add	sp, sp, #28
   167c4:	e8bd8030 	pop	{r4, r5, pc}
   167c8:	e28d000c 	add	r0, sp, #12
   167cc:	eb0002e1 	bl	17358 <CUSBString::Get() const>
   167d0:	e3500000 	cmp	r0, #0
   167d4:	12802002 	addne	r2, r0, #2
   167d8:	128d1004 	addne	r1, sp, #4
   167dc:	1280000e 	addne	r0, r0, #14
   167e0:	0a00001a 	beq	16850 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe8>
   167e4:	e15230d2 	ldrsb	r3, [r2, #-2]
   167e8:	e3530039 	cmp	r3, #57	; 0x39
   167ec:	e6ef3073 	uxtb	r3, r3
   167f0:	c2433007 	subgt	r3, r3, #7
   167f4:	c6ef3073 	uxtbgt	r3, r3
   167f8:	e2433030 	sub	r3, r3, #48	; 0x30
   167fc:	e6efc073 	uxtb	ip, r3
   16800:	e35c000f 	cmp	ip, #15
   16804:	8affffe9 	bhi	167b0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x48>
   16808:	e15230d1 	ldrsb	r3, [r2, #-1]
   1680c:	e3530039 	cmp	r3, #57	; 0x39
   16810:	e6ef3073 	uxtb	r3, r3
   16814:	c2433007 	subgt	r3, r3, #7
   16818:	c6ef3073 	uxtbgt	r3, r3
   1681c:	e2433030 	sub	r3, r3, #48	; 0x30
   16820:	e6ef3073 	uxtb	r3, r3
   16824:	e353000f 	cmp	r3, #15
   16828:	8affffe0 	bhi	167b0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x48>
   1682c:	e2822002 	add	r2, r2, #2
   16830:	e183320c 	orr	r3, r3, ip, lsl #4
   16834:	e1500002 	cmp	r0, r2
   16838:	e4c13001 	strb	r3, [r1], #1
   1683c:	1affffe8 	bne	167e4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   16840:	e28d1004 	add	r1, sp, #4
   16844:	e285001c 	add	r0, r5, #28
   16848:	eb005506 	bl	2bc68 <CMACAddress::Set(unsigned char const*)>
   1684c:	eaffffd8 	b	167b4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x4c>
   16850:	e3021ea8 	movw	r1, #11944	; 0x2ea8
   16854:	e3401003 	movt	r1, #3
   16858:	e3020edc 	movw	r0, #11996	; 0x2edc
   1685c:	e3400003 	movt	r0, #3
   16860:	e3a020d3 	mov	r2, #211	; 0xd3
   16864:	eb0039c2 	bl	24f74 <assertion_failed>

00016868 <CUSBCDCEthernetDevice::Configure()>:
   16868:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1686c:	e1a05000 	mov	r5, r0
   16870:	e24dd01c 	sub	sp, sp, #28
   16874:	ea000002 	b	16884 <CUSBCDCEthernetDevice::Configure()+0x1c>
   16878:	e5d43002 	ldrb	r3, [r4, #2]
   1687c:	e353000f 	cmp	r3, #15
   16880:	0a000013 	beq	168d4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   16884:	e3a01024 	mov	r1, #36	; 0x24
   16888:	e1a00005 	mov	r0, r5
   1688c:	ebffe01c 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   16890:	e2504000 	subs	r4, r0, #0
   16894:	1afffff7 	bne	16878 <CUSBCDCEthernetDevice::Configure()+0x10>
   16898:	e1a00005 	mov	r0, r5
   1689c:	e59f11f0 	ldr	r1, [pc, #496]	; 16a94 <CUSBCDCEthernetDevice::Configure()+0x22c>
   168a0:	ebffe022 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   168a4:	e1a00004 	mov	r0, r4
   168a8:	e28dd01c 	add	sp, sp, #28
   168ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   168b0:	e5d32006 	ldrb	r2, [r3, #6]
   168b4:	e3520000 	cmp	r2, #0
   168b8:	1a000005 	bne	168d4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   168bc:	e5d32007 	ldrb	r2, [r3, #7]
   168c0:	e3520000 	cmp	r2, #0
   168c4:	1a000002 	bne	168d4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   168c8:	e5d33004 	ldrb	r3, [r3, #4]
   168cc:	e3530001 	cmp	r3, #1
   168d0:	8a000008 	bhi	168f8 <CUSBCDCEthernetDevice::Configure()+0x90>
   168d4:	e3a01004 	mov	r1, #4
   168d8:	e1a00005 	mov	r0, r5
   168dc:	ebffe008 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   168e0:	e2503000 	subs	r3, r0, #0
   168e4:	0a000037 	beq	169c8 <CUSBCDCEthernetDevice::Configure()+0x160>
   168e8:	e5d32005 	ldrb	r2, [r3, #5]
   168ec:	e352000a 	cmp	r2, #10
   168f0:	1afffff7 	bne	168d4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   168f4:	eaffffed 	b	168b0 <CUSBCDCEthernetDevice::Configure()+0x48>
   168f8:	e5d41003 	ldrb	r1, [r4, #3]
   168fc:	e1a00005 	mov	r0, r5
   16900:	ebffff98 	bl	16768 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   16904:	e2504000 	subs	r4, r0, #0
   16908:	0a000035 	beq	169e4 <CUSBCDCEthernetDevice::Configure()+0x17c>
   1690c:	e28d0008 	add	r0, sp, #8
   16910:	eb004b35 	bl	295ec <CString::CString()>
   16914:	e28d1008 	add	r1, sp, #8
   16918:	e285001c 	add	r0, r5, #28
   1691c:	eb00552b 	bl	2bdd0 <CMACAddress::Format(CString*) const>
   16920:	eb003f38 	bl	26608 <CLogger::Get()>
   16924:	e1a04000 	mov	r4, r0
   16928:	e28d0008 	add	r0, sp, #8
   1692c:	eb004b45 	bl	29648 <CString::operator char const*() const>
   16930:	e3023b4c 	movw	r3, #11084	; 0x2b4c
   16934:	e3403003 	movt	r3, #3
   16938:	e58d0000 	str	r0, [sp]
   1693c:	e3a02004 	mov	r2, #4
   16940:	e1a00004 	mov	r0, r4
   16944:	e59f1148 	ldr	r1, [pc, #328]	; 16a94 <CUSBCDCEthernetDevice::Configure()+0x22c>
   16948:	eb003e6f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1694c:	ea000003 	b	16960 <CUSBCDCEthernetDevice::Configure()+0xf8>
   16950:	e5d43003 	ldrb	r3, [r4, #3]
   16954:	e203303f 	and	r3, r3, #63	; 0x3f
   16958:	e3530002 	cmp	r3, #2
   1695c:	0a000027 	beq	16a00 <CUSBCDCEthernetDevice::Configure()+0x198>
   16960:	e3a01005 	mov	r1, #5
   16964:	e1a00005 	mov	r0, r5
   16968:	ebffdfe5 	bl	e904 <CUSBFunction::GetDescriptor(unsigned char)>
   1696c:	e2504000 	subs	r4, r0, #0
   16970:	1afffff6 	bne	16950 <CUSBCDCEthernetDevice::Configure()+0xe8>
   16974:	e5953014 	ldr	r3, [r5, #20]
   16978:	e1a00005 	mov	r0, r5
   1697c:	e3530000 	cmp	r3, #0
   16980:	0a00002f 	beq	16a44 <CUSBCDCEthernetDevice::Configure()+0x1dc>
   16984:	e5953018 	ldr	r3, [r5, #24]
   16988:	e3530000 	cmp	r3, #0
   1698c:	0a00002c 	beq	16a44 <CUSBCDCEthernetDevice::Configure()+0x1dc>
   16990:	ebffdeeb 	bl	e544 <CUSBFunction::Configure()>
   16994:	e2504000 	subs	r4, r0, #0
   16998:	1a00003a 	bne	16a88 <CUSBCDCEthernetDevice::Configure()+0x220>
   1699c:	eb003f19 	bl	26608 <CLogger::Get()>
   169a0:	e3013948 	movw	r3, #6472	; 0x1948
   169a4:	e3403003 	movt	r3, #3
   169a8:	e3a02001 	mov	r2, #1
   169ac:	e59f10e0 	ldr	r1, [pc, #224]	; 16a94 <CUSBCDCEthernetDevice::Configure()+0x22c>
   169b0:	eb003e55 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   169b4:	e28d0008 	add	r0, sp, #8
   169b8:	eb004ad8 	bl	29520 <CString::~CString()>
   169bc:	e1a00004 	mov	r0, r4
   169c0:	e28dd01c 	add	sp, sp, #28
   169c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   169c8:	e1a00005 	mov	r0, r5
   169cc:	e1a04003 	mov	r4, r3
   169d0:	e59f10bc 	ldr	r1, [pc, #188]	; 16a94 <CUSBCDCEthernetDevice::Configure()+0x22c>
   169d4:	ebffdfd5 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   169d8:	e1a00004 	mov	r0, r4
   169dc:	e28dd01c 	add	sp, sp, #28
   169e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   169e4:	eb003f07 	bl	26608 <CLogger::Get()>
   169e8:	e3023d2c 	movw	r3, #11564	; 0x2d2c
   169ec:	e3403003 	movt	r3, #3
   169f0:	e3a02001 	mov	r2, #1
   169f4:	e59f1098 	ldr	r1, [pc, #152]	; 16a94 <CUSBCDCEthernetDevice::Configure()+0x22c>
   169f8:	eb003e43 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   169fc:	eaffffa8 	b	168a4 <CUSBCDCEthernetDevice::Configure()+0x3c>
   16a00:	e1d430d2 	ldrsb	r3, [r4, #2]
   16a04:	e1a00005 	mov	r0, r5
   16a08:	e3530000 	cmp	r3, #0
   16a0c:	ba000010 	blt	16a54 <CUSBCDCEthernetDevice::Configure()+0x1ec>
   16a10:	e5953018 	ldr	r3, [r5, #24]
   16a14:	e3530000 	cmp	r3, #0
   16a18:	1a000009 	bne	16a44 <CUSBCDCEthernetDevice::Configure()+0x1dc>
   16a1c:	ebffdf98 	bl	e884 <CUSBFunction::GetDevice() const>
   16a20:	e1a07000 	mov	r7, r0
   16a24:	e3a00014 	mov	r0, #20
   16a28:	eb005530 	bl	2bef0 <operator new(unsigned int)>
   16a2c:	e1a02004 	mov	r2, r4
   16a30:	e1a01007 	mov	r1, r7
   16a34:	e1a06000 	mov	r6, r0
   16a38:	ebffddc7 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16a3c:	e5856018 	str	r6, [r5, #24]
   16a40:	eaffffc6 	b	16960 <CUSBCDCEthernetDevice::Configure()+0xf8>
   16a44:	e59f1048 	ldr	r1, [pc, #72]	; 16a94 <CUSBCDCEthernetDevice::Configure()+0x22c>
   16a48:	e3a04000 	mov	r4, #0
   16a4c:	ebffdfb7 	bl	e930 <CUSBFunction::ConfigurationError(char const*) const>
   16a50:	eaffffd7 	b	169b4 <CUSBCDCEthernetDevice::Configure()+0x14c>
   16a54:	e5953014 	ldr	r3, [r5, #20]
   16a58:	e3530000 	cmp	r3, #0
   16a5c:	1afffff8 	bne	16a44 <CUSBCDCEthernetDevice::Configure()+0x1dc>
   16a60:	ebffdf87 	bl	e884 <CUSBFunction::GetDevice() const>
   16a64:	e1a07000 	mov	r7, r0
   16a68:	e3a00014 	mov	r0, #20
   16a6c:	eb00551f 	bl	2bef0 <operator new(unsigned int)>
   16a70:	e1a02004 	mov	r2, r4
   16a74:	e1a01007 	mov	r1, r7
   16a78:	e1a06000 	mov	r6, r0
   16a7c:	ebffddb6 	bl	e15c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16a80:	e5856014 	str	r6, [r5, #20]
   16a84:	eaffffb5 	b	16960 <CUSBCDCEthernetDevice::Configure()+0xf8>
   16a88:	e2850010 	add	r0, r5, #16
   16a8c:	eb0054f2 	bl	2be5c <CNetDevice::AddNetDevice()>
   16a90:	eaffffc7 	b	169b4 <CUSBCDCEthernetDevice::Configure()+0x14c>
   16a94:	00032ea0 	.word	0x00032ea0

00016a98 <CNetDevice::IsLinkUp()>:
   16a98:	e3a00001 	mov	r0, #1
   16a9c:	e12fff1e 	bx	lr

00016aa0 <CNetDevice::GetLinkSpeed()>:
   16aa0:	e3a00006 	mov	r0, #6
   16aa4:	e12fff1e 	bx	lr

00016aa8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   16aa8:	e92d4070 	push	{r4, r5, r6, lr}
   16aac:	e3a03000 	mov	r3, #0
   16ab0:	e081c002 	add	ip, r1, r2
   16ab4:	e3510000 	cmp	r1, #0
   16ab8:	e8800006 	stm	r0, {r1, r2}
   16abc:	e5801010 	str	r1, [r0, #16]
   16ac0:	e5801018 	str	r1, [r0, #24]
   16ac4:	e580c00c 	str	ip, [r0, #12]
   16ac8:	e5c03008 	strb	r3, [r0, #8]
   16acc:	e5803014 	str	r3, [r0, #20]
   16ad0:	0a00002b 	beq	16b84 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xdc>
   16ad4:	e2423004 	sub	r3, r2, #4
   16ad8:	e3530f7f 	cmp	r3, #508	; 0x1fc
   16adc:	88bd8070 	pophi	{r4, r5, r6, pc}
   16ae0:	e5d13000 	ldrb	r3, [r1]
   16ae4:	e3530009 	cmp	r3, #9
   16ae8:	18bd8070 	popne	{r4, r5, r6, pc}
   16aec:	e5d13001 	ldrb	r3, [r1, #1]
   16af0:	e3530002 	cmp	r3, #2
   16af4:	18bd8070 	popne	{r4, r5, r6, pc}
   16af8:	e1d130b2 	ldrh	r3, [r1, #2]
   16afc:	e1530002 	cmp	r3, r2
   16b00:	88bd8070 	pophi	{r4, r5, r6, pc}
   16b04:	e3a05000 	mov	r5, #0
   16b08:	3081c003 	addcc	ip, r1, r3
   16b0c:	e1a04005 	mov	r4, r5
   16b10:	3580c00c 	strcc	ip, [r0, #12]
   16b14:	ea000005 	b	16b30 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x88>
   16b18:	e3530005 	cmp	r3, #5
   16b1c:	0a000022 	beq	16bac <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x104>
   16b20:	e3530002 	cmp	r3, #2
   16b24:	0a00001c 	beq	16b9c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf4>
   16b28:	e1a01002 	mov	r1, r2
   16b2c:	e1a04003 	mov	r4, r3
   16b30:	e2813002 	add	r3, r1, #2
   16b34:	e15c0003 	cmp	ip, r3
   16b38:	9a000022 	bls	16bc8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x120>
   16b3c:	e5d1e000 	ldrb	lr, [r1]
   16b40:	e5d13001 	ldrb	r3, [r1, #1]
   16b44:	e081200e 	add	r2, r1, lr
   16b48:	e152000c 	cmp	r2, ip
   16b4c:	8a00000a 	bhi	16b7c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd4>
   16b50:	e3530004 	cmp	r3, #4
   16b54:	1affffef 	bne	16b18 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x70>
   16b58:	e3540000 	cmp	r4, #0
   16b5c:	0a000006 	beq	16b7c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd4>
   16b60:	e5d15005 	ldrb	r5, [r1, #5]
   16b64:	e3a04009 	mov	r4, #9
   16b68:	e2455001 	sub	r5, r5, #1
   16b6c:	e16f5f15 	clz	r5, r5
   16b70:	e1a052a5 	lsr	r5, r5, #5
   16b74:	e15e0004 	cmp	lr, r4
   16b78:	0affffea 	beq	16b28 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x80>
   16b7c:	e5801018 	str	r1, [r0, #24]
   16b80:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b84:	e3021eec 	movw	r1, #12012	; 0x2eec
   16b88:	e3401003 	movt	r1, #3
   16b8c:	e3020f00 	movw	r0, #12032	; 0x2f00
   16b90:	e3400003 	movt	r0, #3
   16b94:	e3a02024 	mov	r2, #36	; 0x24
   16b98:	eb0038f5 	bl	24f74 <assertion_failed>
   16b9c:	e3540000 	cmp	r4, #0
   16ba0:	1afffff5 	bne	16b7c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd4>
   16ba4:	e3a04009 	mov	r4, #9
   16ba8:	eafffff1 	b	16b74 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xcc>
   16bac:	e31400fd 	tst	r4, #253	; 0xfd
   16bb0:	0afffff1 	beq	16b7c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd4>
   16bb4:	e3550000 	cmp	r5, #0
   16bb8:	13a04009 	movne	r4, #9
   16bbc:	13a05001 	movne	r5, #1
   16bc0:	03a04007 	moveq	r4, #7
   16bc4:	eaffffea 	b	16b74 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xcc>
   16bc8:	e151000c 	cmp	r1, ip
   16bcc:	1affffea 	bne	16b7c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd4>
   16bd0:	e3a03001 	mov	r3, #1
   16bd4:	e5c03008 	strb	r3, [r0, #8]
   16bd8:	e8bd8070 	pop	{r4, r5, r6, pc}

00016bdc <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   16bdc:	e92d4010 	push	{r4, lr}
   16be0:	e3510000 	cmp	r1, #0
   16be4:	0a00000e 	beq	16c24 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x48>
   16be8:	e591e000 	ldr	lr, [r1]
   16bec:	e591c004 	ldr	ip, [r1, #4]
   16bf0:	e5d12008 	ldrb	r2, [r1, #8]
   16bf4:	e591400c 	ldr	r4, [r1, #12]
   16bf8:	e580e000 	str	lr, [r0]
   16bfc:	e580c004 	str	ip, [r0, #4]
   16c00:	e591e010 	ldr	lr, [r1, #16]
   16c04:	e591c014 	ldr	ip, [r1, #20]
   16c08:	e5c02008 	strb	r2, [r0, #8]
   16c0c:	e5912018 	ldr	r2, [r1, #24]
   16c10:	e5802018 	str	r2, [r0, #24]
   16c14:	e580400c 	str	r4, [r0, #12]
   16c18:	e580e010 	str	lr, [r0, #16]
   16c1c:	e580c014 	str	ip, [r0, #20]
   16c20:	e8bd8010 	pop	{r4, pc}
   16c24:	e3021eec 	movw	r1, #12012	; 0x2eec
   16c28:	e3401003 	movt	r1, #3
   16c2c:	e3020f10 	movw	r0, #12048	; 0x2f10
   16c30:	e3400003 	movt	r0, #3
   16c34:	e3a02082 	mov	r2, #130	; 0x82
   16c38:	eb0038cd 	bl	24f74 <assertion_failed>

00016c3c <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   16c3c:	e12fff1e 	bx	lr

00016c40 <CUSBConfigurationParser::IsValid() const>:
   16c40:	e5d00008 	ldrb	r0, [r0, #8]
   16c44:	e12fff1e 	bx	lr

00016c48 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   16c48:	e5d03008 	ldrb	r3, [r0, #8]
   16c4c:	e92d4070 	push	{r4, r5, r6, lr}
   16c50:	e3530000 	cmp	r3, #0
   16c54:	0a000030 	beq	16d1c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd4>
   16c58:	e590e010 	ldr	lr, [r0, #16]
   16c5c:	e590c00c 	ldr	ip, [r0, #12]
   16c60:	e15e000c 	cmp	lr, ip
   16c64:	2a00002a 	bcs	16d14 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xcc>
   16c68:	e5de3000 	ldrb	r3, [lr]
   16c6c:	e5de2001 	ldrb	r2, [lr, #1]
   16c70:	e08e3003 	add	r3, lr, r3
   16c74:	e153000c 	cmp	r3, ip
   16c78:	8a000018 	bhi	16ce0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   16c7c:	e2415005 	sub	r5, r1, #5
   16c80:	e3520004 	cmp	r2, #4
   16c84:	03510005 	cmpeq	r1, #5
   16c88:	e16f5f15 	clz	r5, r5
   16c8c:	e1a052a5 	lsr	r5, r5, #5
   16c90:	0a00001f 	beq	16d14 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xcc>
   16c94:	e1510002 	cmp	r1, r2
   16c98:	1a000008 	bne	16cc0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   16c9c:	ea000015 	b	16cf8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xb0>
   16ca0:	e35e0004 	cmp	lr, #4
   16ca4:	13a04000 	movne	r4, #0
   16ca8:	02054001 	andeq	r4, r5, #1
   16cac:	e3540000 	cmp	r4, #0
   16cb0:	1a000017 	bne	16d14 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xcc>
   16cb4:	e15e0001 	cmp	lr, r1
   16cb8:	0a000010 	beq	16d00 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xb8>
   16cbc:	e1a03002 	mov	r3, r2
   16cc0:	e5803010 	str	r3, [r0, #16]
   16cc4:	e153000c 	cmp	r3, ip
   16cc8:	2a000011 	bcs	16d14 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xcc>
   16ccc:	e5d32000 	ldrb	r2, [r3]
   16cd0:	e5d3e001 	ldrb	lr, [r3, #1]
   16cd4:	e0832002 	add	r2, r3, r2
   16cd8:	e152000c 	cmp	r2, ip
   16cdc:	9affffef 	bls	16ca0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x58>
   16ce0:	e3021eec 	movw	r1, #12012	; 0x2eec
   16ce4:	e3401003 	movt	r1, #3
   16ce8:	e3020f20 	movw	r0, #12064	; 0x2f20
   16cec:	e3400003 	movt	r0, #3
   16cf0:	e3a020a9 	mov	r2, #169	; 0xa9
   16cf4:	eb00389e 	bl	24f74 <assertion_failed>
   16cf8:	e1a02003 	mov	r2, r3
   16cfc:	e1a0300e 	mov	r3, lr
   16d00:	e5802010 	str	r2, [r0, #16]
   16d04:	e5803018 	str	r3, [r0, #24]
   16d08:	e5803014 	str	r3, [r0, #20]
   16d0c:	e1a00003 	mov	r0, r3
   16d10:	e8bd8070 	pop	{r4, r5, r6, pc}
   16d14:	e3a03000 	mov	r3, #0
   16d18:	eafffffa 	b	16d08 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xc0>
   16d1c:	e3021eec 	movw	r1, #12012	; 0x2eec
   16d20:	e3401003 	movt	r1, #3
   16d24:	e3000f54 	movw	r0, #3924	; 0xf54
   16d28:	e3400003 	movt	r0, #3
   16d2c:	e3a0209f 	mov	r2, #159	; 0x9f
   16d30:	eb00388f 	bl	24f74 <assertion_failed>

00016d34 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   16d34:	e5d03008 	ldrb	r3, [r0, #8]
   16d38:	e92d4010 	push	{r4, lr}
   16d3c:	e3530000 	cmp	r3, #0
   16d40:	0a000008 	beq	16d68 <CUSBConfigurationParser::GetCurrentDescriptor()+0x34>
   16d44:	e5900014 	ldr	r0, [r0, #20]
   16d48:	e3500000 	cmp	r0, #0
   16d4c:	18bd8010 	popne	{r4, pc}
   16d50:	e3021eec 	movw	r1, #12012	; 0x2eec
   16d54:	e3401003 	movt	r1, #3
   16d58:	e3020f3c 	movw	r0, #12092	; 0x2f3c
   16d5c:	e3400003 	movt	r0, #3
   16d60:	e3a020c8 	mov	r2, #200	; 0xc8
   16d64:	eb003882 	bl	24f74 <assertion_failed>
   16d68:	e3021eec 	movw	r1, #12012	; 0x2eec
   16d6c:	e3401003 	movt	r1, #3
   16d70:	e3000f54 	movw	r0, #3924	; 0xf54
   16d74:	e3400003 	movt	r0, #3
   16d78:	e3a020c7 	mov	r2, #199	; 0xc7
   16d7c:	eb00387c 	bl	24f74 <assertion_failed>

00016d80 <CUSBConfigurationParser::Error(char const*) const>:
   16d80:	e92d4030 	push	{r4, r5, lr}
   16d84:	e2515000 	subs	r5, r1, #0
   16d88:	e24dd00c 	sub	sp, sp, #12
   16d8c:	0a00000f 	beq	16dd0 <CUSBConfigurationParser::Error(char const*) const+0x50>
   16d90:	e1a04000 	mov	r4, r0
   16d94:	eb003e1b 	bl	26608 <CLogger::Get()>
   16d98:	e3023f58 	movw	r3, #12120	; 0x2f58
   16d9c:	e3403003 	movt	r3, #3
   16da0:	e5942000 	ldr	r2, [r4]
   16da4:	e5941018 	ldr	r1, [r4, #24]
   16da8:	e0411002 	sub	r1, r1, r2
   16dac:	e3a02001 	mov	r2, #1
   16db0:	e58d1000 	str	r1, [sp]
   16db4:	e1a01005 	mov	r1, r5
   16db8:	eb003d53 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16dbc:	e1a02005 	mov	r2, r5
   16dc0:	e1c400d0 	ldrd	r0, [r4]
   16dc4:	e28dd00c 	add	sp, sp, #12
   16dc8:	e8bd4030 	pop	{r4, r5, lr}
   16dcc:	ea0039b5 	b	254a8 <debug_hexdump(void const*, unsigned int, char const*)>
   16dd0:	e3021eec 	movw	r1, #12012	; 0x2eec
   16dd4:	e3401003 	movt	r1, #3
   16dd8:	e30109b0 	movw	r0, #6576	; 0x19b0
   16ddc:	e3400003 	movt	r0, #3
   16de0:	e3a020cf 	mov	r2, #207	; 0xcf
   16de4:	eb003862 	bl	24f74 <assertion_failed>

00016de8 <CUSBGamePadDevice::GetInitialState()>:
   16de8:	e2800024 	add	r0, r0, #36	; 0x24
   16dec:	e12fff1e 	bx	lr

00016df0 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   16df0:	e3510000 	cmp	r1, #0
   16df4:	012fff1e 	bxeq	lr
   16df8:	e280cf4a 	add	ip, r0, #296	; 0x128
   16dfc:	e92d4070 	push	{r4, r5, r6, lr}
   16e00:	e1a04000 	mov	r4, r0
   16e04:	e1dcc0b0 	ldrh	ip, [ip]
   16e08:	e15c0002 	cmp	ip, r2
   16e0c:	18bd8070 	popne	{r4, r5, r6, pc}
   16e10:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   16e14:	e3520000 	cmp	r2, #0
   16e18:	08bd8070 	popeq	{r4, r5, r6, pc}
   16e1c:	e1a05000 	mov	r5, r0
   16e20:	e4953024 	ldr	r3, [r5], #36	; 0x24
   16e24:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   16e28:	e12fff33 	blx	r3
   16e2c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   16e30:	e1a01005 	mov	r1, r5
   16e34:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   16e38:	e2400001 	sub	r0, r0, #1
   16e3c:	e8bd4070 	pop	{r4, r5, r6, lr}
   16e40:	e12fff13 	bx	r3

00016e44 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   16e44:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   16e48:	e92d4010 	push	{r4, lr}
   16e4c:	e3530000 	cmp	r3, #0
   16e50:	1a000008 	bne	16e78 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x34>
   16e54:	e3510000 	cmp	r1, #0
   16e58:	e5801124 	str	r1, [r0, #292]	; 0x124
   16e5c:	18bd8010 	popne	{r4, pc}
   16e60:	e3021fe4 	movw	r1, #12260	; 0x2fe4
   16e64:	e3401003 	movt	r1, #3
   16e68:	e303000c 	movw	r0, #12300	; 0x300c
   16e6c:	e3400003 	movt	r0, #3
   16e70:	e3a0204d 	mov	r2, #77	; 0x4d
   16e74:	eb00383e 	bl	24f74 <assertion_failed>
   16e78:	e3021fe4 	movw	r1, #12260	; 0x2fe4
   16e7c:	e3401003 	movt	r1, #3
   16e80:	e3020ff4 	movw	r0, #12276	; 0x2ff4
   16e84:	e3400003 	movt	r0, #3
   16e88:	e3a0204b 	mov	r2, #75	; 0x4b
   16e8c:	eb003838 	bl	24f74 <assertion_failed>

00016e90 <CUSBGamePadDevice::Configure()>:
   16e90:	e2803f4a 	add	r3, r0, #296	; 0x128
   16e94:	e92d4030 	push	{r4, r5, lr}
   16e98:	e24dd00c 	sub	sp, sp, #12
   16e9c:	e1d310b0 	ldrh	r1, [r3]
   16ea0:	e3510000 	cmp	r1, #0
   16ea4:	0a00001d 	beq	16f20 <CUSBGamePadDevice::Configure()+0x90>
   16ea8:	e1a04000 	mov	r4, r0
   16eac:	ebffe852 	bl	10ffc <CUSBHIDDevice::Configure(unsigned int)>
   16eb0:	e2505000 	subs	r5, r0, #0
   16eb4:	0a00000f 	beq	16ef8 <CUSBGamePadDevice::Configure()+0x68>
   16eb8:	e3083f78 	movw	r3, #36728	; 0x8f78
   16ebc:	e3403003 	movt	r3, #3
   16ec0:	e5932000 	ldr	r2, [r3]
   16ec4:	e584212c 	str	r2, [r4, #300]	; 0x12c
   16ec8:	e2822001 	add	r2, r2, #1
   16ecc:	e5832000 	str	r2, [r3]
   16ed0:	eb003ad1 	bl	25a1c <CDeviceNameService::Get()>
   16ed4:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   16ed8:	e1a03004 	mov	r3, r4
   16edc:	e3a01000 	mov	r1, #0
   16ee0:	e58d1000 	str	r1, [sp]
   16ee4:	e59f104c 	ldr	r1, [pc, #76]	; 16f38 <CUSBGamePadDevice::Configure()+0xa8>
   16ee8:	eb003ad7 	bl	25a4c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   16eec:	e1a00005 	mov	r0, r5
   16ef0:	e28dd00c 	add	sp, sp, #12
   16ef4:	e8bd8030 	pop	{r4, r5, pc}
   16ef8:	eb003dc2 	bl	26608 <CLogger::Get()>
   16efc:	e3a02001 	mov	r2, #1
   16f00:	e302317c 	movw	r3, #8572	; 0x217c
   16f04:	e3403003 	movt	r3, #3
   16f08:	e3021f88 	movw	r1, #12168	; 0x2f88
   16f0c:	e3401003 	movt	r1, #3
   16f10:	eb003cfd 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16f14:	e1a00005 	mov	r0, r5
   16f18:	e28dd00c 	add	sp, sp, #12
   16f1c:	e8bd8030 	pop	{r4, r5, pc}
   16f20:	e3021fe4 	movw	r1, #12260	; 0x2fe4
   16f24:	e3401003 	movt	r1, #3
   16f28:	e3010c78 	movw	r0, #7288	; 0x1c78
   16f2c:	e3400003 	movt	r0, #3
   16f30:	e3a02035 	mov	r2, #53	; 0x35
   16f34:	eb00380e 	bl	24f74 <assertion_failed>
   16f38:	00032f90 	.word	0x00032f90

00016f3c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   16f3c:	e92d4010 	push	{r4, lr}
   16f40:	e3a02000 	mov	r2, #0
   16f44:	e1a04000 	mov	r4, r0
   16f48:	ebffe7ec 	bl	10f00 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   16f4c:	e2842f4a 	add	r2, r4, #296	; 0x128
   16f50:	e3a03000 	mov	r3, #0
   16f54:	e59f1024 	ldr	r1, [pc, #36]	; 16f80 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   16f58:	e5841000 	str	r1, [r4]
   16f5c:	e2840024 	add	r0, r4, #36	; 0x24
   16f60:	e5843124 	str	r3, [r4, #292]	; 0x124
   16f64:	e1a01003 	mov	r1, r3
   16f68:	e1c230b0 	strh	r3, [r2]
   16f6c:	e3a02c01 	mov	r2, #256	; 0x100
   16f70:	e584312c 	str	r3, [r4, #300]	; 0x12c
   16f74:	eb00512b 	bl	2b428 <memset>
   16f78:	e1a00004 	mov	r0, r4
   16f7c:	e8bd8010 	pop	{r4, pc}
   16f80:	00032fa0 	.word	0x00032fa0

00016f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   16f84:	e92d4070 	push	{r4, r5, r6, lr}
   16f88:	e1a04000 	mov	r4, r0
   16f8c:	e3025f88 	movw	r5, #12168	; 0x2f88
   16f90:	e3405003 	movt	r5, #3
   16f94:	e2853018 	add	r3, r5, #24
   16f98:	e3a06000 	mov	r6, #0
   16f9c:	e5803000 	str	r3, [r0]
   16fa0:	e5806124 	str	r6, [r0, #292]	; 0x124
   16fa4:	eb003a9c 	bl	25a1c <CDeviceNameService::Get()>
   16fa8:	e1a03006 	mov	r3, r6
   16fac:	e2851008 	add	r1, r5, #8
   16fb0:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   16fb4:	eb003abe 	bl	25ab4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   16fb8:	e1a00004 	mov	r0, r4
   16fbc:	ebffe7e3 	bl	10f50 <CUSBHIDDevice::~CUSBHIDDevice()>
   16fc0:	e1a00004 	mov	r0, r4
   16fc4:	e8bd8070 	pop	{r4, r5, r6, pc}

00016fc8 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   16fc8:	e92d4010 	push	{r4, lr}
   16fcc:	e1a04000 	mov	r4, r0
   16fd0:	ebffffeb 	bl	16f84 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   16fd4:	e1a00004 	mov	r0, r4
   16fd8:	e3a01e13 	mov	r1, #304	; 0x130
   16fdc:	eb0053d1 	bl	2bf28 <operator delete(void*, unsigned int)>
   16fe0:	e1a00004 	mov	r0, r4
   16fe4:	e8bd8010 	pop	{r4, pc}

00016fe8 <CUSBString::CUSBString(CUSBDevice*)>:
   16fe8:	e92d4070 	push	{r4, r5, r6, lr}
   16fec:	e1a04000 	mov	r4, r0
   16ff0:	e3a03000 	mov	r3, #0
   16ff4:	e3a00010 	mov	r0, #16
   16ff8:	e884000a 	stm	r4, {r1, r3}
   16ffc:	eb0053bb 	bl	2bef0 <operator new(unsigned int)>
   17000:	e1a05000 	mov	r5, r0
   17004:	eb004978 	bl	295ec <CString::CString()>
   17008:	e5943000 	ldr	r3, [r4]
   1700c:	e5845008 	str	r5, [r4, #8]
   17010:	e3530000 	cmp	r3, #0
   17014:	0a000001 	beq	17020 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17018:	e1a00004 	mov	r0, r4
   1701c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17020:	e3031024 	movw	r1, #12324	; 0x3024
   17024:	e3401003 	movt	r1, #3
   17028:	e3010174 	movw	r0, #4468	; 0x1174
   1702c:	e3400003 	movt	r0, #3
   17030:	e3a02023 	mov	r2, #35	; 0x23
   17034:	eb0037ce 	bl	24f74 <assertion_failed>

00017038 <CUSBString::CUSBString(CUSBString*)>:
   17038:	e92d4070 	push	{r4, r5, r6, lr}
   1703c:	e1a04000 	mov	r4, r0
   17040:	e3a03000 	mov	r3, #0
   17044:	e3a00010 	mov	r0, #16
   17048:	e1a05001 	mov	r5, r1
   1704c:	e5843004 	str	r3, [r4, #4]
   17050:	eb0053a6 	bl	2bef0 <operator new(unsigned int)>
   17054:	e1a06000 	mov	r6, r0
   17058:	eb004963 	bl	295ec <CString::CString()>
   1705c:	e5846008 	str	r6, [r4, #8]
   17060:	e3550000 	cmp	r5, #0
   17064:	0a000019 	beq	170d0 <CUSBString::CUSBString(CUSBString*)+0x98>
   17068:	e1c520d0 	ldrd	r2, [r5]
   1706c:	e5842000 	str	r2, [r4]
   17070:	e3530000 	cmp	r3, #0
   17074:	0a000009 	beq	170a0 <CUSBString::CUSBString(CUSBString*)+0x68>
   17078:	e5d30000 	ldrb	r0, [r3]
   1707c:	eb0053a1 	bl	2bf08 <operator new[](unsigned int)>
   17080:	e5840004 	str	r0, [r4, #4]
   17084:	e5953004 	ldr	r3, [r5, #4]
   17088:	e1a01003 	mov	r1, r3
   1708c:	e5d32000 	ldrb	r2, [r3]
   17090:	eb00528c 	bl	2bac8 <memcpy>
   17094:	e5943008 	ldr	r3, [r4, #8]
   17098:	e3530000 	cmp	r3, #0
   1709c:	0a000005 	beq	170b8 <CUSBString::CUSBString(CUSBString*)+0x80>
   170a0:	e5953008 	ldr	r3, [r5, #8]
   170a4:	e3530000 	cmp	r3, #0
   170a8:	0a00000e 	beq	170e8 <CUSBString::CUSBString(CUSBString*)+0xb0>
   170ac:	e5843008 	str	r3, [r4, #8]
   170b0:	e1a00004 	mov	r0, r4
   170b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   170b8:	e3031024 	movw	r1, #12324	; 0x3024
   170bc:	e3401003 	movt	r1, #3
   170c0:	e3030034 	movw	r0, #12340	; 0x3034
   170c4:	e3400003 	movt	r0, #3
   170c8:	e3a02035 	mov	r2, #53	; 0x35
   170cc:	eb0037a8 	bl	24f74 <assertion_failed>
   170d0:	e3031024 	movw	r1, #12324	; 0x3024
   170d4:	e3401003 	movt	r1, #3
   170d8:	e301066c 	movw	r0, #5740	; 0x166c
   170dc:	e3400003 	movt	r0, #3
   170e0:	e3a0202b 	mov	r2, #43	; 0x2b
   170e4:	eb0037a2 	bl	24f74 <assertion_failed>
   170e8:	e3031024 	movw	r1, #12324	; 0x3024
   170ec:	e3401003 	movt	r1, #3
   170f0:	e3030044 	movw	r0, #12356	; 0x3044
   170f4:	e3400003 	movt	r0, #3
   170f8:	e3a02036 	mov	r2, #54	; 0x36
   170fc:	eb00379c 	bl	24f74 <assertion_failed>

00017100 <CUSBString::~CUSBString()>:
   17100:	e92d4010 	push	{r4, lr}
   17104:	e1a04000 	mov	r4, r0
   17108:	e5900008 	ldr	r0, [r0, #8]
   1710c:	e3500000 	cmp	r0, #0
   17110:	0a000002 	beq	17120 <CUSBString::~CUSBString()+0x20>
   17114:	e5903000 	ldr	r3, [r0]
   17118:	e5933004 	ldr	r3, [r3, #4]
   1711c:	e12fff33 	blx	r3
   17120:	e5940004 	ldr	r0, [r4, #4]
   17124:	e3a03000 	mov	r3, #0
   17128:	e5843008 	str	r3, [r4, #8]
   1712c:	e1500003 	cmp	r0, r3
   17130:	0a000000 	beq	17138 <CUSBString::~CUSBString()+0x38>
   17134:	eb00537a 	bl	2bf24 <operator delete[](void*)>
   17138:	e1a00004 	mov	r0, r4
   1713c:	e8bd8010 	pop	{r4, pc}

00017140 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17140:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17144:	e2515000 	subs	r5, r1, #0
   17148:	e28db020 	add	fp, sp, #32
   1714c:	e24dd014 	sub	sp, sp, #20
   17150:	0a000051 	beq	1729c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x15c>
   17154:	e1a04000 	mov	r4, r0
   17158:	e5900004 	ldr	r0, [r0, #4]
   1715c:	e1a06002 	mov	r6, r2
   17160:	e3500000 	cmp	r0, #0
   17164:	0a000000 	beq	1716c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17168:	eb00536d 	bl	2bf24 <operator delete[](void*)>
   1716c:	e3a00004 	mov	r0, #4
   17170:	eb005364 	bl	2bf08 <operator new[](unsigned int)>
   17174:	e5943000 	ldr	r3, [r4]
   17178:	e5840004 	str	r0, [r4, #4]
   1717c:	e3530000 	cmp	r3, #0
   17180:	0a00004b 	beq	172b4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x174>
   17184:	e1a00003 	mov	r0, r3
   17188:	e3a08080 	mov	r8, #128	; 0x80
   1718c:	ebffd846 	bl	d2ac <CUSBDevice::GetHost() const>
   17190:	e1a07000 	mov	r7, r0
   17194:	e5940000 	ldr	r0, [r4]
   17198:	ebffd839 	bl	d284 <CUSBDevice::GetEndpoint0() const>
   1719c:	e5943004 	ldr	r3, [r4, #4]
   171a0:	e1a01000 	mov	r1, r0
   171a4:	e58d3000 	str	r3, [sp]
   171a8:	e3a02004 	mov	r2, #4
   171ac:	e58d600c 	str	r6, [sp, #12]
   171b0:	e58d2004 	str	r2, [sp, #4]
   171b4:	e1a00007 	mov	r0, r7
   171b8:	e58d8008 	str	r8, [sp, #8]
   171bc:	e1a03005 	mov	r3, r5
   171c0:	e3a02003 	mov	r2, #3
   171c4:	ebffe974 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   171c8:	e3500000 	cmp	r0, #0
   171cc:	ba000008 	blt	171f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   171d0:	e5940004 	ldr	r0, [r4, #4]
   171d4:	e5d07000 	ldrb	r7, [r0]
   171d8:	e3570001 	cmp	r7, #1
   171dc:	9a000004 	bls	171f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   171e0:	e3170001 	tst	r7, #1
   171e4:	1a000002 	bne	171f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   171e8:	e5d09001 	ldrb	r9, [r0, #1]
   171ec:	e3590003 	cmp	r9, #3
   171f0:	0a000002 	beq	17200 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xc0>
   171f4:	e3a00000 	mov	r0, #0
   171f8:	e24bd020 	sub	sp, fp, #32
   171fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17200:	e3570004 	cmp	r7, #4
   17204:	8a000036 	bhi	172e4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1a4>
   17208:	e3570002 	cmp	r7, #2
   1720c:	0a00002e 	beq	172cc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x18c>
   17210:	e2477002 	sub	r7, r7, #2
   17214:	e1a010c7 	asr	r1, r7, #1
   17218:	e2813008 	add	r3, r1, #8
   1721c:	e3510000 	cmp	r1, #0
   17220:	e3c33007 	bic	r3, r3, #7
   17224:	e04dd003 	sub	sp, sp, r3
   17228:	e28d5010 	add	r5, sp, #16
   1722c:	0a00000a 	beq	1725c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x11c>
   17230:	e28dc00f 	add	ip, sp, #15
   17234:	e3a02000 	mov	r2, #0
   17238:	e0803082 	add	r3, r0, r2, lsl #1
   1723c:	e2822001 	add	r2, r2, #1
   17240:	e1d330b2 	ldrh	r3, [r3, #2]
   17244:	e243e020 	sub	lr, r3, #32
   17248:	e35e005e 	cmp	lr, #94	; 0x5e
   1724c:	83a0305f 	movhi	r3, #95	; 0x5f
   17250:	e1510002 	cmp	r1, r2
   17254:	e5ec3001 	strb	r3, [ip, #1]!
   17258:	1afffff6 	bne	17238 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf8>
   1725c:	e5940008 	ldr	r0, [r4, #8]
   17260:	e3a03000 	mov	r3, #0
   17264:	e7c530c7 	strb	r3, [r5, r7, asr #1]
   17268:	e1500003 	cmp	r0, r3
   1726c:	0a000002 	beq	1727c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x13c>
   17270:	e5903000 	ldr	r3, [r0]
   17274:	e5933004 	ldr	r3, [r3, #4]
   17278:	e12fff33 	blx	r3
   1727c:	e3a00010 	mov	r0, #16
   17280:	eb00531a 	bl	2bef0 <operator new(unsigned int)>
   17284:	e1a01005 	mov	r1, r5
   17288:	e1a06000 	mov	r6, r0
   1728c:	eb0048dc 	bl	29604 <CString::CString(char const*)>
   17290:	e5846008 	str	r6, [r4, #8]
   17294:	e3a00001 	mov	r0, #1
   17298:	eaffffd6 	b	171f8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb8>
   1729c:	e3031024 	movw	r1, #12324	; 0x3024
   172a0:	e3401003 	movt	r1, #3
   172a4:	e303005c 	movw	r0, #12380	; 0x305c
   172a8:	e3400003 	movt	r0, #3
   172ac:	e3a02047 	mov	r2, #71	; 0x47
   172b0:	eb00372f 	bl	24f74 <assertion_failed>
   172b4:	e3031024 	movw	r1, #12324	; 0x3024
   172b8:	e3401003 	movt	r1, #3
   172bc:	e3010174 	movw	r0, #4468	; 0x1174
   172c0:	e3400003 	movt	r0, #3
   172c4:	e3a0204d 	mov	r2, #77	; 0x4d
   172c8:	eb003729 	bl	24f74 <assertion_failed>
   172cc:	e3031024 	movw	r1, #12324	; 0x3024
   172d0:	e3401003 	movt	r1, #3
   172d4:	e3030068 	movw	r0, #12392	; 0x3068
   172d8:	e3400003 	movt	r0, #3
   172dc:	e3a02075 	mov	r2, #117	; 0x75
   172e0:	eb003723 	bl	24f74 <assertion_failed>
   172e4:	e3a01002 	mov	r1, #2
   172e8:	eb00530e 	bl	2bf28 <operator delete(void*, unsigned int)>
   172ec:	e1a00007 	mov	r0, r7
   172f0:	eb005304 	bl	2bf08 <operator new[](unsigned int)>
   172f4:	e5840004 	str	r0, [r4, #4]
   172f8:	e5940000 	ldr	r0, [r4]
   172fc:	ebffd7ea 	bl	d2ac <CUSBDevice::GetHost() const>
   17300:	e1a0a000 	mov	sl, r0
   17304:	e5940000 	ldr	r0, [r4]
   17308:	ebffd7dd 	bl	d284 <CUSBDevice::GetEndpoint0() const>
   1730c:	e594c004 	ldr	ip, [r4, #4]
   17310:	e1a01000 	mov	r1, r0
   17314:	e58d600c 	str	r6, [sp, #12]
   17318:	e1a0000a 	mov	r0, sl
   1731c:	e98d0180 	stmib	sp, {r7, r8}
   17320:	e1a03005 	mov	r3, r5
   17324:	e1a02009 	mov	r2, r9
   17328:	e58dc000 	str	ip, [sp]
   1732c:	ebffe91a 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17330:	e1570000 	cmp	r7, r0
   17334:	1affffae 	bne	171f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   17338:	e5940004 	ldr	r0, [r4, #4]
   1733c:	e5d03000 	ldrb	r3, [r0]
   17340:	e1530007 	cmp	r3, r7
   17344:	1affffaa 	bne	171f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   17348:	e5d03001 	ldrb	r3, [r0, #1]
   1734c:	e3530003 	cmp	r3, #3
   17350:	1affffa7 	bne	171f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   17354:	eaffffad 	b	17210 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd0>

00017358 <CUSBString::Get() const>:
   17358:	e5900008 	ldr	r0, [r0, #8]
   1735c:	ea0048b9 	b	29648 <CString::operator char const*() const>

00017360 <CUSBString::GetLanguageID()>:
   17360:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17364:	e1a06000 	mov	r6, r0
   17368:	e3a00004 	mov	r0, #4
   1736c:	e24dd010 	sub	sp, sp, #16
   17370:	eb0052e4 	bl	2bf08 <operator new[](unsigned int)>
   17374:	e1a04000 	mov	r4, r0
   17378:	e5960000 	ldr	r0, [r6]
   1737c:	e3500000 	cmp	r0, #0
   17380:	0a000049 	beq	174ac <CUSBString::GetLanguageID()+0x14c>
   17384:	ebffd7c8 	bl	d2ac <CUSBDevice::GetHost() const>
   17388:	e1a05000 	mov	r5, r0
   1738c:	e5960000 	ldr	r0, [r6]
   17390:	e3a07080 	mov	r7, #128	; 0x80
   17394:	ebffd7ba 	bl	d284 <CUSBDevice::GetEndpoint0() const>
   17398:	e3a03000 	mov	r3, #0
   1739c:	e1a01000 	mov	r1, r0
   173a0:	e3a02004 	mov	r2, #4
   173a4:	e58d4000 	str	r4, [sp]
   173a8:	e1a00005 	mov	r0, r5
   173ac:	e58d2004 	str	r2, [sp, #4]
   173b0:	e3a02003 	mov	r2, #3
   173b4:	e58d300c 	str	r3, [sp, #12]
   173b8:	e58d7008 	str	r7, [sp, #8]
   173bc:	ebffe8f6 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   173c0:	e3500000 	cmp	r0, #0
   173c4:	ba000032 	blt	17494 <CUSBString::GetLanguageID()+0x134>
   173c8:	e5d45000 	ldrb	r5, [r4]
   173cc:	e3550003 	cmp	r5, #3
   173d0:	9a00002f 	bls	17494 <CUSBString::GetLanguageID()+0x134>
   173d4:	e2159001 	ands	r9, r5, #1
   173d8:	1a00002d 	bne	17494 <CUSBString::GetLanguageID()+0x134>
   173dc:	e5d48001 	ldrb	r8, [r4, #1]
   173e0:	e3580003 	cmp	r8, #3
   173e4:	1a00002a 	bne	17494 <CUSBString::GetLanguageID()+0x134>
   173e8:	e3550004 	cmp	r5, #4
   173ec:	1a00000e 	bne	1742c <CUSBString::GetLanguageID()+0xcc>
   173f0:	e2455002 	sub	r5, r5, #2
   173f4:	e3a03000 	mov	r3, #0
   173f8:	e1a050c5 	asr	r5, r5, #1
   173fc:	e3002409 	movw	r2, #1033	; 0x409
   17400:	e0841083 	add	r1, r4, r3, lsl #1
   17404:	e1d110b2 	ldrh	r1, [r1, #2]
   17408:	e1510002 	cmp	r1, r2
   1740c:	0a000020 	beq	17494 <CUSBString::GetLanguageID()+0x134>
   17410:	e2833001 	add	r3, r3, #1
   17414:	e1550003 	cmp	r5, r3
   17418:	8afffff8 	bhi	17400 <CUSBString::GetLanguageID()+0xa0>
   1741c:	e1a00004 	mov	r0, r4
   17420:	e1d440b2 	ldrh	r4, [r4, #2]
   17424:	eb0052be 	bl	2bf24 <operator delete[](void*)>
   17428:	ea00001c 	b	174a0 <CUSBString::GetLanguageID()+0x140>
   1742c:	e1a00004 	mov	r0, r4
   17430:	eb0052bb 	bl	2bf24 <operator delete[](void*)>
   17434:	e1a00005 	mov	r0, r5
   17438:	eb0052b2 	bl	2bf08 <operator new[](unsigned int)>
   1743c:	e1a04000 	mov	r4, r0
   17440:	e5960000 	ldr	r0, [r6]
   17444:	ebffd798 	bl	d2ac <CUSBDevice::GetHost() const>
   17448:	e1a0a000 	mov	sl, r0
   1744c:	e5960000 	ldr	r0, [r6]
   17450:	ebffd78b 	bl	d284 <CUSBDevice::GetEndpoint0() const>
   17454:	e58d4000 	str	r4, [sp]
   17458:	e1a01000 	mov	r1, r0
   1745c:	e58d900c 	str	r9, [sp, #12]
   17460:	e1a0000a 	mov	r0, sl
   17464:	e98d00a0 	stmib	sp, {r5, r7}
   17468:	e1a03009 	mov	r3, r9
   1746c:	e1a02008 	mov	r2, r8
   17470:	ebffe8c9 	bl	1179c <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17474:	e1550000 	cmp	r5, r0
   17478:	1a000005 	bne	17494 <CUSBString::GetLanguageID()+0x134>
   1747c:	e5d43000 	ldrb	r3, [r4]
   17480:	e1530005 	cmp	r3, r5
   17484:	1a000002 	bne	17494 <CUSBString::GetLanguageID()+0x134>
   17488:	e5d43001 	ldrb	r3, [r4, #1]
   1748c:	e3530003 	cmp	r3, #3
   17490:	0affffd6 	beq	173f0 <CUSBString::GetLanguageID()+0x90>
   17494:	e1a00004 	mov	r0, r4
   17498:	e3004409 	movw	r4, #1033	; 0x409
   1749c:	eb0052a0 	bl	2bf24 <operator delete[](void*)>
   174a0:	e1a00004 	mov	r0, r4
   174a4:	e28dd010 	add	sp, sp, #16
   174a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174ac:	e3031024 	movw	r1, #12324	; 0x3024
   174b0:	e3401003 	movt	r1, #3
   174b4:	e3010174 	movw	r0, #4468	; 0x1174
   174b8:	e3400003 	movt	r0, #3
   174bc:	e3a0209a 	mov	r2, #154	; 0x9a
   174c0:	eb0036ab 	bl	24f74 <assertion_failed>

000174c4 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   174c4:	e92d4010 	push	{r4, lr}
   174c8:	e1a04000 	mov	r4, r0
   174cc:	e3a03000 	mov	r3, #0
   174d0:	e2800014 	add	r0, r0, #20
   174d4:	e5843000 	str	r3, [r4]
   174d8:	e5843004 	str	r3, [r4, #4]
   174dc:	e5843008 	str	r3, [r4, #8]
   174e0:	e1c430bc 	strh	r3, [r4, #12]
   174e4:	e5843010 	str	r3, [r4, #16]
   174e8:	eb00017f 	bl	17aec <CKeyMap::CKeyMap()>
   174ec:	e1a00004 	mov	r0, r4
   174f0:	e8bd8010 	pop	{r4, pc}

000174f4 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   174f4:	e92d4010 	push	{r4, lr}
   174f8:	e1a04000 	mov	r4, r0
   174fc:	e3a03000 	mov	r3, #0
   17500:	e2800014 	add	r0, r0, #20
   17504:	e5843000 	str	r3, [r4]
   17508:	e5843004 	str	r3, [r4, #4]
   1750c:	e5843008 	str	r3, [r4, #8]
   17510:	eb0000b5 	bl	177ec <CKeyMap::~CKeyMap()>
   17514:	e1a00004 	mov	r0, r4
   17518:	e8bd8010 	pop	{r4, pc}

0001751c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   1751c:	e3510000 	cmp	r1, #0
   17520:	0a000001 	beq	1752c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   17524:	e5801000 	str	r1, [r0]
   17528:	e12fff1e 	bx	lr
   1752c:	e3031084 	movw	r1, #12420	; 0x3084
   17530:	e3401003 	movt	r1, #3
   17534:	e303009c 	movw	r0, #12444	; 0x309c
   17538:	e3400003 	movt	r0, #3
   1753c:	e92d4010 	push	{r4, lr}
   17540:	e3a0202f 	mov	r2, #47	; 0x2f
   17544:	eb00368a 	bl	24f74 <assertion_failed>

00017548 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   17548:	e3510000 	cmp	r1, #0
   1754c:	0a000001 	beq	17558 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   17550:	e5801004 	str	r1, [r0, #4]
   17554:	e12fff1e 	bx	lr
   17558:	e3031084 	movw	r1, #12420	; 0x3084
   1755c:	e3401003 	movt	r1, #3
   17560:	e30300b4 	movw	r0, #12468	; 0x30b4
   17564:	e3400003 	movt	r0, #3
   17568:	e92d4010 	push	{r4, lr}
   1756c:	e3a02035 	mov	r2, #53	; 0x35
   17570:	eb00367f 	bl	24f74 <assertion_failed>

00017574 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   17574:	e3510000 	cmp	r1, #0
   17578:	0a000001 	beq	17584 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   1757c:	e5801008 	str	r1, [r0, #8]
   17580:	e12fff1e 	bx	lr
   17584:	e3031084 	movw	r1, #12420	; 0x3084
   17588:	e3401003 	movt	r1, #3
   1758c:	e30300d0 	movw	r0, #12496	; 0x30d0
   17590:	e3400003 	movt	r0, #3
   17594:	e92d4010 	push	{r4, lr}
   17598:	e3a0203b 	mov	r2, #59	; 0x3b
   1759c:	eb003674 	bl	24f74 <assertion_failed>

000175a0 <CKeyboardBehaviour::GetLEDStatus() const>:
   175a0:	e2800014 	add	r0, r0, #20
   175a4:	ea000124 	b	17a3c <CKeyMap::GetLEDStatus() const>

000175a8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   175a8:	e92d4070 	push	{r4, r5, r6, lr}
   175ac:	e1a04000 	mov	r4, r0
   175b0:	e2805014 	add	r5, r0, #20
   175b4:	e24dd008 	sub	sp, sp, #8
   175b8:	e1a00005 	mov	r0, r5
   175bc:	e5d4600c 	ldrb	r6, [r4, #12]
   175c0:	e1a02006 	mov	r2, r6
   175c4:	eb0000ab 	bl	17878 <CKeyMap::Translate(unsigned char, unsigned char)>
   175c8:	e2403e13 	sub	r3, r0, #304	; 0x130
   175cc:	e2433003 	sub	r3, r3, #3
   175d0:	e353000f 	cmp	r3, #15
   175d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   175d8:	ea00000f 	b	1761c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x74>
   175dc:	00017648 	.word	0x00017648
   175e0:	00017648 	.word	0x00017648
   175e4:	00017648 	.word	0x00017648
   175e8:	00017668 	.word	0x00017668
   175ec:	00017668 	.word	0x00017668
   175f0:	00017668 	.word	0x00017668
   175f4:	00017668 	.word	0x00017668
   175f8:	00017668 	.word	0x00017668
   175fc:	00017668 	.word	0x00017668
   17600:	00017668 	.word	0x00017668
   17604:	00017668 	.word	0x00017668
   17608:	00017668 	.word	0x00017668
   1760c:	00017668 	.word	0x00017668
   17610:	00017668 	.word	0x00017668
   17614:	00017668 	.word	0x00017668
   17618:	00017650 	.word	0x00017650
   1761c:	e1a01000 	mov	r1, r0
   17620:	e1a02006 	mov	r2, r6
   17624:	e1a00005 	mov	r0, r5
   17628:	e28d3004 	add	r3, sp, #4
   1762c:	eb0000d2 	bl	1797c <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   17630:	e3500000 	cmp	r0, #0
   17634:	0a000003 	beq	17648 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>
   17638:	e5943000 	ldr	r3, [r4]
   1763c:	e3530000 	cmp	r3, #0
   17640:	0a000000 	beq	17648 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>
   17644:	e12fff33 	blx	r3
   17648:	e28dd008 	add	sp, sp, #8
   1764c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17650:	e5943008 	ldr	r3, [r4, #8]
   17654:	e3530000 	cmp	r3, #0
   17658:	0afffffa 	beq	17648 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>
   1765c:	e12fff33 	blx	r3
   17660:	e28dd008 	add	sp, sp, #8
   17664:	e8bd8070 	pop	{r4, r5, r6, pc}
   17668:	e5943004 	ldr	r3, [r4, #4]
   1766c:	e3530000 	cmp	r3, #0
   17670:	0afffff4 	beq	17648 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>
   17674:	e2400f4d 	sub	r0, r0, #308	; 0x134
   17678:	e2400002 	sub	r0, r0, #2
   1767c:	e12fff33 	blx	r3
   17680:	e28dd008 	add	sp, sp, #8
   17684:	e8bd8070 	pop	{r4, r5, r6, pc}

00017688 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   17688:	e241c080 	sub	ip, r1, #128	; 0x80
   1768c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17690:	e6efe07c 	uxtb	lr, ip
   17694:	e1a03000 	mov	r3, r0
   17698:	e35e0007 	cmp	lr, #7
   1769c:	8a000004 	bhi	176b4 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>
   176a0:	e5d0200c 	ldrb	r2, [r0, #12]
   176a4:	e3a01001 	mov	r1, #1
   176a8:	e182cc11 	orr	ip, r2, r1, lsl ip
   176ac:	e5c0c00c 	strb	ip, [r0, #12]
   176b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   176b4:	e5d0c00d 	ldrb	ip, [r0, #13]
   176b8:	e15c0001 	cmp	ip, r1
   176bc:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   176c0:	e5c3100d 	strb	r1, [r3, #13]
   176c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   176c8:	eaffffb6 	b	175a8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

000176cc <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   176cc:	e2413080 	sub	r3, r1, #128	; 0x80
   176d0:	e6ef2073 	uxtb	r2, r3
   176d4:	e3520007 	cmp	r2, #7
   176d8:	8a000004 	bhi	176f0 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   176dc:	e5d0200c 	ldrb	r2, [r0, #12]
   176e0:	e3a01001 	mov	r1, #1
   176e4:	e1c23311 	bic	r3, r2, r1, lsl r3
   176e8:	e5c0300c 	strb	r3, [r0, #12]
   176ec:	e12fff1e 	bx	lr
   176f0:	e5d0300d 	ldrb	r3, [r0, #13]
   176f4:	e1530001 	cmp	r3, r1
   176f8:	112fff1e 	bxne	lr
   176fc:	e5903010 	ldr	r3, [r0, #16]
   17700:	e92d4010 	push	{r4, lr}
   17704:	e1a04000 	mov	r4, r0
   17708:	e3530000 	cmp	r3, #0
   1770c:	1a000002 	bne	1771c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   17710:	e3a03000 	mov	r3, #0
   17714:	e5c4300d 	strb	r3, [r4, #13]
   17718:	e8bd8010 	pop	{r4, pc}
   1771c:	eb004f35 	bl	2b3f8 <CTimer::Get()>
   17720:	e5941010 	ldr	r1, [r4, #16]
   17724:	eb004db2 	bl	2adf4 <CTimer::CancelKernelTimer(unsigned int)>
   17728:	e3a03000 	mov	r3, #0
   1772c:	e5843010 	str	r3, [r4, #16]
   17730:	eafffff6 	b	17710 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00017734 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   17734:	e92d4010 	push	{r4, lr}
   17738:	e5903010 	ldr	r3, [r0, #16]
   1773c:	e24dd008 	sub	sp, sp, #8
   17740:	e1530001 	cmp	r3, r1
   17744:	1a000016 	bne	177a4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x70>
   17748:	e5d0100d 	ldrb	r1, [r0, #13]
   1774c:	e1a04000 	mov	r4, r0
   17750:	e3510000 	cmp	r1, #0
   17754:	1a000001 	bne	17760 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   17758:	e28dd008 	add	sp, sp, #8
   1775c:	e8bd8010 	pop	{r4, pc}
   17760:	ebffff90 	bl	175a8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   17764:	eb004f23 	bl	2b3f8 <CTimer::Get()>
   17768:	e58d4000 	str	r4, [sp]
   1776c:	e30727bc 	movw	r2, #30652	; 0x77bc
   17770:	e3402001 	movt	r2, #1
   17774:	e3a03000 	mov	r3, #0
   17778:	e3a01008 	mov	r1, #8
   1777c:	eb004d4a 	bl	2acac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   17780:	e3500000 	cmp	r0, #0
   17784:	e5840010 	str	r0, [r4, #16]
   17788:	1afffff2 	bne	17758 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   1778c:	e3031084 	movw	r1, #12420	; 0x3084
   17790:	e3401003 	movt	r1, #3
   17794:	e30205a0 	movw	r0, #9632	; 0x25a0
   17798:	e3400003 	movt	r0, #3
   1779c:	e3a020b7 	mov	r2, #183	; 0xb7
   177a0:	eb0035f3 	bl	24f74 <assertion_failed>
   177a4:	e3031084 	movw	r1, #12420	; 0x3084
   177a8:	e3401003 	movt	r1, #3
   177ac:	e30300e8 	movw	r0, #12520	; 0x30e8
   177b0:	e3400003 	movt	r0, #3
   177b4:	e3a020b0 	mov	r2, #176	; 0xb0
   177b8:	eb0035ed 	bl	24f74 <assertion_failed>

000177bc <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   177bc:	e3520000 	cmp	r2, #0
   177c0:	0a000002 	beq	177d0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   177c4:	e1a01000 	mov	r1, r0
   177c8:	e1a00002 	mov	r0, r2
   177cc:	eaffffd8 	b	17734 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   177d0:	e3031084 	movw	r1, #12420	; 0x3084
   177d4:	e3401003 	movt	r1, #3
   177d8:	e30007a4 	movw	r0, #1956	; 0x7a4
   177dc:	e3400003 	movt	r0, #3
   177e0:	e92d4010 	push	{r4, lr}
   177e4:	e3a020be 	mov	r2, #190	; 0xbe
   177e8:	eb0035e1 	bl	24f74 <assertion_failed>

000177ec <CKeyMap::~CKeyMap()>:
   177ec:	e12fff1e 	bx	lr

000177f0 <CKeyMap::ClearTable(unsigned char)>:
   177f0:	e3510003 	cmp	r1, #3
   177f4:	8a000009 	bhi	17820 <CKeyMap::ClearTable(unsigned char)+0x30>
   177f8:	e1a01081 	lsl	r1, r1, #1
   177fc:	e2802b01 	add	r2, r0, #1024	; 0x400
   17800:	e0803001 	add	r3, r0, r1
   17804:	e0822001 	add	r2, r2, r1
   17808:	e3a01000 	mov	r1, #0
   1780c:	e0c310b8 	strh	r1, [r3], #8
   17810:	e1530002 	cmp	r3, r2
   17814:	1afffffc 	bne	1780c <CKeyMap::ClearTable(unsigned char)+0x1c>
   17818:	e3a00001 	mov	r0, #1
   1781c:	e12fff1e 	bx	lr
   17820:	e3a00000 	mov	r0, #0
   17824:	e12fff1e 	bx	lr

00017828 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   17828:	e6afc072 	sxtb	ip, r2
   1782c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17830:	e35c0000 	cmp	ip, #0
   17834:	c3a0c000 	movgt	ip, #0
   17838:	d3a0c001 	movle	ip, #1
   1783c:	e1a0e000 	mov	lr, r0
   17840:	e3510003 	cmp	r1, #3
   17844:	91a0000c 	movls	r0, ip
   17848:	838c0001 	orrhi	r0, ip, #1
   1784c:	e3500000 	cmp	r0, #0
   17850:	1a000006 	bne	17870 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   17854:	e300c132 	movw	ip, #306	; 0x132
   17858:	e153000c 	cmp	r3, ip
   1785c:	90811102 	addls	r1, r1, r2, lsl #2
   17860:	93a00001 	movls	r0, #1
   17864:	91a01011 	lslls	r1, r1, r0
   17868:	918e30b1 	strhls	r3, [lr, r1]
   1786c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17870:	e3a00000 	mov	r0, #0
   17874:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00017878 <CKeyMap::Translate(unsigned char, unsigned char)>:
   17878:	e6af3071 	sxtb	r3, r1
   1787c:	e3530000 	cmp	r3, #0
   17880:	da000023 	ble	17914 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   17884:	e1a03181 	lsl	r3, r1, #3
   17888:	e19030b3 	ldrh	r3, [r0, r3]
   1788c:	e3530f42 	cmp	r3, #264	; 0x108
   17890:	0a000022 	beq	17920 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   17894:	e243cf43 	sub	ip, r3, #268	; 0x10c
   17898:	e24cc003 	sub	ip, ip, #3
   1789c:	e35c000b 	cmp	ip, #11
   178a0:	8a000001 	bhi	178ac <CKeyMap::Translate(unsigned char, unsigned char)+0x34>
   178a4:	e3120004 	tst	r2, #4
   178a8:	1a000022 	bne	17938 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   178ac:	e312008c 	tst	r2, #140	; 0x8c
   178b0:	1a000017 	bne	17914 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   178b4:	e2413053 	sub	r3, r1, #83	; 0x53
   178b8:	e3530010 	cmp	r3, #16
   178bc:	95d02401 	ldrbls	r2, [r0, #1025]	; 0x401
   178c0:	9a000005 	bls	178dc <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   178c4:	e3120040 	tst	r2, #64	; 0x40
   178c8:	e2022022 	and	r2, r2, #34	; 0x22
   178cc:	0a000022 	beq	1795c <CKeyMap::Translate(unsigned char, unsigned char)+0xe4>
   178d0:	e3520000 	cmp	r2, #0
   178d4:	03a02002 	moveq	r2, #2
   178d8:	13a02003 	movne	r2, #3
   178dc:	e0821101 	add	r1, r2, r1, lsl #2
   178e0:	e300211e 	movw	r2, #286	; 0x11e
   178e4:	e1a01081 	lsl	r1, r1, #1
   178e8:	e19030b1 	ldrh	r3, [r0, r1]
   178ec:	e1530002 	cmp	r3, r2
   178f0:	0a000014 	beq	17948 <CKeyMap::Translate(unsigned char, unsigned char)+0xd0>
   178f4:	e3530e12 	cmp	r3, #288	; 0x120
   178f8:	0a00001a 	beq	17968 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   178fc:	e3530f47 	cmp	r3, #284	; 0x11c
   17900:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   17904:	03003133 	movweq	r3, #307	; 0x133
   17908:	02222001 	eoreq	r2, r2, #1
   1790c:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   17910:	ea000000 	b	17918 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   17914:	e3a03000 	mov	r3, #0
   17918:	e1a00003 	mov	r0, r3
   1791c:	e12fff1e 	bx	lr
   17920:	e3120011 	tst	r2, #17
   17924:	0affffe0 	beq	178ac <CKeyMap::Translate(unsigned char, unsigned char)+0x34>
   17928:	e3120004 	tst	r2, #4
   1792c:	0affffde 	beq	178ac <CKeyMap::Translate(unsigned char, unsigned char)+0x34>
   17930:	e3003142 	movw	r3, #322	; 0x142
   17934:	eafffff7 	b	17918 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   17938:	e2833027 	add	r3, r3, #39	; 0x27
   1793c:	e6ff3073 	uxth	r3, r3
   17940:	e1a00003 	mov	r0, r3
   17944:	e12fff1e 	bx	lr
   17948:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   1794c:	e3003135 	movw	r3, #309	; 0x135
   17950:	e2222001 	eor	r2, r2, #1
   17954:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   17958:	eaffffee 	b	17918 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   1795c:	e2922000 	adds	r2, r2, #0
   17960:	13a02001 	movne	r2, #1
   17964:	eaffffdc 	b	178dc <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   17968:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   1796c:	e3a03f4d 	mov	r3, #308	; 0x134
   17970:	e2222001 	eor	r2, r2, #1
   17974:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   17978:	eaffffe6 	b	17918 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>

0001797c <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   1797c:	e241c021 	sub	ip, r1, #33	; 0x21
   17980:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17984:	e6ffc07c 	uxth	ip, ip
   17988:	e300e111 	movw	lr, #273	; 0x111
   1798c:	e15c000e 	cmp	ip, lr
   17990:	8a000022 	bhi	17a20 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   17994:	e241cc01 	sub	ip, r1, #256	; 0x100
   17998:	e6ffe07c 	uxth	lr, ip
   1799c:	e35e0032 	cmp	lr, #50	; 0x32
   179a0:	9a00000c 	bls	179d8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   179a4:	e3120011 	tst	r2, #17
   179a8:	e6af2071 	sxtb	r2, r1
   179ac:	0a00000d 	beq	179e8 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x6c>
   179b0:	e6ef1071 	uxtb	r1, r1
   179b4:	e2412061 	sub	r2, r1, #97	; 0x61
   179b8:	e3520019 	cmp	r2, #25
   179bc:	8a000017 	bhi	17a20 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   179c0:	e2411060 	sub	r1, r1, #96	; 0x60
   179c4:	e3a02000 	mov	r2, #0
   179c8:	e5c31000 	strb	r1, [r3]
   179cc:	e1a00003 	mov	r0, r3
   179d0:	e5c32001 	strb	r2, [r3, #1]
   179d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   179d8:	e3083f7c 	movw	r3, #36732	; 0x8f7c
   179dc:	e3403003 	movt	r3, #3
   179e0:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   179e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   179e8:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   179ec:	e3500000 	cmp	r0, #0
   179f0:	0a000005 	beq	17a0c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   179f4:	e6ef1071 	uxtb	r1, r1
   179f8:	e2410041 	sub	r0, r1, #65	; 0x41
   179fc:	e3500019 	cmp	r0, #25
   17a00:	8a000008 	bhi	17a28 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xac>
   17a04:	e2811020 	add	r1, r1, #32
   17a08:	e6af2071 	sxtb	r2, r1
   17a0c:	e5c32000 	strb	r2, [r3]
   17a10:	e1a00003 	mov	r0, r3
   17a14:	e3a02000 	mov	r2, #0
   17a18:	e5c32001 	strb	r2, [r3, #1]
   17a1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17a20:	e3a00000 	mov	r0, #0
   17a24:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17a28:	e2410061 	sub	r0, r1, #97	; 0x61
   17a2c:	e3500019 	cmp	r0, #25
   17a30:	92411020 	subls	r1, r1, #32
   17a34:	96af2071 	sxtbls	r2, r1
   17a38:	eafffff3 	b	17a0c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>

00017a3c <CKeyMap::GetLEDStatus() const>:
   17a3c:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   17a40:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   17a44:	e3530000 	cmp	r3, #0
   17a48:	13a03002 	movne	r3, #2
   17a4c:	03a03000 	moveq	r3, #0
   17a50:	e3520000 	cmp	r2, #0
   17a54:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   17a58:	13833001 	orrne	r3, r3, #1
   17a5c:	e3520000 	cmp	r2, #0
   17a60:	13833004 	orrne	r3, r3, #4
   17a64:	e1a00003 	mov	r0, r3
   17a68:	e12fff1e 	bx	lr

00017a6c <CKeyMap::LookupDefaultMap(char const*)>:
   17a6c:	e92d4070 	push	{r4, r5, r6, lr}
   17a70:	e3084f7c 	movw	r4, #36732	; 0x8f7c
   17a74:	e3404003 	movt	r4, #3
   17a78:	e1a06000 	mov	r6, r0
   17a7c:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   17a80:	e3500000 	cmp	r0, #0
   17a84:	0a000016 	beq	17ae4 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   17a88:	e3560000 	cmp	r6, #0
   17a8c:	128440d0 	addne	r4, r4, #208	; 0xd0
   17a90:	13a05000 	movne	r5, #0
   17a94:	1a000004 	bne	17aac <CKeyMap::LookupDefaultMap(char const*)+0x40>
   17a98:	ea00000b 	b	17acc <CKeyMap::LookupDefaultMap(char const*)+0x60>
   17a9c:	e4940004 	ldr	r0, [r4], #4
   17aa0:	e2855001 	add	r5, r5, #1
   17aa4:	e3500000 	cmp	r0, #0
   17aa8:	0a00000d 	beq	17ae4 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   17aac:	e1a01006 	mov	r1, r6
   17ab0:	eb004eb6 	bl	2b590 <strcmp>
   17ab4:	e3500000 	cmp	r0, #0
   17ab8:	1afffff7 	bne	17a9c <CKeyMap::LookupDefaultMap(char const*)+0x30>
   17abc:	e30300fc 	movw	r0, #12540	; 0x30fc
   17ac0:	e3400003 	movt	r0, #3
   17ac4:	e0800505 	add	r0, r0, r5, lsl #10
   17ac8:	e8bd8070 	pop	{r4, r5, r6, pc}
   17acc:	e30418fc 	movw	r1, #18684	; 0x48fc
   17ad0:	e3401003 	movt	r1, #3
   17ad4:	e3040908 	movw	r0, #18696	; 0x4908
   17ad8:	e3400003 	movt	r0, #3
   17adc:	e300213f 	movw	r2, #319	; 0x13f
   17ae0:	eb003523 	bl	24f74 <assertion_failed>
   17ae4:	e3a00000 	mov	r0, #0
   17ae8:	e8bd8070 	pop	{r4, r5, r6, pc}

00017aec <CKeyMap::CKeyMap()>:
   17aec:	e92d4010 	push	{r4, lr}
   17af0:	e3a03000 	mov	r3, #0
   17af4:	e3a02001 	mov	r2, #1
   17af8:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   17afc:	e1a04000 	mov	r4, r0
   17b00:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   17b04:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   17b08:	eb003891 	bl	25d54 <CKernelOptions::Get()>
   17b0c:	eb003883 	bl	25d20 <CKernelOptions::GetKeyMap() const>
   17b10:	e3500000 	cmp	r0, #0
   17b14:	0a000012 	beq	17b64 <CKeyMap::CKeyMap()+0x78>
   17b18:	ebffffd3 	bl	17a6c <CKeyMap::LookupDefaultMap(char const*)>
   17b1c:	e2501000 	subs	r1, r0, #0
   17b20:	0a000004 	beq	17b38 <CKeyMap::CKeyMap()+0x4c>
   17b24:	e3a02b01 	mov	r2, #1024	; 0x400
   17b28:	e1a00004 	mov	r0, r4
   17b2c:	eb004fe5 	bl	2bac8 <memcpy>
   17b30:	e1a00004 	mov	r0, r4
   17b34:	e8bd8010 	pop	{r4, pc}
   17b38:	e3040918 	movw	r0, #18712	; 0x4918
   17b3c:	e3400003 	movt	r0, #3
   17b40:	ebffffc9 	bl	17a6c <CKeyMap::LookupDefaultMap(char const*)>
   17b44:	e2501000 	subs	r1, r0, #0
   17b48:	1afffff5 	bne	17b24 <CKeyMap::CKeyMap()+0x38>
   17b4c:	e30418fc 	movw	r1, #18684	; 0x48fc
   17b50:	e3401003 	movt	r1, #3
   17b54:	e304091c 	movw	r0, #18716	; 0x491c
   17b58:	e3400003 	movt	r0, #3
   17b5c:	e3a02080 	mov	r2, #128	; 0x80
   17b60:	eb003503 	bl	24f74 <assertion_failed>
   17b64:	e30418fc 	movw	r1, #18684	; 0x48fc
   17b68:	e3401003 	movt	r1, #3
   17b6c:	e3040908 	movw	r0, #18696	; 0x4908
   17b70:	e3400003 	movt	r0, #3
   17b74:	e3a0207a 	mov	r2, #122	; 0x7a
   17b78:	eb0034fd 	bl	24f74 <assertion_failed>

00017b7c <CMouseDevice::~CMouseDevice()>:
   17b7c:	e92d4070 	push	{r4, r5, r6, lr}
   17b80:	e1a04000 	mov	r4, r0
   17b84:	e3045a0c 	movw	r5, #18956	; 0x4a0c
   17b88:	e3405003 	movt	r5, #3
   17b8c:	e2853008 	add	r3, r5, #8
   17b90:	e3a06000 	mov	r6, #0
   17b94:	e5803000 	str	r3, [r0]
   17b98:	e5806020 	str	r6, [r0, #32]
   17b9c:	eb00379e 	bl	25a1c <CDeviceNameService::Get()>
   17ba0:	e1a03006 	mov	r3, r6
   17ba4:	e2851020 	add	r1, r5, #32
   17ba8:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   17bac:	eb0037c0 	bl	25ab4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   17bb0:	e2840004 	add	r0, r4, #4
   17bb4:	eb00005f 	bl	17d38 <CMouseBehaviour::~CMouseBehaviour()>
   17bb8:	e1a00004 	mov	r0, r4
   17bbc:	eb00369f 	bl	25640 <CDevice::~CDevice()>
   17bc0:	e1a00004 	mov	r0, r4
   17bc4:	e8bd8070 	pop	{r4, r5, r6, pc}

00017bc8 <CMouseDevice::~CMouseDevice()>:
   17bc8:	e92d4010 	push	{r4, lr}
   17bcc:	e1a04000 	mov	r4, r0
   17bd0:	ebffffe9 	bl	17b7c <CMouseDevice::~CMouseDevice()>
   17bd4:	e1a00004 	mov	r0, r4
   17bd8:	e3a01028 	mov	r1, #40	; 0x28
   17bdc:	eb0050d1 	bl	2bf28 <operator delete(void*, unsigned int)>
   17be0:	e1a00004 	mov	r0, r4
   17be4:	e8bd8010 	pop	{r4, pc}

00017be8 <CMouseDevice::CMouseDevice()>:
   17be8:	e92d4070 	push	{r4, r5, r6, lr}
   17bec:	e1a04000 	mov	r4, r0
   17bf0:	e3045a0c 	movw	r5, #18956	; 0x4a0c
   17bf4:	e3405003 	movt	r5, #3
   17bf8:	e24dd008 	sub	sp, sp, #8
   17bfc:	e3a06000 	mov	r6, #0
   17c00:	eb00369c 	bl	25678 <CDevice::CDevice()>
   17c04:	e1a00004 	mov	r0, r4
   17c08:	e2853008 	add	r3, r5, #8
   17c0c:	e4803004 	str	r3, [r0], #4
   17c10:	eb00003e 	bl	17d10 <CMouseBehaviour::CMouseBehaviour()>
   17c14:	e3093064 	movw	r3, #36964	; 0x9064
   17c18:	e3403003 	movt	r3, #3
   17c1c:	e5846020 	str	r6, [r4, #32]
   17c20:	e5932000 	ldr	r2, [r3]
   17c24:	e5842024 	str	r2, [r4, #36]	; 0x24
   17c28:	e2822001 	add	r2, r2, #1
   17c2c:	e5832000 	str	r2, [r3]
   17c30:	eb003779 	bl	25a1c <CDeviceNameService::Get()>
   17c34:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   17c38:	e2851020 	add	r1, r5, #32
   17c3c:	e58d6000 	str	r6, [sp]
   17c40:	e1a03004 	mov	r3, r4
   17c44:	eb003780 	bl	25a4c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17c48:	e1a00004 	mov	r0, r4
   17c4c:	e28dd008 	add	sp, sp, #8
   17c50:	e8bd8070 	pop	{r4, r5, r6, pc}

00017c54 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   17c54:	e2800004 	add	r0, r0, #4
   17c58:	ea000037 	b	17d3c <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00017c5c <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   17c5c:	e2800004 	add	r0, r0, #4
   17c60:	ea00007e 	b	17e60 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00017c64 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   17c64:	e2800004 	add	r0, r0, #4
   17c68:	ea0000ff 	b	1806c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00017c6c <CMouseDevice::ShowCursor(bool)>:
   17c6c:	e2800004 	add	r0, r0, #4
   17c70:	ea000122 	b	18100 <CMouseBehaviour::ShowCursor(bool)>

00017c74 <CMouseDevice::UpdateCursor()>:
   17c74:	e5903020 	ldr	r3, [r0, #32]
   17c78:	e3530000 	cmp	r3, #0
   17c7c:	112fff1e 	bxne	lr
   17c80:	e2800004 	add	r0, r0, #4
   17c84:	ea000139 	b	18170 <CMouseBehaviour::UpdateCursor()>

00017c88 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   17c88:	e5903020 	ldr	r3, [r0, #32]
   17c8c:	e92d4010 	push	{r4, lr}
   17c90:	e3530000 	cmp	r3, #0
   17c94:	1a000008 	bne	17cbc <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x34>
   17c98:	e3510000 	cmp	r1, #0
   17c9c:	e5801020 	str	r1, [r0, #32]
   17ca0:	18bd8010 	popne	{r4, pc}
   17ca4:	e3041a34 	movw	r1, #18996	; 0x4a34
   17ca8:	e3401003 	movt	r1, #3
   17cac:	e303000c 	movw	r0, #12300	; 0x300c
   17cb0:	e3400003 	movt	r0, #3
   17cb4:	e3a0204a 	mov	r2, #74	; 0x4a
   17cb8:	eb0034ad 	bl	24f74 <assertion_failed>
   17cbc:	e3041a34 	movw	r1, #18996	; 0x4a34
   17cc0:	e3401003 	movt	r1, #3
   17cc4:	e3020ff4 	movw	r0, #12276	; 0x2ff4
   17cc8:	e3400003 	movt	r0, #3
   17ccc:	e3a02048 	mov	r2, #72	; 0x48
   17cd0:	eb0034a7 	bl	24f74 <assertion_failed>

00017cd4 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   17cd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17cd8:	e1a04000 	mov	r4, r0
   17cdc:	e2800004 	add	r0, r0, #4
   17ce0:	e1a07003 	mov	r7, r3
   17ce4:	e1a05001 	mov	r5, r1
   17ce8:	e1a06002 	mov	r6, r2
   17cec:	eb00006e 	bl	17eac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   17cf0:	e5943020 	ldr	r3, [r4, #32]
   17cf4:	e3530000 	cmp	r3, #0
   17cf8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   17cfc:	e1a02007 	mov	r2, r7
   17d00:	e1a01006 	mov	r1, r6
   17d04:	e1a00005 	mov	r0, r5
   17d08:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   17d0c:	e12fff13 	bx	r3

00017d10 <CMouseBehaviour::CMouseBehaviour()>:
   17d10:	e3a02000 	mov	r2, #0
   17d14:	e5802000 	str	r2, [r0]
   17d18:	e5802004 	str	r2, [r0, #4]
   17d1c:	e5802008 	str	r2, [r0, #8]
   17d20:	e580200c 	str	r2, [r0, #12]
   17d24:	e5c02010 	strb	r2, [r0, #16]
   17d28:	e5c02011 	strb	r2, [r0, #17]
   17d2c:	e5802014 	str	r2, [r0, #20]
   17d30:	e5802018 	str	r2, [r0, #24]
   17d34:	e12fff1e 	bx	lr

00017d38 <CMouseBehaviour::~CMouseBehaviour()>:
   17d38:	e12fff1e 	bx	lr

00017d3c <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   17d3c:	e92d4010 	push	{r4, lr}
   17d40:	e5903000 	ldr	r3, [r0]
   17d44:	e24dd038 	sub	sp, sp, #56	; 0x38
   17d48:	e3530000 	cmp	r3, #0
   17d4c:	1a00002b 	bne	17e00 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   17d50:	e5801000 	str	r1, [r0]
   17d54:	e3510000 	cmp	r1, #0
   17d58:	0a00002e 	beq	17e18 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xdc>
   17d5c:	e5904004 	ldr	r4, [r0, #4]
   17d60:	e3540000 	cmp	r4, #0
   17d64:	1a000031 	bne	17e30 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   17d68:	e5802004 	str	r2, [r0, #4]
   17d6c:	e3520000 	cmp	r2, #0
   17d70:	0a000034 	beq	17e48 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   17d74:	e2811001 	add	r1, r1, #1
   17d78:	e2822001 	add	r2, r2, #1
   17d7c:	e1a020a2 	lsr	r2, r2, #1
   17d80:	e1a010a1 	lsr	r1, r1, #1
   17d84:	e580200c 	str	r2, [r0, #12]
   17d88:	e5801008 	str	r1, [r0, #8]
   17d8c:	e1a01004 	mov	r1, r4
   17d90:	e28d000c 	add	r0, sp, #12
   17d94:	eb003497 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   17d98:	e3041a40 	movw	r1, #19008	; 0x4a40
   17d9c:	e3401003 	movt	r1, #3
   17da0:	e28d2014 	add	r2, sp, #20
   17da4:	e381c103 	orr	ip, r1, #-1073741824	; 0xc0000000
   17da8:	e28d000c 	add	r0, sp, #12
   17dac:	e3081010 	movw	r1, #32784	; 0x8010
   17db0:	e3a03018 	mov	r3, #24
   17db4:	e58d3000 	str	r3, [sp]
   17db8:	e3a03024 	mov	r3, #36	; 0x24
   17dbc:	e58d4028 	str	r4, [sp, #40]	; 0x28
   17dc0:	e58d4030 	str	r4, [sp, #48]	; 0x30
   17dc4:	e58d4034 	str	r4, [sp, #52]	; 0x34
   17dc8:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   17dcc:	e3a0c010 	mov	ip, #16
   17dd0:	e58dc020 	str	ip, [sp, #32]
   17dd4:	e58dc024 	str	ip, [sp, #36]	; 0x24
   17dd8:	eb0034cf 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   17ddc:	e2504000 	subs	r4, r0, #0
   17de0:	e28d000c 	add	r0, sp, #12
   17de4:	159d4020 	ldrne	r4, [sp, #32]
   17de8:	116f4f14 	clzne	r4, r4
   17dec:	11a042a4 	lsrne	r4, r4, #5
   17df0:	eb003487 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   17df4:	e1a00004 	mov	r0, r4
   17df8:	e28dd038 	add	sp, sp, #56	; 0x38
   17dfc:	e8bd8010 	pop	{r4, pc}
   17e00:	e3041e40 	movw	r1, #20032	; 0x4e40
   17e04:	e3401003 	movt	r1, #3
   17e08:	e3040e54 	movw	r0, #20052	; 0x4e54
   17e0c:	e3400003 	movt	r0, #3
   17e10:	e3a0204c 	mov	r2, #76	; 0x4c
   17e14:	eb003456 	bl	24f74 <assertion_failed>
   17e18:	e3041e40 	movw	r1, #20032	; 0x4e40
   17e1c:	e3401003 	movt	r1, #3
   17e20:	e3040e68 	movw	r0, #20072	; 0x4e68
   17e24:	e3400003 	movt	r0, #3
   17e28:	e3a0204e 	mov	r2, #78	; 0x4e
   17e2c:	eb003450 	bl	24f74 <assertion_failed>
   17e30:	e3041e40 	movw	r1, #20032	; 0x4e40
   17e34:	e3401003 	movt	r1, #3
   17e38:	e3040e7c 	movw	r0, #20092	; 0x4e7c
   17e3c:	e3400003 	movt	r0, #3
   17e40:	e3a02050 	mov	r2, #80	; 0x50
   17e44:	eb00344a 	bl	24f74 <assertion_failed>
   17e48:	e3041e40 	movw	r1, #20032	; 0x4e40
   17e4c:	e3401003 	movt	r1, #3
   17e50:	e3040e94 	movw	r0, #20116	; 0x4e94
   17e54:	e3400003 	movt	r0, #3
   17e58:	e3a02052 	mov	r2, #82	; 0x52
   17e5c:	eb003444 	bl	24f74 <assertion_failed>

00017e60 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   17e60:	e5903018 	ldr	r3, [r0, #24]
   17e64:	e92d4010 	push	{r4, lr}
   17e68:	e3530000 	cmp	r3, #0
   17e6c:	1a000008 	bne	17e94 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x34>
   17e70:	e3510000 	cmp	r1, #0
   17e74:	e5801018 	str	r1, [r0, #24]
   17e78:	18bd8010 	popne	{r4, pc}
   17e7c:	e3041e40 	movw	r1, #20032	; 0x4e40
   17e80:	e3401003 	movt	r1, #3
   17e84:	e3020de8 	movw	r0, #11752	; 0x2de8
   17e88:	e3400003 	movt	r0, #3
   17e8c:	e3a02070 	mov	r2, #112	; 0x70
   17e90:	eb003437 	bl	24f74 <assertion_failed>
   17e94:	e3041e40 	movw	r1, #20032	; 0x4e40
   17e98:	e3401003 	movt	r1, #3
   17e9c:	e3040ea8 	movw	r0, #20136	; 0x4ea8
   17ea0:	e3400003 	movt	r0, #3
   17ea4:	e3a0206e 	mov	r2, #110	; 0x6e
   17ea8:	eb003431 	bl	24f74 <assertion_failed>

00017eac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   17eac:	e590c000 	ldr	ip, [r0]
   17eb0:	e35c0000 	cmp	ip, #0
   17eb4:	012fff1e 	bxeq	lr
   17eb8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17ebc:	e590e004 	ldr	lr, [r0, #4]
   17ec0:	e35e0000 	cmp	lr, #0
   17ec4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ec8:	e1a04000 	mov	r4, r0
   17ecc:	e3a00012 	mov	r0, #18
   17ed0:	e1a05001 	mov	r5, r1
   17ed4:	e3061667 	movw	r1, #26215	; 0x6667
   17ed8:	e3461666 	movt	r1, #26214	; 0x6666
   17edc:	e0020290 	mul	r2, r0, r2
   17ee0:	e5947008 	ldr	r7, [r4, #8]
   17ee4:	e0000390 	mul	r0, r0, r3
   17ee8:	e594800c 	ldr	r8, [r4, #12]
   17eec:	e1a06fc2 	asr	r6, r2, #31
   17ef0:	e0c32192 	smull	r2, r3, r2, r1
   17ef4:	e1a09fc0 	asr	r9, r0, #31
   17ef8:	e0c10190 	smull	r0, r1, r0, r1
   17efc:	e0662143 	rsb	r2, r6, r3, asr #2
   17f00:	e0822007 	add	r2, r2, r7
   17f04:	e0693141 	rsb	r3, r9, r1, asr #2
   17f08:	e0883003 	add	r3, r8, r3
   17f0c:	e15c0002 	cmp	ip, r2
   17f10:	9a000027 	bls	17fb4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x108>
   17f14:	e1c420f8 	strd	r2, [r4, #8]
   17f18:	e15e0003 	cmp	lr, r3
   17f1c:	8a000030 	bhi	17fe4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   17f20:	e584800c 	str	r8, [r4, #12]
   17f24:	e1520007 	cmp	r2, r7
   17f28:	0a000008 	beq	17f50 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   17f2c:	e5946018 	ldr	r6, [r4, #24]
   17f30:	e3a03001 	mov	r3, #1
   17f34:	e5c43010 	strb	r3, [r4, #16]
   17f38:	e3560000 	cmp	r6, #0
   17f3c:	0a000023 	beq	17fd0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x124>
   17f40:	e594300c 	ldr	r3, [r4, #12]
   17f44:	e1a01005 	mov	r1, r5
   17f48:	e3a00000 	mov	r0, #0
   17f4c:	e12fff36 	blx	r6
   17f50:	e5942014 	ldr	r2, [r4, #20]
   17f54:	e1520005 	cmp	r2, r5
   17f58:	0a00001c 	beq	17fd0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x124>
   17f5c:	e5943018 	ldr	r3, [r4, #24]
   17f60:	e3530000 	cmp	r3, #0
   17f64:	0a000019 	beq	17fd0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x124>
   17f68:	e3a06000 	mov	r6, #0
   17f6c:	e3a07001 	mov	r7, #1
   17f70:	e1a03617 	lsl	r3, r7, r6
   17f74:	e3a00001 	mov	r0, #1
   17f78:	e1130002 	tst	r3, r2
   17f7c:	e1a01003 	mov	r1, r3
   17f80:	e0052003 	and	r2, r5, r3
   17f84:	0a000013 	beq	17fd8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x12c>
   17f88:	e3a00002 	mov	r0, #2
   17f8c:	e3520000 	cmp	r2, #0
   17f90:	1a000002 	bne	17fa0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xf4>
   17f94:	e5948018 	ldr	r8, [r4, #24]
   17f98:	e1c420d8 	ldrd	r2, [r4, #8]
   17f9c:	e12fff38 	blx	r8
   17fa0:	e2866001 	add	r6, r6, #1
   17fa4:	e3560003 	cmp	r6, #3
   17fa8:	0a000008 	beq	17fd0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x124>
   17fac:	e5942014 	ldr	r2, [r4, #20]
   17fb0:	eaffffee 	b	17f70 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xc4>
   17fb4:	e584300c 	str	r3, [r4, #12]
   17fb8:	e15e0003 	cmp	lr, r3
   17fbc:	9a00000b 	bls	17ff0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x144>
   17fc0:	e1580003 	cmp	r8, r3
   17fc4:	11a02007 	movne	r2, r7
   17fc8:	1affffd7 	bne	17f2c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   17fcc:	eaffffdf 	b	17f50 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   17fd0:	e5845014 	str	r5, [r4, #20]
   17fd4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17fd8:	e3520000 	cmp	r2, #0
   17fdc:	1affffec 	bne	17f94 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe8>
   17fe0:	eaffffee 	b	17fa0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xf4>
   17fe4:	e1520007 	cmp	r2, r7
   17fe8:	1affffcf 	bne	17f2c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   17fec:	eafffff3 	b	17fc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x114>
   17ff0:	e584800c 	str	r8, [r4, #12]
   17ff4:	eaffffd5 	b	17f50 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>

00017ff8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   17ff8:	e92d4070 	push	{r4, r5, r6, lr}
   17ffc:	e1a05000 	mov	r5, r0
   18000:	e1a04001 	mov	r4, r1
   18004:	e24dd030 	sub	sp, sp, #48	; 0x30
   18008:	e3a01000 	mov	r1, #0
   1800c:	e28d000c 	add	r0, sp, #12
   18010:	e1a06002 	mov	r6, r2
   18014:	eb0033f7 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18018:	e28d2014 	add	r2, sp, #20
   1801c:	e3081011 	movw	r1, #32785	; 0x8011
   18020:	e28d000c 	add	r0, sp, #12
   18024:	e3a03010 	mov	r3, #16
   18028:	e58d3000 	str	r3, [sp]
   1802c:	e3a0301c 	mov	r3, #28
   18030:	e3a0c001 	mov	ip, #1
   18034:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18038:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   1803c:	e58d6020 	str	r6, [sp, #32]
   18040:	e58d5024 	str	r5, [sp, #36]	; 0x24
   18044:	eb003434 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18048:	e2504000 	subs	r4, r0, #0
   1804c:	e28d000c 	add	r0, sp, #12
   18050:	159d4020 	ldrne	r4, [sp, #32]
   18054:	116f4f14 	clzne	r4, r4
   18058:	11a042a4 	lsrne	r4, r4, #5
   1805c:	eb0033ec 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   18060:	e1a00004 	mov	r0, r4
   18064:	e28dd030 	add	sp, sp, #48	; 0x30
   18068:	e8bd8070 	pop	{r4, r5, r6, pc}

0001806c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   1806c:	e5903000 	ldr	r3, [r0]
   18070:	e92d4010 	push	{r4, lr}
   18074:	e3530000 	cmp	r3, #0
   18078:	0a000014 	beq	180d0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   1807c:	e590c004 	ldr	ip, [r0, #4]
   18080:	e35c0000 	cmp	ip, #0
   18084:	0a000017 	beq	180e8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x7c>
   18088:	e1a0e001 	mov	lr, r1
   1808c:	e1530001 	cmp	r3, r1
   18090:	815c0002 	cmphi	ip, r2
   18094:	8a000001 	bhi	180a0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x34>
   18098:	e3a00000 	mov	r0, #0
   1809c:	e8bd8010 	pop	{r4, pc}
   180a0:	e5d03011 	ldrb	r3, [r0, #17]
   180a4:	e5801008 	str	r1, [r0, #8]
   180a8:	e580200c 	str	r2, [r0, #12]
   180ac:	e3530000 	cmp	r3, #0
   180b0:	1a000001 	bne	180bc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   180b4:	e3a00001 	mov	r0, #1
   180b8:	e8bd8010 	pop	{r4, pc}
   180bc:	e1a01002 	mov	r1, r2
   180c0:	e1a0000e 	mov	r0, lr
   180c4:	e3a02001 	mov	r2, #1
   180c8:	e8bd4010 	pop	{r4, lr}
   180cc:	eaffffc9 	b	17ff8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   180d0:	e3041e40 	movw	r1, #20032	; 0x4e40
   180d4:	e3401003 	movt	r1, #3
   180d8:	e3040e68 	movw	r0, #20072	; 0x4e68
   180dc:	e3400003 	movt	r0, #3
   180e0:	e3a02075 	mov	r2, #117	; 0x75
   180e4:	eb0033a2 	bl	24f74 <assertion_failed>
   180e8:	e3041e40 	movw	r1, #20032	; 0x4e40
   180ec:	e3401003 	movt	r1, #3
   180f0:	e3040e94 	movw	r0, #20116	; 0x4e94
   180f4:	e3400003 	movt	r0, #3
   180f8:	e3a02076 	mov	r2, #118	; 0x76
   180fc:	eb00339c 	bl	24f74 <assertion_failed>

00018100 <CMouseBehaviour::ShowCursor(bool)>:
   18100:	e1a02001 	mov	r2, r1
   18104:	e5903008 	ldr	r3, [r0, #8]
   18108:	e5901000 	ldr	r1, [r0]
   1810c:	e92d4010 	push	{r4, lr}
   18110:	e1530001 	cmp	r3, r1
   18114:	e5d04011 	ldrb	r4, [r0, #17]
   18118:	e5c02011 	strb	r2, [r0, #17]
   1811c:	2a000007 	bcs	18140 <CMouseBehaviour::ShowCursor(bool)+0x40>
   18120:	e590100c 	ldr	r1, [r0, #12]
   18124:	e5900004 	ldr	r0, [r0, #4]
   18128:	e1510000 	cmp	r1, r0
   1812c:	2a000009 	bcs	18158 <CMouseBehaviour::ShowCursor(bool)+0x58>
   18130:	e1a00003 	mov	r0, r3
   18134:	ebffffaf 	bl	17ff8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18138:	e1a00004 	mov	r0, r4
   1813c:	e8bd8010 	pop	{r4, pc}
   18140:	e3041e40 	movw	r1, #20032	; 0x4e40
   18144:	e3401003 	movt	r1, #3
   18148:	e3040ec0 	movw	r0, #20160	; 0x4ec0
   1814c:	e3400003 	movt	r0, #3
   18150:	e3a0208d 	mov	r2, #141	; 0x8d
   18154:	eb003386 	bl	24f74 <assertion_failed>
   18158:	e3041e40 	movw	r1, #20032	; 0x4e40
   1815c:	e3401003 	movt	r1, #3
   18160:	e3040edc 	movw	r0, #20188	; 0x4edc
   18164:	e3400003 	movt	r0, #3
   18168:	e3a0208e 	mov	r2, #142	; 0x8e
   1816c:	eb003380 	bl	24f74 <assertion_failed>

00018170 <CMouseBehaviour::UpdateCursor()>:
   18170:	e5d03011 	ldrb	r3, [r0, #17]
   18174:	e3530000 	cmp	r3, #0
   18178:	012fff1e 	bxeq	lr
   1817c:	e5d03010 	ldrb	r3, [r0, #16]
   18180:	e3530000 	cmp	r3, #0
   18184:	012fff1e 	bxeq	lr
   18188:	e3a03000 	mov	r3, #0
   1818c:	e3a02001 	mov	r2, #1
   18190:	e5c03010 	strb	r3, [r0, #16]
   18194:	e1c000d8 	ldrd	r0, [r0, #8]
   18198:	eaffff96 	b	17ff8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

0001819c <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1819c:	e92d4010 	push	{r4, lr}
   181a0:	e1a04000 	mov	r4, r0
   181a4:	e4801004 	str	r1, [r0], #4
   181a8:	e1a01002 	mov	r1, r2
   181ac:	eb004514 	bl	29604 <CString::CString(char const*)>
   181b0:	e3a03000 	mov	r3, #0
   181b4:	e1a00004 	mov	r0, r4
   181b8:	e5843014 	str	r3, [r4, #20]
   181bc:	e5843018 	str	r3, [r4, #24]
   181c0:	e584301c 	str	r3, [r4, #28]
   181c4:	e5843020 	str	r3, [r4, #32]
   181c8:	e8bd8010 	pop	{r4, pc}

000181cc <CPartitionManager::~CPartitionManager()>:
   181cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   181d0:	e3047f00 	movw	r7, #20224	; 0x4f00
   181d4:	e3407003 	movt	r7, #3
   181d8:	e24dd010 	sub	sp, sp, #16
   181dc:	e1a06000 	mov	r6, r0
   181e0:	e2809004 	add	r9, r0, #4
   181e4:	e2804014 	add	r4, r0, #20
   181e8:	e2808024 	add	r8, r0, #36	; 0x24
   181ec:	e3a05000 	mov	r5, #0
   181f0:	e4943004 	ldr	r3, [r4], #4
   181f4:	e1a0000d 	mov	r0, sp
   181f8:	e3530000 	cmp	r3, #0
   181fc:	0a00001a 	beq	1826c <CPartitionManager::~CPartitionManager()+0xa0>
   18200:	eb0044f9 	bl	295ec <CString::CString()>
   18204:	e2855001 	add	r5, r5, #1
   18208:	e1a00009 	mov	r0, r9
   1820c:	eb00450d 	bl	29648 <CString::operator char const*() const>
   18210:	e1a03005 	mov	r3, r5
   18214:	e1a02000 	mov	r2, r0
   18218:	e1a01007 	mov	r1, r7
   1821c:	e1a0000d 	mov	r0, sp
   18220:	eb0048c1 	bl	2a52c <CString::Format(char const*, ...)>
   18224:	eb0035fc 	bl	25a1c <CDeviceNameService::Get()>
   18228:	e1a0a000 	mov	sl, r0
   1822c:	e1a0000d 	mov	r0, sp
   18230:	eb004504 	bl	29648 <CString::operator char const*() const>
   18234:	e3a02001 	mov	r2, #1
   18238:	e1a01000 	mov	r1, r0
   1823c:	e1a0000a 	mov	r0, sl
   18240:	eb003569 	bl	257ec <CDeviceNameService::RemoveDevice(char const*, bool)>
   18244:	e5143004 	ldr	r3, [r4, #-4]
   18248:	e2530000 	subs	r0, r3, #0
   1824c:	0a000002 	beq	1825c <CPartitionManager::~CPartitionManager()+0x90>
   18250:	e5933000 	ldr	r3, [r3]
   18254:	e5933004 	ldr	r3, [r3, #4]
   18258:	e12fff33 	blx	r3
   1825c:	e3a03000 	mov	r3, #0
   18260:	e1a0000d 	mov	r0, sp
   18264:	e5043004 	str	r3, [r4, #-4]
   18268:	eb0044ac 	bl	29520 <CString::~CString()>
   1826c:	e1540008 	cmp	r4, r8
   18270:	1affffde 	bne	181f0 <CPartitionManager::~CPartitionManager()+0x24>
   18274:	e3a03000 	mov	r3, #0
   18278:	e1a00009 	mov	r0, r9
   1827c:	e5863000 	str	r3, [r6]
   18280:	eb0044a6 	bl	29520 <CString::~CString()>
   18284:	e1a00006 	mov	r0, r6
   18288:	e28dd010 	add	sp, sp, #16
   1828c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00018290 <CPartitionManager::Initialize()>:
   18290:	e5901000 	ldr	r1, [r0]
   18294:	e3a03000 	mov	r3, #0
   18298:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1829c:	e1a05000 	mov	r5, r0
   182a0:	e1a00001 	mov	r0, r1
   182a4:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   182a8:	e3a02000 	mov	r2, #0
   182ac:	e5911000 	ldr	r1, [r1]
   182b0:	e5911010 	ldr	r1, [r1, #16]
   182b4:	e12fff31 	blx	r1
   182b8:	e1903001 	orrs	r3, r0, r1
   182bc:	1a000008 	bne	182e4 <CPartitionManager::Initialize()+0x54>
   182c0:	e5953000 	ldr	r3, [r5]
   182c4:	e28d1018 	add	r1, sp, #24
   182c8:	e3a02c02 	mov	r2, #512	; 0x200
   182cc:	e1a00003 	mov	r0, r3
   182d0:	e5933000 	ldr	r3, [r3]
   182d4:	e5933008 	ldr	r3, [r3, #8]
   182d8:	e12fff33 	blx	r3
   182dc:	e3500c02 	cmp	r0, #512	; 0x200
   182e0:	0a000009 	beq	1830c <CPartitionManager::Initialize()+0x7c>
   182e4:	eb0038c7 	bl	26608 <CLogger::Get()>
   182e8:	e3043f08 	movw	r3, #20232	; 0x4f08
   182ec:	e3403003 	movt	r3, #3
   182f0:	e3041ef8 	movw	r1, #20216	; 0x4ef8
   182f4:	e3401003 	movt	r1, #3
   182f8:	e3a02001 	mov	r2, #1
   182fc:	eb003802 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18300:	e3a00000 	mov	r0, #0
   18304:	e28ddf87 	add	sp, sp, #540	; 0x21c
   18308:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1830c:	e28d3f85 	add	r3, sp, #532	; 0x214
   18310:	e2833002 	add	r3, r3, #2
   18314:	e1d320b0 	ldrh	r2, [r3]
   18318:	e30a3a55 	movw	r3, #43605	; 0xaa55
   1831c:	e1520003 	cmp	r2, r3
   18320:	1a00001a 	bne	18390 <CPartitionManager::Initialize()+0x100>
   18324:	e3a06000 	mov	r6, #0
   18328:	e3049f00 	movw	r9, #20224	; 0x4f00
   1832c:	e3409003 	movt	r9, #3
   18330:	e28d4018 	add	r4, sp, #24
   18334:	e1a08006 	mov	r8, r6
   18338:	e3087021 	movw	r7, #32801	; 0x8021
   1833c:	e5d421c2 	ldrb	r2, [r4, #450]	; 0x1c2
   18340:	e352000f 	cmp	r2, #15
   18344:	91e03237 	mvnls	r3, r7, lsr r2
   18348:	83a03000 	movhi	r3, #0
   1834c:	92033001 	andls	r3, r3, #1
   18350:	92233001 	eorls	r3, r3, #1
   18354:	e35200ef 	cmp	r2, #239	; 0xef
   18358:	03833001 	orreq	r3, r3, #1
   1835c:	e3530000 	cmp	r3, #0
   18360:	0a000014 	beq	183b8 <CPartitionManager::Initialize()+0x128>
   18364:	e2866001 	add	r6, r6, #1
   18368:	e2844010 	add	r4, r4, #16
   1836c:	e3560004 	cmp	r6, #4
   18370:	1afffff1 	bne	1833c <CPartitionManager::Initialize()+0xac>
   18374:	e3580000 	cmp	r8, #0
   18378:	13a00001 	movne	r0, #1
   1837c:	1affffe0 	bne	18304 <CPartitionManager::Initialize()+0x74>
   18380:	eb0038a0 	bl	26608 <CLogger::Get()>
   18384:	e3043f5c 	movw	r3, #20316	; 0x4f5c
   18388:	e3403003 	movt	r3, #3
   1838c:	ea000002 	b	1839c <CPartitionManager::Initialize()+0x10c>
   18390:	eb00389c 	bl	26608 <CLogger::Get()>
   18394:	e3043f18 	movw	r3, #20248	; 0x4f18
   18398:	e3403003 	movt	r3, #3
   1839c:	e3a02002 	mov	r2, #2
   183a0:	e3041ef8 	movw	r1, #20216	; 0x4ef8
   183a4:	e3401003 	movt	r1, #3
   183a8:	eb0037d7 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   183ac:	e3a00001 	mov	r0, #1
   183b0:	e28ddf87 	add	sp, sp, #540	; 0x21c
   183b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183b8:	e28d3f86 	add	r3, sp, #536	; 0x218
   183bc:	e286201c 	add	r2, r6, #28
   183c0:	e0832202 	add	r2, r3, r2, lsl #4
   183c4:	e51231fa 	ldr	r3, [r2, #-506]	; 0xfffffe06
   183c8:	e3530000 	cmp	r3, #0
   183cc:	0affffe4 	beq	18364 <CPartitionManager::Initialize()+0xd4>
   183d0:	e51231f6 	ldr	r3, [r2, #-502]	; 0xfffffe0a
   183d4:	e3530000 	cmp	r3, #0
   183d8:	0affffe1 	beq	18364 <CPartitionManager::Initialize()+0xd4>
   183dc:	e085a106 	add	sl, r5, r6, lsl #2
   183e0:	e59a3014 	ldr	r3, [sl, #20]
   183e4:	e3530000 	cmp	r3, #0
   183e8:	1a000021 	bne	18474 <CPartitionManager::Initialize()+0x1e4>
   183ec:	e3a00020 	mov	r0, #32
   183f0:	e58d2004 	str	r2, [sp, #4]
   183f4:	eb004ebd 	bl	2bef0 <operator new(unsigned int)>
   183f8:	e59d2004 	ldr	r2, [sp, #4]
   183fc:	e1a0b005 	mov	fp, r5
   18400:	e58d0000 	str	r0, [sp]
   18404:	e2888001 	add	r8, r8, #1
   18408:	e49b1004 	ldr	r1, [fp], #4
   1840c:	e51231f6 	ldr	r3, [r2, #-502]	; 0xfffffe0a
   18410:	e51221fa 	ldr	r2, [r2, #-506]	; 0xfffffe06
   18414:	eb0000b1 	bl	186e0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   18418:	e59d3000 	ldr	r3, [sp]
   1841c:	e58a3014 	str	r3, [sl, #20]
   18420:	e28d0008 	add	r0, sp, #8
   18424:	eb004470 	bl	295ec <CString::CString()>
   18428:	e1a0000b 	mov	r0, fp
   1842c:	eb004485 	bl	29648 <CString::operator char const*() const>
   18430:	e1a03008 	mov	r3, r8
   18434:	e1a02000 	mov	r2, r0
   18438:	e1a01009 	mov	r1, r9
   1843c:	e28d0008 	add	r0, sp, #8
   18440:	eb004839 	bl	2a52c <CString::Format(char const*, ...)>
   18444:	eb003574 	bl	25a1c <CDeviceNameService::Get()>
   18448:	e1a0b000 	mov	fp, r0
   1844c:	e28d0008 	add	r0, sp, #8
   18450:	eb00447c 	bl	29648 <CString::operator char const*() const>
   18454:	e59a2014 	ldr	r2, [sl, #20]
   18458:	e1a01000 	mov	r1, r0
   1845c:	e3a03001 	mov	r3, #1
   18460:	e1a0000b 	mov	r0, fp
   18464:	eb0034b2 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   18468:	e28d0008 	add	r0, sp, #8
   1846c:	eb00442b 	bl	29520 <CString::~CString()>
   18470:	eaffffbb 	b	18364 <CPartitionManager::Initialize()+0xd4>
   18474:	e3041f2c 	movw	r1, #20268	; 0x4f2c
   18478:	e3401003 	movt	r1, #3
   1847c:	e3040f44 	movw	r0, #20292	; 0x4f44
   18480:	e3400003 	movt	r0, #3
   18484:	e3a02078 	mov	r2, #120	; 0x78
   18488:	eb0032b9 	bl	24f74 <assertion_failed>

0001848c <CPartition::~CPartition()>:
   1848c:	e59f2018 	ldr	r2, [pc, #24]	; 184ac <CPartition::~CPartition()+0x20>
   18490:	e3a03000 	mov	r3, #0
   18494:	e92d4010 	push	{r4, lr}
   18498:	e1a04000 	mov	r4, r0
   1849c:	e1c020f0 	strd	r2, [r0]
   184a0:	eb003466 	bl	25640 <CDevice::~CDevice()>
   184a4:	e1a00004 	mov	r0, r4
   184a8:	e8bd8010 	pop	{r4, pc}
   184ac:	00034f88 	.word	0x00034f88

000184b0 <CPartition::~CPartition()>:
   184b0:	e59f2024 	ldr	r2, [pc, #36]	; 184dc <CPartition::~CPartition()+0x2c>
   184b4:	e3a03000 	mov	r3, #0
   184b8:	e92d4010 	push	{r4, lr}
   184bc:	e1a04000 	mov	r4, r0
   184c0:	e1c020f0 	strd	r2, [r0]
   184c4:	eb00345d 	bl	25640 <CDevice::~CDevice()>
   184c8:	e1a00004 	mov	r0, r4
   184cc:	e3a01020 	mov	r1, #32
   184d0:	eb004e94 	bl	2bf28 <operator delete(void*, unsigned int)>
   184d4:	e1a00004 	mov	r0, r4
   184d8:	e8bd8010 	pop	{r4, pc}
   184dc:	00034f88 	.word	0x00034f88

000184e0 <CPartition::Read(void*, unsigned int)>:
   184e0:	e5d03018 	ldrb	r3, [r0, #24]
   184e4:	e3530000 	cmp	r3, #0
   184e8:	1a000021 	bne	18574 <CPartition::Read(void*, unsigned int)+0x94>
   184ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184f0:	e30081ff 	movw	r8, #511	; 0x1ff
   184f4:	e3a09000 	mov	r9, #0
   184f8:	e0984002 	adds	r4, r8, r2
   184fc:	e590600c 	ldr	r6, [r0, #12]
   18500:	e2a95000 	adc	r5, r9, #0
   18504:	e3a07000 	mov	r7, #0
   18508:	e1c081d0 	ldrd	r8, [r0, #16]
   1850c:	e24dd004 	sub	sp, sp, #4
   18510:	e094a008 	adds	sl, r4, r8
   18514:	e0a5b009 	adc	fp, r5, r9
   18518:	e1a044aa 	lsr	r4, sl, #9
   1851c:	e1a054ab 	lsr	r5, fp, #9
   18520:	e1844b8b 	orr	r4, r4, fp, lsl #23
   18524:	e1570005 	cmp	r7, r5
   18528:	01560004 	cmpeq	r6, r4
   1852c:	3a000007 	bcc	18550 <CPartition::Read(void*, unsigned int)+0x70>
   18530:	e5900004 	ldr	r0, [r0, #4]
   18534:	e3500000 	cmp	r0, #0
   18538:	0a000007 	beq	1855c <CPartition::Read(void*, unsigned int)+0x7c>
   1853c:	e5903000 	ldr	r3, [r0]
   18540:	e5933008 	ldr	r3, [r3, #8]
   18544:	e28dd004 	add	sp, sp, #4
   18548:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1854c:	e12fff13 	bx	r3
   18550:	e3e00000 	mvn	r0, #0
   18554:	e28dd004 	add	sp, sp, #4
   18558:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1855c:	e3041fa0 	movw	r1, #20384	; 0x4fa0
   18560:	e3401003 	movt	r1, #3
   18564:	e3010174 	movw	r0, #4468	; 0x1174
   18568:	e3400003 	movt	r0, #3
   1856c:	e3a02035 	mov	r2, #53	; 0x35
   18570:	eb00327f 	bl	24f74 <assertion_failed>
   18574:	e3e00000 	mvn	r0, #0
   18578:	e12fff1e 	bx	lr

0001857c <CPartition::Write(void const*, unsigned int)>:
   1857c:	e5d03018 	ldrb	r3, [r0, #24]
   18580:	e3530000 	cmp	r3, #0
   18584:	1a000021 	bne	18610 <CPartition::Write(void const*, unsigned int)+0x94>
   18588:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1858c:	e30081ff 	movw	r8, #511	; 0x1ff
   18590:	e3a09000 	mov	r9, #0
   18594:	e0984002 	adds	r4, r8, r2
   18598:	e590600c 	ldr	r6, [r0, #12]
   1859c:	e2a95000 	adc	r5, r9, #0
   185a0:	e3a07000 	mov	r7, #0
   185a4:	e1c081d0 	ldrd	r8, [r0, #16]
   185a8:	e24dd004 	sub	sp, sp, #4
   185ac:	e094a008 	adds	sl, r4, r8
   185b0:	e0a5b009 	adc	fp, r5, r9
   185b4:	e1a044aa 	lsr	r4, sl, #9
   185b8:	e1a054ab 	lsr	r5, fp, #9
   185bc:	e1844b8b 	orr	r4, r4, fp, lsl #23
   185c0:	e1570005 	cmp	r7, r5
   185c4:	01560004 	cmpeq	r6, r4
   185c8:	3a000007 	bcc	185ec <CPartition::Write(void const*, unsigned int)+0x70>
   185cc:	e5900004 	ldr	r0, [r0, #4]
   185d0:	e3500000 	cmp	r0, #0
   185d4:	0a000007 	beq	185f8 <CPartition::Write(void const*, unsigned int)+0x7c>
   185d8:	e5903000 	ldr	r3, [r0]
   185dc:	e593300c 	ldr	r3, [r3, #12]
   185e0:	e28dd004 	add	sp, sp, #4
   185e4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e8:	e12fff13 	bx	r3
   185ec:	e3e00000 	mvn	r0, #0
   185f0:	e28dd004 	add	sp, sp, #4
   185f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185f8:	e3041fa0 	movw	r1, #20384	; 0x4fa0
   185fc:	e3401003 	movt	r1, #3
   18600:	e3010174 	movw	r0, #4468	; 0x1174
   18604:	e3400003 	movt	r0, #3
   18608:	e3a02047 	mov	r2, #71	; 0x47
   1860c:	eb003258 	bl	24f74 <assertion_failed>
   18610:	e3e00000 	mvn	r0, #0
   18614:	e12fff1e 	bx	lr

00018618 <CPartition::Seek(unsigned long long)>:
   18618:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1861c:	e3a05000 	mov	r5, #0
   18620:	e30041ff 	movw	r4, #511	; 0x1ff
   18624:	e0057003 	and	r7, r5, r3
   18628:	e0046002 	and	r6, r4, r2
   1862c:	e3a01001 	mov	r1, #1
   18630:	e5c01018 	strb	r1, [r0, #24]
   18634:	e1961007 	orrs	r1, r6, r7
   18638:	1a00001f 	bne	186bc <CPartition::Seek(unsigned long long)+0xa4>
   1863c:	e590400c 	ldr	r4, [r0, #12]
   18640:	e1a064a2 	lsr	r6, r2, #9
   18644:	e1a074a3 	lsr	r7, r3, #9
   18648:	e3a05000 	mov	r5, #0
   1864c:	e1866b83 	orr	r6, r6, r3, lsl #23
   18650:	e1570005 	cmp	r7, r5
   18654:	01560004 	cmpeq	r6, r4
   18658:	2a000017 	bcs	186bc <CPartition::Seek(unsigned long long)+0xa4>
   1865c:	e1a06000 	mov	r6, r0
   18660:	e1a04002 	mov	r4, r2
   18664:	e1c000d4 	ldrd	r0, [r0, #4]
   18668:	e1a05003 	mov	r5, r3
   1866c:	e1a02481 	lsl	r2, r1, #9
   18670:	e1a03ba1 	lsr	r3, r1, #23
   18674:	e0928004 	adds	r8, r2, r4
   18678:	e0a39005 	adc	r9, r3, r5
   1867c:	e3500000 	cmp	r0, #0
   18680:	0a000010 	beq	186c8 <CPartition::Seek(unsigned long long)+0xb0>
   18684:	e5901000 	ldr	r1, [r0]
   18688:	e1a02008 	mov	r2, r8
   1868c:	e1a03009 	mov	r3, r9
   18690:	e5911010 	ldr	r1, [r1, #16]
   18694:	e12fff31 	blx	r1
   18698:	e1510009 	cmp	r1, r9
   1869c:	01500008 	cmpeq	r0, r8
   186a0:	1a000005 	bne	186bc <CPartition::Seek(unsigned long long)+0xa4>
   186a4:	e3a03000 	mov	r3, #0
   186a8:	e1a00004 	mov	r0, r4
   186ac:	e1a01005 	mov	r1, r5
   186b0:	e1c641f0 	strd	r4, [r6, #16]
   186b4:	e5c63018 	strb	r3, [r6, #24]
   186b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   186bc:	e3e00000 	mvn	r0, #0
   186c0:	e1a01000 	mov	r1, r0
   186c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   186c8:	e3041fa0 	movw	r1, #20384	; 0x4fa0
   186cc:	e3401003 	movt	r1, #3
   186d0:	e3010174 	movw	r0, #4468	; 0x1174
   186d4:	e3400003 	movt	r0, #3
   186d8:	e3a02059 	mov	r2, #89	; 0x59
   186dc:	eb003224 	bl	24f74 <assertion_failed>

000186e0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   186e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   186e4:	e1a04000 	mov	r4, r0
   186e8:	e1a05001 	mov	r5, r1
   186ec:	e1a07002 	mov	r7, r2
   186f0:	e1a06003 	mov	r6, r3
   186f4:	eb0033df 	bl	25678 <CDevice::CDevice()>
   186f8:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   186fc:	e59f1040 	ldr	r1, [pc, #64]	; 18744 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   18700:	e3a02001 	mov	r2, #1
   18704:	e3550000 	cmp	r5, #0
   18708:	e5847008 	str	r7, [r4, #8]
   1870c:	e5845004 	str	r5, [r4, #4]
   18710:	e584600c 	str	r6, [r4, #12]
   18714:	e5841000 	str	r1, [r4]
   18718:	edc40b04 	vstr	d16, [r4, #16]
   1871c:	e5c42018 	strb	r2, [r4, #24]
   18720:	0a000001 	beq	1872c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   18724:	e1a00004 	mov	r0, r4
   18728:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1872c:	e3041fa0 	movw	r1, #20384	; 0x4fa0
   18730:	e3401003 	movt	r1, #3
   18734:	e3010174 	movw	r0, #4468	; 0x1174
   18738:	e3400003 	movt	r0, #3
   1873c:	e3a0201f 	mov	r2, #31
   18740:	eb00320b 	bl	24f74 <assertion_failed>
   18744:	00034f88 	.word	0x00034f88

00018748 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*)>:
   18748:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1874c:	e306c108 	movw	ip, #24840	; 0x6108
   18750:	e340c003 	movt	ip, #3
   18754:	e59de024 	ldr	lr, [sp, #36]	; 0x24
   18758:	e1a07001 	mov	r7, r1
   1875c:	e2805010 	add	r5, r0, #16
   18760:	e1a08003 	mov	r8, r3
   18764:	e35e0000 	cmp	lr, #0
   18768:	e1a04000 	mov	r4, r0
   1876c:	11a0100e 	movne	r1, lr
   18770:	01a0100c 	moveq	r1, ip
   18774:	e1a09002 	mov	r9, r2
   18778:	e280603c 	add	r6, r0, #60	; 0x3c
   1877c:	eb0043a0 	bl	29604 <CString::CString(char const*)>
   18780:	e1a00005 	mov	r0, r5
   18784:	eb001c9d 	bl	1fa00 <CNetConfig::CNetConfig()>
   18788:	e284a05c 	add	sl, r4, #92	; 0x5c
   1878c:	e1a01005 	mov	r1, r5
   18790:	e1a00006 	mov	r0, r6
   18794:	eb000871 	bl	1a960 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*)>
   18798:	e1a02006 	mov	r2, r6
   1879c:	e1a01005 	mov	r1, r5
   187a0:	e2846084 	add	r6, r4, #132	; 0x84
   187a4:	e1a0000a 	mov	r0, sl
   187a8:	eb0006fe 	bl	1a3a8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   187ac:	e1a0200a 	mov	r2, sl
   187b0:	e1a01005 	mov	r1, r5
   187b4:	e1a00006 	mov	r0, r6
   187b8:	eb0004b8 	bl	19aa0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   187bc:	e1a02006 	mov	r2, r6
   187c0:	e1a01005 	mov	r1, r5
   187c4:	e28400c4 	add	r0, r4, #196	; 0xc4
   187c8:	eb0000e7 	bl	18b6c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   187cc:	e3093408 	movw	r3, #37896	; 0x9408
   187d0:	e3403003 	movt	r3, #3
   187d4:	e3a02000 	mov	r2, #0
   187d8:	e5842114 	str	r2, [r4, #276]	; 0x114
   187dc:	e16f1f17 	clz	r1, r7
   187e0:	e5932000 	ldr	r2, [r3]
   187e4:	e1a012a1 	lsr	r1, r1, #5
   187e8:	e5c41110 	strb	r1, [r4, #272]	; 0x110
   187ec:	e3520000 	cmp	r2, #0
   187f0:	1a00001a 	bne	18860 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*)+0x118>
   187f4:	e1a00005 	mov	r0, r5
   187f8:	e5834000 	str	r4, [r3]
   187fc:	eb001c46 	bl	1f91c <CNetConfig::SetDHCP(bool)>
   18800:	e5d43110 	ldrb	r3, [r4, #272]	; 0x110
   18804:	e3530000 	cmp	r3, #0
   18808:	0a000001 	beq	18814 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*)+0xcc>
   1880c:	e1a00004 	mov	r0, r4
   18810:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18814:	e1a01007 	mov	r1, r7
   18818:	e1a00005 	mov	r0, r5
   1881c:	eb001c96 	bl	1fa7c <CNetConfig::SetIPAddress(unsigned char const*)>
   18820:	e1a01009 	mov	r1, r9
   18824:	e1a00005 	mov	r0, r5
   18828:	eb001c9a 	bl	1fa98 <CNetConfig::SetNetMask(unsigned char const*)>
   1882c:	e3580000 	cmp	r8, #0
   18830:	0a000002 	beq	18840 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*)+0xf8>
   18834:	e1a01008 	mov	r1, r8
   18838:	e1a00005 	mov	r0, r5
   1883c:	eb001c3c 	bl	1f934 <CNetConfig::SetDefaultGateway(unsigned char const*)>
   18840:	e59d3020 	ldr	r3, [sp, #32]
   18844:	e3530000 	cmp	r3, #0
   18848:	0affffef 	beq	1880c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*)+0xc4>
   1884c:	e1a00005 	mov	r0, r5
   18850:	e1a01003 	mov	r1, r3
   18854:	eb001c38 	bl	1f93c <CNetConfig::SetDNSServer(unsigned char const*)>
   18858:	e1a00004 	mov	r0, r4
   1885c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18860:	e3041fb0 	movw	r1, #20400	; 0x4fb0
   18864:	e3401003 	movt	r1, #3
   18868:	e3040fc4 	movw	r0, #20420	; 0x4fc4
   1886c:	e3400003 	movt	r0, #3
   18870:	e3a02026 	mov	r2, #38	; 0x26
   18874:	eb0031be 	bl	24f74 <assertion_failed>

00018878 <CNetSubSystem::Process()>:
   18878:	e92d4010 	push	{r4, lr}
   1887c:	e1a04000 	mov	r4, r0
   18880:	e280003c 	add	r0, r0, #60	; 0x3c
   18884:	eb00089f 	bl	1ab08 <CNetDeviceLayer::Process()>
   18888:	e284005c 	add	r0, r4, #92	; 0x5c
   1888c:	eb000723 	bl	1a520 <CLinkLayer::Process()>
   18890:	e2840084 	add	r0, r4, #132	; 0x84
   18894:	eb0004d2 	bl	19be4 <CNetworkLayer::Process()>
   18898:	e28400c4 	add	r0, r4, #196	; 0xc4
   1889c:	e8bd4010 	pop	{r4, lr}
   188a0:	ea0003b9 	b	1978c <CTransportLayer::Process()>

000188a4 <CNetSubSystem::GetConfig()>:
   188a4:	e2800010 	add	r0, r0, #16
   188a8:	e12fff1e 	bx	lr

000188ac <CNetSubSystem::GetNetDeviceLayer()>:
   188ac:	e280003c 	add	r0, r0, #60	; 0x3c
   188b0:	e12fff1e 	bx	lr

000188b4 <CNetSubSystem::GetTransportLayer()>:
   188b4:	e28000c4 	add	r0, r0, #196	; 0xc4
   188b8:	e12fff1e 	bx	lr

000188bc <CNetSubSystem::IsRunning() const>:
   188bc:	e5d03110 	ldrb	r3, [r0, #272]	; 0x110
   188c0:	e3530000 	cmp	r3, #0
   188c4:	0a000003 	beq	188d8 <CNetSubSystem::IsRunning() const+0x1c>
   188c8:	e5900114 	ldr	r0, [r0, #276]	; 0x114
   188cc:	e3500000 	cmp	r0, #0
   188d0:	0a000002 	beq	188e0 <CNetSubSystem::IsRunning() const+0x24>
   188d4:	ea001f80 	b	206dc <CDHCPClient::IsBound() const>
   188d8:	e3a00001 	mov	r0, #1
   188dc:	e12fff1e 	bx	lr
   188e0:	e3041fb0 	movw	r1, #20400	; 0x4fb0
   188e4:	e3401003 	movt	r1, #3
   188e8:	e3040fd4 	movw	r0, #20436	; 0x4fd4
   188ec:	e3400003 	movt	r0, #3
   188f0:	e92d4010 	push	{r4, lr}
   188f4:	e3a02093 	mov	r2, #147	; 0x93
   188f8:	eb00319d 	bl	24f74 <assertion_failed>

000188fc <CNetSubSystem::Initialize(bool)>:
   188fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18900:	e1a04000 	mov	r4, r0
   18904:	e2805010 	add	r5, r0, #16
   18908:	e1a00005 	mov	r0, r5
   1890c:	e1a06001 	mov	r6, r1
   18910:	eb001c0b 	bl	1f944 <CNetConfig::GetIPAddress() const>
   18914:	eb001d49 	bl	1fe40 <CIPAddress::IsNull() const>
   18918:	e1a03000 	mov	r3, r0
   1891c:	e1a01000 	mov	r1, r0
   18920:	e5c43110 	strb	r3, [r4, #272]	; 0x110
   18924:	e1a00005 	mov	r0, r5
   18928:	eb001bfb 	bl	1f91c <CNetConfig::SetDHCP(bool)>
   1892c:	e1a01006 	mov	r1, r6
   18930:	e284003c 	add	r0, r4, #60	; 0x3c
   18934:	eb00081d 	bl	1a9b0 <CNetDeviceLayer::Initialize(bool)>
   18938:	e3500000 	cmp	r0, #0
   1893c:	1a000002 	bne	1894c <CNetSubSystem::Initialize(bool)+0x50>
   18940:	e3a05000 	mov	r5, #0
   18944:	e1a00005 	mov	r0, r5
   18948:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1894c:	e284505c 	add	r5, r4, #92	; 0x5c
   18950:	e1a00005 	mov	r0, r5
   18954:	eb0006c5 	bl	1a470 <CLinkLayer::Initialize()>
   18958:	e3500000 	cmp	r0, #0
   1895c:	0afffff7 	beq	18940 <CNetSubSystem::Initialize(bool)+0x44>
   18960:	e2847084 	add	r7, r4, #132	; 0x84
   18964:	e1a00007 	mov	r0, r7
   18968:	eb000484 	bl	19b80 <CNetworkLayer::Initialize()>
   1896c:	e3500000 	cmp	r0, #0
   18970:	0afffff2 	beq	18940 <CNetSubSystem::Initialize(bool)+0x44>
   18974:	e1a00005 	mov	r0, r5
   18978:	e1a01007 	mov	r1, r7
   1897c:	eb0006d4 	bl	1a4d4 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   18980:	e28400c4 	add	r0, r4, #196	; 0xc4
   18984:	eb00009e 	bl	18c04 <CTransportLayer::Initialize()>
   18988:	e2505000 	subs	r5, r0, #0
   1898c:	0affffeb 	beq	18940 <CNetSubSystem::Initialize(bool)+0x44>
   18990:	e3a000dc 	mov	r0, #220	; 0xdc
   18994:	eb004d55 	bl	2bef0 <operator new(unsigned int)>
   18998:	e1a01004 	mov	r1, r4
   1899c:	eb000067 	bl	18b40 <CNetTask::CNetTask(CNetSubSystem*)>
   189a0:	e5d43110 	ldrb	r3, [r4, #272]	; 0x110
   189a4:	e3530000 	cmp	r3, #0
   189a8:	0a00000c 	beq	189e0 <CNetSubSystem::Initialize(bool)+0xe4>
   189ac:	e5943114 	ldr	r3, [r4, #276]	; 0x114
   189b0:	e3530000 	cmp	r3, #0
   189b4:	1a000013 	bne	18a08 <CNetSubSystem::Initialize(bool)+0x10c>
   189b8:	e1a00004 	mov	r0, r4
   189bc:	eb004321 	bl	29648 <CString::operator char const*() const>
   189c0:	e1a08000 	mov	r8, r0
   189c4:	e3a00f77 	mov	r0, #476	; 0x1dc
   189c8:	eb004d48 	bl	2bef0 <operator new(unsigned int)>
   189cc:	e1a02008 	mov	r2, r8
   189d0:	e1a01004 	mov	r1, r4
   189d4:	e1a07000 	mov	r7, r0
   189d8:	eb001f07 	bl	205fc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   189dc:	e5847114 	str	r7, [r4, #276]	; 0x114
   189e0:	e3560000 	cmp	r6, #0
   189e4:	1a000002 	bne	189f4 <CNetSubSystem::Initialize(bool)+0xf8>
   189e8:	eaffffd5 	b	18944 <CNetSubSystem::Initialize(bool)+0x48>
   189ec:	eb003110 	bl	24e34 <CScheduler::Get()>
   189f0:	eb003076 	bl	24bd0 <CScheduler::Yield()>
   189f4:	e1a00004 	mov	r0, r4
   189f8:	ebffffaf 	bl	188bc <CNetSubSystem::IsRunning() const>
   189fc:	e3500000 	cmp	r0, #0
   18a00:	0afffff9 	beq	189ec <CNetSubSystem::Initialize(bool)+0xf0>
   18a04:	eaffffce 	b	18944 <CNetSubSystem::Initialize(bool)+0x48>
   18a08:	e3041fb0 	movw	r1, #20400	; 0x4fb0
   18a0c:	e3401003 	movt	r1, #3
   18a10:	e3040fe8 	movw	r0, #20456	; 0x4fe8
   18a14:	e3400003 	movt	r0, #3
   18a18:	e3a02060 	mov	r2, #96	; 0x60
   18a1c:	eb003154 	bl	24f74 <assertion_failed>

00018a20 <CNetSubSystem::Get()>:
   18a20:	e3093408 	movw	r3, #37896	; 0x9408
   18a24:	e3403003 	movt	r3, #3
   18a28:	e5930000 	ldr	r0, [r3]
   18a2c:	e3500000 	cmp	r0, #0
   18a30:	112fff1e 	bxne	lr
   18a34:	e3041fb0 	movw	r1, #20400	; 0x4fb0
   18a38:	e3401003 	movt	r1, #3
   18a3c:	e3040ffc 	movw	r0, #20476	; 0x4ffc
   18a40:	e3400003 	movt	r0, #3
   18a44:	e92d4010 	push	{r4, lr}
   18a48:	e3a02099 	mov	r2, #153	; 0x99
   18a4c:	eb003148 	bl	24f74 <assertion_failed>

00018a50 <CNetSubSystem::~CNetSubSystem()>:
   18a50:	e3093408 	movw	r3, #37896	; 0x9408
   18a54:	e3403003 	movt	r3, #3
   18a58:	e92d4010 	push	{r4, lr}
   18a5c:	e1a04000 	mov	r4, r0
   18a60:	e28000c4 	add	r0, r0, #196	; 0xc4
   18a64:	e3a02000 	mov	r2, #0
   18a68:	e5832000 	str	r2, [r3]
   18a6c:	eb00033c 	bl	19764 <CTransportLayer::~CTransportLayer()>
   18a70:	e2840084 	add	r0, r4, #132	; 0x84
   18a74:	eb000429 	bl	19b20 <CNetworkLayer::~CNetworkLayer()>
   18a78:	e284005c 	add	r0, r4, #92	; 0x5c
   18a7c:	eb000666 	bl	1a41c <CLinkLayer::~CLinkLayer()>
   18a80:	e284003c 	add	r0, r4, #60	; 0x3c
   18a84:	eb0007bf 	bl	1a988 <CNetDeviceLayer::~CNetDeviceLayer()>
   18a88:	e2840010 	add	r0, r4, #16
   18a8c:	eb001b94 	bl	1f8e4 <CNetConfig::~CNetConfig()>
   18a90:	e1a00004 	mov	r0, r4
   18a94:	eb0042a1 	bl	29520 <CString::~CString()>
   18a98:	e1a00004 	mov	r0, r4
   18a9c:	e8bd8010 	pop	{r4, pc}

00018aa0 <CNetTask::~CNetTask()>:
   18aa0:	e59f201c 	ldr	r2, [pc, #28]	; 18ac4 <CNetTask::~CNetTask()+0x24>
   18aa4:	e3a03000 	mov	r3, #0
   18aa8:	e92d4010 	push	{r4, lr}
   18aac:	e1a04000 	mov	r4, r0
   18ab0:	e5802000 	str	r2, [r0]
   18ab4:	e58030d8 	str	r3, [r0, #216]	; 0xd8
   18ab8:	eb002ee2 	bl	24648 <CTask::~CTask()>
   18abc:	e1a00004 	mov	r0, r4
   18ac0:	e8bd8010 	pop	{r4, pc}
   18ac4:	00035014 	.word	0x00035014

00018ac8 <CNetTask::~CNetTask()>:
   18ac8:	e59f2028 	ldr	r2, [pc, #40]	; 18af8 <CNetTask::~CNetTask()+0x30>
   18acc:	e3a03000 	mov	r3, #0
   18ad0:	e92d4010 	push	{r4, lr}
   18ad4:	e1a04000 	mov	r4, r0
   18ad8:	e5802000 	str	r2, [r0]
   18adc:	e58030d8 	str	r3, [r0, #216]	; 0xd8
   18ae0:	eb002ed8 	bl	24648 <CTask::~CTask()>
   18ae4:	e1a00004 	mov	r0, r4
   18ae8:	e3a010dc 	mov	r1, #220	; 0xdc
   18aec:	eb004d0d 	bl	2bf28 <operator delete(void*, unsigned int)>
   18af0:	e1a00004 	mov	r0, r4
   18af4:	e8bd8010 	pop	{r4, pc}
   18af8:	00035014 	.word	0x00035014

00018afc <CNetTask::Run()>:
   18afc:	e92d4010 	push	{r4, lr}
   18b00:	e1a04000 	mov	r4, r0
   18b04:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   18b08:	e3500000 	cmp	r0, #0
   18b0c:	0a000005 	beq	18b28 <CNetTask::Run()+0x2c>
   18b10:	ebffff58 	bl	18878 <CNetSubSystem::Process()>
   18b14:	eb0030c6 	bl	24e34 <CScheduler::Get()>
   18b18:	eb00302c 	bl	24bd0 <CScheduler::Yield()>
   18b1c:	e59400d8 	ldr	r0, [r4, #216]	; 0xd8
   18b20:	e3500000 	cmp	r0, #0
   18b24:	1afffff9 	bne	18b10 <CNetTask::Run()+0x14>
   18b28:	e3051020 	movw	r1, #20512	; 0x5020
   18b2c:	e3401003 	movt	r1, #3
   18b30:	e305002c 	movw	r0, #20524	; 0x502c
   18b34:	e3400003 	movt	r0, #3
   18b38:	e3a02026 	mov	r2, #38	; 0x26
   18b3c:	eb00310c 	bl	24f74 <assertion_failed>

00018b40 <CNetTask::CNetTask(CNetSubSystem*)>:
   18b40:	e92d4070 	push	{r4, r5, r6, lr}
   18b44:	e1a04000 	mov	r4, r0
   18b48:	e1a05001 	mov	r5, r1
   18b4c:	e3a01902 	mov	r1, #32768	; 0x8000
   18b50:	eb002f0c 	bl	24788 <CTask::CTask(unsigned int)>
   18b54:	e59f300c 	ldr	r3, [pc, #12]	; 18b68 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   18b58:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   18b5c:	e1a00004 	mov	r0, r4
   18b60:	e5843000 	str	r3, [r4]
   18b64:	e8bd8070 	pop	{r4, r5, r6, pc}
   18b68:	00035014 	.word	0x00035014

00018b6c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   18b6c:	e92d4070 	push	{r4, r5, r6, lr}
   18b70:	e1a04000 	mov	r4, r0
   18b74:	e1a06002 	mov	r6, r2
   18b78:	e3a02064 	mov	r2, #100	; 0x64
   18b7c:	e1a05001 	mov	r5, r1
   18b80:	e2800008 	add	r0, r0, #8
   18b84:	e1a01002 	mov	r1, r2
   18b88:	e8840060 	stm	r4, {r5, r6}
   18b8c:	eb003995 	bl	271e8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   18b90:	e1a02006 	mov	r2, r6
   18b94:	e1a01005 	mov	r1, r5
   18b98:	e30e3a60 	movw	r3, #60000	; 0xea60
   18b9c:	e34f3fff 	movt	r3, #65535	; 0xffff
   18ba0:	e1c431b8 	strh	r3, [r4, #24]
   18ba4:	e2840020 	add	r0, r4, #32
   18ba8:	e3a03000 	mov	r3, #0
   18bac:	e584301c 	str	r3, [r4, #28]
   18bb0:	eb001a99 	bl	1f61c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   18bb4:	e5943000 	ldr	r3, [r4]
   18bb8:	e3530000 	cmp	r3, #0
   18bbc:	0a000004 	beq	18bd4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   18bc0:	e5943004 	ldr	r3, [r4, #4]
   18bc4:	e3530000 	cmp	r3, #0
   18bc8:	0a000007 	beq	18bec <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x80>
   18bcc:	e1a00004 	mov	r0, r4
   18bd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   18bd4:	e3051044 	movw	r1, #20548	; 0x5044
   18bd8:	e3401003 	movt	r1, #3
   18bdc:	e3050058 	movw	r0, #20568	; 0x5058
   18be0:	e3400003 	movt	r0, #3
   18be4:	e3a02025 	mov	r2, #37	; 0x25
   18be8:	eb0030e1 	bl	24f74 <assertion_failed>
   18bec:	e3051044 	movw	r1, #20548	; 0x5044
   18bf0:	e3401003 	movt	r1, #3
   18bf4:	e305006c 	movw	r0, #20588	; 0x506c
   18bf8:	e3400003 	movt	r0, #3
   18bfc:	e3a02026 	mov	r2, #38	; 0x26
   18c00:	eb0030db 	bl	24f74 <assertion_failed>

00018c04 <CTransportLayer::Initialize()>:
   18c04:	e3a00001 	mov	r0, #1
   18c08:	e12fff1e 	bx	lr

00018c0c <CTransportLayer::Bind(unsigned short, int)>:
   18c0c:	e3520011 	cmp	r2, #17
   18c10:	1a000058 	bne	18d78 <CTransportLayer::Bind(unsigned short, int)+0x16c>
   18c14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18c18:	e1a06000 	mov	r6, r0
   18c1c:	e590001c 	ldr	r0, [r0, #28]
   18c20:	e1a07001 	mov	r7, r1
   18c24:	e3500000 	cmp	r0, #0
   18c28:	1a000038 	bne	18d10 <CTransportLayer::Bind(unsigned short, int)+0x104>
   18c2c:	e2865008 	add	r5, r6, #8
   18c30:	e3a04000 	mov	r4, #0
   18c34:	ea000006 	b	18c54 <CTransportLayer::Bind(unsigned short, int)+0x48>
   18c38:	e1a01004 	mov	r1, r4
   18c3c:	e1a00005 	mov	r0, r5
   18c40:	eb003991 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18c44:	e5903000 	ldr	r3, [r0]
   18c48:	e3530000 	cmp	r3, #0
   18c4c:	0a000004 	beq	18c64 <CTransportLayer::Bind(unsigned short, int)+0x58>
   18c50:	e2844001 	add	r4, r4, #1
   18c54:	e1a00005 	mov	r0, r5
   18c58:	eb003989 	bl	27284 <CPtrArray::GetCount() const>
   18c5c:	e1500004 	cmp	r0, r4
   18c60:	8afffff4 	bhi	18c38 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   18c64:	e1a00005 	mov	r0, r5
   18c68:	eb003985 	bl	27284 <CPtrArray::GetCount() const>
   18c6c:	e1500004 	cmp	r0, r4
   18c70:	9a000021 	bls	18cfc <CTransportLayer::Bind(unsigned short, int)+0xf0>
   18c74:	e3570000 	cmp	r7, #0
   18c78:	0a00001a 	beq	18ce8 <CTransportLayer::Bind(unsigned short, int)+0xdc>
   18c7c:	e5963000 	ldr	r3, [r6]
   18c80:	e3530000 	cmp	r3, #0
   18c84:	0a000029 	beq	18d30 <CTransportLayer::Bind(unsigned short, int)+0x124>
   18c88:	e5963004 	ldr	r3, [r6, #4]
   18c8c:	e3530000 	cmp	r3, #0
   18c90:	0a00002c 	beq	18d48 <CTransportLayer::Bind(unsigned short, int)+0x13c>
   18c94:	e3a00048 	mov	r0, #72	; 0x48
   18c98:	eb004c94 	bl	2bef0 <operator new(unsigned int)>
   18c9c:	e1a03007 	mov	r3, r7
   18ca0:	e8960006 	ldm	r6, {r1, r2}
   18ca4:	e1a08000 	mov	r8, r0
   18ca8:	eb00106b 	bl	1ce5c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   18cac:	e1a01004 	mov	r1, r4
   18cb0:	e1a00005 	mov	r0, r5
   18cb4:	eb003974 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18cb8:	e1a01004 	mov	r1, r4
   18cbc:	e5808000 	str	r8, [r0]
   18cc0:	e1a00005 	mov	r0, r5
   18cc4:	eb003970 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18cc8:	e5903000 	ldr	r3, [r0]
   18ccc:	e3530000 	cmp	r3, #0
   18cd0:	0a000022 	beq	18d60 <CTransportLayer::Bind(unsigned short, int)+0x154>
   18cd4:	e596301c 	ldr	r3, [r6, #28]
   18cd8:	e3530000 	cmp	r3, #0
   18cdc:	1a000010 	bne	18d24 <CTransportLayer::Bind(unsigned short, int)+0x118>
   18ce0:	e1a00004 	mov	r0, r4
   18ce4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18ce8:	e596301c 	ldr	r3, [r6, #28]
   18cec:	e3530000 	cmp	r3, #0
   18cf0:	1a000008 	bne	18d18 <CTransportLayer::Bind(unsigned short, int)+0x10c>
   18cf4:	e3e00000 	mvn	r0, #0
   18cf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18cfc:	e3a01000 	mov	r1, #0
   18d00:	e1a00005 	mov	r0, r5
   18d04:	eb00399c 	bl	2737c <CPtrArray::Append(void*)>
   18d08:	e1a04000 	mov	r4, r0
   18d0c:	eaffffd8 	b	18c74 <CTransportLayer::Bind(unsigned short, int)+0x68>
   18d10:	eb004fcd 	bl	2cc4c <EnterCritical>
   18d14:	eaffffc4 	b	18c2c <CTransportLayer::Bind(unsigned short, int)+0x20>
   18d18:	eb004ff8 	bl	2cd00 <LeaveCritical>
   18d1c:	e3e00000 	mvn	r0, #0
   18d20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18d24:	eb004ff5 	bl	2cd00 <LeaveCritical>
   18d28:	e1a00004 	mov	r0, r4
   18d2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18d30:	e3051044 	movw	r1, #20548	; 0x5044
   18d34:	e3401003 	movt	r1, #3
   18d38:	e3050058 	movw	r0, #20568	; 0x5058
   18d3c:	e3400003 	movt	r0, #3
   18d40:	e3a020ad 	mov	r2, #173	; 0xad
   18d44:	eb00308a 	bl	24f74 <assertion_failed>
   18d48:	e3051044 	movw	r1, #20548	; 0x5044
   18d4c:	e3401003 	movt	r1, #3
   18d50:	e305006c 	movw	r0, #20588	; 0x506c
   18d54:	e3400003 	movt	r0, #3
   18d58:	e3a020ae 	mov	r2, #174	; 0xae
   18d5c:	eb003084 	bl	24f74 <assertion_failed>
   18d60:	e3051044 	movw	r1, #20548	; 0x5044
   18d64:	e3401003 	movt	r1, #3
   18d68:	e3050084 	movw	r0, #20612	; 0x5084
   18d6c:	e3400003 	movt	r0, #3
   18d70:	e3a020b0 	mov	r2, #176	; 0xb0
   18d74:	eb00307e 	bl	24f74 <assertion_failed>
   18d78:	e3e00000 	mvn	r0, #0
   18d7c:	e12fff1e 	bx	lr

00018d80 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   18d80:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d84:	e1a08000 	mov	r8, r0
   18d88:	e590001c 	ldr	r0, [r0, #28]
   18d8c:	e24dd014 	sub	sp, sp, #20
   18d90:	e1a07003 	mov	r7, r3
   18d94:	e3500000 	cmp	r0, #0
   18d98:	e58d1008 	str	r1, [sp, #8]
   18d9c:	e58d200c 	str	r2, [sp, #12]
   18da0:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   18da4:	1a000074 	bne	18f7c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1fc>
   18da8:	e2885008 	add	r5, r8, #8
   18dac:	e3a06000 	mov	r6, #0
   18db0:	ea000006 	b	18dd0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   18db4:	e1a01006 	mov	r1, r6
   18db8:	e1a00005 	mov	r0, r5
   18dbc:	eb003932 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18dc0:	e5903000 	ldr	r3, [r0]
   18dc4:	e3530000 	cmp	r3, #0
   18dc8:	0a000004 	beq	18de0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   18dcc:	e2866001 	add	r6, r6, #1
   18dd0:	e1a00005 	mov	r0, r5
   18dd4:	eb00392a 	bl	27284 <CPtrArray::GetCount() const>
   18dd8:	e1500006 	cmp	r0, r6
   18ddc:	8afffff4 	bhi	18db4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   18de0:	e1a00005 	mov	r0, r5
   18de4:	eb003926 	bl	27284 <CPtrArray::GetCount() const>
   18de8:	e1500006 	cmp	r0, r6
   18dec:	9a00005d 	bls	18f68 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1e8>
   18df0:	e3570000 	cmp	r7, #0
   18df4:	1a000027 	bne	18e98 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x118>
   18df8:	e30eba60 	movw	fp, #60000	; 0xea60
   18dfc:	e34fbfff 	movt	fp, #65535	; 0xffff
   18e00:	e30eae47 	movw	sl, #60999	; 0xee47
   18e04:	e1d871b8 	ldrh	r7, [r8, #24]
   18e08:	e3a04000 	mov	r4, #0
   18e0c:	e2873001 	add	r3, r7, #1
   18e10:	e6ff3073 	uxth	r3, r3
   18e14:	e153000a 	cmp	r3, sl
   18e18:	91c831b8 	strhls	r3, [r8, #24]
   18e1c:	81c8b1b8 	strhhi	fp, [r8, #24]
   18e20:	ea000000 	b	18e28 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   18e24:	e2844001 	add	r4, r4, #1
   18e28:	e1a00005 	mov	r0, r5
   18e2c:	eb003914 	bl	27284 <CPtrArray::GetCount() const>
   18e30:	e1500004 	cmp	r0, r4
   18e34:	9a000013 	bls	18e88 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x108>
   18e38:	e1a01004 	mov	r1, r4
   18e3c:	e1a00005 	mov	r0, r5
   18e40:	eb003911 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18e44:	e5903000 	ldr	r3, [r0]
   18e48:	e3530000 	cmp	r3, #0
   18e4c:	0afffff4 	beq	18e24 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   18e50:	e1a01004 	mov	r1, r4
   18e54:	e1a00005 	mov	r0, r5
   18e58:	eb00390b 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18e5c:	e5900000 	ldr	r0, [r0]
   18e60:	eb000d9e 	bl	1c4e0 <CNetConnection::GetOwnPort() const>
   18e64:	e1500007 	cmp	r0, r7
   18e68:	1affffed 	bne	18e24 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   18e6c:	e1a01004 	mov	r1, r4
   18e70:	e1a00005 	mov	r0, r5
   18e74:	eb003904 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18e78:	e5900000 	ldr	r0, [r0]
   18e7c:	eb000da1 	bl	1c508 <CNetConnection::GetProtocol() const>
   18e80:	e1500009 	cmp	r0, r9
   18e84:	1affffe6 	bne	18e24 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   18e88:	e1a00005 	mov	r0, r5
   18e8c:	eb0038fc 	bl	27284 <CPtrArray::GetCount() const>
   18e90:	e1500004 	cmp	r0, r4
   18e94:	8affffda 	bhi	18e04 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x84>
   18e98:	e5983000 	ldr	r3, [r8]
   18e9c:	e3530000 	cmp	r3, #0
   18ea0:	0a00004c 	beq	18fd8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x258>
   18ea4:	e5983004 	ldr	r3, [r8, #4]
   18ea8:	e3530000 	cmp	r3, #0
   18eac:	0a00004f 	beq	18ff0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x270>
   18eb0:	e3590006 	cmp	r9, #6
   18eb4:	0a000032 	beq	18f84 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x204>
   18eb8:	e3590011 	cmp	r9, #17
   18ebc:	1a000023 	bne	18f50 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d0>
   18ec0:	e3a00048 	mov	r0, #72	; 0x48
   18ec4:	eb004c09 	bl	2bef0 <operator new(unsigned int)>
   18ec8:	e5982004 	ldr	r2, [r8, #4]
   18ecc:	e58d7004 	str	r7, [sp, #4]
   18ed0:	e1a04000 	mov	r4, r0
   18ed4:	e59dc00c 	ldr	ip, [sp, #12]
   18ed8:	e59d3008 	ldr	r3, [sp, #8]
   18edc:	e5981000 	ldr	r1, [r8]
   18ee0:	e58dc000 	str	ip, [sp]
   18ee4:	eb000fc1 	bl	1cdf0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   18ee8:	e1a01006 	mov	r1, r6
   18eec:	e1a00005 	mov	r0, r5
   18ef0:	eb0038e5 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18ef4:	e598301c 	ldr	r3, [r8, #28]
   18ef8:	e5804000 	str	r4, [r0]
   18efc:	e3530000 	cmp	r3, #0
   18f00:	1a000030 	bne	18fc8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x248>
   18f04:	e1a01006 	mov	r1, r6
   18f08:	e1a00005 	mov	r0, r5
   18f0c:	eb0038de 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18f10:	e5903000 	ldr	r3, [r0]
   18f14:	e3530000 	cmp	r3, #0
   18f18:	0a00003a 	beq	19008 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   18f1c:	e1a01006 	mov	r1, r6
   18f20:	e1a00005 	mov	r0, r5
   18f24:	eb0038d8 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18f28:	e5903000 	ldr	r3, [r0]
   18f2c:	e1a00003 	mov	r0, r3
   18f30:	e5933000 	ldr	r3, [r3]
   18f34:	e5933008 	ldr	r3, [r3, #8]
   18f38:	e12fff33 	blx	r3
   18f3c:	e3500000 	cmp	r0, #0
   18f40:	ba000005 	blt	18f5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1dc>
   18f44:	e1a00006 	mov	r0, r6
   18f48:	e28dd014 	add	sp, sp, #20
   18f4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f50:	e598301c 	ldr	r3, [r8, #28]
   18f54:	e3530000 	cmp	r3, #0
   18f58:	1a00001c 	bne	18fd0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x250>
   18f5c:	e3e00000 	mvn	r0, #0
   18f60:	e28dd014 	add	sp, sp, #20
   18f64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f68:	e3a01000 	mov	r1, #0
   18f6c:	e1a00005 	mov	r0, r5
   18f70:	eb003901 	bl	2737c <CPtrArray::Append(void*)>
   18f74:	e1a06000 	mov	r6, r0
   18f78:	eaffff9c 	b	18df0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   18f7c:	eb004f32 	bl	2cc4c <EnterCritical>
   18f80:	eaffff88 	b	18da8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   18f84:	e3a000d8 	mov	r0, #216	; 0xd8
   18f88:	eb004bd8 	bl	2bef0 <operator new(unsigned int)>
   18f8c:	e5982004 	ldr	r2, [r8, #4]
   18f90:	e58d7004 	str	r7, [sp, #4]
   18f94:	e1a04000 	mov	r4, r0
   18f98:	e59dc00c 	ldr	ip, [sp, #12]
   18f9c:	e59d3008 	ldr	r3, [sp, #8]
   18fa0:	e5981000 	ldr	r1, [r8]
   18fa4:	e58dc000 	str	ip, [sp]
   18fa8:	eb001203 	bl	1d7bc <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   18fac:	e1a01006 	mov	r1, r6
   18fb0:	e1a00005 	mov	r0, r5
   18fb4:	eb0038b4 	bl	2728c <CPtrArray::operator[](unsigned int)>
   18fb8:	e598301c 	ldr	r3, [r8, #28]
   18fbc:	e5804000 	str	r4, [r0]
   18fc0:	e3530000 	cmp	r3, #0
   18fc4:	0affffce 	beq	18f04 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x184>
   18fc8:	eb004f4c 	bl	2cd00 <LeaveCritical>
   18fcc:	eaffffcc 	b	18f04 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x184>
   18fd0:	eb004f4a 	bl	2cd00 <LeaveCritical>
   18fd4:	eaffffe0 	b	18f5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1dc>
   18fd8:	e3051044 	movw	r1, #20548	; 0x5044
   18fdc:	e3401003 	movt	r1, #3
   18fe0:	e3050058 	movw	r0, #20568	; 0x5058
   18fe4:	e3400003 	movt	r0, #3
   18fe8:	e3a020e1 	mov	r2, #225	; 0xe1
   18fec:	eb002fe0 	bl	24f74 <assertion_failed>
   18ff0:	e3051044 	movw	r1, #20548	; 0x5044
   18ff4:	e3401003 	movt	r1, #3
   18ff8:	e305006c 	movw	r0, #20588	; 0x506c
   18ffc:	e3400003 	movt	r0, #3
   19000:	e3a020e2 	mov	r2, #226	; 0xe2
   19004:	eb002fda 	bl	24f74 <assertion_failed>
   19008:	e3051044 	movw	r1, #20548	; 0x5044
   1900c:	e3401003 	movt	r1, #3
   19010:	e3050084 	movw	r0, #20612	; 0x5084
   19014:	e3400003 	movt	r0, #3
   19018:	e3a020f4 	mov	r2, #244	; 0xf4
   1901c:	eb002fd4 	bl	24f74 <assertion_failed>

00019020 <CTransportLayer::Listen(unsigned short, int)>:
   19020:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19024:	e1a06000 	mov	r6, r0
   19028:	e590001c 	ldr	r0, [r0, #28]
   1902c:	e1a07001 	mov	r7, r1
   19030:	e1a08002 	mov	r8, r2
   19034:	e3500000 	cmp	r0, #0
   19038:	1a00001f 	bne	190bc <CTransportLayer::Listen(unsigned short, int)+0x9c>
   1903c:	e2865008 	add	r5, r6, #8
   19040:	e3a04000 	mov	r4, #0
   19044:	ea000006 	b	19064 <CTransportLayer::Listen(unsigned short, int)+0x44>
   19048:	e1a01004 	mov	r1, r4
   1904c:	e1a00005 	mov	r0, r5
   19050:	eb00388d 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19054:	e5903000 	ldr	r3, [r0]
   19058:	e3530000 	cmp	r3, #0
   1905c:	0a000004 	beq	19074 <CTransportLayer::Listen(unsigned short, int)+0x54>
   19060:	e2844001 	add	r4, r4, #1
   19064:	e1a00005 	mov	r0, r5
   19068:	eb003885 	bl	27284 <CPtrArray::GetCount() const>
   1906c:	e1500004 	cmp	r0, r4
   19070:	8afffff4 	bhi	19048 <CTransportLayer::Listen(unsigned short, int)+0x28>
   19074:	e1a00005 	mov	r0, r5
   19078:	eb003881 	bl	27284 <CPtrArray::GetCount() const>
   1907c:	e1500004 	cmp	r0, r4
   19080:	9a000008 	bls	190a8 <CTransportLayer::Listen(unsigned short, int)+0x88>
   19084:	e3570000 	cmp	r7, #0
   19088:	0a000001 	beq	19094 <CTransportLayer::Listen(unsigned short, int)+0x74>
   1908c:	e3580006 	cmp	r8, #6
   19090:	0a00000e 	beq	190d0 <CTransportLayer::Listen(unsigned short, int)+0xb0>
   19094:	e596301c 	ldr	r3, [r6, #28]
   19098:	e3530000 	cmp	r3, #0
   1909c:	1a000008 	bne	190c4 <CTransportLayer::Listen(unsigned short, int)+0xa4>
   190a0:	e3e00000 	mvn	r0, #0
   190a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   190a8:	e3a01000 	mov	r1, #0
   190ac:	e1a00005 	mov	r0, r5
   190b0:	eb0038b1 	bl	2737c <CPtrArray::Append(void*)>
   190b4:	e1a04000 	mov	r4, r0
   190b8:	eafffff1 	b	19084 <CTransportLayer::Listen(unsigned short, int)+0x64>
   190bc:	eb004ee2 	bl	2cc4c <EnterCritical>
   190c0:	eaffffdd 	b	1903c <CTransportLayer::Listen(unsigned short, int)+0x1c>
   190c4:	eb004f0d 	bl	2cd00 <LeaveCritical>
   190c8:	e3e00000 	mvn	r0, #0
   190cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   190d0:	e5963000 	ldr	r3, [r6]
   190d4:	e3530000 	cmp	r3, #0
   190d8:	0a000019 	beq	19144 <CTransportLayer::Listen(unsigned short, int)+0x124>
   190dc:	e5963004 	ldr	r3, [r6, #4]
   190e0:	e3530000 	cmp	r3, #0
   190e4:	0a00001c 	beq	1915c <CTransportLayer::Listen(unsigned short, int)+0x13c>
   190e8:	e3a000d8 	mov	r0, #216	; 0xd8
   190ec:	eb004b7f 	bl	2bef0 <operator new(unsigned int)>
   190f0:	e1a03007 	mov	r3, r7
   190f4:	e8960006 	ldm	r6, {r1, r2}
   190f8:	e1a08000 	mov	r8, r0
   190fc:	eb001007 	bl	1d120 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19100:	e1a01004 	mov	r1, r4
   19104:	e1a00005 	mov	r0, r5
   19108:	eb00385f 	bl	2728c <CPtrArray::operator[](unsigned int)>
   1910c:	e1a01004 	mov	r1, r4
   19110:	e5808000 	str	r8, [r0]
   19114:	e1a00005 	mov	r0, r5
   19118:	eb00385b 	bl	2728c <CPtrArray::operator[](unsigned int)>
   1911c:	e5903000 	ldr	r3, [r0]
   19120:	e3530000 	cmp	r3, #0
   19124:	0a000012 	beq	19174 <CTransportLayer::Listen(unsigned short, int)+0x154>
   19128:	e596301c 	ldr	r3, [r6, #28]
   1912c:	e3530000 	cmp	r3, #0
   19130:	1a000001 	bne	1913c <CTransportLayer::Listen(unsigned short, int)+0x11c>
   19134:	e1a00004 	mov	r0, r4
   19138:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1913c:	eb004eef 	bl	2cd00 <LeaveCritical>
   19140:	eafffffb 	b	19134 <CTransportLayer::Listen(unsigned short, int)+0x114>
   19144:	e3051044 	movw	r1, #20548	; 0x5044
   19148:	e3401003 	movt	r1, #3
   1914c:	e3050058 	movw	r0, #20568	; 0x5058
   19150:	e3400003 	movt	r0, #3
   19154:	e300211e 	movw	r2, #286	; 0x11e
   19158:	eb002f85 	bl	24f74 <assertion_failed>
   1915c:	e3051044 	movw	r1, #20548	; 0x5044
   19160:	e3401003 	movt	r1, #3
   19164:	e305006c 	movw	r0, #20588	; 0x506c
   19168:	e3400003 	movt	r0, #3
   1916c:	e300211f 	movw	r2, #287	; 0x11f
   19170:	eb002f7f 	bl	24f74 <assertion_failed>
   19174:	e3051044 	movw	r1, #20548	; 0x5044
   19178:	e3401003 	movt	r1, #3
   1917c:	e3050084 	movw	r0, #20612	; 0x5084
   19180:	e3400003 	movt	r0, #3
   19184:	e3002121 	movw	r2, #289	; 0x121
   19188:	eb002f79 	bl	24f74 <assertion_failed>

0001918c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   1918c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19190:	e2535000 	subs	r5, r3, #0
   19194:	ba00001b 	blt	19208 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x7c>
   19198:	e2804008 	add	r4, r0, #8
   1919c:	e1a06001 	mov	r6, r1
   191a0:	e1a00004 	mov	r0, r4
   191a4:	e1a07002 	mov	r7, r2
   191a8:	eb003835 	bl	27284 <CPtrArray::GetCount() const>
   191ac:	e1500005 	cmp	r0, r5
   191b0:	da000026 	ble	19250 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   191b4:	e1a01005 	mov	r1, r5
   191b8:	e1a00004 	mov	r0, r4
   191bc:	eb003832 	bl	2728c <CPtrArray::operator[](unsigned int)>
   191c0:	e5903000 	ldr	r3, [r0]
   191c4:	e3530000 	cmp	r3, #0
   191c8:	0a000020 	beq	19250 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   191cc:	e3560000 	cmp	r6, #0
   191d0:	0a000012 	beq	19220 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x94>
   191d4:	e3570000 	cmp	r7, #0
   191d8:	0a000016 	beq	19238 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xac>
   191dc:	e1a01005 	mov	r1, r5
   191e0:	e1a00004 	mov	r0, r4
   191e4:	eb003828 	bl	2728c <CPtrArray::operator[](unsigned int)>
   191e8:	e5903000 	ldr	r3, [r0]
   191ec:	e1a02007 	mov	r2, r7
   191f0:	e1a01006 	mov	r1, r6
   191f4:	e1a00003 	mov	r0, r3
   191f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   191fc:	e5933000 	ldr	r3, [r3]
   19200:	e593300c 	ldr	r3, [r3, #12]
   19204:	e12fff13 	bx	r3
   19208:	e3051044 	movw	r1, #20548	; 0x5044
   1920c:	e3401003 	movt	r1, #3
   19210:	e305009c 	movw	r0, #20636	; 0x509c
   19214:	e3400003 	movt	r0, #3
   19218:	e300212a 	movw	r2, #298	; 0x12a
   1921c:	eb002f54 	bl	24f74 <assertion_failed>
   19220:	e3051044 	movw	r1, #20548	; 0x5044
   19224:	e3401003 	movt	r1, #3
   19228:	e30500b0 	movw	r0, #20656	; 0x50b0
   1922c:	e3400003 	movt	r0, #3
   19230:	e3002131 	movw	r2, #305	; 0x131
   19234:	eb002f4e 	bl	24f74 <assertion_failed>
   19238:	e3051044 	movw	r1, #20548	; 0x5044
   1923c:	e3401003 	movt	r1, #3
   19240:	e30500c0 	movw	r0, #20672	; 0x50c0
   19244:	e3400003 	movt	r0, #3
   19248:	e3002132 	movw	r2, #306	; 0x132
   1924c:	eb002f48 	bl	24f74 <assertion_failed>
   19250:	e3e00000 	mvn	r0, #0
   19254:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00019258 <CTransportLayer::Disconnect(int)>:
   19258:	e92d4070 	push	{r4, r5, r6, lr}
   1925c:	e2515000 	subs	r5, r1, #0
   19260:	ba000013 	blt	192b4 <CTransportLayer::Disconnect(int)+0x5c>
   19264:	e2804008 	add	r4, r0, #8
   19268:	e1a00004 	mov	r0, r4
   1926c:	eb003804 	bl	27284 <CPtrArray::GetCount() const>
   19270:	e1500005 	cmp	r0, r5
   19274:	da000014 	ble	192cc <CTransportLayer::Disconnect(int)+0x74>
   19278:	e1a01005 	mov	r1, r5
   1927c:	e1a00004 	mov	r0, r4
   19280:	eb003801 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19284:	e5903000 	ldr	r3, [r0]
   19288:	e3530000 	cmp	r3, #0
   1928c:	0a00000e 	beq	192cc <CTransportLayer::Disconnect(int)+0x74>
   19290:	e1a01005 	mov	r1, r5
   19294:	e1a00004 	mov	r0, r4
   19298:	eb0037fb 	bl	2728c <CPtrArray::operator[](unsigned int)>
   1929c:	e5903000 	ldr	r3, [r0]
   192a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   192a4:	e1a00003 	mov	r0, r3
   192a8:	e5933000 	ldr	r3, [r3]
   192ac:	e5933010 	ldr	r3, [r3, #16]
   192b0:	e12fff13 	bx	r3
   192b4:	e3051044 	movw	r1, #20548	; 0x5044
   192b8:	e3401003 	movt	r1, #3
   192bc:	e305009c 	movw	r0, #20636	; 0x509c
   192c0:	e3400003 	movt	r0, #3
   192c4:	e3a02f4e 	mov	r2, #312	; 0x138
   192c8:	eb002f29 	bl	24f74 <assertion_failed>
   192cc:	e3e00000 	mvn	r0, #0
   192d0:	e8bd8070 	pop	{r4, r5, r6, pc}

000192d4 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   192d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   192d8:	e59d5018 	ldr	r5, [sp, #24]
   192dc:	e3550000 	cmp	r5, #0
   192e0:	ba00001e 	blt	19360 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x8c>
   192e4:	e2804008 	add	r4, r0, #8
   192e8:	e1a06001 	mov	r6, r1
   192ec:	e1a00004 	mov	r0, r4
   192f0:	e1a07002 	mov	r7, r2
   192f4:	e1a08003 	mov	r8, r3
   192f8:	eb0037e1 	bl	27284 <CPtrArray::GetCount() const>
   192fc:	e1500005 	cmp	r0, r5
   19300:	da000028 	ble	193a8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd4>
   19304:	e1a01005 	mov	r1, r5
   19308:	e1a00004 	mov	r0, r4
   1930c:	eb0037de 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19310:	e5903000 	ldr	r3, [r0]
   19314:	e3530000 	cmp	r3, #0
   19318:	0a000022 	beq	193a8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd4>
   1931c:	e3560000 	cmp	r6, #0
   19320:	0a000014 	beq	19378 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xa4>
   19324:	e3570000 	cmp	r7, #0
   19328:	0a000018 	beq	19390 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xbc>
   1932c:	e1a01005 	mov	r1, r5
   19330:	e1a00004 	mov	r0, r4
   19334:	eb0037d4 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19338:	e590c000 	ldr	ip, [r0]
   1933c:	e1a03008 	mov	r3, r8
   19340:	e1a02007 	mov	r2, r7
   19344:	e1a0000c 	mov	r0, ip
   19348:	e1a01006 	mov	r1, r6
   1934c:	e59cc000 	ldr	ip, [ip]
   19350:	e59ce014 	ldr	lr, [ip, #20]
   19354:	e1a0c00e 	mov	ip, lr
   19358:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1935c:	e12fff1c 	bx	ip
   19360:	e3051044 	movw	r1, #20548	; 0x5044
   19364:	e3401003 	movt	r1, #3
   19368:	e305009c 	movw	r0, #20636	; 0x509c
   1936c:	e3400003 	movt	r0, #3
   19370:	e3a02f51 	mov	r2, #324	; 0x144
   19374:	eb002efe 	bl	24f74 <assertion_failed>
   19378:	e3051044 	movw	r1, #20548	; 0x5044
   1937c:	e3401003 	movt	r1, #3
   19380:	e30500d4 	movw	r0, #20692	; 0x50d4
   19384:	e3400003 	movt	r0, #3
   19388:	e300214b 	movw	r2, #331	; 0x14b
   1938c:	eb002ef8 	bl	24f74 <assertion_failed>
   19390:	e3051044 	movw	r1, #20548	; 0x5044
   19394:	e3401003 	movt	r1, #3
   19398:	e30500e0 	movw	r0, #20704	; 0x50e0
   1939c:	e3400003 	movt	r0, #3
   193a0:	e3a02f53 	mov	r2, #332	; 0x14c
   193a4:	eb002ef2 	bl	24f74 <assertion_failed>
   193a8:	e3e00000 	mvn	r0, #0
   193ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000193b0 <CTransportLayer::Receive(void*, int, int)>:
   193b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   193b4:	e2535000 	subs	r5, r3, #0
   193b8:	ba000019 	blt	19424 <CTransportLayer::Receive(void*, int, int)+0x74>
   193bc:	e2804008 	add	r4, r0, #8
   193c0:	e1a06001 	mov	r6, r1
   193c4:	e1a00004 	mov	r0, r4
   193c8:	e1a07002 	mov	r7, r2
   193cc:	eb0037ac 	bl	27284 <CPtrArray::GetCount() const>
   193d0:	e1500005 	cmp	r0, r5
   193d4:	da00001e 	ble	19454 <CTransportLayer::Receive(void*, int, int)+0xa4>
   193d8:	e1a01005 	mov	r1, r5
   193dc:	e1a00004 	mov	r0, r4
   193e0:	eb0037a9 	bl	2728c <CPtrArray::operator[](unsigned int)>
   193e4:	e5903000 	ldr	r3, [r0]
   193e8:	e3530000 	cmp	r3, #0
   193ec:	0a000018 	beq	19454 <CTransportLayer::Receive(void*, int, int)+0xa4>
   193f0:	e3560000 	cmp	r6, #0
   193f4:	0a000010 	beq	1943c <CTransportLayer::Receive(void*, int, int)+0x8c>
   193f8:	e1a01005 	mov	r1, r5
   193fc:	e1a00004 	mov	r0, r4
   19400:	eb0037a1 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19404:	e5903000 	ldr	r3, [r0]
   19408:	e1a02007 	mov	r2, r7
   1940c:	e1a01006 	mov	r1, r6
   19410:	e1a00003 	mov	r0, r3
   19414:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19418:	e5933000 	ldr	r3, [r3]
   1941c:	e5933018 	ldr	r3, [r3, #24]
   19420:	e12fff13 	bx	r3
   19424:	e3051044 	movw	r1, #20548	; 0x5044
   19428:	e3401003 	movt	r1, #3
   1942c:	e305009c 	movw	r0, #20636	; 0x509c
   19430:	e3400003 	movt	r0, #3
   19434:	e3002152 	movw	r2, #338	; 0x152
   19438:	eb002ecd 	bl	24f74 <assertion_failed>
   1943c:	e3051044 	movw	r1, #20548	; 0x5044
   19440:	e3401003 	movt	r1, #3
   19444:	e3020270 	movw	r0, #8816	; 0x2270
   19448:	e3400003 	movt	r0, #3
   1944c:	e3002159 	movw	r2, #345	; 0x159
   19450:	eb002ec7 	bl	24f74 <assertion_failed>
   19454:	e3e00000 	mvn	r0, #0
   19458:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001945c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   1945c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19460:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   19464:	e59d8020 	ldr	r8, [sp, #32]
   19468:	e3550000 	cmp	r5, #0
   1946c:	e1dd92b4 	ldrh	r9, [sp, #36]	; 0x24
   19470:	ba00001f 	blt	194f4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x98>
   19474:	e2804008 	add	r4, r0, #8
   19478:	e1a06001 	mov	r6, r1
   1947c:	e1a00004 	mov	r0, r4
   19480:	e1a07002 	mov	r7, r2
   19484:	e1a0a003 	mov	sl, r3
   19488:	eb00377d 	bl	27284 <CPtrArray::GetCount() const>
   1948c:	e1500005 	cmp	r0, r5
   19490:	da000029 	ble	1953c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   19494:	e1a01005 	mov	r1, r5
   19498:	e1a00004 	mov	r0, r4
   1949c:	eb00377a 	bl	2728c <CPtrArray::operator[](unsigned int)>
   194a0:	e5903000 	ldr	r3, [r0]
   194a4:	e3530000 	cmp	r3, #0
   194a8:	0a000023 	beq	1953c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   194ac:	e3560000 	cmp	r6, #0
   194b0:	0a000015 	beq	1950c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xb0>
   194b4:	e3570000 	cmp	r7, #0
   194b8:	0a000019 	beq	19524 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc8>
   194bc:	e1a01005 	mov	r1, r5
   194c0:	e1a00004 	mov	r0, r4
   194c4:	eb003770 	bl	2728c <CPtrArray::operator[](unsigned int)>
   194c8:	e590c000 	ldr	ip, [r0]
   194cc:	e1a0300a 	mov	r3, sl
   194d0:	e1a02007 	mov	r2, r7
   194d4:	e1a0000c 	mov	r0, ip
   194d8:	e1a01006 	mov	r1, r6
   194dc:	e59cc000 	ldr	ip, [ip]
   194e0:	e1cd82f0 	strd	r8, [sp, #32]
   194e4:	e59ce01c 	ldr	lr, [ip, #28]
   194e8:	e1a0c00e 	mov	ip, lr
   194ec:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   194f0:	e12fff1c 	bx	ip
   194f4:	e3051044 	movw	r1, #20548	; 0x5044
   194f8:	e3401003 	movt	r1, #3
   194fc:	e305009c 	movw	r0, #20636	; 0x509c
   19500:	e3400003 	movt	r0, #3
   19504:	e3a02e16 	mov	r2, #352	; 0x160
   19508:	eb002e99 	bl	24f74 <assertion_failed>
   1950c:	e3051044 	movw	r1, #20548	; 0x5044
   19510:	e3401003 	movt	r1, #3
   19514:	e30500d4 	movw	r0, #20692	; 0x50d4
   19518:	e3400003 	movt	r0, #3
   1951c:	e3002167 	movw	r2, #359	; 0x167
   19520:	eb002e93 	bl	24f74 <assertion_failed>
   19524:	e3051044 	movw	r1, #20548	; 0x5044
   19528:	e3401003 	movt	r1, #3
   1952c:	e30500e0 	movw	r0, #20704	; 0x50e0
   19530:	e3400003 	movt	r0, #3
   19534:	e3a02f5a 	mov	r2, #360	; 0x168
   19538:	eb002e8d 	bl	24f74 <assertion_failed>
   1953c:	e3e00000 	mvn	r0, #0
   19540:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00019544 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   19544:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19548:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1954c:	e59d7020 	ldr	r7, [sp, #32]
   19550:	e3550000 	cmp	r5, #0
   19554:	ba00001d 	blt	195d0 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x8c>
   19558:	e2804008 	add	r4, r0, #8
   1955c:	e1a06001 	mov	r6, r1
   19560:	e1a00004 	mov	r0, r4
   19564:	e1a08002 	mov	r8, r2
   19568:	e1a09003 	mov	r9, r3
   1956c:	eb003744 	bl	27284 <CPtrArray::GetCount() const>
   19570:	e1500005 	cmp	r0, r5
   19574:	da000021 	ble	19600 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   19578:	e1a01005 	mov	r1, r5
   1957c:	e1a00004 	mov	r0, r4
   19580:	eb003741 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19584:	e5903000 	ldr	r3, [r0]
   19588:	e3530000 	cmp	r3, #0
   1958c:	0a00001b 	beq	19600 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   19590:	e3560000 	cmp	r6, #0
   19594:	0a000013 	beq	195e8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xa4>
   19598:	e1a01005 	mov	r1, r5
   1959c:	e1a00004 	mov	r0, r4
   195a0:	eb003739 	bl	2728c <CPtrArray::operator[](unsigned int)>
   195a4:	e590c000 	ldr	ip, [r0]
   195a8:	e1a03009 	mov	r3, r9
   195ac:	e1a02008 	mov	r2, r8
   195b0:	e1a0000c 	mov	r0, ip
   195b4:	e1a01006 	mov	r1, r6
   195b8:	e59cc000 	ldr	ip, [ip]
   195bc:	e58d7020 	str	r7, [sp, #32]
   195c0:	e59ce020 	ldr	lr, [ip, #32]
   195c4:	e1a0c00e 	mov	ip, lr
   195c8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   195cc:	e12fff1c 	bx	ip
   195d0:	e3051044 	movw	r1, #20548	; 0x5044
   195d4:	e3401003 	movt	r1, #3
   195d8:	e305009c 	movw	r0, #20636	; 0x509c
   195dc:	e3400003 	movt	r0, #3
   195e0:	e3a02e17 	mov	r2, #368	; 0x170
   195e4:	eb002e62 	bl	24f74 <assertion_failed>
   195e8:	e3051044 	movw	r1, #20548	; 0x5044
   195ec:	e3401003 	movt	r1, #3
   195f0:	e3020270 	movw	r0, #8816	; 0x2270
   195f4:	e3400003 	movt	r0, #3
   195f8:	e3002177 	movw	r2, #375	; 0x177
   195fc:	eb002e5c 	bl	24f74 <assertion_failed>
   19600:	e3e00000 	mvn	r0, #0
   19604:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00019608 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   19608:	e92d4070 	push	{r4, r5, r6, lr}
   1960c:	e2525000 	subs	r5, r2, #0
   19610:	ba000015 	blt	1966c <CTransportLayer::SetOptionBroadcast(bool, int)+0x64>
   19614:	e2804008 	add	r4, r0, #8
   19618:	e1a06001 	mov	r6, r1
   1961c:	e1a00004 	mov	r0, r4
   19620:	eb003717 	bl	27284 <CPtrArray::GetCount() const>
   19624:	e1500005 	cmp	r0, r5
   19628:	da000015 	ble	19684 <CTransportLayer::SetOptionBroadcast(bool, int)+0x7c>
   1962c:	e1a01005 	mov	r1, r5
   19630:	e1a00004 	mov	r0, r4
   19634:	eb003714 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19638:	e5903000 	ldr	r3, [r0]
   1963c:	e3530000 	cmp	r3, #0
   19640:	0a00000f 	beq	19684 <CTransportLayer::SetOptionBroadcast(bool, int)+0x7c>
   19644:	e1a01005 	mov	r1, r5
   19648:	e1a00004 	mov	r0, r4
   1964c:	eb00370e 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19650:	e5903000 	ldr	r3, [r0]
   19654:	e1a01006 	mov	r1, r6
   19658:	e1a00003 	mov	r0, r3
   1965c:	e8bd4070 	pop	{r4, r5, r6, lr}
   19660:	e5933000 	ldr	r3, [r3]
   19664:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   19668:	e12fff13 	bx	r3
   1966c:	e3051044 	movw	r1, #20548	; 0x5044
   19670:	e3401003 	movt	r1, #3
   19674:	e305009c 	movw	r0, #20636	; 0x509c
   19678:	e3400003 	movt	r0, #3
   1967c:	e300217e 	movw	r2, #382	; 0x17e
   19680:	eb002e3b 	bl	24f74 <assertion_failed>
   19684:	e3e00000 	mvn	r0, #0
   19688:	e8bd8070 	pop	{r4, r5, r6, pc}

0001968c <CTransportLayer::IsConnected(int) const>:
   1968c:	e92d4070 	push	{r4, r5, r6, lr}
   19690:	e2515000 	subs	r5, r1, #0
   19694:	ba000012 	blt	196e4 <CTransportLayer::IsConnected(int) const+0x58>
   19698:	e2804008 	add	r4, r0, #8
   1969c:	e1a00004 	mov	r0, r4
   196a0:	eb0036f7 	bl	27284 <CPtrArray::GetCount() const>
   196a4:	e1500005 	cmp	r0, r5
   196a8:	ca000001 	bgt	196b4 <CTransportLayer::IsConnected(int) const+0x28>
   196ac:	e3a00000 	mov	r0, #0
   196b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   196b4:	e1a01005 	mov	r1, r5
   196b8:	e1a00004 	mov	r0, r4
   196bc:	eb003710 	bl	27304 <CPtrArray::operator[](unsigned int) const>
   196c0:	e3500000 	cmp	r0, #0
   196c4:	0afffff8 	beq	196ac <CTransportLayer::IsConnected(int) const+0x20>
   196c8:	e1a01005 	mov	r1, r5
   196cc:	e1a00004 	mov	r0, r4
   196d0:	eb00370b 	bl	27304 <CPtrArray::operator[](unsigned int) const>
   196d4:	e5903000 	ldr	r3, [r0]
   196d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   196dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   196e0:	e12fff13 	bx	r3
   196e4:	e3051044 	movw	r1, #20548	; 0x5044
   196e8:	e3401003 	movt	r1, #3
   196ec:	e305009c 	movw	r0, #20636	; 0x509c
   196f0:	e3400003 	movt	r0, #3
   196f4:	e300218a 	movw	r2, #394	; 0x18a
   196f8:	eb002e1d 	bl	24f74 <assertion_failed>

000196fc <CTransportLayer::GetForeignIP(int) const>:
   196fc:	e92d4070 	push	{r4, r5, r6, lr}
   19700:	e2515000 	subs	r5, r1, #0
   19704:	ba000010 	blt	1974c <CTransportLayer::GetForeignIP(int) const+0x50>
   19708:	e2804008 	add	r4, r0, #8
   1970c:	e1a00004 	mov	r0, r4
   19710:	eb0036db 	bl	27284 <CPtrArray::GetCount() const>
   19714:	e1500005 	cmp	r0, r5
   19718:	da000009 	ble	19744 <CTransportLayer::GetForeignIP(int) const+0x48>
   1971c:	e1a01005 	mov	r1, r5
   19720:	e1a00004 	mov	r0, r4
   19724:	eb0036f6 	bl	27304 <CPtrArray::operator[](unsigned int) const>
   19728:	e3500000 	cmp	r0, #0
   1972c:	0a000004 	beq	19744 <CTransportLayer::GetForeignIP(int) const+0x48>
   19730:	e1a01005 	mov	r1, r5
   19734:	e1a00004 	mov	r0, r4
   19738:	eb0036f1 	bl	27304 <CPtrArray::operator[](unsigned int) const>
   1973c:	e8bd4070 	pop	{r4, r5, r6, lr}
   19740:	ea000b64 	b	1c4d8 <CNetConnection::GetForeignIP() const>
   19744:	e3a00000 	mov	r0, #0
   19748:	e8bd8070 	pop	{r4, r5, r6, pc}
   1974c:	e3051044 	movw	r1, #20548	; 0x5044
   19750:	e3401003 	movt	r1, #3
   19754:	e305009c 	movw	r0, #20636	; 0x509c
   19758:	e3400003 	movt	r0, #3
   1975c:	e3002196 	movw	r2, #406	; 0x196
   19760:	eb002e03 	bl	24f74 <assertion_failed>

00019764 <CTransportLayer::~CTransportLayer()>:
   19764:	e92d4010 	push	{r4, lr}
   19768:	e3a03000 	mov	r3, #0
   1976c:	e1a04000 	mov	r4, r0
   19770:	e5803004 	str	r3, [r0, #4]
   19774:	e4803020 	str	r3, [r0], #32
   19778:	eb001794 	bl	1f5d0 <CTCPRejector::~CTCPRejector()>
   1977c:	e2840008 	add	r0, r4, #8
   19780:	eb0036b4 	bl	27258 <CPtrArray::~CPtrArray()>
   19784:	e1a00004 	mov	r0, r4
   19788:	e8bd8010 	pop	{r4, pc}

0001978c <CTransportLayer::Process()>:
   1978c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19790:	e1a07000 	mov	r7, r0
   19794:	e24dde67 	sub	sp, sp, #1648	; 0x670
   19798:	e24dd004 	sub	sp, sp, #4
   1979c:	e28d0020 	add	r0, sp, #32
   197a0:	e28d6028 	add	r6, sp, #40	; 0x28
   197a4:	eb0018c2 	bl	1fab4 <CIPAddress::CIPAddress()>
   197a8:	e1a00006 	mov	r0, r6
   197ac:	eb0018c0 	bl	1fab4 <CIPAddress::CIPAddress()>
   197b0:	e5970004 	ldr	r0, [r7, #4]
   197b4:	e3500000 	cmp	r0, #0
   197b8:	0a0000ab 	beq	19a6c <CTransportLayer::Process()+0x2e0>
   197bc:	e2874008 	add	r4, r7, #8
   197c0:	e28d801c 	add	r8, sp, #28
   197c4:	e2879020 	add	r9, r7, #32
   197c8:	e88d0140 	stm	sp, {r6, r8}
   197cc:	e28d3020 	add	r3, sp, #32
   197d0:	e28d2018 	add	r2, sp, #24
   197d4:	e28d1030 	add	r1, sp, #48	; 0x30
   197d8:	eb00022a 	bl	1a088 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   197dc:	e3500000 	cmp	r0, #0
   197e0:	0a000021 	beq	1986c <CTransportLayer::Process()+0xe0>
   197e4:	e3a05000 	mov	r5, #0
   197e8:	ea000015 	b	19844 <CTransportLayer::Process()+0xb8>
   197ec:	e1a01005 	mov	r1, r5
   197f0:	e1a00004 	mov	r0, r4
   197f4:	eb0036a4 	bl	2728c <CPtrArray::operator[](unsigned int)>
   197f8:	e5903000 	ldr	r3, [r0]
   197fc:	e3530000 	cmp	r3, #0
   19800:	0a00000e 	beq	19840 <CTransportLayer::Process()+0xb4>
   19804:	e1a01005 	mov	r1, r5
   19808:	e1a00004 	mov	r0, r4
   1980c:	eb00369e 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19810:	e590c000 	ldr	ip, [r0]
   19814:	e59de01c 	ldr	lr, [sp, #28]
   19818:	e28d3020 	add	r3, sp, #32
   1981c:	e1a0000c 	mov	r0, ip
   19820:	e59d2018 	ldr	r2, [sp, #24]
   19824:	e28d1030 	add	r1, sp, #48	; 0x30
   19828:	e59cc000 	ldr	ip, [ip]
   1982c:	e88d4040 	stm	sp, {r6, lr}
   19830:	e59ca034 	ldr	sl, [ip, #52]	; 0x34
   19834:	e12fff3a 	blx	sl
   19838:	e3500000 	cmp	r0, #0
   1983c:	1a000004 	bne	19854 <CTransportLayer::Process()+0xc8>
   19840:	e2855001 	add	r5, r5, #1
   19844:	e1a00004 	mov	r0, r4
   19848:	eb00368d 	bl	27284 <CPtrArray::GetCount() const>
   1984c:	e1500005 	cmp	r0, r5
   19850:	8affffe5 	bhi	197ec <CTransportLayer::Process()+0x60>
   19854:	e1a00004 	mov	r0, r4
   19858:	eb003689 	bl	27284 <CPtrArray::GetCount() const>
   1985c:	e1500005 	cmp	r0, r5
   19860:	9a000076 	bls	19a40 <CTransportLayer::Process()+0x2b4>
   19864:	e5970004 	ldr	r0, [r7, #4]
   19868:	eaffffd6 	b	197c8 <CTransportLayer::Process()+0x3c>
   1986c:	e28da016 	add	sl, sp, #22
   19870:	e28d9014 	add	r9, sp, #20
   19874:	e5970004 	ldr	r0, [r7, #4]
   19878:	e1a03006 	mov	r3, r6
   1987c:	e58d8008 	str	r8, [sp, #8]
   19880:	e28d2020 	add	r2, sp, #32
   19884:	e88d0600 	stm	sp, {r9, sl}
   19888:	e28d1013 	add	r1, sp, #19
   1988c:	eb000249 	bl	1a1b8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   19890:	e3500000 	cmp	r0, #0
   19894:	0a00001e 	beq	19914 <CTransportLayer::Process()+0x188>
   19898:	e3a05000 	mov	r5, #0
   1989c:	e1a00004 	mov	r0, r4
   198a0:	eb003677 	bl	27284 <CPtrArray::GetCount() const>
   198a4:	e1500005 	cmp	r0, r5
   198a8:	9afffff1 	bls	19874 <CTransportLayer::Process()+0xe8>
   198ac:	e1a01005 	mov	r1, r5
   198b0:	e1a00004 	mov	r0, r4
   198b4:	eb003674 	bl	2728c <CPtrArray::operator[](unsigned int)>
   198b8:	e5903000 	ldr	r3, [r0]
   198bc:	e3530000 	cmp	r3, #0
   198c0:	0a000011 	beq	1990c <CTransportLayer::Process()+0x180>
   198c4:	e1a01005 	mov	r1, r5
   198c8:	e1a00004 	mov	r0, r4
   198cc:	eb00366e 	bl	2728c <CPtrArray::operator[](unsigned int)>
   198d0:	e5902000 	ldr	r2, [r0]
   198d4:	e59db01c 	ldr	fp, [sp, #28]
   198d8:	e1a03006 	mov	r3, r6
   198dc:	e1dd11b4 	ldrh	r1, [sp, #20]
   198e0:	e1a00002 	mov	r0, r2
   198e4:	e1dde1b6 	ldrh	lr, [sp, #22]
   198e8:	e592c000 	ldr	ip, [r2]
   198ec:	e28d2020 	add	r2, sp, #32
   198f0:	e88d4002 	stm	sp, {r1, lr}
   198f4:	e58db008 	str	fp, [sp, #8]
   198f8:	e5dd1013 	ldrb	r1, [sp, #19]
   198fc:	e59cb038 	ldr	fp, [ip, #56]	; 0x38
   19900:	e12fff3b 	blx	fp
   19904:	e3500000 	cmp	r0, #0
   19908:	1affffd9 	bne	19874 <CTransportLayer::Process()+0xe8>
   1990c:	e2855001 	add	r5, r5, #1
   19910:	eaffffe1 	b	1989c <CTransportLayer::Process()+0x110>
   19914:	e1a05000 	mov	r5, r0
   19918:	e1a08000 	mov	r8, r0
   1991c:	ea000006 	b	1993c <CTransportLayer::Process()+0x1b0>
   19920:	eb003659 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19924:	e5903000 	ldr	r3, [r0]
   19928:	e1a00003 	mov	r0, r3
   1992c:	e5933000 	ldr	r3, [r3]
   19930:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   19934:	e12fff33 	blx	r3
   19938:	e2855001 	add	r5, r5, #1
   1993c:	e1a00004 	mov	r0, r4
   19940:	eb00364f 	bl	27284 <CPtrArray::GetCount() const>
   19944:	e1500005 	cmp	r0, r5
   19948:	9a00001d 	bls	199c4 <CTransportLayer::Process()+0x238>
   1994c:	e1a01005 	mov	r1, r5
   19950:	e1a00004 	mov	r0, r4
   19954:	eb00364c 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19958:	e5903000 	ldr	r3, [r0]
   1995c:	e3530000 	cmp	r3, #0
   19960:	0afffff4 	beq	19938 <CTransportLayer::Process()+0x1ac>
   19964:	e1a01005 	mov	r1, r5
   19968:	e1a00004 	mov	r0, r4
   1996c:	eb003646 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19970:	e5903000 	ldr	r3, [r0]
   19974:	e1a00003 	mov	r0, r3
   19978:	e5933000 	ldr	r3, [r3]
   1997c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   19980:	e12fff33 	blx	r3
   19984:	e1a01005 	mov	r1, r5
   19988:	e3500000 	cmp	r0, #0
   1998c:	e1a00004 	mov	r0, r4
   19990:	0affffe2 	beq	19920 <CTransportLayer::Process()+0x194>
   19994:	eb00363c 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19998:	e5900000 	ldr	r0, [r0]
   1999c:	e3500000 	cmp	r0, #0
   199a0:	0a000002 	beq	199b0 <CTransportLayer::Process()+0x224>
   199a4:	e5903000 	ldr	r3, [r0]
   199a8:	e5933004 	ldr	r3, [r3, #4]
   199ac:	e12fff33 	blx	r3
   199b0:	e1a01005 	mov	r1, r5
   199b4:	e1a00004 	mov	r0, r4
   199b8:	eb003633 	bl	2728c <CPtrArray::operator[](unsigned int)>
   199bc:	e5808000 	str	r8, [r0]
   199c0:	eaffffdc 	b	19938 <CTransportLayer::Process()+0x1ac>
   199c4:	e597001c 	ldr	r0, [r7, #28]
   199c8:	e3500000 	cmp	r0, #0
   199cc:	1a000024 	bne	19a64 <CTransportLayer::Process()+0x2d8>
   199d0:	e1a00004 	mov	r0, r4
   199d4:	eb00362a 	bl	27284 <CPtrArray::GetCount() const>
   199d8:	e3500000 	cmp	r0, #0
   199dc:	e2405001 	sub	r5, r0, #1
   199e0:	1a000005 	bne	199fc <CTransportLayer::Process()+0x270>
   199e4:	ea00000a 	b	19a14 <CTransportLayer::Process()+0x288>
   199e8:	e2455001 	sub	r5, r5, #1
   199ec:	e1a00004 	mov	r0, r4
   199f0:	eb0036a2 	bl	27480 <CPtrArray::RemoveLast()>
   199f4:	e3750001 	cmn	r5, #1
   199f8:	0a000005 	beq	19a14 <CTransportLayer::Process()+0x288>
   199fc:	e1a01005 	mov	r1, r5
   19a00:	e1a00004 	mov	r0, r4
   19a04:	eb003620 	bl	2728c <CPtrArray::operator[](unsigned int)>
   19a08:	e5903000 	ldr	r3, [r0]
   19a0c:	e3530000 	cmp	r3, #0
   19a10:	0afffff4 	beq	199e8 <CTransportLayer::Process()+0x25c>
   19a14:	e597301c 	ldr	r3, [r7, #28]
   19a18:	e3530000 	cmp	r3, #0
   19a1c:	0a000000 	beq	19a24 <CTransportLayer::Process()+0x298>
   19a20:	eb004cb6 	bl	2cd00 <LeaveCritical>
   19a24:	e1a00006 	mov	r0, r6
   19a28:	eb001837 	bl	1fb0c <CIPAddress::~CIPAddress()>
   19a2c:	e28d0020 	add	r0, sp, #32
   19a30:	eb001835 	bl	1fb0c <CIPAddress::~CIPAddress()>
   19a34:	e28dde67 	add	sp, sp, #1648	; 0x670
   19a38:	e28dd004 	add	sp, sp, #4
   19a3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a40:	e59d001c 	ldr	r0, [sp, #28]
   19a44:	e28d3020 	add	r3, sp, #32
   19a48:	e58d0004 	str	r0, [sp, #4]
   19a4c:	e28d1030 	add	r1, sp, #48	; 0x30
   19a50:	e59d2018 	ldr	r2, [sp, #24]
   19a54:	e1a00009 	mov	r0, r9
   19a58:	e58d6000 	str	r6, [sp]
   19a5c:	eb001732 	bl	1f72c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   19a60:	eaffff7f 	b	19864 <CTransportLayer::Process()+0xd8>
   19a64:	eb004c78 	bl	2cc4c <EnterCritical>
   19a68:	eaffffd8 	b	199d0 <CTransportLayer::Process()+0x244>
   19a6c:	e3051044 	movw	r1, #20548	; 0x5044
   19a70:	e3401003 	movt	r1, #3
   19a74:	e305006c 	movw	r0, #20588	; 0x506c
   19a78:	e3400003 	movt	r0, #3
   19a7c:	e3a0203a 	mov	r2, #58	; 0x3a
   19a80:	eb002d3b 	bl	24f74 <assertion_failed>

00019a84 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>:
   19a84:	e30510ec 	movw	r1, #20716	; 0x50ec
   19a88:	e3401003 	movt	r1, #3
   19a8c:	e3050100 	movw	r0, #20736	; 0x5100
   19a90:	e3400003 	movt	r0, #3
   19a94:	e92d4010 	push	{r4, lr}
   19a98:	e300212b 	movw	r2, #299	; 0x12b
   19a9c:	eb002d34 	bl	24f74 <assertion_failed>

00019aa0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   19aa0:	e92d4010 	push	{r4, lr}
   19aa4:	e1a04000 	mov	r4, r0
   19aa8:	e3a03000 	mov	r3, #0
   19aac:	e280000c 	add	r0, r0, #12
   19ab0:	e884000e 	stm	r4, {r1, r2, r3}
   19ab4:	eb00194f 	bl	1fff8 <CNetQueue::CNetQueue()>
   19ab8:	e2840018 	add	r0, r4, #24
   19abc:	eb00194d 	bl	1fff8 <CNetQueue::CNetQueue()>
   19ac0:	e2840024 	add	r0, r4, #36	; 0x24
   19ac4:	eb00194b 	bl	1fff8 <CNetQueue::CNetQueue()>
   19ac8:	e2840030 	add	r0, r4, #48	; 0x30
   19acc:	eb00098e 	bl	1c10c <CRouteCache::CRouteCache()>
   19ad0:	e5943000 	ldr	r3, [r4]
   19ad4:	e3530000 	cmp	r3, #0
   19ad8:	0a000004 	beq	19af0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   19adc:	e5943004 	ldr	r3, [r4, #4]
   19ae0:	e3530000 	cmp	r3, #0
   19ae4:	0a000007 	beq	19b08 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x68>
   19ae8:	e1a00004 	mov	r0, r4
   19aec:	e8bd8010 	pop	{r4, pc}
   19af0:	e30510ec 	movw	r1, #20716	; 0x50ec
   19af4:	e3401003 	movt	r1, #3
   19af8:	e3050058 	movw	r0, #20568	; 0x5058
   19afc:	e3400003 	movt	r0, #3
   19b00:	e3a0201f 	mov	r2, #31
   19b04:	eb002d1a 	bl	24f74 <assertion_failed>
   19b08:	e30510ec 	movw	r1, #20716	; 0x50ec
   19b0c:	e3401003 	movt	r1, #3
   19b10:	e3050114 	movw	r0, #20756	; 0x5114
   19b14:	e3400003 	movt	r0, #3
   19b18:	e3a02020 	mov	r2, #32
   19b1c:	eb002d14 	bl	24f74 <assertion_failed>

00019b20 <CNetworkLayer::~CNetworkLayer()>:
   19b20:	e92d4070 	push	{r4, r5, r6, lr}
   19b24:	e1a04000 	mov	r4, r0
   19b28:	e5905008 	ldr	r5, [r0, #8]
   19b2c:	e3550000 	cmp	r5, #0
   19b30:	0a000004 	beq	19b48 <CNetworkLayer::~CNetworkLayer()+0x28>
   19b34:	e1a00005 	mov	r0, r5
   19b38:	eb0007d5 	bl	1ba94 <CICMPHandler::~CICMPHandler()>
   19b3c:	e1a00005 	mov	r0, r5
   19b40:	e3a01010 	mov	r1, #16
   19b44:	eb0048f7 	bl	2bf28 <operator delete(void*, unsigned int)>
   19b48:	e1a00004 	mov	r0, r4
   19b4c:	e3a03000 	mov	r3, #0
   19b50:	e5843008 	str	r3, [r4, #8]
   19b54:	e5843004 	str	r3, [r4, #4]
   19b58:	e4803030 	str	r3, [r0], #48	; 0x30
   19b5c:	eb000983 	bl	1c170 <CRouteCache::~CRouteCache()>
   19b60:	e2840024 	add	r0, r4, #36	; 0x24
   19b64:	eb00195c 	bl	200dc <CNetQueue::~CNetQueue()>
   19b68:	e2840018 	add	r0, r4, #24
   19b6c:	eb00195a 	bl	200dc <CNetQueue::~CNetQueue()>
   19b70:	e284000c 	add	r0, r4, #12
   19b74:	eb001958 	bl	200dc <CNetQueue::~CNetQueue()>
   19b78:	e1a00004 	mov	r0, r4
   19b7c:	e8bd8070 	pop	{r4, r5, r6, pc}

00019b80 <CNetworkLayer::Initialize()>:
   19b80:	e92d4030 	push	{r4, r5, lr}
   19b84:	e5903008 	ldr	r3, [r0, #8]
   19b88:	e24dd00c 	sub	sp, sp, #12
   19b8c:	e3530000 	cmp	r3, #0
   19b90:	1a00000d 	bne	19bcc <CNetworkLayer::Initialize()+0x4c>
   19b94:	e1a04000 	mov	r4, r0
   19b98:	e3a00010 	mov	r0, #16
   19b9c:	eb0048d3 	bl	2bef0 <operator new(unsigned int)>
   19ba0:	e1a0c004 	mov	ip, r4
   19ba4:	e2843018 	add	r3, r4, #24
   19ba8:	e1a02004 	mov	r2, r4
   19bac:	e1a05000 	mov	r5, r0
   19bb0:	e49c1024 	ldr	r1, [ip], #36	; 0x24
   19bb4:	e58dc000 	str	ip, [sp]
   19bb8:	eb000792 	bl	1ba08 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   19bbc:	e3a00001 	mov	r0, #1
   19bc0:	e5845008 	str	r5, [r4, #8]
   19bc4:	e28dd00c 	add	sp, sp, #12
   19bc8:	e8bd8030 	pop	{r4, r5, pc}
   19bcc:	e30510ec 	movw	r1, #20716	; 0x50ec
   19bd0:	e3401003 	movt	r1, #3
   19bd4:	e3050128 	movw	r0, #20776	; 0x5128
   19bd8:	e3400003 	movt	r0, #3
   19bdc:	e3a0202e 	mov	r2, #46	; 0x2e
   19be0:	eb002ce3 	bl	24f74 <assertion_failed>

00019be4 <CNetworkLayer::Process()>:
   19be4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19be8:	e1a05000 	mov	r5, r0
   19bec:	e5900000 	ldr	r0, [r0]
   19bf0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   19bf4:	e3500000 	cmp	r0, #0
   19bf8:	0a000044 	beq	19d10 <CNetworkLayer::Process()+0x12c>
   19bfc:	eb001750 	bl	1f944 <CNetConfig::GetIPAddress() const>
   19c00:	e2507000 	subs	r7, r0, #0
   19c04:	0a000047 	beq	19d28 <CNetworkLayer::Process()+0x144>
   19c08:	e5950004 	ldr	r0, [r5, #4]
   19c0c:	e3500000 	cmp	r0, #0
   19c10:	0a00004f 	beq	19d54 <CNetworkLayer::Process()+0x170>
   19c14:	e28d6008 	add	r6, sp, #8
   19c18:	e28d2004 	add	r2, sp, #4
   19c1c:	e28d1010 	add	r1, sp, #16
   19c20:	eb000315 	bl	1a87c <CLinkLayer::Receive(void*, unsigned int*)>
   19c24:	e3500000 	cmp	r0, #0
   19c28:	0a000015 	beq	19c84 <CNetworkLayer::Process()+0xa0>
   19c2c:	e59d3004 	ldr	r3, [sp, #4]
   19c30:	e3530014 	cmp	r3, #20
   19c34:	9a000010 	bls	19c7c <CNetworkLayer::Process()+0x98>
   19c38:	e5dd1010 	ldrb	r1, [sp, #16]
   19c3c:	e201100f 	and	r1, r1, #15
   19c40:	e2412005 	sub	r2, r1, #5
   19c44:	e3520001 	cmp	r2, #1
   19c48:	8a00000b 	bhi	19c7c <CNetworkLayer::Process()+0x98>
   19c4c:	e1a04101 	lsl	r4, r1, #2
   19c50:	e1530004 	cmp	r3, r4
   19c54:	9a000008 	bls	19c7c <CNetworkLayer::Process()+0x98>
   19c58:	e1a01004 	mov	r1, r4
   19c5c:	e28d0010 	add	r0, sp, #16
   19c60:	eb001a36 	bl	20540 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   19c64:	e3500000 	cmp	r0, #0
   19c68:	1a000003 	bne	19c7c <CNetworkLayer::Process()+0x98>
   19c6c:	e5dd3010 	ldrb	r3, [sp, #16]
   19c70:	e1a03243 	asr	r3, r3, #4
   19c74:	e3530004 	cmp	r3, #4
   19c78:	0a000007 	beq	19c9c <CNetworkLayer::Process()+0xb8>
   19c7c:	e5950004 	ldr	r0, [r5, #4]
   19c80:	eaffffe4 	b	19c18 <CNetworkLayer::Process()+0x34>
   19c84:	e5950008 	ldr	r0, [r5, #8]
   19c88:	e3500000 	cmp	r0, #0
   19c8c:	0a000036 	beq	19d6c <CNetworkLayer::Process()+0x188>
   19c90:	eb0007bd 	bl	1bb8c <CICMPHandler::Process()>
   19c94:	e28dde65 	add	sp, sp, #1616	; 0x650
   19c98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19c9c:	e28d1020 	add	r1, sp, #32
   19ca0:	e1a00006 	mov	r0, r6
   19ca4:	eb00181c 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   19ca8:	e1a00007 	mov	r0, r7
   19cac:	eb001863 	bl	1fe40 <CIPAddress::IsNull() const>
   19cb0:	e3500000 	cmp	r0, #0
   19cb4:	1a000021 	bne	19d40 <CNetworkLayer::Process()+0x15c>
   19cb8:	e1a01006 	mov	r1, r6
   19cbc:	e1a00007 	mov	r0, r7
   19cc0:	eb0017ab 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   19cc4:	e3500000 	cmp	r0, #0
   19cc8:	1a000046 	bne	19de8 <CNetworkLayer::Process()+0x204>
   19ccc:	e1dd31b6 	ldrh	r3, [sp, #22]
   19cd0:	e3130020 	tst	r3, #32
   19cd4:	1a000009 	bne	19d00 <CNetworkLayer::Process()+0x11c>
   19cd8:	e6bf3fb3 	rev16	r3, r3
   19cdc:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   19ce0:	e3530000 	cmp	r3, #0
   19ce4:	1a000005 	bne	19d00 <CNetworkLayer::Process()+0x11c>
   19ce8:	e1dd31b2 	ldrh	r3, [sp, #18]
   19cec:	e59d2004 	ldr	r2, [sp, #4]
   19cf0:	e6bf3fb3 	rev16	r3, r3
   19cf4:	e6ff3073 	uxth	r3, r3
   19cf8:	e1520003 	cmp	r2, r3
   19cfc:	2a000020 	bcs	19d84 <CNetworkLayer::Process()+0x1a0>
   19d00:	e1a00006 	mov	r0, r6
   19d04:	eb001780 	bl	1fb0c <CIPAddress::~CIPAddress()>
   19d08:	e5950004 	ldr	r0, [r5, #4]
   19d0c:	eaffffc1 	b	19c18 <CNetworkLayer::Process()+0x34>
   19d10:	e30510ec 	movw	r1, #20716	; 0x50ec
   19d14:	e3401003 	movt	r1, #3
   19d18:	e3050058 	movw	r0, #20568	; 0x5058
   19d1c:	e3400003 	movt	r0, #3
   19d20:	e3a02037 	mov	r2, #55	; 0x37
   19d24:	eb002c92 	bl	24f74 <assertion_failed>
   19d28:	e30510ec 	movw	r1, #20716	; 0x50ec
   19d2c:	e3401003 	movt	r1, #3
   19d30:	e305013c 	movw	r0, #20796	; 0x513c
   19d34:	e3400003 	movt	r0, #3
   19d38:	e3a02039 	mov	r2, #57	; 0x39
   19d3c:	eb002c8c 	bl	24f74 <assertion_failed>
   19d40:	e1a00006 	mov	r0, r6
   19d44:	eb00184b 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   19d48:	e3500000 	cmp	r0, #0
   19d4c:	1affffde 	bne	19ccc <CNetworkLayer::Process()+0xe8>
   19d50:	eaffffea 	b	19d00 <CNetworkLayer::Process()+0x11c>
   19d54:	e30510ec 	movw	r1, #20716	; 0x50ec
   19d58:	e3401003 	movt	r1, #3
   19d5c:	e3050114 	movw	r0, #20756	; 0x5114
   19d60:	e3400003 	movt	r0, #3
   19d64:	e3a0203d 	mov	r2, #61	; 0x3d
   19d68:	eb002c81 	bl	24f74 <assertion_failed>
   19d6c:	e30510ec 	movw	r1, #20716	; 0x50ec
   19d70:	e3401003 	movt	r1, #3
   19d74:	e3050100 	movw	r0, #20736	; 0x5100
   19d78:	e3400003 	movt	r0, #3
   19d7c:	e3a0208a 	mov	r2, #138	; 0x8a
   19d80:	eb002c7b 	bl	24f74 <assertion_failed>
   19d84:	e3a00009 	mov	r0, #9
   19d88:	e58d3004 	str	r3, [sp, #4]
   19d8c:	eb004857 	bl	2bef0 <operator new(unsigned int)>
   19d90:	e5dd3019 	ldrb	r3, [sp, #25]
   19d94:	e1a08000 	mov	r8, r0
   19d98:	e28d101c 	add	r1, sp, #28
   19d9c:	e4c03001 	strb	r3, [r0], #1
   19da0:	e3a02004 	mov	r2, #4
   19da4:	eb004747 	bl	2bac8 <memcpy>
   19da8:	e28d1020 	add	r1, sp, #32
   19dac:	e2880005 	add	r0, r8, #5
   19db0:	e3a02004 	mov	r2, #4
   19db4:	eb004743 	bl	2bac8 <memcpy>
   19db8:	e5dd3019 	ldrb	r3, [sp, #25]
   19dbc:	e59d2004 	ldr	r2, [sp, #4]
   19dc0:	e28d1010 	add	r1, sp, #16
   19dc4:	e3530001 	cmp	r3, #1
   19dc8:	e0811004 	add	r1, r1, r4
   19dcc:	e0422004 	sub	r2, r2, r4
   19dd0:	e1a03008 	mov	r3, r8
   19dd4:	02850018 	addeq	r0, r5, #24
   19dd8:	1285000c 	addne	r0, r5, #12
   19ddc:	e58d2004 	str	r2, [sp, #4]
   19de0:	eb0018c2 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   19de4:	eaffffc5 	b	19d00 <CNetworkLayer::Process()+0x11c>
   19de8:	e1a00006 	mov	r0, r6
   19dec:	eb001821 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   19df0:	e3500000 	cmp	r0, #0
   19df4:	1affffb4 	bne	19ccc <CNetworkLayer::Process()+0xe8>
   19df8:	e5950000 	ldr	r0, [r5]
   19dfc:	eb0016da 	bl	1f96c <CNetConfig::GetBroadcastAddress() const>
   19e00:	e1a01006 	mov	r1, r6
   19e04:	eb00175a 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   19e08:	e3500000 	cmp	r0, #0
   19e0c:	0affffae 	beq	19ccc <CNetworkLayer::Process()+0xe8>
   19e10:	eaffffba 	b	19d00 <CNetworkLayer::Process()+0x11c>

00019e14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   19e14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e18:	e1a06000 	mov	r6, r0
   19e1c:	e2430001 	sub	r0, r3, #1
   19e20:	e28db020 	add	fp, sp, #32
   19e24:	e1a07002 	mov	r7, r2
   19e28:	e24dd014 	sub	sp, sp, #20
   19e2c:	e300262b 	movw	r2, #1579	; 0x62b
   19e30:	e1500002 	cmp	r0, r2
   19e34:	8a000052 	bhi	19f84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x170>
   19e38:	e283201b 	add	r2, r3, #27
   19e3c:	e5960000 	ldr	r0, [r6]
   19e40:	e3c22007 	bic	r2, r2, #7
   19e44:	e2838014 	add	r8, r3, #20
   19e48:	e04dd002 	sub	sp, sp, r2
   19e4c:	e1a0a003 	mov	sl, r3
   19e50:	e59b3004 	ldr	r3, [fp, #4]
   19e54:	e3a04000 	mov	r4, #0
   19e58:	e6bf2fb8 	rev16	r2, r8
   19e5c:	e1a05001 	mov	r5, r1
   19e60:	e1cd20b2 	strh	r2, [sp, #2]
   19e64:	e3a01045 	mov	r1, #69	; 0x45
   19e68:	e3a02040 	mov	r2, #64	; 0x40
   19e6c:	e50bd030 	str	sp, [fp, #-48]	; 0xffffffd0
   19e70:	e3500000 	cmp	r0, #0
   19e74:	e5cd3009 	strb	r3, [sp, #9]
   19e78:	e5cd1000 	strb	r1, [sp]
   19e7c:	e5cd4001 	strb	r4, [sp, #1]
   19e80:	e5cd4004 	strb	r4, [sp, #4]
   19e84:	e5cd4005 	strb	r4, [sp, #5]
   19e88:	e5cd4007 	strb	r4, [sp, #7]
   19e8c:	e5cd2006 	strb	r2, [sp, #6]
   19e90:	e5cd2008 	strb	r2, [sp, #8]
   19e94:	0a000049 	beq	19fc0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1ac>
   19e98:	eb0016a9 	bl	1f944 <CNetConfig::GetIPAddress() const>
   19e9c:	e2509000 	subs	r9, r0, #0
   19ea0:	0a00004c 	beq	19fd8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c4>
   19ea4:	e28d100c 	add	r1, sp, #12
   19ea8:	eb0017cc 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   19eac:	e28d1010 	add	r1, sp, #16
   19eb0:	e1a00005 	mov	r0, r5
   19eb4:	eb0017c9 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   19eb8:	e3a01014 	mov	r1, #20
   19ebc:	e1a0000d 	mov	r0, sp
   19ec0:	e5cd400a 	strb	r4, [sp, #10]
   19ec4:	e5cd400b 	strb	r4, [sp, #11]
   19ec8:	eb00199c 	bl	20540 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   19ecc:	e3570000 	cmp	r7, #0
   19ed0:	e1cd00ba 	strh	r0, [sp, #10]
   19ed4:	0a000045 	beq	19ff0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1dc>
   19ed8:	e1a0200a 	mov	r2, sl
   19edc:	e1a01007 	mov	r1, r7
   19ee0:	e28d0014 	add	r0, sp, #20
   19ee4:	eb0046f7 	bl	2bac8 <memcpy>
   19ee8:	e1a00009 	mov	r0, r9
   19eec:	eb0017d3 	bl	1fe40 <CIPAddress::IsNull() const>
   19ef0:	e3500000 	cmp	r0, #0
   19ef4:	0a00000b 	beq	19f28 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x114>
   19ef8:	e1a00005 	mov	r0, r5
   19efc:	eb0017dd 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   19f00:	e2504000 	subs	r4, r0, #0
   19f04:	1a000007 	bne	19f28 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x114>
   19f08:	e5960008 	ldr	r0, [r6, #8]
   19f0c:	e3500000 	cmp	r0, #0
   19f10:	0a00005b 	beq	1a084 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x270>
   19f14:	e1a03008 	mov	r3, r8
   19f18:	e1a0200d 	mov	r2, sp
   19f1c:	e1a01004 	mov	r1, r4
   19f20:	eb00080e 	bl	1bf60 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   19f24:	ea000013 	b	19f78 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x164>
   19f28:	e24b002c 	sub	r0, fp, #44	; 0x2c
   19f2c:	eb0016e0 	bl	1fab4 <CIPAddress::CIPAddress()>
   19f30:	e5960000 	ldr	r0, [r6]
   19f34:	eb001686 	bl	1f954 <CNetConfig::GetNetMask() const>
   19f38:	e1a01005 	mov	r1, r5
   19f3c:	e1a02000 	mov	r2, r0
   19f40:	e1a00009 	mov	r0, r9
   19f44:	eb0017fc 	bl	1ff3c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   19f48:	e2504000 	subs	r4, r0, #0
   19f4c:	0a000010 	beq	19f94 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x180>
   19f50:	e5960004 	ldr	r0, [r6, #4]
   19f54:	e3500000 	cmp	r0, #0
   19f58:	0a00002a 	beq	1a008 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1f4>
   19f5c:	e1a03008 	mov	r3, r8
   19f60:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   19f64:	e1a01005 	mov	r1, r5
   19f68:	eb0001d6 	bl	1a6c8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   19f6c:	e1a04000 	mov	r4, r0
   19f70:	e24b002c 	sub	r0, fp, #44	; 0x2c
   19f74:	eb0016e4 	bl	1fb0c <CIPAddress::~CIPAddress()>
   19f78:	e1a00004 	mov	r0, r4
   19f7c:	e24bd020 	sub	sp, fp, #32
   19f80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f84:	e3a04000 	mov	r4, #0
   19f88:	e1a00004 	mov	r0, r4
   19f8c:	e24bd020 	sub	sp, fp, #32
   19f90:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f94:	e1a00005 	mov	r0, r5
   19f98:	eb001784 	bl	1fdb0 <CIPAddress::Get() const>
   19f9c:	e1a01000 	mov	r1, r0
   19fa0:	e2860030 	add	r0, r6, #48	; 0x30
   19fa4:	eb0008b3 	bl	1c278 <CRouteCache::GetRoute(unsigned char const*) const>
   19fa8:	e2501000 	subs	r1, r0, #0
   19fac:	0a00001b 	beq	1a020 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x20c>
   19fb0:	e24b002c 	sub	r0, fp, #44	; 0x2c
   19fb4:	e24b502c 	sub	r5, fp, #44	; 0x2c
   19fb8:	eb001747 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   19fbc:	eaffffe3 	b	19f50 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x13c>
   19fc0:	e30510ec 	movw	r1, #20716	; 0x50ec
   19fc4:	e3401003 	movt	r1, #3
   19fc8:	e3050058 	movw	r0, #20568	; 0x5058
   19fcc:	e3400003 	movt	r0, #3
   19fd0:	e3a020a2 	mov	r2, #162	; 0xa2
   19fd4:	eb002be6 	bl	24f74 <assertion_failed>
   19fd8:	e30510ec 	movw	r1, #20716	; 0x50ec
   19fdc:	e3401003 	movt	r1, #3
   19fe0:	e305013c 	movw	r0, #20796	; 0x513c
   19fe4:	e3400003 	movt	r0, #3
   19fe8:	e3a020a4 	mov	r2, #164	; 0xa4
   19fec:	eb002be0 	bl	24f74 <assertion_failed>
   19ff0:	e30510ec 	movw	r1, #20716	; 0x50ec
   19ff4:	e3401003 	movt	r1, #3
   19ff8:	e3050150 	movw	r0, #20816	; 0x5150
   19ffc:	e3400003 	movt	r0, #3
   1a000:	e3a020ad 	mov	r2, #173	; 0xad
   1a004:	eb002bda 	bl	24f74 <assertion_failed>
   1a008:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a00c:	e3401003 	movt	r1, #3
   1a010:	e3050114 	movw	r0, #20756	; 0x5114
   1a014:	e3400003 	movt	r0, #3
   1a018:	e3a020d0 	mov	r2, #208	; 0xd0
   1a01c:	eb002bd4 	bl	24f74 <assertion_failed>
   1a020:	e5960000 	ldr	r0, [r6]
   1a024:	eb00164c 	bl	1f95c <CNetConfig::GetDefaultGateway() const>
   1a028:	e1a05000 	mov	r5, r0
   1a02c:	eb001783 	bl	1fe40 <CIPAddress::IsNull() const>
   1a030:	e3500000 	cmp	r0, #0
   1a034:	0a000007 	beq	1a058 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x244>
   1a038:	e5960008 	ldr	r0, [r6, #8]
   1a03c:	e3500000 	cmp	r0, #0
   1a040:	0a00000f 	beq	1a084 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x270>
   1a044:	e1a03008 	mov	r3, r8
   1a048:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a04c:	e1a01004 	mov	r1, r4
   1a050:	eb0007c2 	bl	1bf60 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1a054:	eaffffc5 	b	19f70 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x15c>
   1a058:	e5960004 	ldr	r0, [r6, #4]
   1a05c:	e3500000 	cmp	r0, #0
   1a060:	0affffe8 	beq	1a008 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1f4>
   1a064:	e3550000 	cmp	r5, #0
   1a068:	1affffbb 	bne	19f5c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x148>
   1a06c:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a070:	e3401003 	movt	r1, #3
   1a074:	e3050160 	movw	r0, #20832	; 0x5160
   1a078:	e3400003 	movt	r0, #3
   1a07c:	e3a020d1 	mov	r2, #209	; 0xd1
   1a080:	eb002bbb 	bl	24f74 <assertion_failed>
   1a084:	ebfffe7e 	bl	19a84 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>

0001a088 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   1a088:	e92d4030 	push	{r4, r5, lr}
   1a08c:	e3510000 	cmp	r1, #0
   1a090:	e24dd00c 	sub	sp, sp, #12
   1a094:	0a000023 	beq	1a128 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   1a098:	e1a04002 	mov	r4, r2
   1a09c:	e3520000 	cmp	r2, #0
   1a0a0:	0a000026 	beq	1a140 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb8>
   1a0a4:	e280000c 	add	r0, r0, #12
   1a0a8:	e28d2004 	add	r2, sp, #4
   1a0ac:	e1a05003 	mov	r5, r3
   1a0b0:	eb001859 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1a0b4:	e3500000 	cmp	r0, #0
   1a0b8:	e5840000 	str	r0, [r4]
   1a0bc:	0a000017 	beq	1a120 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   1a0c0:	e59d4004 	ldr	r4, [sp, #4]
   1a0c4:	e3540000 	cmp	r4, #0
   1a0c8:	0a000022 	beq	1a158 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   1a0cc:	e59d301c 	ldr	r3, [sp, #28]
   1a0d0:	e3530000 	cmp	r3, #0
   1a0d4:	0a000025 	beq	1a170 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe8>
   1a0d8:	e59d201c 	ldr	r2, [sp, #28]
   1a0dc:	e3550000 	cmp	r5, #0
   1a0e0:	e5d43000 	ldrb	r3, [r4]
   1a0e4:	e5823000 	str	r3, [r2]
   1a0e8:	0a000026 	beq	1a188 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1a0ec:	e1a00005 	mov	r0, r5
   1a0f0:	e2841001 	add	r1, r4, #1
   1a0f4:	eb0016f8 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1a0f8:	e59d3018 	ldr	r3, [sp, #24]
   1a0fc:	e3530000 	cmp	r3, #0
   1a100:	0a000026 	beq	1a1a0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   1a104:	e2841005 	add	r1, r4, #5
   1a108:	e59d0018 	ldr	r0, [sp, #24]
   1a10c:	eb0016f2 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1a110:	e1a00004 	mov	r0, r4
   1a114:	e3a01009 	mov	r1, #9
   1a118:	eb004782 	bl	2bf28 <operator delete(void*, unsigned int)>
   1a11c:	e3a00001 	mov	r0, #1
   1a120:	e28dd00c 	add	sp, sp, #12
   1a124:	e8bd8030 	pop	{r4, r5, pc}
   1a128:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a12c:	e3401003 	movt	r1, #3
   1a130:	e3020270 	movw	r0, #8816	; 0x2270
   1a134:	e3400003 	movt	r0, #3
   1a138:	e3a020d9 	mov	r2, #217	; 0xd9
   1a13c:	eb002b8c 	bl	24f74 <assertion_failed>
   1a140:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a144:	e3401003 	movt	r1, #3
   1a148:	e3020a98 	movw	r0, #10904	; 0x2a98
   1a14c:	e3400003 	movt	r0, #3
   1a150:	e3a020da 	mov	r2, #218	; 0xda
   1a154:	eb002b86 	bl	24f74 <assertion_failed>
   1a158:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a15c:	e3401003 	movt	r1, #3
   1a160:	e30500d4 	movw	r0, #20692	; 0x50d4
   1a164:	e3400003 	movt	r0, #3
   1a168:	e3a020e2 	mov	r2, #226	; 0xe2
   1a16c:	eb002b80 	bl	24f74 <assertion_failed>
   1a170:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a174:	e3401003 	movt	r1, #3
   1a178:	e3050170 	movw	r0, #20848	; 0x5170
   1a17c:	e3400003 	movt	r0, #3
   1a180:	e3a020e4 	mov	r2, #228	; 0xe4
   1a184:	eb002b7a 	bl	24f74 <assertion_failed>
   1a188:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a18c:	e3401003 	movt	r1, #3
   1a190:	e3050180 	movw	r0, #20864	; 0x5180
   1a194:	e3400003 	movt	r0, #3
   1a198:	e3a020e7 	mov	r2, #231	; 0xe7
   1a19c:	eb002b74 	bl	24f74 <assertion_failed>
   1a1a0:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a1a4:	e3401003 	movt	r1, #3
   1a1a8:	e3050190 	movw	r0, #20880	; 0x5190
   1a1ac:	e3400003 	movt	r0, #3
   1a1b0:	e3a020ea 	mov	r2, #234	; 0xea
   1a1b4:	eb002b6e 	bl	24f74 <assertion_failed>

0001a1b8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   1a1b8:	e92d4070 	push	{r4, r5, r6, lr}
   1a1bc:	e2800024 	add	r0, r0, #36	; 0x24
   1a1c0:	e1a04001 	mov	r4, r1
   1a1c4:	e24dd010 	sub	sp, sp, #16
   1a1c8:	e1a05002 	mov	r5, r2
   1a1cc:	e1a0100d 	mov	r1, sp
   1a1d0:	e3a02000 	mov	r2, #0
   1a1d4:	e1a06003 	mov	r6, r3
   1a1d8:	eb00180f 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1a1dc:	e3500000 	cmp	r0, #0
   1a1e0:	0a000022 	beq	1a270 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb8>
   1a1e4:	e350000e 	cmp	r0, #14
   1a1e8:	1a000022 	bne	1a278 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xc0>
   1a1ec:	e3540000 	cmp	r4, #0
   1a1f0:	0a000026 	beq	1a290 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xd8>
   1a1f4:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1a1f8:	e5dd3000 	ldrb	r3, [sp]
   1a1fc:	e3520000 	cmp	r2, #0
   1a200:	e5c43000 	strb	r3, [r4]
   1a204:	0a000027 	beq	1a2a8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xf0>
   1a208:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1a20c:	e3550000 	cmp	r5, #0
   1a210:	e5dd3001 	ldrb	r3, [sp, #1]
   1a214:	e5823000 	str	r3, [r2]
   1a218:	0a000028 	beq	1a2c0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x108>
   1a21c:	e1a00005 	mov	r0, r5
   1a220:	e28d1002 	add	r1, sp, #2
   1a224:	eb0016ac 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1a228:	e3560000 	cmp	r6, #0
   1a22c:	0a000029 	beq	1a2d8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x120>
   1a230:	e1a00006 	mov	r0, r6
   1a234:	e28d1006 	add	r1, sp, #6
   1a238:	eb0016a7 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1a23c:	e59d3020 	ldr	r3, [sp, #32]
   1a240:	e3530000 	cmp	r3, #0
   1a244:	0a000029 	beq	1a2f0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x138>
   1a248:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1a24c:	e1dd30ba 	ldrh	r3, [sp, #10]
   1a250:	e3520000 	cmp	r2, #0
   1a254:	e59d2020 	ldr	r2, [sp, #32]
   1a258:	e1c230b0 	strh	r3, [r2]
   1a25c:	0a000029 	beq	1a308 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x150>
   1a260:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1a264:	e3a00001 	mov	r0, #1
   1a268:	e1dd30bc 	ldrh	r3, [sp, #12]
   1a26c:	e1c230b0 	strh	r3, [r2]
   1a270:	e28dd010 	add	sp, sp, #16
   1a274:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a278:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a27c:	e3401003 	movt	r1, #3
   1a280:	e30501a0 	movw	r0, #20896	; 0x51a0
   1a284:	e3400003 	movt	r0, #3
   1a288:	e3a020fe 	mov	r2, #254	; 0xfe
   1a28c:	eb002b38 	bl	24f74 <assertion_failed>
   1a290:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a294:	e3401003 	movt	r1, #3
   1a298:	e30501c0 	movw	r0, #20928	; 0x51c0
   1a29c:	e3400003 	movt	r0, #3
   1a2a0:	e3a02c01 	mov	r2, #256	; 0x100
   1a2a4:	eb002b32 	bl	24f74 <assertion_failed>
   1a2a8:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a2ac:	e3401003 	movt	r1, #3
   1a2b0:	e3050170 	movw	r0, #20848	; 0x5170
   1a2b4:	e3400003 	movt	r0, #3
   1a2b8:	e3002103 	movw	r2, #259	; 0x103
   1a2bc:	eb002b2c 	bl	24f74 <assertion_failed>
   1a2c0:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a2c4:	e3401003 	movt	r1, #3
   1a2c8:	e3050180 	movw	r0, #20864	; 0x5180
   1a2cc:	e3400003 	movt	r0, #3
   1a2d0:	e3002106 	movw	r2, #262	; 0x106
   1a2d4:	eb002b26 	bl	24f74 <assertion_failed>
   1a2d8:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a2dc:	e3401003 	movt	r1, #3
   1a2e0:	e3050190 	movw	r0, #20880	; 0x5190
   1a2e4:	e3400003 	movt	r0, #3
   1a2e8:	e3002109 	movw	r2, #265	; 0x109
   1a2ec:	eb002b20 	bl	24f74 <assertion_failed>
   1a2f0:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a2f4:	e3401003 	movt	r1, #3
   1a2f8:	e30501cc 	movw	r0, #20940	; 0x51cc
   1a2fc:	e3400003 	movt	r0, #3
   1a300:	e3a02f43 	mov	r2, #268	; 0x10c
   1a304:	eb002b1a 	bl	24f74 <assertion_failed>
   1a308:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a30c:	e3401003 	movt	r1, #3
   1a310:	e30501dc 	movw	r0, #20956	; 0x51dc
   1a314:	e3400003 	movt	r0, #3
   1a318:	e300210f 	movw	r2, #271	; 0x10f
   1a31c:	eb002b14 	bl	24f74 <assertion_failed>

0001a320 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   1a320:	e2800030 	add	r0, r0, #48	; 0x30
   1a324:	ea000798 	b	1c18c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

0001a328 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   1a328:	e92d4010 	push	{r4, lr}
   1a32c:	e1a04000 	mov	r4, r0
   1a330:	e2800030 	add	r0, r0, #48	; 0x30
   1a334:	eb0007cf 	bl	1c278 <CRouteCache::GetRoute(unsigned char const*) const>
   1a338:	e3500000 	cmp	r0, #0
   1a33c:	18bd8010 	popne	{r4, pc}
   1a340:	e5940000 	ldr	r0, [r4]
   1a344:	e3500000 	cmp	r0, #0
   1a348:	0a000004 	beq	1a360 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   1a34c:	eb001582 	bl	1f95c <CNetConfig::GetDefaultGateway() const>
   1a350:	e3500000 	cmp	r0, #0
   1a354:	0a000007 	beq	1a378 <CNetworkLayer::GetGateway(unsigned char const*) const+0x50>
   1a358:	e8bd4010 	pop	{r4, lr}
   1a35c:	ea001693 	b	1fdb0 <CIPAddress::Get() const>
   1a360:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a364:	e3401003 	movt	r1, #3
   1a368:	e3050058 	movw	r0, #20568	; 0x5058
   1a36c:	e3400003 	movt	r0, #3
   1a370:	e3002122 	movw	r2, #290	; 0x122
   1a374:	eb002afe 	bl	24f74 <assertion_failed>
   1a378:	e30510ec 	movw	r1, #20716	; 0x50ec
   1a37c:	e3401003 	movt	r1, #3
   1a380:	e30501f0 	movw	r0, #20976	; 0x51f0
   1a384:	e3400003 	movt	r0, #3
   1a388:	e3a02f49 	mov	r2, #292	; 0x124
   1a38c:	eb002af8 	bl	24f74 <assertion_failed>

0001a390 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   1a390:	e5900008 	ldr	r0, [r0, #8]
   1a394:	e3500000 	cmp	r0, #0
   1a398:	0a000000 	beq	1a3a0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   1a39c:	ea0006ef 	b	1bf60 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1a3a0:	e92d4010 	push	{r4, lr}
   1a3a4:	ebfffdb6 	bl	19a84 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>

0001a3a8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   1a3a8:	e92d4010 	push	{r4, lr}
   1a3ac:	e1a04000 	mov	r4, r0
   1a3b0:	e3a03000 	mov	r3, #0
   1a3b4:	e2800010 	add	r0, r0, #16
   1a3b8:	e884000e 	stm	r4, {r1, r2, r3}
   1a3bc:	e584300c 	str	r3, [r4, #12]
   1a3c0:	eb00170c 	bl	1fff8 <CNetQueue::CNetQueue()>
   1a3c4:	e284001c 	add	r0, r4, #28
   1a3c8:	eb00170a 	bl	1fff8 <CNetQueue::CNetQueue()>
   1a3cc:	e5943000 	ldr	r3, [r4]
   1a3d0:	e3530000 	cmp	r3, #0
   1a3d4:	0a000004 	beq	1a3ec <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x44>
   1a3d8:	e5943004 	ldr	r3, [r4, #4]
   1a3dc:	e3530000 	cmp	r3, #0
   1a3e0:	0a000007 	beq	1a404 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x5c>
   1a3e4:	e1a00004 	mov	r0, r4
   1a3e8:	e8bd8010 	pop	{r4, pc}
   1a3ec:	e3051208 	movw	r1, #21000	; 0x5208
   1a3f0:	e3401003 	movt	r1, #3
   1a3f4:	e3050058 	movw	r0, #20568	; 0x5058
   1a3f8:	e3400003 	movt	r0, #3
   1a3fc:	e3a0201f 	mov	r2, #31
   1a400:	eb002adb 	bl	24f74 <assertion_failed>
   1a404:	e3051208 	movw	r1, #21000	; 0x5208
   1a408:	e3401003 	movt	r1, #3
   1a40c:	e3050218 	movw	r0, #21016	; 0x5218
   1a410:	e3400003 	movt	r0, #3
   1a414:	e3a02020 	mov	r2, #32
   1a418:	eb002ad5 	bl	24f74 <assertion_failed>

0001a41c <CLinkLayer::~CLinkLayer()>:
   1a41c:	e92d4070 	push	{r4, r5, r6, lr}
   1a420:	e1a04000 	mov	r4, r0
   1a424:	e590500c 	ldr	r5, [r0, #12]
   1a428:	e3550000 	cmp	r5, #0
   1a42c:	0a000004 	beq	1a444 <CLinkLayer::~CLinkLayer()+0x28>
   1a430:	e1a00005 	mov	r0, r5
   1a434:	eb0002b2 	bl	1af04 <CARPHandler::~CARPHandler()>
   1a438:	e1a00005 	mov	r0, r5
   1a43c:	e3a01f93 	mov	r1, #588	; 0x24c
   1a440:	eb0046b8 	bl	2bf28 <operator delete(void*, unsigned int)>
   1a444:	e1a00004 	mov	r0, r4
   1a448:	e3a03000 	mov	r3, #0
   1a44c:	e584300c 	str	r3, [r4, #12]
   1a450:	e5843008 	str	r3, [r4, #8]
   1a454:	e5843004 	str	r3, [r4, #4]
   1a458:	e480301c 	str	r3, [r0], #28
   1a45c:	eb00171e 	bl	200dc <CNetQueue::~CNetQueue()>
   1a460:	e2840010 	add	r0, r4, #16
   1a464:	eb00171c 	bl	200dc <CNetQueue::~CNetQueue()>
   1a468:	e1a00004 	mov	r0, r4
   1a46c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a470 <CLinkLayer::Initialize()>:
   1a470:	e92d4030 	push	{r4, r5, lr}
   1a474:	e5903000 	ldr	r3, [r0]
   1a478:	e24dd00c 	sub	sp, sp, #12
   1a47c:	e3530000 	cmp	r3, #0
   1a480:	0a00000d 	beq	1a4bc <CLinkLayer::Initialize()+0x4c>
   1a484:	e1a04000 	mov	r4, r0
   1a488:	e3a00f93 	mov	r0, #588	; 0x24c
   1a48c:	eb004697 	bl	2bef0 <operator new(unsigned int)>
   1a490:	e1a0c004 	mov	ip, r4
   1a494:	e1a03004 	mov	r3, r4
   1a498:	e1a05000 	mov	r5, r0
   1a49c:	e5942004 	ldr	r2, [r4, #4]
   1a4a0:	e49c1010 	ldr	r1, [ip], #16
   1a4a4:	e58dc000 	str	ip, [sp]
   1a4a8:	eb00026a 	bl	1ae58 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   1a4ac:	e3a00001 	mov	r0, #1
   1a4b0:	e584500c 	str	r5, [r4, #12]
   1a4b4:	e28dd00c 	add	sp, sp, #12
   1a4b8:	e8bd8030 	pop	{r4, r5, pc}
   1a4bc:	e3051208 	movw	r1, #21000	; 0x5208
   1a4c0:	e3401003 	movt	r1, #3
   1a4c4:	e3050058 	movw	r0, #20568	; 0x5058
   1a4c8:	e3400003 	movt	r0, #3
   1a4cc:	e3a0202f 	mov	r2, #47	; 0x2f
   1a4d0:	eb002aa7 	bl	24f74 <assertion_failed>

0001a4d4 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   1a4d4:	e5903008 	ldr	r3, [r0, #8]
   1a4d8:	e92d4010 	push	{r4, lr}
   1a4dc:	e3530000 	cmp	r3, #0
   1a4e0:	1a000008 	bne	1a508 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x34>
   1a4e4:	e3510000 	cmp	r1, #0
   1a4e8:	e5801008 	str	r1, [r0, #8]
   1a4ec:	18bd8010 	popne	{r4, pc}
   1a4f0:	e3051208 	movw	r1, #21000	; 0x5208
   1a4f4:	e3401003 	movt	r1, #3
   1a4f8:	e305006c 	movw	r0, #20588	; 0x506c
   1a4fc:	e3400003 	movt	r0, #3
   1a500:	e3a0203a 	mov	r2, #58	; 0x3a
   1a504:	eb002a9a 	bl	24f74 <assertion_failed>
   1a508:	e3051208 	movw	r1, #21000	; 0x5208
   1a50c:	e3401003 	movt	r1, #3
   1a510:	e305022c 	movw	r0, #21036	; 0x522c
   1a514:	e3400003 	movt	r0, #3
   1a518:	e3a02038 	mov	r2, #56	; 0x38
   1a51c:	eb002a94 	bl	24f74 <assertion_failed>

0001a520 <CLinkLayer::Process()>:
   1a520:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a524:	e1a04000 	mov	r4, r0
   1a528:	e5900004 	ldr	r0, [r0, #4]
   1a52c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1a530:	e3500000 	cmp	r0, #0
   1a534:	0a00004b 	beq	1a668 <CLinkLayer::Process()+0x148>
   1a538:	eb0001ba 	bl	1ac28 <CNetDeviceLayer::GetMACAddress() const>
   1a53c:	e2506000 	subs	r6, r0, #0
   1a540:	0a00004e 	beq	1a680 <CLinkLayer::Process()+0x160>
   1a544:	e5940004 	ldr	r0, [r4, #4]
   1a548:	e3500000 	cmp	r0, #0
   1a54c:	0a000051 	beq	1a698 <CLinkLayer::Process()+0x178>
   1a550:	e28d3010 	add	r3, sp, #16
   1a554:	e28d5008 	add	r5, sp, #8
   1a558:	e283700e 	add	r7, r3, #14
   1a55c:	e284801c 	add	r8, r4, #28
   1a560:	e28d2004 	add	r2, sp, #4
   1a564:	e28d1010 	add	r1, sp, #16
   1a568:	eb0001be 	bl	1ac68 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   1a56c:	e3500000 	cmp	r0, #0
   1a570:	0a000030 	beq	1a638 <CLinkLayer::Process()+0x118>
   1a574:	e59d3004 	ldr	r3, [sp, #4]
   1a578:	e3530d19 	cmp	r3, #1600	; 0x640
   1a57c:	8a000027 	bhi	1a620 <CLinkLayer::Process()+0x100>
   1a580:	e353000e 	cmp	r3, #14
   1a584:	9a000014 	bls	1a5dc <CLinkLayer::Process()+0xbc>
   1a588:	e28d1010 	add	r1, sp, #16
   1a58c:	e1a00005 	mov	r0, r5
   1a590:	eb0045c4 	bl	2bca8 <CMACAddress::CMACAddress(unsigned char const*)>
   1a594:	e1a01006 	mov	r1, r6
   1a598:	e1a00005 	mov	r0, r5
   1a59c:	eb0045ac 	bl	2bc54 <CMACAddress::operator!=(CMACAddress const&) const>
   1a5a0:	e3500000 	cmp	r0, #0
   1a5a4:	1a00000e 	bne	1a5e4 <CLinkLayer::Process()+0xc4>
   1a5a8:	e59d2004 	ldr	r2, [sp, #4]
   1a5ac:	e242200e 	sub	r2, r2, #14
   1a5b0:	e58d2004 	str	r2, [sp, #4]
   1a5b4:	e3520000 	cmp	r2, #0
   1a5b8:	0a000024 	beq	1a650 <CLinkLayer::Process()+0x130>
   1a5bc:	e1dd31bc 	ldrh	r3, [sp, #28]
   1a5c0:	e3530008 	cmp	r3, #8
   1a5c4:	0a000010 	beq	1a60c <CLinkLayer::Process()+0xec>
   1a5c8:	e3001608 	movw	r1, #1544	; 0x608
   1a5cc:	e1530001 	cmp	r3, r1
   1a5d0:	0a000008 	beq	1a5f8 <CLinkLayer::Process()+0xd8>
   1a5d4:	e1a00005 	mov	r0, r5
   1a5d8:	eb004582 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   1a5dc:	e5940004 	ldr	r0, [r4, #4]
   1a5e0:	eaffffde 	b	1a560 <CLinkLayer::Process()+0x40>
   1a5e4:	e1a00005 	mov	r0, r5
   1a5e8:	eb0045e0 	bl	2bd70 <CMACAddress::IsBroadcast() const>
   1a5ec:	e3500000 	cmp	r0, #0
   1a5f0:	1affffec 	bne	1a5a8 <CLinkLayer::Process()+0x88>
   1a5f4:	eafffff6 	b	1a5d4 <CLinkLayer::Process()+0xb4>
   1a5f8:	e3a03000 	mov	r3, #0
   1a5fc:	e1a01007 	mov	r1, r7
   1a600:	e2840010 	add	r0, r4, #16
   1a604:	eb0016b9 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1a608:	eafffff1 	b	1a5d4 <CLinkLayer::Process()+0xb4>
   1a60c:	e3a03000 	mov	r3, #0
   1a610:	e1a01007 	mov	r1, r7
   1a614:	e1a00008 	mov	r0, r8
   1a618:	eb0016b4 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1a61c:	eaffffec 	b	1a5d4 <CLinkLayer::Process()+0xb4>
   1a620:	e3051208 	movw	r1, #21000	; 0x5208
   1a624:	e3401003 	movt	r1, #3
   1a628:	e3020ebc 	movw	r0, #11964	; 0x2ebc
   1a62c:	e3400003 	movt	r0, #3
   1a630:	e3a02048 	mov	r2, #72	; 0x48
   1a634:	eb002a4e 	bl	24f74 <assertion_failed>
   1a638:	e594000c 	ldr	r0, [r4, #12]
   1a63c:	e3500000 	cmp	r0, #0
   1a640:	0a00001a 	beq	1a6b0 <CLinkLayer::Process()+0x190>
   1a644:	eb00031e 	bl	1b2c4 <CARPHandler::Process()>
   1a648:	e28dde65 	add	sp, sp, #1616	; 0x650
   1a64c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a650:	e3051208 	movw	r1, #21000	; 0x5208
   1a654:	e3401003 	movt	r1, #3
   1a658:	e30500e0 	movw	r0, #20704	; 0x50e0
   1a65c:	e3400003 	movt	r0, #3
   1a660:	e3a02057 	mov	r2, #87	; 0x57
   1a664:	eb002a42 	bl	24f74 <assertion_failed>
   1a668:	e3051208 	movw	r1, #21000	; 0x5208
   1a66c:	e3401003 	movt	r1, #3
   1a670:	e3050218 	movw	r0, #21016	; 0x5218
   1a674:	e3400003 	movt	r0, #3
   1a678:	e3a0203f 	mov	r2, #63	; 0x3f
   1a67c:	eb002a3c 	bl	24f74 <assertion_failed>
   1a680:	e3051208 	movw	r1, #21000	; 0x5208
   1a684:	e3401003 	movt	r1, #3
   1a688:	e3050244 	movw	r0, #21060	; 0x5244
   1a68c:	e3400003 	movt	r0, #3
   1a690:	e3a02041 	mov	r2, #65	; 0x41
   1a694:	eb002a36 	bl	24f74 <assertion_failed>
   1a698:	e3051208 	movw	r1, #21000	; 0x5208
   1a69c:	e3401003 	movt	r1, #3
   1a6a0:	e3050218 	movw	r0, #21016	; 0x5218
   1a6a4:	e3400003 	movt	r0, #3
   1a6a8:	e3a02043 	mov	r2, #67	; 0x43
   1a6ac:	eb002a30 	bl	24f74 <assertion_failed>
   1a6b0:	e3051208 	movw	r1, #21000	; 0x5208
   1a6b4:	e3401003 	movt	r1, #3
   1a6b8:	e3050258 	movw	r0, #21080	; 0x5258
   1a6bc:	e3400003 	movt	r0, #3
   1a6c0:	e3a02065 	mov	r2, #101	; 0x65
   1a6c4:	eb002a2a 	bl	24f74 <assertion_failed>

0001a6c8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   1a6c8:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a6cc:	e243e001 	sub	lr, r3, #1
   1a6d0:	e300c631 	movw	ip, #1585	; 0x631
   1a6d4:	e28db01c 	add	fp, sp, #28
   1a6d8:	e15e000c 	cmp	lr, ip
   1a6dc:	e24dd010 	sub	sp, sp, #16
   1a6e0:	8a000034 	bhi	1a7b8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   1a6e4:	e1a04003 	mov	r4, r3
   1a6e8:	e2833015 	add	r3, r3, #21
   1a6ec:	e1a05000 	mov	r5, r0
   1a6f0:	e3c33007 	bic	r3, r3, #7
   1a6f4:	e5900004 	ldr	r0, [r0, #4]
   1a6f8:	e04dd003 	sub	sp, sp, r3
   1a6fc:	e1a06002 	mov	r6, r2
   1a700:	e1a07001 	mov	r7, r1
   1a704:	e284900e 	add	r9, r4, #14
   1a708:	e3500000 	cmp	r0, #0
   1a70c:	e28d8008 	add	r8, sp, #8
   1a710:	0a00003b 	beq	1a804 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x13c>
   1a714:	eb000143 	bl	1ac28 <CNetDeviceLayer::GetMACAddress() const>
   1a718:	e3500000 	cmp	r0, #0
   1a71c:	0a00003e 	beq	1a81c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x154>
   1a720:	e28d100e 	add	r1, sp, #14
   1a724:	eb004579 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   1a728:	e3a02000 	mov	r2, #0
   1a72c:	e3a03008 	mov	r3, #8
   1a730:	e3560000 	cmp	r6, #0
   1a734:	e5c8200d 	strb	r2, [r8, #13]
   1a738:	e5c8300c 	strb	r3, [r8, #12]
   1a73c:	0a00003c 	beq	1a834 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   1a740:	e1a02004 	mov	r2, r4
   1a744:	e1a01006 	mov	r1, r6
   1a748:	e28d0016 	add	r0, sp, #22
   1a74c:	eb0044dd 	bl	2bac8 <memcpy>
   1a750:	e5953000 	ldr	r3, [r5]
   1a754:	e3530000 	cmp	r3, #0
   1a758:	0a00003b 	beq	1a84c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x184>
   1a75c:	e595300c 	ldr	r3, [r5, #12]
   1a760:	e3530000 	cmp	r3, #0
   1a764:	0a00003e 	beq	1a864 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   1a768:	e24b0024 	sub	r0, fp, #36	; 0x24
   1a76c:	eb00451a 	bl	2bbdc <CMACAddress::CMACAddress()>
   1a770:	e1a00007 	mov	r0, r7
   1a774:	eb0015bf 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   1a778:	e3500000 	cmp	r0, #0
   1a77c:	0a000010 	beq	1a7c4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   1a780:	e24b0024 	sub	r0, fp, #36	; 0x24
   1a784:	eb00454c 	bl	2bcbc <CMACAddress::SetBroadcast()>
   1a788:	e1a01008 	mov	r1, r8
   1a78c:	e24b0024 	sub	r0, fp, #36	; 0x24
   1a790:	eb00455e 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   1a794:	e1a02009 	mov	r2, r9
   1a798:	e1a01008 	mov	r1, r8
   1a79c:	e5950004 	ldr	r0, [r5, #4]
   1a7a0:	eb00012d 	bl	1ac5c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1a7a4:	e24b0024 	sub	r0, fp, #36	; 0x24
   1a7a8:	eb00450e 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   1a7ac:	e3a00001 	mov	r0, #1
   1a7b0:	e24bd01c 	sub	sp, fp, #28
   1a7b4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a7b8:	e3a00000 	mov	r0, #0
   1a7bc:	e24bd01c 	sub	sp, fp, #28
   1a7c0:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a7c4:	e5950000 	ldr	r0, [r5]
   1a7c8:	eb001467 	bl	1f96c <CNetConfig::GetBroadcastAddress() const>
   1a7cc:	e1a01000 	mov	r1, r0
   1a7d0:	e1a00007 	mov	r0, r7
   1a7d4:	eb0014cd 	bl	1fb10 <CIPAddress::operator==(CIPAddress const&) const>
   1a7d8:	e3500000 	cmp	r0, #0
   1a7dc:	1affffe7 	bne	1a780 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   1a7e0:	e595000c 	ldr	r0, [r5, #12]
   1a7e4:	e1a01007 	mov	r1, r7
   1a7e8:	e58d9000 	str	r9, [sp]
   1a7ec:	e1a03008 	mov	r3, r8
   1a7f0:	e24b2024 	sub	r2, fp, #36	; 0x24
   1a7f4:	eb0003b2 	bl	1b6c4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   1a7f8:	e3500000 	cmp	r0, #0
   1a7fc:	0affffe8 	beq	1a7a4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   1a800:	eaffffe0 	b	1a788 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   1a804:	e3051208 	movw	r1, #21000	; 0x5208
   1a808:	e3401003 	movt	r1, #3
   1a80c:	e3050218 	movw	r0, #21016	; 0x5218
   1a810:	e3400003 	movt	r0, #3
   1a814:	e3a02075 	mov	r2, #117	; 0x75
   1a818:	eb0029d5 	bl	24f74 <assertion_failed>
   1a81c:	e3051208 	movw	r1, #21000	; 0x5208
   1a820:	e3401003 	movt	r1, #3
   1a824:	e3050244 	movw	r0, #21060	; 0x5244
   1a828:	e3400003 	movt	r0, #3
   1a82c:	e3a02077 	mov	r2, #119	; 0x77
   1a830:	eb0029cf 	bl	24f74 <assertion_failed>
   1a834:	e3051208 	movw	r1, #21000	; 0x5208
   1a838:	e3401003 	movt	r1, #3
   1a83c:	e305026c 	movw	r0, #21100	; 0x526c
   1a840:	e3400003 	movt	r0, #3
   1a844:	e3a0207c 	mov	r2, #124	; 0x7c
   1a848:	eb0029c9 	bl	24f74 <assertion_failed>
   1a84c:	e3051208 	movw	r1, #21000	; 0x5208
   1a850:	e3401003 	movt	r1, #3
   1a854:	e3050058 	movw	r0, #20568	; 0x5058
   1a858:	e3400003 	movt	r0, #3
   1a85c:	e3a02080 	mov	r2, #128	; 0x80
   1a860:	eb0029c3 	bl	24f74 <assertion_failed>
   1a864:	e3051208 	movw	r1, #21000	; 0x5208
   1a868:	e3401003 	movt	r1, #3
   1a86c:	e3050258 	movw	r0, #21080	; 0x5258
   1a870:	e3400003 	movt	r0, #3
   1a874:	e3a02081 	mov	r2, #129	; 0x81
   1a878:	eb0029bd 	bl	24f74 <assertion_failed>

0001a87c <CLinkLayer::Receive(void*, unsigned int*)>:
   1a87c:	e92d4010 	push	{r4, lr}
   1a880:	e3510000 	cmp	r1, #0
   1a884:	0a00000a 	beq	1a8b4 <CLinkLayer::Receive(void*, unsigned int*)+0x38>
   1a888:	e1a04002 	mov	r4, r2
   1a88c:	e3520000 	cmp	r2, #0
   1a890:	0a00000d 	beq	1a8cc <CLinkLayer::Receive(void*, unsigned int*)+0x50>
   1a894:	e3a02000 	mov	r2, #0
   1a898:	e280001c 	add	r0, r0, #28
   1a89c:	eb00165e 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1a8a0:	e1a03000 	mov	r3, r0
   1a8a4:	e2900000 	adds	r0, r0, #0
   1a8a8:	e5843000 	str	r3, [r4]
   1a8ac:	13a00001 	movne	r0, #1
   1a8b0:	e8bd8010 	pop	{r4, pc}
   1a8b4:	e3051208 	movw	r1, #21000	; 0x5208
   1a8b8:	e3401003 	movt	r1, #3
   1a8bc:	e3020270 	movw	r0, #8816	; 0x2270
   1a8c0:	e3400003 	movt	r0, #3
   1a8c4:	e3a02097 	mov	r2, #151	; 0x97
   1a8c8:	eb0029a9 	bl	24f74 <assertion_failed>
   1a8cc:	e3051208 	movw	r1, #21000	; 0x5208
   1a8d0:	e3401003 	movt	r1, #3
   1a8d4:	e3020a98 	movw	r0, #10904	; 0x2a98
   1a8d8:	e3400003 	movt	r0, #3
   1a8dc:	e3a02098 	mov	r2, #152	; 0x98
   1a8e0:	eb0029a3 	bl	24f74 <assertion_failed>

0001a8e4 <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   1a8e4:	e92d4010 	push	{r4, lr}
   1a8e8:	e3510000 	cmp	r1, #0
   1a8ec:	0a000009 	beq	1a918 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   1a8f0:	e352000e 	cmp	r2, #14
   1a8f4:	9a00000d 	bls	1a930 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x4c>
   1a8f8:	e5900008 	ldr	r0, [r0, #8]
   1a8fc:	e3500000 	cmp	r0, #0
   1a900:	0a000010 	beq	1a948 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1a904:	e242300e 	sub	r3, r2, #14
   1a908:	e281200e 	add	r2, r1, #14
   1a90c:	e8bd4010 	pop	{r4, lr}
   1a910:	e3a01001 	mov	r1, #1
   1a914:	eafffe9d 	b	1a390 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   1a918:	e3051208 	movw	r1, #21000	; 0x5208
   1a91c:	e3401003 	movt	r1, #3
   1a920:	e305027c 	movw	r0, #21116	; 0x527c
   1a924:	e3400003 	movt	r0, #3
   1a928:	e3a020a0 	mov	r2, #160	; 0xa0
   1a92c:	eb002990 	bl	24f74 <assertion_failed>
   1a930:	e3051208 	movw	r1, #21000	; 0x5208
   1a934:	e3401003 	movt	r1, #3
   1a938:	e3050290 	movw	r0, #21136	; 0x5290
   1a93c:	e3400003 	movt	r0, #3
   1a940:	e3a020a1 	mov	r2, #161	; 0xa1
   1a944:	eb00298a 	bl	24f74 <assertion_failed>
   1a948:	e3051208 	movw	r1, #21000	; 0x5208
   1a94c:	e3401003 	movt	r1, #3
   1a950:	e305006c 	movw	r0, #20588	; 0x506c
   1a954:	e3400003 	movt	r0, #3
   1a958:	e3a020a2 	mov	r2, #162	; 0xa2
   1a95c:	eb002984 	bl	24f74 <assertion_failed>

0001a960 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*)>:
   1a960:	e92d4010 	push	{r4, lr}
   1a964:	e1a04000 	mov	r4, r0
   1a968:	e3a03000 	mov	r3, #0
   1a96c:	e2800008 	add	r0, r0, #8
   1a970:	e884000a 	stm	r4, {r1, r3}
   1a974:	eb00159f 	bl	1fff8 <CNetQueue::CNetQueue()>
   1a978:	e2840014 	add	r0, r4, #20
   1a97c:	eb00159d 	bl	1fff8 <CNetQueue::CNetQueue()>
   1a980:	e1a00004 	mov	r0, r4
   1a984:	e8bd8010 	pop	{r4, pc}

0001a988 <CNetDeviceLayer::~CNetDeviceLayer()>:
   1a988:	e92d4010 	push	{r4, lr}
   1a98c:	e3a03000 	mov	r3, #0
   1a990:	e1a04000 	mov	r4, r0
   1a994:	e5803004 	str	r3, [r0, #4]
   1a998:	e4803014 	str	r3, [r0], #20
   1a99c:	eb0015ce 	bl	200dc <CNetQueue::~CNetQueue()>
   1a9a0:	e2840008 	add	r0, r4, #8
   1a9a4:	eb0015cc 	bl	200dc <CNetQueue::~CNetQueue()>
   1a9a8:	e1a00004 	mov	r0, r4
   1a9ac:	e8bd8010 	pop	{r4, pc}

0001a9b0 <CNetDeviceLayer::Initialize(bool)>:
   1a9b0:	e92d4070 	push	{r4, r5, r6, lr}
   1a9b4:	e1a05000 	mov	r5, r0
   1a9b8:	e5900004 	ldr	r0, [r0, #4]
   1a9bc:	e24dd008 	sub	sp, sp, #8
   1a9c0:	e3500000 	cmp	r0, #0
   1a9c4:	1a000049 	bne	1aaf0 <CNetDeviceLayer::Initialize(bool)+0x140>
   1a9c8:	e1a06001 	mov	r6, r1
   1a9cc:	eb004532 	bl	2be9c <CNetDevice::GetNetDevice(unsigned int)>
   1a9d0:	e1a04000 	mov	r4, r0
   1a9d4:	e3500000 	cmp	r0, #0
   1a9d8:	e5850004 	str	r0, [r5, #4]
   1a9dc:	0a000024 	beq	1aa74 <CNetDeviceLayer::Initialize(bool)+0xc4>
   1a9e0:	e3a000dc 	mov	r0, #220	; 0xdc
   1a9e4:	eb004541 	bl	2bef0 <operator new(unsigned int)>
   1a9e8:	e5951004 	ldr	r1, [r5, #4]
   1a9ec:	eb0000e5 	bl	1ad88 <CPHYTask::CPHYTask(CNetDevice*)>
   1a9f0:	e3560000 	cmp	r6, #0
   1a9f4:	1a000003 	bne	1aa08 <CNetDeviceLayer::Initialize(bool)+0x58>
   1a9f8:	e3a04001 	mov	r4, #1
   1a9fc:	e1a00004 	mov	r0, r4
   1aa00:	e28dd008 	add	sp, sp, #8
   1aa04:	e8bd8070 	pop	{r4, r5, r6, pc}
   1aa08:	eb00427a 	bl	2b3f8 <CTimer::Get()>
   1aa0c:	eb003fae 	bl	2a8cc <CTimer::GetTicks() const>
   1aa10:	e1a06000 	mov	r6, r0
   1aa14:	ea000006 	b	1aa34 <CNetDeviceLayer::Initialize(bool)+0x84>
   1aa18:	e5953004 	ldr	r3, [r5, #4]
   1aa1c:	e1a00003 	mov	r0, r3
   1aa20:	e5933000 	ldr	r3, [r3]
   1aa24:	e5933018 	ldr	r3, [r3, #24]
   1aa28:	e12fff33 	blx	r3
   1aa2c:	e2504000 	subs	r4, r0, #0
   1aa30:	1a000019 	bne	1aa9c <CNetDeviceLayer::Initialize(bool)+0xec>
   1aa34:	eb00426f 	bl	2b3f8 <CTimer::Get()>
   1aa38:	eb003fa3 	bl	2a8cc <CTimer::GetTicks() const>
   1aa3c:	e0400006 	sub	r0, r0, r6
   1aa40:	e3500e19 	cmp	r0, #400	; 0x190
   1aa44:	3afffff3 	bcc	1aa18 <CNetDeviceLayer::Initialize(bool)+0x68>
   1aa48:	eb002eee 	bl	26608 <CLogger::Get()>
   1aa4c:	e3a04001 	mov	r4, #1
   1aa50:	e3a02002 	mov	r2, #2
   1aa54:	e30532e8 	movw	r3, #21224	; 0x52e8
   1aa58:	e3403003 	movt	r3, #3
   1aa5c:	e30512b4 	movw	r1, #21172	; 0x52b4
   1aa60:	e3401003 	movt	r1, #3
   1aa64:	eb002e28 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1aa68:	e1a00004 	mov	r0, r4
   1aa6c:	e28dd008 	add	sp, sp, #8
   1aa70:	e8bd8070 	pop	{r4, r5, r6, pc}
   1aa74:	eb002ee3 	bl	26608 <CLogger::Get()>
   1aa78:	e3a02001 	mov	r2, #1
   1aa7c:	e30532cc 	movw	r3, #21196	; 0x52cc
   1aa80:	e3403003 	movt	r3, #3
   1aa84:	e30512b4 	movw	r1, #21172	; 0x52b4
   1aa88:	e3401003 	movt	r1, #3
   1aa8c:	eb002e1e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1aa90:	e1a00004 	mov	r0, r4
   1aa94:	e28dd008 	add	sp, sp, #8
   1aa98:	e8bd8070 	pop	{r4, r5, r6, pc}
   1aa9c:	e5953004 	ldr	r3, [r5, #4]
   1aaa0:	e1a00003 	mov	r0, r3
   1aaa4:	e5933000 	ldr	r3, [r3]
   1aaa8:	e593301c 	ldr	r3, [r3, #28]
   1aaac:	e12fff33 	blx	r3
   1aab0:	e1a05000 	mov	r5, r0
   1aab4:	e3500006 	cmp	r0, #6
   1aab8:	0affffce 	beq	1a9f8 <CNetDeviceLayer::Initialize(bool)+0x48>
   1aabc:	eb002ed1 	bl	26608 <CLogger::Get()>
   1aac0:	e1a06000 	mov	r6, r0
   1aac4:	e1a00005 	mov	r0, r5
   1aac8:	eb0044ec 	bl	2be80 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   1aacc:	e30532f8 	movw	r3, #21240	; 0x52f8
   1aad0:	e3403003 	movt	r3, #3
   1aad4:	e58d0000 	str	r0, [sp]
   1aad8:	e30512b4 	movw	r1, #21172	; 0x52b4
   1aadc:	e3401003 	movt	r1, #3
   1aae0:	e1a00006 	mov	r0, r6
   1aae4:	e3a02003 	mov	r2, #3
   1aae8:	eb002e07 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1aaec:	eaffffc2 	b	1a9fc <CNetDeviceLayer::Initialize(bool)+0x4c>
   1aaf0:	e30512bc 	movw	r1, #21180	; 0x52bc
   1aaf4:	e3401003 	movt	r1, #3
   1aaf8:	e3010050 	movw	r0, #4176	; 0x1050
   1aafc:	e3400003 	movt	r0, #3
   1ab00:	e3a02032 	mov	r2, #50	; 0x32
   1ab04:	eb00291a 	bl	24f74 <assertion_failed>

0001ab08 <CNetDeviceLayer::Process()>:
   1ab08:	e92d4030 	push	{r4, r5, lr}
   1ab0c:	e1a04000 	mov	r4, r0
   1ab10:	e5900004 	ldr	r0, [r0, #4]
   1ab14:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1ab18:	e24dd00c 	sub	sp, sp, #12
   1ab1c:	e3500000 	cmp	r0, #0
   1ab20:	0a00003a 	beq	1ac10 <CNetDeviceLayer::Process()+0x108>
   1ab24:	e2845008 	add	r5, r4, #8
   1ab28:	ea000010 	b	1ab70 <CNetDeviceLayer::Process()+0x68>
   1ab2c:	e3a02000 	mov	r2, #0
   1ab30:	e28d1008 	add	r1, sp, #8
   1ab34:	e1a00005 	mov	r0, r5
   1ab38:	eb0015b7 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1ab3c:	e3500000 	cmp	r0, #0
   1ab40:	e58d0004 	str	r0, [sp, #4]
   1ab44:	0a00000e 	beq	1ab84 <CNetDeviceLayer::Process()+0x7c>
   1ab48:	e5943004 	ldr	r3, [r4, #4]
   1ab4c:	e1a02000 	mov	r2, r0
   1ab50:	e28d1008 	add	r1, sp, #8
   1ab54:	e1a00003 	mov	r0, r3
   1ab58:	e5933000 	ldr	r3, [r3]
   1ab5c:	e5933010 	ldr	r3, [r3, #16]
   1ab60:	e12fff33 	blx	r3
   1ab64:	e3500000 	cmp	r0, #0
   1ab68:	0a000020 	beq	1abf0 <CNetDeviceLayer::Process()+0xe8>
   1ab6c:	e5940004 	ldr	r0, [r4, #4]
   1ab70:	e5903000 	ldr	r3, [r0]
   1ab74:	e593300c 	ldr	r3, [r3, #12]
   1ab78:	e12fff33 	blx	r3
   1ab7c:	e3500000 	cmp	r0, #0
   1ab80:	1affffe9 	bne	1ab2c <CNetDeviceLayer::Process()+0x24>
   1ab84:	e2845014 	add	r5, r4, #20
   1ab88:	ea000003 	b	1ab9c <CNetDeviceLayer::Process()+0x94>
   1ab8c:	e3a03000 	mov	r3, #0
   1ab90:	e28d1008 	add	r1, sp, #8
   1ab94:	e1a00005 	mov	r0, r5
   1ab98:	eb001554 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ab9c:	e5943004 	ldr	r3, [r4, #4]
   1aba0:	e28d2004 	add	r2, sp, #4
   1aba4:	e28d1008 	add	r1, sp, #8
   1aba8:	e1a00003 	mov	r0, r3
   1abac:	e5933000 	ldr	r3, [r3]
   1abb0:	e5933014 	ldr	r3, [r3, #20]
   1abb4:	e12fff33 	blx	r3
   1abb8:	e3500000 	cmp	r0, #0
   1abbc:	0a000008 	beq	1abe4 <CNetDeviceLayer::Process()+0xdc>
   1abc0:	e59d2004 	ldr	r2, [sp, #4]
   1abc4:	e3520000 	cmp	r2, #0
   1abc8:	1affffef 	bne	1ab8c <CNetDeviceLayer::Process()+0x84>
   1abcc:	e30512bc 	movw	r1, #21180	; 0x52bc
   1abd0:	e3401003 	movt	r1, #3
   1abd4:	e30500e0 	movw	r0, #20704	; 0x50e0
   1abd8:	e3400003 	movt	r0, #3
   1abdc:	e3a0206c 	mov	r2, #108	; 0x6c
   1abe0:	eb0028e3 	bl	24f74 <assertion_failed>
   1abe4:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1abe8:	e28dd00c 	add	sp, sp, #12
   1abec:	e8bd8030 	pop	{r4, r5, pc}
   1abf0:	eb002e84 	bl	26608 <CLogger::Get()>
   1abf4:	e3053304 	movw	r3, #21252	; 0x5304
   1abf8:	e3403003 	movt	r3, #3
   1abfc:	e30512b4 	movw	r1, #21172	; 0x52b4
   1ac00:	e3401003 	movt	r1, #3
   1ac04:	e3a02002 	mov	r2, #2
   1ac08:	eb002dbf 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ac0c:	eaffffdc 	b	1ab84 <CNetDeviceLayer::Process()+0x7c>
   1ac10:	e30512bc 	movw	r1, #21180	; 0x52bc
   1ac14:	e3401003 	movt	r1, #3
   1ac18:	e3010174 	movw	r0, #4468	; 0x1174
   1ac1c:	e3400003 	movt	r0, #3
   1ac20:	e3a0205b 	mov	r2, #91	; 0x5b
   1ac24:	eb0028d2 	bl	24f74 <assertion_failed>

0001ac28 <CNetDeviceLayer::GetMACAddress() const>:
   1ac28:	e5900004 	ldr	r0, [r0, #4]
   1ac2c:	e3500000 	cmp	r0, #0
   1ac30:	0a000002 	beq	1ac40 <CNetDeviceLayer::GetMACAddress() const+0x18>
   1ac34:	e5903000 	ldr	r3, [r0]
   1ac38:	e5933008 	ldr	r3, [r3, #8]
   1ac3c:	e12fff13 	bx	r3
   1ac40:	e30512bc 	movw	r1, #21180	; 0x52bc
   1ac44:	e3401003 	movt	r1, #3
   1ac48:	e3010174 	movw	r0, #4468	; 0x1174
   1ac4c:	e3400003 	movt	r0, #3
   1ac50:	e92d4010 	push	{r4, lr}
   1ac54:	e3a02073 	mov	r2, #115	; 0x73
   1ac58:	eb0028c5 	bl	24f74 <assertion_failed>

0001ac5c <CNetDeviceLayer::Send(void const*, unsigned int)>:
   1ac5c:	e2800008 	add	r0, r0, #8
   1ac60:	e3a03000 	mov	r3, #0
   1ac64:	ea001521 	b	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0001ac68 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   1ac68:	e92d4010 	push	{r4, lr}
   1ac6c:	e2800014 	add	r0, r0, #20
   1ac70:	e1a04002 	mov	r4, r2
   1ac74:	e3a02000 	mov	r2, #0
   1ac78:	eb001567 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1ac7c:	e3500000 	cmp	r0, #0
   1ac80:	08bd8010 	popeq	{r4, pc}
   1ac84:	e3540000 	cmp	r4, #0
   1ac88:	0a000002 	beq	1ac98 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   1ac8c:	e5840000 	str	r0, [r4]
   1ac90:	e3a00001 	mov	r0, #1
   1ac94:	e8bd8010 	pop	{r4, pc}
   1ac98:	e30512bc 	movw	r1, #21180	; 0x52bc
   1ac9c:	e3401003 	movt	r1, #3
   1aca0:	e3020a98 	movw	r0, #10904	; 0x2a98
   1aca4:	e3400003 	movt	r0, #3
   1aca8:	e3a02084 	mov	r2, #132	; 0x84
   1acac:	eb0028b0 	bl	24f74 <assertion_failed>

0001acb0 <CPHYTask::~CPHYTask()>:
   1acb0:	e59f201c 	ldr	r2, [pc, #28]	; 1acd4 <CPHYTask::~CPHYTask()+0x24>
   1acb4:	e3a03000 	mov	r3, #0
   1acb8:	e92d4010 	push	{r4, lr}
   1acbc:	e1a04000 	mov	r4, r0
   1acc0:	e5802000 	str	r2, [r0]
   1acc4:	e58030d8 	str	r3, [r0, #216]	; 0xd8
   1acc8:	eb00265e 	bl	24648 <CTask::~CTask()>
   1accc:	e1a00004 	mov	r0, r4
   1acd0:	e8bd8010 	pop	{r4, pc}
   1acd4:	0003531c 	.word	0x0003531c

0001acd8 <CPHYTask::~CPHYTask()>:
   1acd8:	e59f2028 	ldr	r2, [pc, #40]	; 1ad08 <CPHYTask::~CPHYTask()+0x30>
   1acdc:	e3a03000 	mov	r3, #0
   1ace0:	e92d4010 	push	{r4, lr}
   1ace4:	e1a04000 	mov	r4, r0
   1ace8:	e5802000 	str	r2, [r0]
   1acec:	e58030d8 	str	r3, [r0, #216]	; 0xd8
   1acf0:	eb002654 	bl	24648 <CTask::~CTask()>
   1acf4:	e1a00004 	mov	r0, r4
   1acf8:	e3a010dc 	mov	r1, #220	; 0xdc
   1acfc:	eb004489 	bl	2bf28 <operator delete(void*, unsigned int)>
   1ad00:	e1a00004 	mov	r0, r4
   1ad04:	e8bd8010 	pop	{r4, pc}
   1ad08:	0003531c 	.word	0x0003531c

0001ad0c <CPHYTask::Run()>:
   1ad0c:	e92d4070 	push	{r4, r5, r6, lr}
   1ad10:	e1a05000 	mov	r5, r0
   1ad14:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   1ad18:	e3500000 	cmp	r0, #0
   1ad1c:	0a000013 	beq	1ad70 <CPHYTask::Run()+0x64>
   1ad20:	e5903000 	ldr	r3, [r0]
   1ad24:	e3054384 	movw	r4, #21380	; 0x5384
   1ad28:	e3404001 	movt	r4, #1
   1ad2c:	e5933020 	ldr	r3, [r3, #32]
   1ad30:	e1530004 	cmp	r3, r4
   1ad34:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ad38:	e12fff33 	blx	r3
   1ad3c:	e3500000 	cmp	r0, #0
   1ad40:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ad44:	eb00283a 	bl	24e34 <CScheduler::Get()>
   1ad48:	e3a01e7d 	mov	r1, #2000	; 0x7d0
   1ad4c:	eb002812 	bl	24d9c <CScheduler::MsSleep(unsigned int)>
   1ad50:	e59500d8 	ldr	r0, [r5, #216]	; 0xd8
   1ad54:	e3500000 	cmp	r0, #0
   1ad58:	0a000004 	beq	1ad70 <CPHYTask::Run()+0x64>
   1ad5c:	e5903000 	ldr	r3, [r0]
   1ad60:	e5933020 	ldr	r3, [r3, #32]
   1ad64:	e1530004 	cmp	r3, r4
   1ad68:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ad6c:	eafffff1 	b	1ad38 <CPHYTask::Run()+0x2c>
   1ad70:	e3051328 	movw	r1, #21288	; 0x5328
   1ad74:	e3401003 	movt	r1, #3
   1ad78:	e3010174 	movw	r0, #4468	; 0x1174
   1ad7c:	e3400003 	movt	r0, #3
   1ad80:	e3a02026 	mov	r2, #38	; 0x26
   1ad84:	eb00287a 	bl	24f74 <assertion_failed>

0001ad88 <CPHYTask::CPHYTask(CNetDevice*)>:
   1ad88:	e92d4070 	push	{r4, r5, r6, lr}
   1ad8c:	e1a04000 	mov	r4, r0
   1ad90:	e1a05001 	mov	r5, r1
   1ad94:	e3a01902 	mov	r1, #32768	; 0x8000
   1ad98:	eb00267a 	bl	24788 <CTask::CTask(unsigned int)>
   1ad9c:	e59f300c 	ldr	r3, [pc, #12]	; 1adb0 <CPHYTask::CPHYTask(CNetDevice*)+0x28>
   1ada0:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   1ada4:	e1a00004 	mov	r0, r4
   1ada8:	e5843000 	str	r3, [r4]
   1adac:	e8bd8070 	pop	{r4, r5, r6, pc}
   1adb0:	0003531c 	.word	0x0003531c

0001adb4 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   1adb4:	e92d4070 	push	{r4, r5, r6, lr}
   1adb8:	e2524000 	subs	r4, r2, #0
   1adbc:	0a000019 	beq	1ae28 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x74>
   1adc0:	e5943010 	ldr	r3, [r4, #16]
   1adc4:	e1a05001 	mov	r5, r1
   1adc8:	e1530001 	cmp	r3, r1
   1adcc:	9a00001b 	bls	1ae40 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x8c>
   1add0:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1add4:	e3500000 	cmp	r0, #0
   1add8:	1a000006 	bne	1adf8 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   1addc:	e3a0101c 	mov	r1, #28
   1ade0:	e0244195 	mla	r4, r5, r1, r4
   1ade4:	e5d43014 	ldrb	r3, [r4, #20]
   1ade8:	e3530001 	cmp	r3, #1
   1adec:	03a03002 	moveq	r3, #2
   1adf0:	05c43014 	strbeq	r3, [r4, #20]
   1adf4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1adf8:	eb004793 	bl	2cc4c <EnterCritical>
   1adfc:	e3a0101c 	mov	r1, #28
   1ae00:	e0254195 	mla	r5, r5, r1, r4
   1ae04:	e5d53014 	ldrb	r3, [r5, #20]
   1ae08:	e3530001 	cmp	r3, #1
   1ae0c:	e5943244 	ldr	r3, [r4, #580]	; 0x244
   1ae10:	03a02002 	moveq	r2, #2
   1ae14:	05c52014 	strbeq	r2, [r5, #20]
   1ae18:	e3530000 	cmp	r3, #0
   1ae1c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ae20:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ae24:	ea0047b5 	b	2cd00 <LeaveCritical>
   1ae28:	e3051334 	movw	r1, #21300	; 0x5334
   1ae2c:	e3401003 	movt	r1, #3
   1ae30:	e30007a4 	movw	r0, #1956	; 0x7a4
   1ae34:	e3400003 	movt	r0, #3
   1ae38:	e30021a9 	movw	r2, #425	; 0x1a9
   1ae3c:	eb00284c 	bl	24f74 <assertion_failed>
   1ae40:	e3051334 	movw	r1, #21300	; 0x5334
   1ae44:	e3401003 	movt	r1, #3
   1ae48:	e3050344 	movw	r0, #21316	; 0x5344
   1ae4c:	e3400003 	movt	r0, #3
   1ae50:	e3a02f6b 	mov	r2, #428	; 0x1ac
   1ae54:	eb002846 	bl	24f74 <assertion_failed>

0001ae58 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   1ae58:	e92d4010 	push	{r4, lr}
   1ae5c:	e3510000 	cmp	r1, #0
   1ae60:	e59de008 	ldr	lr, [sp, #8]
   1ae64:	e5801000 	str	r1, [r0]
   1ae68:	e3a04001 	mov	r4, #1
   1ae6c:	e3a01000 	mov	r1, #0
   1ae70:	e5802004 	str	r2, [r0, #4]
   1ae74:	e5803008 	str	r3, [r0, #8]
   1ae78:	e5804244 	str	r4, [r0, #580]	; 0x244
   1ae7c:	e580e00c 	str	lr, [r0, #12]
   1ae80:	e5801010 	str	r1, [r0, #16]
   1ae84:	e5801248 	str	r1, [r0, #584]	; 0x248
   1ae88:	0a00000b 	beq	1aebc <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x64>
   1ae8c:	e3520000 	cmp	r2, #0
   1ae90:	0a00000f 	beq	1aed4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x7c>
   1ae94:	e3530000 	cmp	r3, #0
   1ae98:	0a000013 	beq	1aeec <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x94>
   1ae9c:	e35e0000 	cmp	lr, #0
   1aea0:	18bd8010 	popne	{r4, pc}
   1aea4:	e3051334 	movw	r1, #21300	; 0x5334
   1aea8:	e3401003 	movt	r1, #3
   1aeac:	e3050360 	movw	r0, #21344	; 0x5360
   1aeb0:	e3400003 	movt	r0, #3
   1aeb4:	e3a02045 	mov	r2, #69	; 0x45
   1aeb8:	eb00282d 	bl	24f74 <assertion_failed>
   1aebc:	e3051334 	movw	r1, #21300	; 0x5334
   1aec0:	e3401003 	movt	r1, #3
   1aec4:	e3050058 	movw	r0, #20568	; 0x5058
   1aec8:	e3400003 	movt	r0, #3
   1aecc:	e3a02042 	mov	r2, #66	; 0x42
   1aed0:	eb002827 	bl	24f74 <assertion_failed>
   1aed4:	e3051334 	movw	r1, #21300	; 0x5334
   1aed8:	e3401003 	movt	r1, #3
   1aedc:	e3050218 	movw	r0, #21016	; 0x5218
   1aee0:	e3400003 	movt	r0, #3
   1aee4:	e3a02043 	mov	r2, #67	; 0x43
   1aee8:	eb002821 	bl	24f74 <assertion_failed>
   1aeec:	e3051334 	movw	r1, #21300	; 0x5334
   1aef0:	e3401003 	movt	r1, #3
   1aef4:	e3050114 	movw	r0, #20756	; 0x5114
   1aef8:	e3400003 	movt	r0, #3
   1aefc:	e3a02044 	mov	r2, #68	; 0x44
   1af00:	eb00281b 	bl	24f74 <assertion_failed>

0001af04 <CARPHandler::~CARPHandler()>:
   1af04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1af08:	e1a07000 	mov	r7, r0
   1af0c:	e5903010 	ldr	r3, [r0, #16]
   1af10:	e3530000 	cmp	r3, #0
   1af14:	0a00000f 	beq	1af58 <CARPHandler::~CARPHandler()+0x54>
   1af18:	e3a06000 	mov	r6, #0
   1af1c:	e1a04000 	mov	r4, r0
   1af20:	e1a08006 	mov	r8, r6
   1af24:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
   1af28:	e2866001 	add	r6, r6, #1
   1af2c:	e2550000 	subs	r0, r5, #0
   1af30:	0a000003 	beq	1af44 <CARPHandler::~CARPHandler()+0x40>
   1af34:	eb001468 	bl	200dc <CNetQueue::~CNetQueue()>
   1af38:	e1a00005 	mov	r0, r5
   1af3c:	e3a0100c 	mov	r1, #12
   1af40:	eb0043f8 	bl	2bf28 <operator delete(void*, unsigned int)>
   1af44:	e584802c 	str	r8, [r4, #44]	; 0x2c
   1af48:	e284401c 	add	r4, r4, #28
   1af4c:	e5973010 	ldr	r3, [r7, #16]
   1af50:	e1530006 	cmp	r3, r6
   1af54:	8afffff2 	bhi	1af24 <CARPHandler::~CARPHandler()+0x20>
   1af58:	e1a00007 	mov	r0, r7
   1af5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001af60 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   1af60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1af64:	e1a06000 	mov	r6, r0
   1af68:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1af6c:	e1a07001 	mov	r7, r1
   1af70:	e1a08002 	mov	r8, r2
   1af74:	e3500000 	cmp	r0, #0
   1af78:	1a000028 	bne	1b020 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc0>
   1af7c:	e596c010 	ldr	ip, [r6, #16]
   1af80:	e35c0000 	cmp	ip, #0
   1af84:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af88:	e3a05000 	mov	r5, #0
   1af8c:	e3a0a01c 	mov	sl, #28
   1af90:	e1a04005 	mov	r4, r5
   1af94:	e2869015 	add	r9, r6, #21
   1af98:	e023649a 	mla	r3, sl, r4, r6
   1af9c:	e0891005 	add	r1, r9, r5
   1afa0:	e1a00007 	mov	r0, r7
   1afa4:	e5d32014 	ldrb	r2, [r3, #20]
   1afa8:	e3520001 	cmp	r2, #1
   1afac:	0a000002 	beq	1afbc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x5c>
   1afb0:	e5d33014 	ldrb	r3, [r3, #20]
   1afb4:	e3530002 	cmp	r3, #2
   1afb8:	1a000003 	bne	1afcc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x6c>
   1afbc:	eb001304 	bl	1fbd4 <CIPAddress::operator==(unsigned char const*) const>
   1afc0:	e3500000 	cmp	r0, #0
   1afc4:	1a000009 	bne	1aff0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x90>
   1afc8:	e596c010 	ldr	ip, [r6, #16]
   1afcc:	e2844001 	add	r4, r4, #1
   1afd0:	e285501c 	add	r5, r5, #28
   1afd4:	e15c0004 	cmp	ip, r4
   1afd8:	8affffee 	bhi	1af98 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x38>
   1afdc:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1afe0:	e3530000 	cmp	r3, #0
   1afe4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1afe8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1afec:	ea004743 	b	2cd00 <LeaveCritical>
   1aff0:	eb004100 	bl	2b3f8 <CTimer::Get()>
   1aff4:	e3a0301c 	mov	r3, #28
   1aff8:	e0246493 	mla	r4, r3, r4, r6
   1affc:	e5941020 	ldr	r1, [r4, #32]
   1b000:	eb003f7b 	bl	2adf4 <CTimer::CancelKernelTimer(unsigned int)>
   1b004:	e2851019 	add	r1, r5, #25
   1b008:	e0861001 	add	r1, r6, r1
   1b00c:	e1a00008 	mov	r0, r8
   1b010:	eb00433e 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   1b014:	e3a03003 	mov	r3, #3
   1b018:	e5c43014 	strb	r3, [r4, #20]
   1b01c:	eaffffee 	b	1afdc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x7c>
   1b020:	eb004709 	bl	2cc4c <EnterCritical>
   1b024:	e596c010 	ldr	ip, [r6, #16]
   1b028:	e35c0000 	cmp	ip, #0
   1b02c:	1affffd5 	bne	1af88 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   1b030:	eaffffe9 	b	1afdc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x7c>

0001b034 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   1b034:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b038:	e1a06000 	mov	r6, r0
   1b03c:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1b040:	e1a07001 	mov	r7, r1
   1b044:	e1a09002 	mov	r9, r2
   1b048:	e3500000 	cmp	r0, #0
   1b04c:	1a000033 	bne	1b120 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xec>
   1b050:	e5962010 	ldr	r2, [r6, #16]
   1b054:	e3520000 	cmp	r2, #0
   1b058:	e1a05002 	mov	r5, r2
   1b05c:	0a00003d 	beq	1b158 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x124>
   1b060:	e3a04000 	mov	r4, #0
   1b064:	e3a05014 	mov	r5, #20
   1b068:	e3a0a01c 	mov	sl, #28
   1b06c:	e2868015 	add	r8, r6, #21
   1b070:	ea000004 	b	1b088 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x54>
   1b074:	e3550014 	cmp	r5, #20
   1b078:	01a05004 	moveq	r5, r4
   1b07c:	e2844001 	add	r4, r4, #1
   1b080:	e1520004 	cmp	r2, r4
   1b084:	9a00000d 	bls	1b0c0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   1b088:	e001049a 	mul	r1, sl, r4
   1b08c:	e0863001 	add	r3, r6, r1
   1b090:	e5d33014 	ldrb	r3, [r3, #20]
   1b094:	e3530000 	cmp	r3, #0
   1b098:	0afffff5 	beq	1b074 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x40>
   1b09c:	e0881001 	add	r1, r8, r1
   1b0a0:	e1a00007 	mov	r0, r7
   1b0a4:	eb0012ca 	bl	1fbd4 <CIPAddress::operator==(unsigned char const*) const>
   1b0a8:	e3500000 	cmp	r0, #0
   1b0ac:	1a000016 	bne	1b10c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xd8>
   1b0b0:	e5962010 	ldr	r2, [r6, #16]
   1b0b4:	e2844001 	add	r4, r4, #1
   1b0b8:	e1520004 	cmp	r2, r4
   1b0bc:	8afffff1 	bhi	1b088 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x54>
   1b0c0:	e3550014 	cmp	r5, #20
   1b0c4:	0a00001f 	beq	1b148 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x114>
   1b0c8:	e3a0101c 	mov	r1, #28
   1b0cc:	e0010591 	mul	r1, r1, r5
   1b0d0:	e2818019 	add	r8, r1, #25
   1b0d4:	e281a015 	add	sl, r1, #21
   1b0d8:	e086100a 	add	r1, r6, sl
   1b0dc:	e1a00007 	mov	r0, r7
   1b0e0:	eb00133e 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   1b0e4:	e0861008 	add	r1, r6, r8
   1b0e8:	e1a00009 	mov	r0, r9
   1b0ec:	eb004307 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   1b0f0:	eb0040c0 	bl	2b3f8 <CTimer::Get()>
   1b0f4:	eb003df4 	bl	2a8cc <CTimer::GetTicks() const>
   1b0f8:	e3a0201c 	mov	r2, #28
   1b0fc:	e3a03004 	mov	r3, #4
   1b100:	e0256592 	mla	r5, r2, r5, r6
   1b104:	e5850028 	str	r0, [r5, #40]	; 0x28
   1b108:	e5c53014 	strb	r3, [r5, #20]
   1b10c:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1b110:	e3530000 	cmp	r3, #0
   1b114:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b118:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b11c:	ea0046f7 	b	2cd00 <LeaveCritical>
   1b120:	eb0046c9 	bl	2cc4c <EnterCritical>
   1b124:	e5962010 	ldr	r2, [r6, #16]
   1b128:	e3520000 	cmp	r2, #0
   1b12c:	e1a05002 	mov	r5, r2
   1b130:	1affffca 	bne	1b060 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x2c>
   1b134:	e3a0801c 	mov	r8, #28
   1b138:	e0080298 	mul	r8, r8, r2
   1b13c:	e288a015 	add	sl, r8, #21
   1b140:	e2888019 	add	r8, r8, #25
   1b144:	ea000005 	b	1b160 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x12c>
   1b148:	e3520014 	cmp	r2, #20
   1b14c:	0affffee 	beq	1b10c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xd8>
   1b150:	e1a05002 	mov	r5, r2
   1b154:	eafffff6 	b	1b134 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x100>
   1b158:	e3a08019 	mov	r8, #25
   1b15c:	e3a0a015 	mov	sl, #21
   1b160:	e3a0401c 	mov	r4, #28
   1b164:	e3a03000 	mov	r3, #0
   1b168:	e3a0000c 	mov	r0, #12
   1b16c:	e0246294 	mla	r4, r4, r2, r6
   1b170:	e5c43014 	strb	r3, [r4, #20]
   1b174:	eb00435d 	bl	2bef0 <operator new(unsigned int)>
   1b178:	e1a0b000 	mov	fp, r0
   1b17c:	eb00139d 	bl	1fff8 <CNetQueue::CNetQueue()>
   1b180:	e584b02c 	str	fp, [r4, #44]	; 0x2c
   1b184:	e5963010 	ldr	r3, [r6, #16]
   1b188:	e2833001 	add	r3, r3, #1
   1b18c:	e5863010 	str	r3, [r6, #16]
   1b190:	eaffffd0 	b	1b0d8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xa4>

0001b194 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   1b194:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1b198:	e1a04000 	mov	r4, r0
   1b19c:	e5900000 	ldr	r0, [r0]
   1b1a0:	e24dd034 	sub	sp, sp, #52	; 0x34
   1b1a4:	e3500000 	cmp	r0, #0
   1b1a8:	0a00002d 	beq	1b264 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xd0>
   1b1ac:	e1a09001 	mov	r9, r1
   1b1b0:	e1a07002 	mov	r7, r2
   1b1b4:	e1a05003 	mov	r5, r3
   1b1b8:	eb0011e1 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1b1bc:	e2508000 	subs	r8, r0, #0
   1b1c0:	0a00002d 	beq	1b27c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe8>
   1b1c4:	e5940004 	ldr	r0, [r4, #4]
   1b1c8:	e3500000 	cmp	r0, #0
   1b1cc:	0a000030 	beq	1b294 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x100>
   1b1d0:	ebfffe94 	bl	1ac28 <CNetDeviceLayer::GetMACAddress() const>
   1b1d4:	e2506000 	subs	r6, r0, #0
   1b1d8:	0a000033 	beq	1b2ac <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x118>
   1b1dc:	e1a00005 	mov	r0, r5
   1b1e0:	e28d1004 	add	r1, sp, #4
   1b1e4:	eb0042c9 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   1b1e8:	e28d100a 	add	r1, sp, #10
   1b1ec:	e1a00006 	mov	r0, r6
   1b1f0:	eb0042c6 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   1b1f4:	e3590000 	cmp	r9, #0
   1b1f8:	e1a00006 	mov	r0, r6
   1b1fc:	e28d101a 	add	r1, sp, #26
   1b200:	13a02c01 	movne	r2, #256	; 0x100
   1b204:	03a02c02 	moveq	r2, #512	; 0x200
   1b208:	e3003608 	movw	r3, #1544	; 0x608
   1b20c:	e3403100 	movt	r3, #256	; 0x100
   1b210:	e1cd21b8 	strh	r2, [sp, #24]
   1b214:	e58d3010 	str	r3, [sp, #16]
   1b218:	e3a03008 	mov	r3, #8
   1b21c:	e3403406 	movt	r3, #1030	; 0x406
   1b220:	e58d3014 	str	r3, [sp, #20]
   1b224:	eb0042b9 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   1b228:	e1a00008 	mov	r0, r8
   1b22c:	e28d1020 	add	r1, sp, #32
   1b230:	eb0012ea 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   1b234:	e1a00005 	mov	r0, r5
   1b238:	e28d1024 	add	r1, sp, #36	; 0x24
   1b23c:	eb0042b3 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   1b240:	e1a00007 	mov	r0, r7
   1b244:	e28d102a 	add	r1, sp, #42	; 0x2a
   1b248:	eb0012e4 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   1b24c:	e28d1004 	add	r1, sp, #4
   1b250:	e5940004 	ldr	r0, [r4, #4]
   1b254:	e3a0202a 	mov	r2, #42	; 0x2a
   1b258:	ebfffe7f 	bl	1ac5c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b25c:	e28dd034 	add	sp, sp, #52	; 0x34
   1b260:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b264:	e3051334 	movw	r1, #21300	; 0x5334
   1b268:	e3401003 	movt	r1, #3
   1b26c:	e3050058 	movw	r0, #20568	; 0x5058
   1b270:	e3400003 	movt	r0, #3
   1b274:	e300218a 	movw	r2, #394	; 0x18a
   1b278:	eb00273d 	bl	24f74 <assertion_failed>
   1b27c:	e3051334 	movw	r1, #21300	; 0x5334
   1b280:	e3401003 	movt	r1, #3
   1b284:	e305013c 	movw	r0, #20796	; 0x513c
   1b288:	e3400003 	movt	r0, #3
   1b28c:	e3a02f63 	mov	r2, #396	; 0x18c
   1b290:	eb002737 	bl	24f74 <assertion_failed>
   1b294:	e3051334 	movw	r1, #21300	; 0x5334
   1b298:	e3401003 	movt	r1, #3
   1b29c:	e3050218 	movw	r0, #21016	; 0x5218
   1b2a0:	e3400003 	movt	r0, #3
   1b2a4:	e300218e 	movw	r2, #398	; 0x18e
   1b2a8:	eb002731 	bl	24f74 <assertion_failed>
   1b2ac:	e3051334 	movw	r1, #21300	; 0x5334
   1b2b0:	e3401003 	movt	r1, #3
   1b2b4:	e3050244 	movw	r0, #21060	; 0x5244
   1b2b8:	e3400003 	movt	r0, #3
   1b2bc:	e3a02e19 	mov	r2, #400	; 0x190
   1b2c0:	eb00272b 	bl	24f74 <assertion_failed>

0001b2c4 <CARPHandler::Process()>:
   1b2c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1b2c8:	e1a05000 	mov	r5, r0
   1b2cc:	e5900000 	ldr	r0, [r0]
   1b2d0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1b2d4:	e24dd00c 	sub	sp, sp, #12
   1b2d8:	e3500000 	cmp	r0, #0
   1b2dc:	0a0000c4 	beq	1b5f4 <CARPHandler::Process()+0x330>
   1b2e0:	eb001197 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1b2e4:	e2504000 	subs	r4, r0, #0
   1b2e8:	0a0000cd 	beq	1b624 <CARPHandler::Process()+0x360>
   1b2ec:	e595000c 	ldr	r0, [r5, #12]
   1b2f0:	e3500000 	cmp	r0, #0
   1b2f4:	0a0000d0 	beq	1b63c <CARPHandler::Process()+0x378>
   1b2f8:	e28d3018 	add	r3, sp, #24
   1b2fc:	e28d6030 	add	r6, sp, #48	; 0x30
   1b300:	e2837008 	add	r7, r3, #8
   1b304:	e3a02000 	mov	r2, #0
   1b308:	e28d1018 	add	r1, sp, #24
   1b30c:	eb0013c2 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1b310:	e3500000 	cmp	r0, #0
   1b314:	0a00000f 	beq	1b358 <CARPHandler::Process()+0x94>
   1b318:	e350001b 	cmp	r0, #27
   1b31c:	9a00000b 	bls	1b350 <CARPHandler::Process()+0x8c>
   1b320:	e1dd31b8 	ldrh	r3, [sp, #24]
   1b324:	e3530c01 	cmp	r3, #256	; 0x100
   1b328:	1a000008 	bne	1b350 <CARPHandler::Process()+0x8c>
   1b32c:	e1dd31ba 	ldrh	r3, [sp, #26]
   1b330:	e3530008 	cmp	r3, #8
   1b334:	1a000005 	bne	1b350 <CARPHandler::Process()+0x8c>
   1b338:	e5dd301c 	ldrb	r3, [sp, #28]
   1b33c:	e3530006 	cmp	r3, #6
   1b340:	1a000002 	bne	1b350 <CARPHandler::Process()+0x8c>
   1b344:	e5dd301d 	ldrb	r3, [sp, #29]
   1b348:	e3530004 	cmp	r3, #4
   1b34c:	0a000085 	beq	1b568 <CARPHandler::Process()+0x2a4>
   1b350:	e595000c 	ldr	r0, [r5, #12]
   1b354:	eaffffea 	b	1b304 <CARPHandler::Process()+0x40>
   1b358:	e5953008 	ldr	r3, [r5, #8]
   1b35c:	e3530000 	cmp	r3, #0
   1b360:	0a0000bb 	beq	1b654 <CARPHandler::Process()+0x390>
   1b364:	e5953004 	ldr	r3, [r5, #4]
   1b368:	e3530000 	cmp	r3, #0
   1b36c:	0a0000be 	beq	1b66c <CARPHandler::Process()+0x3a8>
   1b370:	e5952010 	ldr	r2, [r5, #16]
   1b374:	e3520000 	cmp	r2, #0
   1b378:	0a000025 	beq	1b414 <CARPHandler::Process()+0x150>
   1b37c:	e30a8db4 	movw	r8, #44468	; 0xadb4
   1b380:	e3408001 	movt	r8, #1
   1b384:	e1a06000 	mov	r6, r0
   1b388:	e2854019 	add	r4, r5, #25
   1b38c:	e3a0701c 	mov	r7, #28
   1b390:	e0295697 	mla	r9, r7, r6, r5
   1b394:	e5d93014 	ldrb	r3, [r9, #20]
   1b398:	e6ef3073 	uxtb	r3, r3
   1b39c:	e3530002 	cmp	r3, #2
   1b3a0:	0a00003f 	beq	1b4a4 <CARPHandler::Process()+0x1e0>
   1b3a4:	e3530003 	cmp	r3, #3
   1b3a8:	1a000015 	bne	1b404 <CARPHandler::Process()+0x140>
   1b3ac:	e5940013 	ldr	r0, [r4, #19]
   1b3b0:	e3500000 	cmp	r0, #0
   1b3b4:	1a000009 	bne	1b3e0 <CARPHandler::Process()+0x11c>
   1b3b8:	ea000087 	b	1b5dc <CARPHandler::Process()+0x318>
   1b3bc:	e3a02006 	mov	r2, #6
   1b3c0:	e1a01004 	mov	r1, r4
   1b3c4:	e28d0018 	add	r0, sp, #24
   1b3c8:	eb0041be 	bl	2bac8 <memcpy>
   1b3cc:	e5950004 	ldr	r0, [r5, #4]
   1b3d0:	e1a02009 	mov	r2, r9
   1b3d4:	e28d1018 	add	r1, sp, #24
   1b3d8:	ebfffe1f 	bl	1ac5c <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b3dc:	e5940013 	ldr	r0, [r4, #19]
   1b3e0:	e3a02000 	mov	r2, #0
   1b3e4:	e28d1018 	add	r1, sp, #24
   1b3e8:	eb00138b 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1b3ec:	e2509000 	subs	r9, r0, #0
   1b3f0:	1afffff1 	bne	1b3bc <CARPHandler::Process()+0xf8>
   1b3f4:	e0235697 	mla	r3, r7, r6, r5
   1b3f8:	e3a02004 	mov	r2, #4
   1b3fc:	e5c32014 	strb	r2, [r3, #20]
   1b400:	e5952010 	ldr	r2, [r5, #16]
   1b404:	e2866001 	add	r6, r6, #1
   1b408:	e284401c 	add	r4, r4, #28
   1b40c:	e1520006 	cmp	r2, r6
   1b410:	8affffde 	bhi	1b390 <CARPHandler::Process()+0xcc>
   1b414:	eb003ff7 	bl	2b3f8 <CTimer::Get()>
   1b418:	eb003d2b 	bl	2a8cc <CTimer::GetTicks() const>
   1b41c:	e5953248 	ldr	r3, [r5, #584]	; 0x248
   1b420:	e301276f 	movw	r2, #5999	; 0x176f
   1b424:	e1a04000 	mov	r4, r0
   1b428:	e0403003 	sub	r3, r0, r3
   1b42c:	e1530002 	cmp	r3, r2
   1b430:	9a000018 	bls	1b498 <CARPHandler::Process()+0x1d4>
   1b434:	e5950244 	ldr	r0, [r5, #580]	; 0x244
   1b438:	e5854248 	str	r4, [r5, #584]	; 0x248
   1b43c:	e3500000 	cmp	r0, #0
   1b440:	1a00008f 	bne	1b684 <CARPHandler::Process()+0x3c0>
   1b444:	e595c010 	ldr	ip, [r5, #16]
   1b448:	e35c0000 	cmp	ip, #0
   1b44c:	0a000011 	beq	1b498 <CARPHandler::Process()+0x1d4>
   1b450:	e3a03000 	mov	r3, #0
   1b454:	e3a0e01c 	mov	lr, #28
   1b458:	e1a07003 	mov	r7, r3
   1b45c:	e30e6a60 	movw	r6, #60000	; 0xea60
   1b460:	e022539e 	mla	r2, lr, r3, r5
   1b464:	e5d21014 	ldrb	r1, [r2, #20]
   1b468:	e3510004 	cmp	r1, #4
   1b46c:	1a000003 	bne	1b480 <CARPHandler::Process()+0x1bc>
   1b470:	e5921028 	ldr	r1, [r2, #40]	; 0x28
   1b474:	e0861001 	add	r1, r6, r1
   1b478:	e1510004 	cmp	r1, r4
   1b47c:	35c27014 	strbcc	r7, [r2, #20]
   1b480:	e2833001 	add	r3, r3, #1
   1b484:	e153000c 	cmp	r3, ip
   1b488:	3afffff4 	bcc	1b460 <CARPHandler::Process()+0x19c>
   1b48c:	e3500000 	cmp	r0, #0
   1b490:	0a000000 	beq	1b498 <CARPHandler::Process()+0x1d4>
   1b494:	eb004619 	bl	2cd00 <LeaveCritical>
   1b498:	e28dde65 	add	sp, sp, #1616	; 0x650
   1b49c:	e28dd00c 	add	sp, sp, #12
   1b4a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b4a4:	e594300b 	ldr	r3, [r4, #11]
   1b4a8:	e3530002 	cmp	r3, #2
   1b4ac:	e2833001 	add	r3, r3, #1
   1b4b0:	e584300b 	str	r3, [r4, #11]
   1b4b4:	8a00001a 	bhi	1b524 <CARPHandler::Process()+0x260>
   1b4b8:	e2441004 	sub	r1, r4, #4
   1b4bc:	e28d0010 	add	r0, sp, #16
   1b4c0:	eb001215 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   1b4c4:	e28d0008 	add	r0, sp, #8
   1b4c8:	eb0041c3 	bl	2bbdc <CMACAddress::CMACAddress()>
   1b4cc:	e28d0008 	add	r0, sp, #8
   1b4d0:	eb0041f9 	bl	2bcbc <CMACAddress::SetBroadcast()>
   1b4d4:	e28d2010 	add	r2, sp, #16
   1b4d8:	e3a01001 	mov	r1, #1
   1b4dc:	e28d3008 	add	r3, sp, #8
   1b4e0:	e1a00005 	mov	r0, r5
   1b4e4:	ebffff2a 	bl	1b194 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1b4e8:	e3a03001 	mov	r3, #1
   1b4ec:	e5c93014 	strb	r3, [r9, #20]
   1b4f0:	eb003fc0 	bl	2b3f8 <CTimer::Get()>
   1b4f4:	e1a02008 	mov	r2, r8
   1b4f8:	e1a03006 	mov	r3, r6
   1b4fc:	e3a01050 	mov	r1, #80	; 0x50
   1b500:	e58d5000 	str	r5, [sp]
   1b504:	eb003de8 	bl	2acac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1b508:	e5840007 	str	r0, [r4, #7]
   1b50c:	e28d0008 	add	r0, sp, #8
   1b510:	eb0041b4 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   1b514:	e28d0010 	add	r0, sp, #16
   1b518:	eb00117b 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1b51c:	e5952010 	ldr	r2, [r5, #16]
   1b520:	eaffffb7 	b	1b404 <CARPHandler::Process()+0x140>
   1b524:	e5940013 	ldr	r0, [r4, #19]
   1b528:	e3500000 	cmp	r0, #0
   1b52c:	1a000004 	bne	1b544 <CARPHandler::Process()+0x280>
   1b530:	ea000035 	b	1b60c <CARPHandler::Process()+0x348>
   1b534:	e5950008 	ldr	r0, [r5, #8]
   1b538:	e28d1018 	add	r1, sp, #24
   1b53c:	ebfffce8 	bl	1a8e4 <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   1b540:	e5940013 	ldr	r0, [r4, #19]
   1b544:	e3a02000 	mov	r2, #0
   1b548:	e28d1018 	add	r1, sp, #24
   1b54c:	eb001332 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1b550:	e2502000 	subs	r2, r0, #0
   1b554:	1afffff6 	bne	1b534 <CARPHandler::Process()+0x270>
   1b558:	e0235697 	mla	r3, r7, r6, r5
   1b55c:	e5c32014 	strb	r2, [r3, #20]
   1b560:	e5952010 	ldr	r2, [r5, #16]
   1b564:	eaffffa6 	b	1b404 <CARPHandler::Process()+0x140>
   1b568:	e1a00004 	mov	r0, r4
   1b56c:	eb001233 	bl	1fe40 <CIPAddress::IsNull() const>
   1b570:	e3500000 	cmp	r0, #0
   1b574:	1affff75 	bne	1b350 <CARPHandler::Process()+0x8c>
   1b578:	e1a01006 	mov	r1, r6
   1b57c:	e1a00004 	mov	r0, r4
   1b580:	eb0011ab 	bl	1fc34 <CIPAddress::operator!=(unsigned char const*) const>
   1b584:	e2508000 	subs	r8, r0, #0
   1b588:	1affff70 	bne	1b350 <CARPHandler::Process()+0x8c>
   1b58c:	e1a01007 	mov	r1, r7
   1b590:	e28d0008 	add	r0, sp, #8
   1b594:	eb0041c3 	bl	2bca8 <CMACAddress::CMACAddress(unsigned char const*)>
   1b598:	e28d0010 	add	r0, sp, #16
   1b59c:	e28d1026 	add	r1, sp, #38	; 0x26
   1b5a0:	eb0011dd 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   1b5a4:	e1dd31be 	ldrh	r3, [sp, #30]
   1b5a8:	e3530c01 	cmp	r3, #256	; 0x100
   1b5ac:	0a00003a 	beq	1b69c <CARPHandler::Process()+0x3d8>
   1b5b0:	e3530c02 	cmp	r3, #512	; 0x200
   1b5b4:	1a000003 	bne	1b5c8 <CARPHandler::Process()+0x304>
   1b5b8:	e28d2008 	add	r2, sp, #8
   1b5bc:	e28d1010 	add	r1, sp, #16
   1b5c0:	e1a00005 	mov	r0, r5
   1b5c4:	ebfffe65 	bl	1af60 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   1b5c8:	e28d0010 	add	r0, sp, #16
   1b5cc:	eb00114e 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1b5d0:	e28d0008 	add	r0, sp, #8
   1b5d4:	eb004183 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   1b5d8:	eaffff5c 	b	1b350 <CARPHandler::Process()+0x8c>
   1b5dc:	e3051334 	movw	r1, #21300	; 0x5334
   1b5e0:	e3401003 	movt	r1, #3
   1b5e4:	e3050370 	movw	r0, #21360	; 0x5370
   1b5e8:	e3400003 	movt	r0, #3
   1b5ec:	e3a020aa 	mov	r2, #170	; 0xaa
   1b5f0:	eb00265f 	bl	24f74 <assertion_failed>
   1b5f4:	e3051334 	movw	r1, #21300	; 0x5334
   1b5f8:	e3401003 	movt	r1, #3
   1b5fc:	e3050058 	movw	r0, #20568	; 0x5058
   1b600:	e3400003 	movt	r0, #3
   1b604:	e3a02057 	mov	r2, #87	; 0x57
   1b608:	eb002659 	bl	24f74 <assertion_failed>
   1b60c:	e3051334 	movw	r1, #21300	; 0x5334
   1b610:	e3401003 	movt	r1, #3
   1b614:	e3050370 	movw	r0, #21360	; 0x5370
   1b618:	e3400003 	movt	r0, #3
   1b61c:	e3a0209f 	mov	r2, #159	; 0x9f
   1b620:	eb002653 	bl	24f74 <assertion_failed>
   1b624:	e3051334 	movw	r1, #21300	; 0x5334
   1b628:	e3401003 	movt	r1, #3
   1b62c:	e305013c 	movw	r0, #20796	; 0x513c
   1b630:	e3400003 	movt	r0, #3
   1b634:	e3a02059 	mov	r2, #89	; 0x59
   1b638:	eb00264d 	bl	24f74 <assertion_failed>
   1b63c:	e3051334 	movw	r1, #21300	; 0x5334
   1b640:	e3401003 	movt	r1, #3
   1b644:	e3050360 	movw	r0, #21344	; 0x5360
   1b648:	e3400003 	movt	r0, #3
   1b64c:	e3a0205f 	mov	r2, #95	; 0x5f
   1b650:	eb002647 	bl	24f74 <assertion_failed>
   1b654:	e3051334 	movw	r1, #21300	; 0x5334
   1b658:	e3401003 	movt	r1, #3
   1b65c:	e3050114 	movw	r0, #20756	; 0x5114
   1b660:	e3400003 	movt	r0, #3
   1b664:	e3a02088 	mov	r2, #136	; 0x88
   1b668:	eb002641 	bl	24f74 <assertion_failed>
   1b66c:	e3051334 	movw	r1, #21300	; 0x5334
   1b670:	e3401003 	movt	r1, #3
   1b674:	e3050218 	movw	r0, #21016	; 0x5218
   1b678:	e3400003 	movt	r0, #3
   1b67c:	e3a02089 	mov	r2, #137	; 0x89
   1b680:	eb00263b 	bl	24f74 <assertion_failed>
   1b684:	eb004570 	bl	2cc4c <EnterCritical>
   1b688:	e595c010 	ldr	ip, [r5, #16]
   1b68c:	e5950244 	ldr	r0, [r5, #580]	; 0x244
   1b690:	e35c0000 	cmp	ip, #0
   1b694:	1affff6d 	bne	1b450 <CARPHandler::Process()+0x18c>
   1b698:	eaffff7b 	b	1b48c <CARPHandler::Process()+0x1c8>
   1b69c:	e1a01008 	mov	r1, r8
   1b6a0:	e28d2010 	add	r2, sp, #16
   1b6a4:	e1a00005 	mov	r0, r5
   1b6a8:	e28d3008 	add	r3, sp, #8
   1b6ac:	ebfffeb8 	bl	1b194 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1b6b0:	e28d2008 	add	r2, sp, #8
   1b6b4:	e28d1010 	add	r1, sp, #16
   1b6b8:	e1a00005 	mov	r0, r5
   1b6bc:	ebfffe5c 	bl	1b034 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   1b6c0:	eaffffc0 	b	1b5c8 <CARPHandler::Process()+0x304>

0001b6c4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   1b6c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6c8:	e1a04000 	mov	r4, r0
   1b6cc:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1b6d0:	e24dd024 	sub	sp, sp, #36	; 0x24
   1b6d4:	e1a08001 	mov	r8, r1
   1b6d8:	e3500000 	cmp	r0, #0
   1b6dc:	e58d2014 	str	r2, [sp, #20]
   1b6e0:	e58d3010 	str	r3, [sp, #16]
   1b6e4:	1a000080 	bne	1b8ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x228>
   1b6e8:	e594c010 	ldr	ip, [r4, #16]
   1b6ec:	e35c0000 	cmp	ip, #0
   1b6f0:	e1a0500c 	mov	r5, ip
   1b6f4:	0a0000af 	beq	1b9b8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2f4>
   1b6f8:	e3e0a014 	mvn	sl, #20
   1b6fc:	e3e06000 	mvn	r6, #0
   1b700:	e04a3004 	sub	r3, sl, r4
   1b704:	e1a09006 	mov	r9, r6
   1b708:	e284b015 	add	fp, r4, #21
   1b70c:	e3a0a000 	mov	sl, #0
   1b710:	e3a05014 	mov	r5, #20
   1b714:	e3a0701c 	mov	r7, #28
   1b718:	e58d300c 	str	r3, [sp, #12]
   1b71c:	e0234a97 	mla	r3, r7, sl, r4
   1b720:	e5d33014 	ldrb	r3, [r3, #20]
   1b724:	e3530004 	cmp	r3, #4
   1b728:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1b72c:	ea0000af 	b	1b9f0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x32c>
   1b730:	0001b8b0 	.word	0x0001b8b0
   1b734:	0001b84c 	.word	0x0001b84c
   1b738:	0001b84c 	.word	0x0001b84c
   1b73c:	0001b84c 	.word	0x0001b84c
   1b740:	0001b744 	.word	0x0001b744
   1b744:	e59b3013 	ldr	r3, [fp, #19]
   1b748:	e1a0100b 	mov	r1, fp
   1b74c:	e1a00008 	mov	r0, r8
   1b750:	e1530006 	cmp	r3, r6
   1b754:	31a06003 	movcc	r6, r3
   1b758:	31a0900a 	movcc	r9, sl
   1b75c:	eb00111c 	bl	1fbd4 <CIPAddress::operator==(unsigned char const*) const>
   1b760:	e59d300c 	ldr	r3, [sp, #12]
   1b764:	e3500000 	cmp	r0, #0
   1b768:	e083100b 	add	r1, r3, fp
   1b76c:	1a000060 	bne	1b8f4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x230>
   1b770:	e594c010 	ldr	ip, [r4, #16]
   1b774:	e28aa001 	add	sl, sl, #1
   1b778:	e28bb01c 	add	fp, fp, #28
   1b77c:	e15c000a 	cmp	ip, sl
   1b780:	8affffe5 	bhi	1b71c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x58>
   1b784:	e3550014 	cmp	r5, #20
   1b788:	0a00004b 	beq	1b8bc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1f8>
   1b78c:	e3a0701c 	mov	r7, #28
   1b790:	e0070597 	mul	r7, r7, r5
   1b794:	e2877015 	add	r7, r7, #21
   1b798:	e3a0601c 	mov	r6, #28
   1b79c:	e0841007 	add	r1, r4, r7
   1b7a0:	e1a00008 	mov	r0, r8
   1b7a4:	e3a07001 	mov	r7, #1
   1b7a8:	e0264596 	mla	r6, r6, r5, r4
   1b7ac:	e5c67014 	strb	r7, [r6, #20]
   1b7b0:	eb00118a 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   1b7b4:	e596002c 	ldr	r0, [r6, #44]	; 0x2c
   1b7b8:	e3500000 	cmp	r0, #0
   1b7bc:	0a000071 	beq	1b988 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2c4>
   1b7c0:	e59d1010 	ldr	r1, [sp, #16]
   1b7c4:	e3a03000 	mov	r3, #0
   1b7c8:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1b7cc:	eb001247 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b7d0:	eb003f08 	bl	2b3f8 <CTimer::Get()>
   1b7d4:	eb003c3c 	bl	2a8cc <CTimer::GetTicks() const>
   1b7d8:	e5867024 	str	r7, [r6, #36]	; 0x24
   1b7dc:	e5860028 	str	r0, [r6, #40]	; 0x28
   1b7e0:	eb003f04 	bl	2b3f8 <CTimer::Get()>
   1b7e4:	e1a03005 	mov	r3, r5
   1b7e8:	e58d4000 	str	r4, [sp]
   1b7ec:	e30a2db4 	movw	r2, #44468	; 0xadb4
   1b7f0:	e3402001 	movt	r2, #1
   1b7f4:	e3a01050 	mov	r1, #80	; 0x50
   1b7f8:	eb003d2b 	bl	2acac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1b7fc:	e5860020 	str	r0, [r6, #32]
   1b800:	e5943244 	ldr	r3, [r4, #580]	; 0x244
   1b804:	e3530000 	cmp	r3, #0
   1b808:	1a00004b 	bne	1b93c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x278>
   1b80c:	e3a03000 	mov	r3, #0
   1b810:	e28d0018 	add	r0, sp, #24
   1b814:	e1a05003 	mov	r5, r3
   1b818:	eb0040ef 	bl	2bbdc <CMACAddress::CMACAddress()>
   1b81c:	e28d0018 	add	r0, sp, #24
   1b820:	eb004125 	bl	2bcbc <CMACAddress::SetBroadcast()>
   1b824:	e1a00004 	mov	r0, r4
   1b828:	e28d3018 	add	r3, sp, #24
   1b82c:	e1a02008 	mov	r2, r8
   1b830:	e3a01001 	mov	r1, #1
   1b834:	ebfffe56 	bl	1b194 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1b838:	e28d0018 	add	r0, sp, #24
   1b83c:	eb0040e9 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   1b840:	e1a00005 	mov	r0, r5
   1b844:	e28dd024 	add	sp, sp, #36	; 0x24
   1b848:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b84c:	e1a0100b 	mov	r1, fp
   1b850:	e1a00008 	mov	r0, r8
   1b854:	eb0010de 	bl	1fbd4 <CIPAddress::operator==(unsigned char const*) const>
   1b858:	e3500000 	cmp	r0, #0
   1b85c:	0affffc3 	beq	1b770 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xac>
   1b860:	e3a0501c 	mov	r5, #28
   1b864:	e0254a95 	mla	r5, r5, sl, r4
   1b868:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   1b86c:	e3500000 	cmp	r0, #0
   1b870:	0a000058 	beq	1b9d8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x314>
   1b874:	e59d1010 	ldr	r1, [sp, #16]
   1b878:	e3a03000 	mov	r3, #0
   1b87c:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1b880:	eb00121a 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b884:	eb003edb 	bl	2b3f8 <CTimer::Get()>
   1b888:	eb003c0f 	bl	2a8cc <CTimer::GetTicks() const>
   1b88c:	e5850028 	str	r0, [r5, #40]	; 0x28
   1b890:	e594b244 	ldr	fp, [r4, #580]	; 0x244
   1b894:	e35b0000 	cmp	fp, #0
   1b898:	01a0500b 	moveq	r5, fp
   1b89c:	0affffe7 	beq	1b840 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1b8a0:	eb004516 	bl	2cd00 <LeaveCritical>
   1b8a4:	e3a03000 	mov	r3, #0
   1b8a8:	e1a05003 	mov	r5, r3
   1b8ac:	eaffffe3 	b	1b840 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1b8b0:	e3550014 	cmp	r5, #20
   1b8b4:	01a0500a 	moveq	r5, sl
   1b8b8:	eaffffad 	b	1b774 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb0>
   1b8bc:	e35c0014 	cmp	ip, #20
   1b8c0:	1a00001f 	bne	1b944 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x280>
   1b8c4:	e3590013 	cmp	r9, #19
   1b8c8:	8a000034 	bhi	1b9a0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2dc>
   1b8cc:	e3a0701c 	mov	r7, #28
   1b8d0:	e3a02000 	mov	r2, #0
   1b8d4:	e1a05009 	mov	r5, r9
   1b8d8:	e0070997 	mul	r7, r7, r9
   1b8dc:	e0843007 	add	r3, r4, r7
   1b8e0:	e2877015 	add	r7, r7, #21
   1b8e4:	e5c32014 	strb	r2, [r3, #20]
   1b8e8:	eaffffaa 	b	1b798 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xd4>
   1b8ec:	eb0044d6 	bl	2cc4c <EnterCritical>
   1b8f0:	eaffff7c 	b	1b6e8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   1b8f4:	e59d3014 	ldr	r3, [sp, #20]
   1b8f8:	e1a05000 	mov	r5, r0
   1b8fc:	e3530000 	cmp	r3, #0
   1b900:	0a00002e 	beq	1b9c0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2fc>
   1b904:	e2811019 	add	r1, r1, #25
   1b908:	e59d0014 	ldr	r0, [sp, #20]
   1b90c:	e0841001 	add	r1, r4, r1
   1b910:	eb0040d4 	bl	2bc68 <CMACAddress::Set(unsigned char const*)>
   1b914:	eb003eb7 	bl	2b3f8 <CTimer::Get()>
   1b918:	eb003beb 	bl	2a8cc <CTimer::GetTicks() const>
   1b91c:	e3a0201c 	mov	r2, #28
   1b920:	e0234a92 	mla	r3, r2, sl, r4
   1b924:	e5830028 	str	r0, [r3, #40]	; 0x28
   1b928:	e5943244 	ldr	r3, [r4, #580]	; 0x244
   1b92c:	e3530000 	cmp	r3, #0
   1b930:	0affffc2 	beq	1b840 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1b934:	eb0044f1 	bl	2cd00 <LeaveCritical>
   1b938:	eaffffc0 	b	1b840 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1b93c:	eb0044ef 	bl	2cd00 <LeaveCritical>
   1b940:	eaffffb1 	b	1b80c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x148>
   1b944:	e3a0701c 	mov	r7, #28
   1b948:	e1a0500c 	mov	r5, ip
   1b94c:	e0070c97 	mul	r7, r7, ip
   1b950:	e2877015 	add	r7, r7, #21
   1b954:	e3a0601c 	mov	r6, #28
   1b958:	e3a03000 	mov	r3, #0
   1b95c:	e3a0000c 	mov	r0, #12
   1b960:	e0264c96 	mla	r6, r6, ip, r4
   1b964:	e5c63014 	strb	r3, [r6, #20]
   1b968:	eb004160 	bl	2bef0 <operator new(unsigned int)>
   1b96c:	e1a09000 	mov	r9, r0
   1b970:	eb0011a0 	bl	1fff8 <CNetQueue::CNetQueue()>
   1b974:	e586902c 	str	r9, [r6, #44]	; 0x2c
   1b978:	e5943010 	ldr	r3, [r4, #16]
   1b97c:	e2833001 	add	r3, r3, #1
   1b980:	e5843010 	str	r3, [r4, #16]
   1b984:	eaffff83 	b	1b798 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xd4>
   1b988:	e3051334 	movw	r1, #21300	; 0x5334
   1b98c:	e3401003 	movt	r1, #3
   1b990:	e3050370 	movw	r0, #21360	; 0x5370
   1b994:	e3400003 	movt	r0, #3
   1b998:	e3002129 	movw	r2, #297	; 0x129
   1b99c:	eb002574 	bl	24f74 <assertion_failed>
   1b9a0:	e3051334 	movw	r1, #21300	; 0x5334
   1b9a4:	e3401003 	movt	r1, #3
   1b9a8:	e30503bc 	movw	r0, #21436	; 0x53bc
   1b9ac:	e3400003 	movt	r0, #3
   1b9b0:	e300211d 	movw	r2, #285	; 0x11d
   1b9b4:	eb00256e 	bl	24f74 <assertion_failed>
   1b9b8:	e3a07015 	mov	r7, #21
   1b9bc:	eaffffe4 	b	1b954 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x290>
   1b9c0:	e3051334 	movw	r1, #21300	; 0x5334
   1b9c4:	e3401003 	movt	r1, #3
   1b9c8:	e30503a8 	movw	r0, #21416	; 0x53a8
   1b9cc:	e3400003 	movt	r0, #3
   1b9d0:	e3a020ff 	mov	r2, #255	; 0xff
   1b9d4:	eb002566 	bl	24f74 <assertion_failed>
   1b9d8:	e3051334 	movw	r1, #21300	; 0x5334
   1b9dc:	e3401003 	movt	r1, #3
   1b9e0:	e3050388 	movw	r0, #21384	; 0x5388
   1b9e4:	e3400003 	movt	r0, #3
   1b9e8:	e3a020eb 	mov	r2, #235	; 0xeb
   1b9ec:	eb002560 	bl	24f74 <assertion_failed>
   1b9f0:	e3051334 	movw	r1, #21300	; 0x5334
   1b9f4:	e3401003 	movt	r1, #3
   1b9f8:	e3010398 	movw	r0, #5016	; 0x1398
   1b9fc:	e3400003 	movt	r0, #3
   1ba00:	e300210a 	movw	r2, #266	; 0x10a
   1ba04:	eb00255a 	bl	24f74 <assertion_failed>

0001ba08 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   1ba08:	e92d4010 	push	{r4, lr}
   1ba0c:	e3510000 	cmp	r1, #0
   1ba10:	e59de008 	ldr	lr, [sp, #8]
   1ba14:	e880400e 	stm	r0, {r1, r2, r3, lr}
   1ba18:	0a00000b 	beq	1ba4c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x44>
   1ba1c:	e3520000 	cmp	r2, #0
   1ba20:	0a00000f 	beq	1ba64 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x5c>
   1ba24:	e3530000 	cmp	r3, #0
   1ba28:	0a000013 	beq	1ba7c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x74>
   1ba2c:	e35e0000 	cmp	lr, #0
   1ba30:	18bd8010 	popne	{r4, pc}
   1ba34:	e30513e0 	movw	r1, #21472	; 0x53e0
   1ba38:	e3401003 	movt	r1, #3
   1ba3c:	e30503f0 	movw	r0, #21488	; 0x53f0
   1ba40:	e3400003 	movt	r0, #3
   1ba44:	e3a0203e 	mov	r2, #62	; 0x3e
   1ba48:	eb002549 	bl	24f74 <assertion_failed>
   1ba4c:	e30513e0 	movw	r1, #21472	; 0x53e0
   1ba50:	e3401003 	movt	r1, #3
   1ba54:	e3050058 	movw	r0, #20568	; 0x5058
   1ba58:	e3400003 	movt	r0, #3
   1ba5c:	e3a0203b 	mov	r2, #59	; 0x3b
   1ba60:	eb002543 	bl	24f74 <assertion_failed>
   1ba64:	e30513e0 	movw	r1, #21472	; 0x53e0
   1ba68:	e3401003 	movt	r1, #3
   1ba6c:	e305006c 	movw	r0, #20588	; 0x506c
   1ba70:	e3400003 	movt	r0, #3
   1ba74:	e3a0203c 	mov	r2, #60	; 0x3c
   1ba78:	eb00253d 	bl	24f74 <assertion_failed>
   1ba7c:	e30513e0 	movw	r1, #21472	; 0x53e0
   1ba80:	e3401003 	movt	r1, #3
   1ba84:	e3050360 	movw	r0, #21344	; 0x5360
   1ba88:	e3400003 	movt	r0, #3
   1ba8c:	e3a0203d 	mov	r2, #61	; 0x3d
   1ba90:	eb002537 	bl	24f74 <assertion_failed>

0001ba94 <CICMPHandler::~CICMPHandler()>:
   1ba94:	e12fff1e 	bx	lr

0001ba98 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   1ba98:	e92d4070 	push	{r4, r5, r6, lr}
   1ba9c:	e3510002 	cmp	r1, #2
   1baa0:	e24dd010 	sub	sp, sp, #16
   1baa4:	8a000020 	bhi	1bb2c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x94>
   1baa8:	e1a04002 	mov	r4, r2
   1baac:	e5cd1000 	strb	r1, [sp]
   1bab0:	e3520000 	cmp	r2, #0
   1bab4:	0a000022 	beq	1bb44 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xac>
   1bab8:	e1a05003 	mov	r5, r3
   1babc:	e2841010 	add	r1, r4, #16
   1bac0:	e5d23009 	ldrb	r3, [r2, #9]
   1bac4:	e1a06000 	mov	r6, r0
   1bac8:	e3a02004 	mov	r2, #4
   1bacc:	e28d0002 	add	r0, sp, #2
   1bad0:	e5cd3001 	strb	r3, [sp, #1]
   1bad4:	eb003ffb 	bl	2bac8 <memcpy>
   1bad8:	e284100c 	add	r1, r4, #12
   1badc:	e3a02004 	mov	r2, #4
   1bae0:	e28d0006 	add	r0, sp, #6
   1bae4:	eb003ff7 	bl	2bac8 <memcpy>
   1bae8:	e3550000 	cmp	r5, #0
   1baec:	0a00001a 	beq	1bb5c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   1baf0:	e1d520b2 	ldrh	r2, [r5, #2]
   1baf4:	e596000c 	ldr	r0, [r6, #12]
   1baf8:	e1d530b0 	ldrh	r3, [r5]
   1bafc:	e6bf2fb2 	rev16	r2, r2
   1bb00:	e3500000 	cmp	r0, #0
   1bb04:	e1cd20ba 	strh	r2, [sp, #10]
   1bb08:	e6bf3fb3 	rev16	r3, r3
   1bb0c:	e1cd30bc 	strh	r3, [sp, #12]
   1bb10:	0a000017 	beq	1bb74 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xdc>
   1bb14:	e1a0100d 	mov	r1, sp
   1bb18:	e3a03000 	mov	r3, #0
   1bb1c:	e3a0200e 	mov	r2, #14
   1bb20:	eb001172 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1bb24:	e28dd010 	add	sp, sp, #16
   1bb28:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bb2c:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bb30:	e3401003 	movt	r1, #3
   1bb34:	e305040c 	movw	r0, #21516	; 0x540c
   1bb38:	e3400003 	movt	r0, #3
   1bb3c:	e3a020ee 	mov	r2, #238	; 0xee
   1bb40:	eb00250b 	bl	24f74 <assertion_failed>
   1bb44:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bb48:	e3401003 	movt	r1, #3
   1bb4c:	e305042c 	movw	r0, #21548	; 0x542c
   1bb50:	e3400003 	movt	r0, #3
   1bb54:	e3a020f3 	mov	r2, #243	; 0xf3
   1bb58:	eb002505 	bl	24f74 <assertion_failed>
   1bb5c:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bb60:	e3401003 	movt	r1, #3
   1bb64:	e305043c 	movw	r0, #21564	; 0x543c
   1bb68:	e3400003 	movt	r0, #3
   1bb6c:	e3a020f8 	mov	r2, #248	; 0xf8
   1bb70:	eb0024ff 	bl	24f74 <assertion_failed>
   1bb74:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bb78:	e3401003 	movt	r1, #3
   1bb7c:	e30503f0 	movw	r0, #21488	; 0x53f0
   1bb80:	e3400003 	movt	r0, #3
   1bb84:	e3a020fc 	mov	r2, #252	; 0xfc
   1bb88:	eb0024f9 	bl	24f74 <assertion_failed>

0001bb8c <CICMPHandler::Process()>:
   1bb8c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1bb90:	e1a05000 	mov	r5, r0
   1bb94:	e5900008 	ldr	r0, [r0, #8]
   1bb98:	e24dde66 	sub	sp, sp, #1632	; 0x660
   1bb9c:	e24dd00c 	sub	sp, sp, #12
   1bba0:	e3500000 	cmp	r0, #0
   1bba4:	0a000081 	beq	1bdb0 <CICMPHandler::Process()+0x224>
   1bba8:	e30584bc 	movw	r8, #21692	; 0x54bc
   1bbac:	e3408003 	movt	r8, #3
   1bbb0:	e30563d8 	movw	r6, #21464	; 0x53d8
   1bbb4:	e3406003 	movt	r6, #3
   1bbb8:	e30574a8 	movw	r7, #21672	; 0x54a8
   1bbbc:	e3407003 	movt	r7, #3
   1bbc0:	e28d200c 	add	r2, sp, #12
   1bbc4:	e28d1028 	add	r1, sp, #40	; 0x28
   1bbc8:	eb001193 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1bbcc:	e2509000 	subs	r9, r0, #0
   1bbd0:	0a00007c 	beq	1bdc8 <CICMPHandler::Process()+0x23c>
   1bbd4:	e59d400c 	ldr	r4, [sp, #12]
   1bbd8:	e3540000 	cmp	r4, #0
   1bbdc:	0a00004e 	beq	1bd1c <CICMPHandler::Process()+0x190>
   1bbe0:	e5d43000 	ldrb	r3, [r4]
   1bbe4:	e3530001 	cmp	r3, #1
   1bbe8:	1a000051 	bne	1bd34 <CICMPHandler::Process()+0x1a8>
   1bbec:	e2841001 	add	r1, r4, #1
   1bbf0:	e28d0010 	add	r0, sp, #16
   1bbf4:	eb001048 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   1bbf8:	e2841005 	add	r1, r4, #5
   1bbfc:	e28d0018 	add	r0, sp, #24
   1bc00:	eb001045 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   1bc04:	e1a00004 	mov	r0, r4
   1bc08:	e3a01009 	mov	r1, #9
   1bc0c:	eb0040c5 	bl	2bf28 <operator delete(void*, unsigned int)>
   1bc10:	e5953000 	ldr	r3, [r5]
   1bc14:	e3530000 	cmp	r3, #0
   1bc18:	0a00004b 	beq	1bd4c <CICMPHandler::Process()+0x1c0>
   1bc1c:	e28d0018 	add	r0, sp, #24
   1bc20:	eb001094 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   1bc24:	e3500000 	cmp	r0, #0
   1bc28:	1a000008 	bne	1bc50 <CICMPHandler::Process()+0xc4>
   1bc2c:	e5950000 	ldr	r0, [r5]
   1bc30:	eb000f4d 	bl	1f96c <CNetConfig::GetBroadcastAddress() const>
   1bc34:	e1a01000 	mov	r1, r0
   1bc38:	e28d0018 	add	r0, sp, #24
   1bc3c:	eb000fb3 	bl	1fb10 <CIPAddress::operator==(CIPAddress const&) const>
   1bc40:	e3590007 	cmp	r9, #7
   1bc44:	93800001 	orrls	r0, r0, #1
   1bc48:	e31000ff 	tst	r0, #255	; 0xff
   1bc4c:	0a000005 	beq	1bc68 <CICMPHandler::Process()+0xdc>
   1bc50:	e28d0018 	add	r0, sp, #24
   1bc54:	eb000fac 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1bc58:	e28d0010 	add	r0, sp, #16
   1bc5c:	eb000faa 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1bc60:	e5950008 	ldr	r0, [r5, #8]
   1bc64:	eaffffd5 	b	1bbc0 <CICMPHandler::Process()+0x34>
   1bc68:	e1a01009 	mov	r1, r9
   1bc6c:	e28d0028 	add	r0, sp, #40	; 0x28
   1bc70:	eb001232 	bl	20540 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1bc74:	e3500000 	cmp	r0, #0
   1bc78:	1afffff4 	bne	1bc50 <CICMPHandler::Process()+0xc4>
   1bc7c:	e5dd3028 	ldrb	r3, [sp, #40]	; 0x28
   1bc80:	e3530008 	cmp	r3, #8
   1bc84:	0a000036 	beq	1bd64 <CICMPHandler::Process()+0x1d8>
   1bc88:	e359001c 	cmp	r9, #28
   1bc8c:	9affffef 	bls	1bc50 <CICMPHandler::Process()+0xc4>
   1bc90:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1bc94:	e203400f 	and	r4, r3, #15
   1bc98:	e2442005 	sub	r2, r4, #5
   1bc9c:	e3520001 	cmp	r2, #1
   1bca0:	8affffea 	bhi	1bc50 <CICMPHandler::Process()+0xc4>
   1bca4:	e1a03243 	asr	r3, r3, #4
   1bca8:	e3530004 	cmp	r3, #4
   1bcac:	1affffe7 	bne	1bc50 <CICMPHandler::Process()+0xc4>
   1bcb0:	e5950000 	ldr	r0, [r5]
   1bcb4:	eb000f22 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1bcb8:	e28d103c 	add	r1, sp, #60	; 0x3c
   1bcbc:	eb000fdc 	bl	1fc34 <CIPAddress::operator!=(unsigned char const*) const>
   1bcc0:	e3500000 	cmp	r0, #0
   1bcc4:	1affffe1 	bne	1bc50 <CICMPHandler::Process()+0xc4>
   1bcc8:	e1a04104 	lsl	r4, r4, #2
   1bccc:	e2843010 	add	r3, r4, #16
   1bcd0:	e1530009 	cmp	r3, r9
   1bcd4:	8affffdd 	bhi	1bc50 <CICMPHandler::Process()+0xc4>
   1bcd8:	e5dd3028 	ldrb	r3, [sp, #40]	; 0x28
   1bcdc:	e28d2030 	add	r2, sp, #48	; 0x30
   1bce0:	e0824004 	add	r4, r2, r4
   1bce4:	e2433003 	sub	r3, r3, #3
   1bce8:	e3530009 	cmp	r3, #9
   1bcec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1bcf0:	eaffffd6 	b	1bc50 <CICMPHandler::Process()+0xc4>
   1bcf4:	0001beb0 	.word	0x0001beb0
   1bcf8:	0001bc50 	.word	0x0001bc50
   1bcfc:	0001be3c 	.word	0x0001be3c
   1bd00:	0001bc50 	.word	0x0001bc50
   1bd04:	0001bc50 	.word	0x0001bc50
   1bd08:	0001bc50 	.word	0x0001bc50
   1bd0c:	0001bc50 	.word	0x0001bc50
   1bd10:	0001bc50 	.word	0x0001bc50
   1bd14:	0001be08 	.word	0x0001be08
   1bd18:	0001bdd4 	.word	0x0001bdd4
   1bd1c:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bd20:	e3401003 	movt	r1, #3
   1bd24:	e30500d4 	movw	r0, #20692	; 0x50d4
   1bd28:	e3400003 	movt	r0, #3
   1bd2c:	e3a02052 	mov	r2, #82	; 0x52
   1bd30:	eb00248f 	bl	24f74 <assertion_failed>
   1bd34:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bd38:	e3401003 	movt	r1, #3
   1bd3c:	e3050454 	movw	r0, #21588	; 0x5454
   1bd40:	e3400003 	movt	r0, #3
   1bd44:	e3a02053 	mov	r2, #83	; 0x53
   1bd48:	eb002489 	bl	24f74 <assertion_failed>
   1bd4c:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bd50:	e3401003 	movt	r1, #3
   1bd54:	e3050058 	movw	r0, #20568	; 0x5058
   1bd58:	e3400003 	movt	r0, #3
   1bd5c:	e3a0205b 	mov	r2, #91	; 0x5b
   1bd60:	eb002483 	bl	24f74 <assertion_failed>
   1bd64:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   1bd68:	e3530000 	cmp	r3, #0
   1bd6c:	1affffb7 	bne	1bc50 <CICMPHandler::Process()+0xc4>
   1bd70:	e1a01009 	mov	r1, r9
   1bd74:	e28d0028 	add	r0, sp, #40	; 0x28
   1bd78:	e58d3028 	str	r3, [sp, #40]	; 0x28
   1bd7c:	eb0011ef 	bl	20540 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1bd80:	e5952004 	ldr	r2, [r5, #4]
   1bd84:	e1cd02ba 	strh	r0, [sp, #42]	; 0x2a
   1bd88:	e3520000 	cmp	r2, #0
   1bd8c:	0a000055 	beq	1bee8 <CICMPHandler::Process()+0x35c>
   1bd90:	e3a01001 	mov	r1, #1
   1bd94:	e1a03009 	mov	r3, r9
   1bd98:	e58d1000 	str	r1, [sp]
   1bd9c:	e1a00002 	mov	r0, r2
   1bda0:	e28d1010 	add	r1, sp, #16
   1bda4:	e28d2028 	add	r2, sp, #40	; 0x28
   1bda8:	ebfff819 	bl	19e14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1bdac:	eaffffa7 	b	1bc50 <CICMPHandler::Process()+0xc4>
   1bdb0:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bdb4:	e3401003 	movt	r1, #3
   1bdb8:	e3050360 	movw	r0, #21344	; 0x5360
   1bdbc:	e3400003 	movt	r0, #3
   1bdc0:	e3a0204e 	mov	r2, #78	; 0x4e
   1bdc4:	eb00246a 	bl	24f74 <assertion_failed>
   1bdc8:	e28dde66 	add	sp, sp, #1632	; 0x660
   1bdcc:	e28dd00c 	add	sp, sp, #12
   1bdd0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bdd4:	eb002a0b 	bl	26608 <CLogger::Get()>
   1bdd8:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   1bddc:	e58d3000 	str	r3, [sp]
   1bde0:	e1a01006 	mov	r1, r6
   1bde4:	e1a03008 	mov	r3, r8
   1bde8:	e3a02002 	mov	r2, #2
   1bdec:	eb002946 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bdf0:	e1a03004 	mov	r3, r4
   1bdf4:	e28d2030 	add	r2, sp, #48	; 0x30
   1bdf8:	e3a01002 	mov	r1, #2
   1bdfc:	e1a00005 	mov	r0, r5
   1be00:	ebffff24 	bl	1ba98 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1be04:	eaffff91 	b	1bc50 <CICMPHandler::Process()+0xc4>
   1be08:	eb0029fe 	bl	26608 <CLogger::Get()>
   1be0c:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   1be10:	e58d3000 	str	r3, [sp]
   1be14:	e1a01006 	mov	r1, r6
   1be18:	e1a03007 	mov	r3, r7
   1be1c:	e3a02002 	mov	r2, #2
   1be20:	eb002939 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1be24:	e1a03004 	mov	r3, r4
   1be28:	e28d2030 	add	r2, sp, #48	; 0x30
   1be2c:	e3a01001 	mov	r1, #1
   1be30:	e1a00005 	mov	r0, r5
   1be34:	ebffff17 	bl	1ba98 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1be38:	eaffff84 	b	1bc50 <CICMPHandler::Process()+0xc4>
   1be3c:	e28d102c 	add	r1, sp, #44	; 0x2c
   1be40:	e28d0020 	add	r0, sp, #32
   1be44:	eb000fb4 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   1be48:	e5953004 	ldr	r3, [r5, #4]
   1be4c:	e3530000 	cmp	r3, #0
   1be50:	0a00002a 	beq	1bf00 <CICMPHandler::Process()+0x374>
   1be54:	e5950000 	ldr	r0, [r5]
   1be58:	eb000eb9 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1be5c:	e1a04000 	mov	r4, r0
   1be60:	e5950000 	ldr	r0, [r5]
   1be64:	eb000eba 	bl	1f954 <CNetConfig::GetNetMask() const>
   1be68:	e1a01004 	mov	r1, r4
   1be6c:	e1a02000 	mov	r2, r0
   1be70:	e28d0020 	add	r0, sp, #32
   1be74:	eb001030 	bl	1ff3c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1be78:	e3500000 	cmp	r0, #0
   1be7c:	0a000008 	beq	1bea4 <CICMPHandler::Process()+0x318>
   1be80:	e28d4040 	add	r4, sp, #64	; 0x40
   1be84:	e5950004 	ldr	r0, [r5, #4]
   1be88:	e1a01004 	mov	r1, r4
   1be8c:	ebfff925 	bl	1a328 <CNetworkLayer::GetGateway(unsigned char const*) const>
   1be90:	e1a01000 	mov	r1, r0
   1be94:	e28d0010 	add	r0, sp, #16
   1be98:	eb000f65 	bl	1fc34 <CIPAddress::operator!=(unsigned char const*) const>
   1be9c:	e3500000 	cmp	r0, #0
   1bea0:	0a00001c 	beq	1bf18 <CICMPHandler::Process()+0x38c>
   1bea4:	e28d0020 	add	r0, sp, #32
   1bea8:	eb000f17 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1beac:	eaffff67 	b	1bc50 <CICMPHandler::Process()+0xc4>
   1beb0:	eb0029d4 	bl	26608 <CLogger::Get()>
   1beb4:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   1beb8:	e58d3000 	str	r3, [sp]
   1bebc:	e1a01006 	mov	r1, r6
   1bec0:	e3a02004 	mov	r2, #4
   1bec4:	e3053478 	movw	r3, #21624	; 0x5478
   1bec8:	e3403003 	movt	r3, #3
   1becc:	eb00290e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bed0:	e1a03004 	mov	r3, r4
   1bed4:	e28d2030 	add	r2, sp, #48	; 0x30
   1bed8:	e3a01000 	mov	r1, #0
   1bedc:	e1a00005 	mov	r0, r5
   1bee0:	ebfffeec 	bl	1ba98 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1bee4:	eaffff59 	b	1bc50 <CICMPHandler::Process()+0xc4>
   1bee8:	e30513e0 	movw	r1, #21472	; 0x53e0
   1beec:	e3401003 	movt	r1, #3
   1bef0:	e305006c 	movw	r0, #20588	; 0x506c
   1bef4:	e3400003 	movt	r0, #3
   1bef8:	e3a02078 	mov	r2, #120	; 0x78
   1befc:	eb00241c 	bl	24f74 <assertion_failed>
   1bf00:	e30513e0 	movw	r1, #21472	; 0x53e0
   1bf04:	e3401003 	movt	r1, #3
   1bf08:	e305006c 	movw	r0, #20588	; 0x506c
   1bf0c:	e3400003 	movt	r0, #3
   1bf10:	e3a020a7 	mov	r2, #167	; 0xa7
   1bf14:	eb002416 	bl	24f74 <assertion_failed>
   1bf18:	eb0029ba 	bl	26608 <CLogger::Get()>
   1bf1c:	e5dd3029 	ldrb	r3, [sp, #41]	; 0x29
   1bf20:	e1a01006 	mov	r1, r6
   1bf24:	e58d3000 	str	r3, [sp]
   1bf28:	e3a02004 	mov	r2, #4
   1bf2c:	e3053498 	movw	r3, #21656	; 0x5498
   1bf30:	e3403003 	movt	r3, #3
   1bf34:	eb0028f4 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bf38:	e5959004 	ldr	r9, [r5, #4]
   1bf3c:	e28d0020 	add	r0, sp, #32
   1bf40:	eb000f9a 	bl	1fdb0 <CIPAddress::Get() const>
   1bf44:	e1a01004 	mov	r1, r4
   1bf48:	e1a02000 	mov	r2, r0
   1bf4c:	e1a00009 	mov	r0, r9
   1bf50:	ebfff8f2 	bl	1a320 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   1bf54:	e28d0020 	add	r0, sp, #32
   1bf58:	eb000eeb 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1bf5c:	eaffff3b 	b	1bc50 <CICMPHandler::Process()+0xc4>

0001bf60 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   1bf60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bf64:	e2525000 	subs	r5, r2, #0
   1bf68:	e24dd020 	sub	sp, sp, #32
   1bf6c:	0a000042 	beq	1c07c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x11c>
   1bf70:	e1a06003 	mov	r6, r3
   1bf74:	e3530014 	cmp	r3, #20
   1bf78:	9a000045 	bls	1c094 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x134>
   1bf7c:	e1a08001 	mov	r8, r1
   1bf80:	e5d51000 	ldrb	r1, [r5]
   1bf84:	e201200f 	and	r2, r1, #15
   1bf88:	e2423005 	sub	r3, r2, #5
   1bf8c:	e3530001 	cmp	r3, #1
   1bf90:	8a000045 	bhi	1c0ac <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x14c>
   1bf94:	e1a01241 	asr	r1, r1, #4
   1bf98:	e1a04102 	lsl	r4, r2, #2
   1bf9c:	e3510004 	cmp	r1, #4
   1bfa0:	1a000047 	bne	1c0c4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x164>
   1bfa4:	e1a07000 	mov	r7, r0
   1bfa8:	e5900000 	ldr	r0, [r0]
   1bfac:	eb000e64 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1bfb0:	e285100c 	add	r1, r5, #12
   1bfb4:	eb000f06 	bl	1fbd4 <CIPAddress::operator==(unsigned char const*) const>
   1bfb8:	e3500000 	cmp	r0, #0
   1bfbc:	0a000046 	beq	1c0dc <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   1bfc0:	e2843008 	add	r3, r4, #8
   1bfc4:	e1530006 	cmp	r3, r6
   1bfc8:	8a000049 	bhi	1c0f4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   1bfcc:	e0854004 	add	r4, r5, r4
   1bfd0:	e3580000 	cmp	r8, #0
   1bfd4:	0a000025 	beq	1c070 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x110>
   1bfd8:	e3063108 	movw	r3, #24840	; 0x6108
   1bfdc:	e3403003 	movt	r3, #3
   1bfe0:	e3580001 	cmp	r8, #1
   1bfe4:	e30564e0 	movw	r6, #21728	; 0x54e0
   1bfe8:	e3406003 	movt	r6, #3
   1bfec:	11a06003 	movne	r6, r3
   1bff0:	e28d0010 	add	r0, sp, #16
   1bff4:	eb00357c 	bl	295ec <CString::CString()>
   1bff8:	e2851010 	add	r1, r5, #16
   1bffc:	e28d0008 	add	r0, sp, #8
   1c000:	eb000f45 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   1c004:	e28d1010 	add	r1, sp, #16
   1c008:	e28d0008 	add	r0, sp, #8
   1c00c:	eb000faa 	bl	1febc <CIPAddress::Format(CString*) const>
   1c010:	eb00297c 	bl	26608 <CLogger::Get()>
   1c014:	e1a08000 	mov	r8, r0
   1c018:	e28d0010 	add	r0, sp, #16
   1c01c:	eb003589 	bl	29648 <CString::operator char const*() const>
   1c020:	e58d6000 	str	r6, [sp]
   1c024:	e58d0004 	str	r0, [sp, #4]
   1c028:	e3a02004 	mov	r2, #4
   1c02c:	e1a00008 	mov	r0, r8
   1c030:	e3053628 	movw	r3, #22056	; 0x5628
   1c034:	e3403003 	movt	r3, #3
   1c038:	e30513d8 	movw	r1, #21464	; 0x53d8
   1c03c:	e3401003 	movt	r1, #3
   1c040:	eb0028b1 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c044:	e1a03004 	mov	r3, r4
   1c048:	e1a02005 	mov	r2, r5
   1c04c:	e3a01000 	mov	r1, #0
   1c050:	e1a00007 	mov	r0, r7
   1c054:	ebfffe8f 	bl	1ba98 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1c058:	e28d0008 	add	r0, sp, #8
   1c05c:	eb000eaa 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1c060:	e28d0010 	add	r0, sp, #16
   1c064:	eb00352d 	bl	29520 <CString::~CString()>
   1c068:	e28dd020 	add	sp, sp, #32
   1c06c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c070:	e30564d4 	movw	r6, #21716	; 0x54d4
   1c074:	e3406003 	movt	r6, #3
   1c078:	eaffffdc 	b	1bff0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x90>
   1c07c:	e30513e0 	movw	r1, #21472	; 0x53e0
   1c080:	e3401003 	movt	r1, #3
   1c084:	e30504e8 	movw	r0, #21736	; 0x54e8
   1c088:	e3400003 	movt	r0, #3
   1c08c:	e3a020c9 	mov	r2, #201	; 0xc9
   1c090:	eb0023b7 	bl	24f74 <assertion_failed>
   1c094:	e30513e0 	movw	r1, #21472	; 0x53e0
   1c098:	e3401003 	movt	r1, #3
   1c09c:	e3050500 	movw	r0, #21760	; 0x5500
   1c0a0:	e3400003 	movt	r0, #3
   1c0a4:	e3a020ca 	mov	r2, #202	; 0xca
   1c0a8:	eb0023b1 	bl	24f74 <assertion_failed>
   1c0ac:	e30513e0 	movw	r1, #21472	; 0x53e0
   1c0b0:	e3401003 	movt	r1, #3
   1c0b4:	e3050520 	movw	r0, #21792	; 0x5520
   1c0b8:	e3400003 	movt	r0, #3
   1c0bc:	e3a020cf 	mov	r2, #207	; 0xcf
   1c0c0:	eb0023ab 	bl	24f74 <assertion_failed>
   1c0c4:	e30513e0 	movw	r1, #21472	; 0x53e0
   1c0c8:	e3401003 	movt	r1, #3
   1c0cc:	e3050580 	movw	r0, #21888	; 0x5580
   1c0d0:	e3400003 	movt	r0, #3
   1c0d4:	e3a020d2 	mov	r2, #210	; 0xd2
   1c0d8:	eb0023a5 	bl	24f74 <assertion_failed>
   1c0dc:	e30513e0 	movw	r1, #21472	; 0x53e0
   1c0e0:	e3401003 	movt	r1, #3
   1c0e4:	e30505ac 	movw	r0, #21932	; 0x55ac
   1c0e8:	e3400003 	movt	r0, #3
   1c0ec:	e3a020d3 	mov	r2, #211	; 0xd3
   1c0f0:	eb00239f 	bl	24f74 <assertion_failed>
   1c0f4:	e30513e0 	movw	r1, #21472	; 0x53e0
   1c0f8:	e3401003 	movt	r1, #3
   1c0fc:	e30505e8 	movw	r0, #21992	; 0x55e8
   1c100:	e3400003 	movt	r0, #3
   1c104:	e3a020d4 	mov	r2, #212	; 0xd4
   1c108:	eb002399 	bl	24f74 <assertion_failed>

0001c10c <CRouteCache::CRouteCache()>:
   1c10c:	e3a02064 	mov	r2, #100	; 0x64
   1c110:	e92d4010 	push	{r4, lr}
   1c114:	e1a01002 	mov	r1, r2
   1c118:	e1a04000 	mov	r4, r0
   1c11c:	eb002c31 	bl	271e8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1c120:	e1a00004 	mov	r0, r4
   1c124:	e8bd8010 	pop	{r4, pc}

0001c128 <CRouteCache::Flush()>:
   1c128:	e92d4070 	push	{r4, r5, r6, lr}
   1c12c:	e1a05000 	mov	r5, r0
   1c130:	eb002c53 	bl	27284 <CPtrArray::GetCount() const>
   1c134:	e3500000 	cmp	r0, #0
   1c138:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c13c:	e2404001 	sub	r4, r0, #1
   1c140:	e1a01004 	mov	r1, r4
   1c144:	e1a00005 	mov	r0, r5
   1c148:	eb002c4f 	bl	2728c <CPtrArray::operator[](unsigned int)>
   1c14c:	e3a01008 	mov	r1, #8
   1c150:	e5900000 	ldr	r0, [r0]
   1c154:	e2444001 	sub	r4, r4, #1
   1c158:	eb003f72 	bl	2bf28 <operator delete(void*, unsigned int)>
   1c15c:	e1a00005 	mov	r0, r5
   1c160:	eb002cc6 	bl	27480 <CPtrArray::RemoveLast()>
   1c164:	e3740001 	cmn	r4, #1
   1c168:	1afffff4 	bne	1c140 <CRouteCache::Flush()+0x18>
   1c16c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c170 <CRouteCache::~CRouteCache()>:
   1c170:	e92d4010 	push	{r4, lr}
   1c174:	e1a04000 	mov	r4, r0
   1c178:	ebffffea 	bl	1c128 <CRouteCache::Flush()>
   1c17c:	e1a00004 	mov	r0, r4
   1c180:	eb002c34 	bl	27258 <CPtrArray::~CPtrArray()>
   1c184:	e1a00004 	mov	r0, r4
   1c188:	e8bd8010 	pop	{r4, pc}

0001c18c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   1c18c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c190:	e2517000 	subs	r7, r1, #0
   1c194:	0a00002b 	beq	1c248 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xbc>
   1c198:	e1a09002 	mov	r9, r2
   1c19c:	e3520000 	cmp	r2, #0
   1c1a0:	0a00002e 	beq	1c260 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   1c1a4:	e1a06000 	mov	r6, r0
   1c1a8:	eb002c35 	bl	27284 <CPtrArray::GetCount() const>
   1c1ac:	e2508000 	subs	r8, r0, #0
   1c1b0:	0a000016 	beq	1c210 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x84>
   1c1b4:	e3a04000 	mov	r4, #0
   1c1b8:	ea000008 	b	1c1e0 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x54>
   1c1bc:	e3a02004 	mov	r2, #4
   1c1c0:	e1a01007 	mov	r1, r7
   1c1c4:	e1a00005 	mov	r0, r5
   1c1c8:	eb003ccf 	bl	2b50c <memcmp>
   1c1cc:	e3500000 	cmp	r0, #0
   1c1d0:	0a000017 	beq	1c234 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa8>
   1c1d4:	e2844001 	add	r4, r4, #1
   1c1d8:	e1580004 	cmp	r8, r4
   1c1dc:	0a00000b 	beq	1c210 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x84>
   1c1e0:	e1a01004 	mov	r1, r4
   1c1e4:	e1a00006 	mov	r0, r6
   1c1e8:	eb002c27 	bl	2728c <CPtrArray::operator[](unsigned int)>
   1c1ec:	e5905000 	ldr	r5, [r0]
   1c1f0:	e3550000 	cmp	r5, #0
   1c1f4:	1afffff0 	bne	1c1bc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x30>
   1c1f8:	e3051648 	movw	r1, #22088	; 0x5648
   1c1fc:	e3401003 	movt	r1, #3
   1c200:	e3050678 	movw	r0, #22136	; 0x5678
   1c204:	e3400003 	movt	r0, #3
   1c208:	e3a0203e 	mov	r2, #62	; 0x3e
   1c20c:	eb002358 	bl	24f74 <assertion_failed>
   1c210:	e3a00008 	mov	r0, #8
   1c214:	eb003f35 	bl	2bef0 <operator new(unsigned int)>
   1c218:	e1a01007 	mov	r1, r7
   1c21c:	e1a05000 	mov	r5, r0
   1c220:	e3a02004 	mov	r2, #4
   1c224:	eb003e27 	bl	2bac8 <memcpy>
   1c228:	e1a01005 	mov	r1, r5
   1c22c:	e1a00006 	mov	r0, r6
   1c230:	eb002c51 	bl	2737c <CPtrArray::Append(void*)>
   1c234:	e1a01009 	mov	r1, r9
   1c238:	e2850004 	add	r0, r5, #4
   1c23c:	e3a02004 	mov	r2, #4
   1c240:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c244:	ea003e1f 	b	2bac8 <memcpy>
   1c248:	e3051648 	movw	r1, #22088	; 0x5648
   1c24c:	e3401003 	movt	r1, #3
   1c250:	e3050658 	movw	r0, #22104	; 0x5658
   1c254:	e3400003 	movt	r0, #3
   1c258:	e3a02035 	mov	r2, #53	; 0x35
   1c25c:	eb002344 	bl	24f74 <assertion_failed>
   1c260:	e3051648 	movw	r1, #22088	; 0x5648
   1c264:	e3401003 	movt	r1, #3
   1c268:	e3050668 	movw	r0, #22120	; 0x5668
   1c26c:	e3400003 	movt	r0, #3
   1c270:	e3a02036 	mov	r2, #54	; 0x36
   1c274:	eb00233e 	bl	24f74 <assertion_failed>

0001c278 <CRouteCache::GetRoute(unsigned char const*) const>:
   1c278:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c27c:	e2517000 	subs	r7, r1, #0
   1c280:	0a00001c 	beq	1c2f8 <CRouteCache::GetRoute(unsigned char const*) const+0x80>
   1c284:	e1a06000 	mov	r6, r0
   1c288:	eb002bfd 	bl	27284 <CPtrArray::GetCount() const>
   1c28c:	e2508000 	subs	r8, r0, #0
   1c290:	0a000014 	beq	1c2e8 <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   1c294:	e3a04000 	mov	r4, #0
   1c298:	ea000007 	b	1c2bc <CRouteCache::GetRoute(unsigned char const*) const+0x44>
   1c29c:	e3a02004 	mov	r2, #4
   1c2a0:	e1a01007 	mov	r1, r7
   1c2a4:	eb003c98 	bl	2b50c <memcmp>
   1c2a8:	e3500000 	cmp	r0, #0
   1c2ac:	0a00000f 	beq	1c2f0 <CRouteCache::GetRoute(unsigned char const*) const+0x78>
   1c2b0:	e2844001 	add	r4, r4, #1
   1c2b4:	e1580004 	cmp	r8, r4
   1c2b8:	0a00000a 	beq	1c2e8 <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   1c2bc:	e1a01004 	mov	r1, r4
   1c2c0:	e1a00006 	mov	r0, r6
   1c2c4:	eb002c0e 	bl	27304 <CPtrArray::operator[](unsigned int) const>
   1c2c8:	e2505000 	subs	r5, r0, #0
   1c2cc:	1afffff2 	bne	1c29c <CRouteCache::GetRoute(unsigned char const*) const+0x24>
   1c2d0:	e3051648 	movw	r1, #22088	; 0x5648
   1c2d4:	e3401003 	movt	r1, #3
   1c2d8:	e3050678 	movw	r0, #22136	; 0x5678
   1c2dc:	e3400003 	movt	r0, #3
   1c2e0:	e3a0205d 	mov	r2, #93	; 0x5d
   1c2e4:	eb002322 	bl	24f74 <assertion_failed>
   1c2e8:	e3a00000 	mov	r0, #0
   1c2ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c2f0:	e2850004 	add	r0, r5, #4
   1c2f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c2f8:	e3051648 	movw	r1, #22088	; 0x5648
   1c2fc:	e3401003 	movt	r1, #3
   1c300:	e3050658 	movw	r0, #22104	; 0x5658
   1c304:	e3400003 	movt	r0, #3
   1c308:	e3a02057 	mov	r2, #87	; 0x57
   1c30c:	eb002318 	bl	24f74 <assertion_failed>

0001c310 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   1c310:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c314:	e1a04000 	mov	r4, r0
   1c318:	e1a05003 	mov	r5, r3
   1c31c:	e59f3098 	ldr	r3, [pc, #152]	; 1c3bc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xac>
   1c320:	e1a07001 	mov	r7, r1
   1c324:	e5842008 	str	r2, [r4, #8]
   1c328:	e1a01005 	mov	r1, r5
   1c32c:	e8840088 	stm	r4, {r3, r7}
   1c330:	e280000c 	add	r0, r0, #12
   1c334:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1c338:	e1dd92b0 	ldrh	r9, [sp, #32]
   1c33c:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   1c340:	eb000de2 	bl	1fad0 <CIPAddress::CIPAddress(CIPAddress const&)>
   1c344:	e1c491b4 	strh	r9, [r4, #20]
   1c348:	e1a00007 	mov	r0, r7
   1c34c:	e1c481b6 	strh	r8, [r4, #22]
   1c350:	e5846018 	str	r6, [r4, #24]
   1c354:	eb000d7a 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1c358:	e1a03006 	mov	r3, r6
   1c35c:	e1a01000 	mov	r1, r0
   1c360:	e1a02005 	mov	r2, r5
   1c364:	e284001c 	add	r0, r4, #28
   1c368:	eb001000 	bl	20370 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   1c36c:	e5943004 	ldr	r3, [r4, #4]
   1c370:	e3530000 	cmp	r3, #0
   1c374:	0a000004 	beq	1c38c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   1c378:	e5943008 	ldr	r3, [r4, #8]
   1c37c:	e3530000 	cmp	r3, #0
   1c380:	0a000007 	beq	1c3a4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x94>
   1c384:	e1a00004 	mov	r0, r4
   1c388:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c38c:	e30516c8 	movw	r1, #22216	; 0x56c8
   1c390:	e3401003 	movt	r1, #3
   1c394:	e3050058 	movw	r0, #20568	; 0x5058
   1c398:	e3400003 	movt	r0, #3
   1c39c:	e3a02025 	mov	r2, #37	; 0x25
   1c3a0:	eb0022f3 	bl	24f74 <assertion_failed>
   1c3a4:	e30516c8 	movw	r1, #22216	; 0x56c8
   1c3a8:	e3401003 	movt	r1, #3
   1c3ac:	e305006c 	movw	r0, #20588	; 0x506c
   1c3b0:	e3400003 	movt	r0, #3
   1c3b4:	e3a02026 	mov	r2, #38	; 0x26
   1c3b8:	eb0022ed 	bl	24f74 <assertion_failed>
   1c3bc:	0003568c 	.word	0x0003568c

0001c3c0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1c3c0:	e92d4070 	push	{r4, r5, r6, lr}
   1c3c4:	e1a04000 	mov	r4, r0
   1c3c8:	e59fc088 	ldr	ip, [pc, #136]	; 1c458 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x98>
   1c3cc:	e1a05001 	mov	r5, r1
   1c3d0:	e280000c 	add	r0, r0, #12
   1c3d4:	e9840006 	stmib	r4, {r1, r2}
   1c3d8:	e1a06003 	mov	r6, r3
   1c3dc:	e584c000 	str	ip, [r4]
   1c3e0:	eb000db3 	bl	1fab4 <CIPAddress::CIPAddress()>
   1c3e4:	e3a03000 	mov	r3, #0
   1c3e8:	e1c461b6 	strh	r6, [r4, #22]
   1c3ec:	e1a00005 	mov	r0, r5
   1c3f0:	e1c431b4 	strh	r3, [r4, #20]
   1c3f4:	eb000d52 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1c3f8:	e59d2010 	ldr	r2, [sp, #16]
   1c3fc:	e1a01000 	mov	r1, r0
   1c400:	e284001c 	add	r0, r4, #28
   1c404:	eb000fcd 	bl	20340 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1c408:	e5943004 	ldr	r3, [r4, #4]
   1c40c:	e3530000 	cmp	r3, #0
   1c410:	0a000004 	beq	1c428 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x68>
   1c414:	e5943008 	ldr	r3, [r4, #8]
   1c418:	e3530000 	cmp	r3, #0
   1c41c:	0a000007 	beq	1c440 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x80>
   1c420:	e1a00004 	mov	r0, r4
   1c424:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c428:	e30516c8 	movw	r1, #22216	; 0x56c8
   1c42c:	e3401003 	movt	r1, #3
   1c430:	e3050058 	movw	r0, #20568	; 0x5058
   1c434:	e3400003 	movt	r0, #3
   1c438:	e3a02033 	mov	r2, #51	; 0x33
   1c43c:	eb0022cc 	bl	24f74 <assertion_failed>
   1c440:	e30516c8 	movw	r1, #22216	; 0x56c8
   1c444:	e3401003 	movt	r1, #3
   1c448:	e305006c 	movw	r0, #20588	; 0x506c
   1c44c:	e3400003 	movt	r0, #3
   1c450:	e3a02034 	mov	r2, #52	; 0x34
   1c454:	eb0022c6 	bl	24f74 <assertion_failed>
   1c458:	0003568c 	.word	0x0003568c

0001c45c <CNetConnection::~CNetConnection()>:
   1c45c:	e92d4010 	push	{r4, lr}
   1c460:	e1a04000 	mov	r4, r0
   1c464:	e59f2024 	ldr	r2, [pc, #36]	; 1c490 <CNetConnection::~CNetConnection()+0x34>
   1c468:	e3a03000 	mov	r3, #0
   1c46c:	e280001c 	add	r0, r0, #28
   1c470:	e5842000 	str	r2, [r4]
   1c474:	e5843008 	str	r3, [r4, #8]
   1c478:	e5843004 	str	r3, [r4, #4]
   1c47c:	eb000fcc 	bl	203b4 <CChecksumCalculator::~CChecksumCalculator()>
   1c480:	e284000c 	add	r0, r4, #12
   1c484:	eb000da0 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1c488:	e1a00004 	mov	r0, r4
   1c48c:	e8bd8010 	pop	{r4, pc}
   1c490:	0003568c 	.word	0x0003568c

0001c494 <CNetConnection::~CNetConnection()>:
   1c494:	e92d4010 	push	{r4, lr}
   1c498:	e1a04000 	mov	r4, r0
   1c49c:	e59f2030 	ldr	r2, [pc, #48]	; 1c4d4 <CNetConnection::~CNetConnection()+0x40>
   1c4a0:	e3a03000 	mov	r3, #0
   1c4a4:	e280001c 	add	r0, r0, #28
   1c4a8:	e5842000 	str	r2, [r4]
   1c4ac:	e5843008 	str	r3, [r4, #8]
   1c4b0:	e5843004 	str	r3, [r4, #4]
   1c4b4:	eb000fbe 	bl	203b4 <CChecksumCalculator::~CChecksumCalculator()>
   1c4b8:	e284000c 	add	r0, r4, #12
   1c4bc:	eb000d92 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1c4c0:	e1a00004 	mov	r0, r4
   1c4c4:	e3a0102c 	mov	r1, #44	; 0x2c
   1c4c8:	eb003e96 	bl	2bf28 <operator delete(void*, unsigned int)>
   1c4cc:	e1a00004 	mov	r0, r4
   1c4d0:	e8bd8010 	pop	{r4, pc}
   1c4d4:	0003568c 	.word	0x0003568c

0001c4d8 <CNetConnection::GetForeignIP() const>:
   1c4d8:	e280000c 	add	r0, r0, #12
   1c4dc:	ea000e33 	b	1fdb0 <CIPAddress::Get() const>

0001c4e0 <CNetConnection::GetOwnPort() const>:
   1c4e0:	e1d001b6 	ldrh	r0, [r0, #22]
   1c4e4:	e3500000 	cmp	r0, #0
   1c4e8:	112fff1e 	bxne	lr
   1c4ec:	e30516c8 	movw	r1, #22216	; 0x56c8
   1c4f0:	e3401003 	movt	r1, #3
   1c4f4:	e30506dc 	movw	r0, #22236	; 0x56dc
   1c4f8:	e3400003 	movt	r0, #3
   1c4fc:	e92d4010 	push	{r4, lr}
   1c500:	e3a02044 	mov	r2, #68	; 0x44
   1c504:	eb00229a 	bl	24f74 <assertion_failed>

0001c508 <CNetConnection::GetProtocol() const>:
   1c508:	e5900018 	ldr	r0, [r0, #24]
   1c50c:	e12fff1e 	bx	lr

0001c510 <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1c510:	e3e00000 	mvn	r0, #0
   1c514:	e12fff1e 	bx	lr

0001c518 <CUDPConnection::Close()>:
   1c518:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1c51c:	e3530000 	cmp	r3, #0
   1c520:	13a03000 	movne	r3, #0
   1c524:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   1c528:	11a00003 	movne	r0, r3
   1c52c:	03e00000 	mvneq	r0, #0
   1c530:	e12fff1e 	bx	lr

0001c534 <CUDPConnection::SetOptionBroadcast(bool)>:
   1c534:	e5c01040 	strb	r1, [r0, #64]	; 0x40
   1c538:	e3a00000 	mov	r0, #0
   1c53c:	e12fff1e 	bx	lr

0001c540 <CUDPConnection::IsConnected() const>:
   1c540:	e3a00000 	mov	r0, #0
   1c544:	e12fff1e 	bx	lr

0001c548 <CUDPConnection::IsTerminated() const>:
   1c548:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   1c54c:	e2200001 	eor	r0, r0, #1
   1c550:	e12fff1e 	bx	lr

0001c554 <CUDPConnection::Process()>:
   1c554:	e12fff1e 	bx	lr

0001c558 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1c558:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c55c:	e28db01c 	add	fp, sp, #28
   1c560:	e24dd008 	sub	sp, sp, #8
   1c564:	e5906044 	ldr	r6, [r0, #68]	; 0x44
   1c568:	e3560000 	cmp	r6, #0
   1c56c:	b3a03000 	movlt	r3, #0
   1c570:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1c574:	ba000042 	blt	1c684 <CUDPConnection::Send(void const*, unsigned int, int)+0x12c>
   1c578:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1c57c:	e35c0000 	cmp	ip, #0
   1c580:	0a00004e 	beq	1c6c0 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   1c584:	e3d33040 	bics	r3, r3, #64	; 0x40
   1c588:	1a00004c 	bne	1c6c0 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   1c58c:	e242c001 	sub	ip, r2, #1
   1c590:	e3003637 	movw	r3, #1591	; 0x637
   1c594:	e2827008 	add	r7, r2, #8
   1c598:	e15c0003 	cmp	ip, r3
   1c59c:	8a000047 	bhi	1c6c0 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   1c5a0:	e5903004 	ldr	r3, [r0, #4]
   1c5a4:	e1a06002 	mov	r6, r2
   1c5a8:	e1a08001 	mov	r8, r1
   1c5ac:	e1a04000 	mov	r4, r0
   1c5b0:	e3530000 	cmp	r3, #0
   1c5b4:	0a000043 	beq	1c6c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x170>
   1c5b8:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1c5bc:	e3530000 	cmp	r3, #0
   1c5c0:	0a000032 	beq	1c690 <CUDPConnection::Send(void const*, unsigned int, int)+0x138>
   1c5c4:	e2872007 	add	r2, r7, #7
   1c5c8:	e1d431b6 	ldrh	r3, [r4, #22]
   1c5cc:	e3c22007 	bic	r2, r2, #7
   1c5d0:	e3580000 	cmp	r8, #0
   1c5d4:	e04dd002 	sub	sp, sp, r2
   1c5d8:	e1d421b4 	ldrh	r2, [r4, #20]
   1c5dc:	e28d5008 	add	r5, sp, #8
   1c5e0:	e6bf3fb3 	rev16	r3, r3
   1c5e4:	e6bf2fb2 	rev16	r2, r2
   1c5e8:	e1cd30b8 	strh	r3, [sp, #8]
   1c5ec:	e6bf3fb7 	rev16	r3, r7
   1c5f0:	e1c520b2 	strh	r2, [r5, #2]
   1c5f4:	e3a02000 	mov	r2, #0
   1c5f8:	e1c530b4 	strh	r3, [r5, #4]
   1c5fc:	e5c52006 	strb	r2, [r5, #6]
   1c600:	e5c52007 	strb	r2, [r5, #7]
   1c604:	0a000035 	beq	1c6e0 <CUDPConnection::Send(void const*, unsigned int, int)+0x188>
   1c608:	e1a02006 	mov	r2, r6
   1c60c:	e1a01008 	mov	r1, r8
   1c610:	e2850008 	add	r0, r5, #8
   1c614:	e284801c 	add	r8, r4, #28
   1c618:	eb003d2a 	bl	2bac8 <memcpy>
   1c61c:	e5940004 	ldr	r0, [r4, #4]
   1c620:	eb000cc7 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1c624:	e284900c 	add	r9, r4, #12
   1c628:	e1a01000 	mov	r1, r0
   1c62c:	e1a00008 	mov	r0, r8
   1c630:	eb000f60 	bl	203b8 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1c634:	e1a00008 	mov	r0, r8
   1c638:	e1a01009 	mov	r1, r9
   1c63c:	eb000f61 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c640:	e1a02007 	mov	r2, r7
   1c644:	e1a01005 	mov	r1, r5
   1c648:	e1a00008 	mov	r0, r8
   1c64c:	eb000f8b 	bl	20480 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1c650:	e594c008 	ldr	ip, [r4, #8]
   1c654:	e1c500b6 	strh	r0, [r5, #6]
   1c658:	e35c0000 	cmp	ip, #0
   1c65c:	0a000025 	beq	1c6f8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1a0>
   1c660:	e1a0000c 	mov	r0, ip
   1c664:	e1a03007 	mov	r3, r7
   1c668:	e3a0c011 	mov	ip, #17
   1c66c:	e1a02005 	mov	r2, r5
   1c670:	e1a01009 	mov	r1, r9
   1c674:	e58dc000 	str	ip, [sp]
   1c678:	ebfff5e5 	bl	19e14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1c67c:	e3500000 	cmp	r0, #0
   1c680:	0a00000e 	beq	1c6c0 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   1c684:	e1a00006 	mov	r0, r6
   1c688:	e24bd01c 	sub	sp, fp, #28
   1c68c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c690:	e280500c 	add	r5, r0, #12
   1c694:	e1a00005 	mov	r0, r5
   1c698:	eb000df6 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   1c69c:	e3500000 	cmp	r0, #0
   1c6a0:	1a000006 	bne	1c6c0 <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   1c6a4:	e5940004 	ldr	r0, [r4, #4]
   1c6a8:	eb000caf 	bl	1f96c <CNetConfig::GetBroadcastAddress() const>
   1c6ac:	e1a01000 	mov	r1, r0
   1c6b0:	e1a00005 	mov	r0, r5
   1c6b4:	eb000d15 	bl	1fb10 <CIPAddress::operator==(CIPAddress const&) const>
   1c6b8:	e3500000 	cmp	r0, #0
   1c6bc:	0affffc0 	beq	1c5c4 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1c6c0:	e3e06000 	mvn	r6, #0
   1c6c4:	eaffffee 	b	1c684 <CUDPConnection::Send(void const*, unsigned int, int)+0x12c>
   1c6c8:	e3051730 	movw	r1, #22320	; 0x5730
   1c6cc:	e3401003 	movt	r1, #3
   1c6d0:	e3050058 	movw	r0, #20568	; 0x5058
   1c6d4:	e3400003 	movt	r0, #3
   1c6d8:	e3a0207b 	mov	r2, #123	; 0x7b
   1c6dc:	eb002224 	bl	24f74 <assertion_failed>
   1c6e0:	e3051730 	movw	r1, #22320	; 0x5730
   1c6e4:	e3401003 	movt	r1, #3
   1c6e8:	e30500d4 	movw	r0, #20692	; 0x50d4
   1c6ec:	e3400003 	movt	r0, #3
   1c6f0:	e3a0208b 	mov	r2, #139	; 0x8b
   1c6f4:	eb00221e 	bl	24f74 <assertion_failed>
   1c6f8:	e3051730 	movw	r1, #22320	; 0x5730
   1c6fc:	e3401003 	movt	r1, #3
   1c700:	e305006c 	movw	r0, #20588	; 0x506c
   1c704:	e3400003 	movt	r0, #3
   1c708:	e3a02093 	mov	r2, #147	; 0x93
   1c70c:	eb002218 	bl	24f74 <assertion_failed>

0001c710 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1c710:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1c714:	e1a04000 	mov	r4, r0
   1c718:	e28db018 	add	fp, sp, #24
   1c71c:	e24dd00c 	sub	sp, sp, #12
   1c720:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1c724:	e35c0000 	cmp	ip, #0
   1c728:	e1db70b8 	ldrh	r7, [fp, #8]
   1c72c:	b3a03000 	movlt	r3, #0
   1c730:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1c734:	ba000041 	blt	1c840 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x130>
   1c738:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1c73c:	e35c0000 	cmp	ip, #0
   1c740:	1a000041 	bne	1c84c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x13c>
   1c744:	e1a0e003 	mov	lr, r3
   1c748:	e3de3040 	bics	r3, lr, #64	; 0x40
   1c74c:	1a000050 	bne	1c894 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   1c750:	e1a05002 	mov	r5, r2
   1c754:	e2422001 	sub	r2, r2, #1
   1c758:	e3003637 	movw	r3, #1591	; 0x637
   1c75c:	e2858008 	add	r8, r5, #8
   1c760:	e1520003 	cmp	r2, r3
   1c764:	8a00004a 	bhi	1c894 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   1c768:	e5903004 	ldr	r3, [r0, #4]
   1c76c:	e3530000 	cmp	r3, #0
   1c770:	0a000049 	beq	1c89c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x18c>
   1c774:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1c778:	e1a06001 	mov	r6, r1
   1c77c:	e3530000 	cmp	r3, #0
   1c780:	0a000038 	beq	1c868 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x158>
   1c784:	e2882007 	add	r2, r8, #7
   1c788:	e6bf1fb7 	rev16	r1, r7
   1c78c:	e3c22007 	bic	r2, r2, #7
   1c790:	e1d431b6 	ldrh	r3, [r4, #22]
   1c794:	e04dd002 	sub	sp, sp, r2
   1c798:	e3560000 	cmp	r6, #0
   1c79c:	e28d7008 	add	r7, sp, #8
   1c7a0:	e6bf3fb3 	rev16	r3, r3
   1c7a4:	e3a02000 	mov	r2, #0
   1c7a8:	e1cd30b8 	strh	r3, [sp, #8]
   1c7ac:	e6bf3fb8 	rev16	r3, r8
   1c7b0:	e1c710b2 	strh	r1, [r7, #2]
   1c7b4:	e1c730b4 	strh	r3, [r7, #4]
   1c7b8:	e5c72006 	strb	r2, [r7, #6]
   1c7bc:	e5c72007 	strb	r2, [r7, #7]
   1c7c0:	0a00003b 	beq	1c8b4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   1c7c4:	e1a02005 	mov	r2, r5
   1c7c8:	e1a01006 	mov	r1, r6
   1c7cc:	e2870008 	add	r0, r7, #8
   1c7d0:	e284601c 	add	r6, r4, #28
   1c7d4:	eb003cbb 	bl	2bac8 <memcpy>
   1c7d8:	e5940004 	ldr	r0, [r4, #4]
   1c7dc:	eb000c58 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1c7e0:	e1a01000 	mov	r1, r0
   1c7e4:	e1a00006 	mov	r0, r6
   1c7e8:	eb000ef2 	bl	203b8 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1c7ec:	e59b1004 	ldr	r1, [fp, #4]
   1c7f0:	e1a00006 	mov	r0, r6
   1c7f4:	eb000ef3 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c7f8:	e1a01007 	mov	r1, r7
   1c7fc:	e1a02008 	mov	r2, r8
   1c800:	e1a00006 	mov	r0, r6
   1c804:	eb000f1d 	bl	20480 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1c808:	e5941008 	ldr	r1, [r4, #8]
   1c80c:	e1c700b6 	strh	r0, [r7, #6]
   1c810:	e3510000 	cmp	r1, #0
   1c814:	0a00002c 	beq	1c8cc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1bc>
   1c818:	e1a00001 	mov	r0, r1
   1c81c:	e3a0c011 	mov	ip, #17
   1c820:	e1a03008 	mov	r3, r8
   1c824:	e1a02007 	mov	r2, r7
   1c828:	e59b1004 	ldr	r1, [fp, #4]
   1c82c:	e58dc000 	str	ip, [sp]
   1c830:	ebfff577 	bl	19e14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1c834:	e3500000 	cmp	r0, #0
   1c838:	0a000015 	beq	1c894 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   1c83c:	e1a0c005 	mov	ip, r5
   1c840:	e1a0000c 	mov	r0, ip
   1c844:	e24bd018 	sub	sp, fp, #24
   1c848:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1c84c:	e590c000 	ldr	ip, [r0]
   1c850:	e59c4014 	ldr	r4, [ip, #20]
   1c854:	e12fff34 	blx	r4
   1c858:	e1a0c000 	mov	ip, r0
   1c85c:	e1a0000c 	mov	r0, ip
   1c860:	e24bd018 	sub	sp, fp, #24
   1c864:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1c868:	e59b0004 	ldr	r0, [fp, #4]
   1c86c:	eb000d81 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   1c870:	e3500000 	cmp	r0, #0
   1c874:	1a000006 	bne	1c894 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   1c878:	e5940004 	ldr	r0, [r4, #4]
   1c87c:	eb000c3a 	bl	1f96c <CNetConfig::GetBroadcastAddress() const>
   1c880:	e1a01000 	mov	r1, r0
   1c884:	e59b0004 	ldr	r0, [fp, #4]
   1c888:	eb000ca0 	bl	1fb10 <CIPAddress::operator==(CIPAddress const&) const>
   1c88c:	e3500000 	cmp	r0, #0
   1c890:	0affffbb 	beq	1c784 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1c894:	e3e0c000 	mvn	ip, #0
   1c898:	eaffffe8 	b	1c840 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x130>
   1c89c:	e3051730 	movw	r1, #22320	; 0x5730
   1c8a0:	e3401003 	movt	r1, #3
   1c8a4:	e3050058 	movw	r0, #20568	; 0x5058
   1c8a8:	e3400003 	movt	r0, #3
   1c8ac:	e3a020e4 	mov	r2, #228	; 0xe4
   1c8b0:	eb0021af 	bl	24f74 <assertion_failed>
   1c8b4:	e3051730 	movw	r1, #22320	; 0x5730
   1c8b8:	e3401003 	movt	r1, #3
   1c8bc:	e30500d4 	movw	r0, #20692	; 0x50d4
   1c8c0:	e3400003 	movt	r0, #3
   1c8c4:	e3a020f4 	mov	r2, #244	; 0xf4
   1c8c8:	eb0021a9 	bl	24f74 <assertion_failed>
   1c8cc:	e3051730 	movw	r1, #22320	; 0x5730
   1c8d0:	e3401003 	movt	r1, #3
   1c8d4:	e305006c 	movw	r0, #20588	; 0x506c
   1c8d8:	e3400003 	movt	r0, #3
   1c8dc:	e3a020fc 	mov	r2, #252	; 0xfc
   1c8e0:	eb0021a3 	bl	24f74 <assertion_failed>

0001c8e4 <CUDPConnection::Receive(void*, int)>:
   1c8e4:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   1c8e8:	e3530000 	cmp	r3, #0
   1c8ec:	ba00002a 	blt	1c99c <CUDPConnection::Receive(void*, int)+0xb8>
   1c8f0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c8f4:	e1a08002 	mov	r8, r2
   1c8f8:	e1a04001 	mov	r4, r1
   1c8fc:	e24dd00c 	sub	sp, sp, #12
   1c900:	e1a05000 	mov	r5, r0
   1c904:	e280602c 	add	r6, r0, #44	; 0x2c
   1c908:	e2807038 	add	r7, r0, #56	; 0x38
   1c90c:	e3540000 	cmp	r4, #0
   1c910:	0a00001b 	beq	1c984 <CUDPConnection::Receive(void*, int)+0xa0>
   1c914:	e28d2004 	add	r2, sp, #4
   1c918:	e1a01004 	mov	r1, r4
   1c91c:	e1a00006 	mov	r0, r6
   1c920:	eb000e3d 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1c924:	e2509000 	subs	r9, r0, #0
   1c928:	1a00000c 	bne	1c960 <CUDPConnection::Receive(void*, int)+0x7c>
   1c92c:	e3580040 	cmp	r8, #64	; 0x40
   1c930:	0a00001d 	beq	1c9ac <CUDPConnection::Receive(void*, int)+0xc8>
   1c934:	e1a00007 	mov	r0, r7
   1c938:	eb002162 	bl	24ec8 <CSynchronizationEvent::Clear()>
   1c93c:	e1a00007 	mov	r0, r7
   1c940:	eb002171 	bl	24f0c <CSynchronizationEvent::Wait()>
   1c944:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   1c948:	e3530000 	cmp	r3, #0
   1c94c:	aaffffee 	bge	1c90c <CUDPConnection::Receive(void*, int)+0x28>
   1c950:	e5859044 	str	r9, [r5, #68]	; 0x44
   1c954:	e1a00003 	mov	r0, r3
   1c958:	e28dd00c 	add	sp, sp, #12
   1c95c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c960:	e59d0004 	ldr	r0, [sp, #4]
   1c964:	e3500000 	cmp	r0, #0
   1c968:	0a000011 	beq	1c9b4 <CUDPConnection::Receive(void*, int)+0xd0>
   1c96c:	e3a01006 	mov	r1, #6
   1c970:	eb003d6c 	bl	2bf28 <operator delete(void*, unsigned int)>
   1c974:	e1a03009 	mov	r3, r9
   1c978:	e1a00003 	mov	r0, r3
   1c97c:	e28dd00c 	add	sp, sp, #12
   1c980:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c984:	e3051730 	movw	r1, #22320	; 0x5730
   1c988:	e3401003 	movt	r1, #3
   1c98c:	e3020270 	movw	r0, #8816	; 0x2270
   1c990:	e3400003 	movt	r0, #3
   1c994:	e3a020a7 	mov	r2, #167	; 0xa7
   1c998:	eb002175 	bl	24f74 <assertion_failed>
   1c99c:	e3a02000 	mov	r2, #0
   1c9a0:	e5802044 	str	r2, [r0, #68]	; 0x44
   1c9a4:	e1a00003 	mov	r0, r3
   1c9a8:	e12fff1e 	bx	lr
   1c9ac:	e1a03009 	mov	r3, r9
   1c9b0:	eaffffe7 	b	1c954 <CUDPConnection::Receive(void*, int)+0x70>
   1c9b4:	e3051730 	movw	r1, #22320	; 0x5730
   1c9b8:	e3401003 	movt	r1, #3
   1c9bc:	e30500d4 	movw	r0, #20692	; 0x50d4
   1c9c0:	e3400003 	movt	r0, #3
   1c9c4:	e3a020bf 	mov	r2, #191	; 0xbf
   1c9c8:	eb002169 	bl	24f74 <assertion_failed>

0001c9cc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1c9cc:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1c9d0:	e35c0000 	cmp	ip, #0
   1c9d4:	ba00002e 	blt	1ca94 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xc8>
   1c9d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c9dc:	e1a09003 	mov	r9, r3
   1c9e0:	e1a08002 	mov	r8, r2
   1c9e4:	e24dd008 	sub	sp, sp, #8
   1c9e8:	e1a04001 	mov	r4, r1
   1c9ec:	e1a05000 	mov	r5, r0
   1c9f0:	e280602c 	add	r6, r0, #44	; 0x2c
   1c9f4:	e2807038 	add	r7, r0, #56	; 0x38
   1c9f8:	e3540000 	cmp	r4, #0
   1c9fc:	0a00001e 	beq	1ca7c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb0>
   1ca00:	e28d2004 	add	r2, sp, #4
   1ca04:	e1a01004 	mov	r1, r4
   1ca08:	e1a00006 	mov	r0, r6
   1ca0c:	eb000e02 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1ca10:	e250a000 	subs	sl, r0, #0
   1ca14:	1a00000a 	bne	1ca44 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x78>
   1ca18:	e3580040 	cmp	r8, #64	; 0x40
   1ca1c:	0a000020 	beq	1caa4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd8>
   1ca20:	e1a00007 	mov	r0, r7
   1ca24:	eb002127 	bl	24ec8 <CSynchronizationEvent::Clear()>
   1ca28:	e1a00007 	mov	r0, r7
   1ca2c:	eb002136 	bl	24f0c <CSynchronizationEvent::Wait()>
   1ca30:	e595c044 	ldr	ip, [r5, #68]	; 0x44
   1ca34:	e35c0000 	cmp	ip, #0
   1ca38:	aaffffee 	bge	1c9f8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x2c>
   1ca3c:	e585a044 	str	sl, [r5, #68]	; 0x44
   1ca40:	ea00000a 	b	1ca70 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1ca44:	e59d4004 	ldr	r4, [sp, #4]
   1ca48:	e3540000 	cmp	r4, #0
   1ca4c:	0a00001d 	beq	1cac8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xfc>
   1ca50:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1ca54:	e3590000 	cmp	r9, #0
   1ca58:	13530000 	cmpne	r3, #0
   1ca5c:	1a000012 	bne	1caac <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xe0>
   1ca60:	e1a00004 	mov	r0, r4
   1ca64:	e3a01006 	mov	r1, #6
   1ca68:	eb003d2e 	bl	2bf28 <operator delete(void*, unsigned int)>
   1ca6c:	e1a0c00a 	mov	ip, sl
   1ca70:	e1a0000c 	mov	r0, ip
   1ca74:	e28dd008 	add	sp, sp, #8
   1ca78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ca7c:	e3051730 	movw	r1, #22320	; 0x5730
   1ca80:	e3401003 	movt	r1, #3
   1ca84:	e3020270 	movw	r0, #8816	; 0x2270
   1ca88:	e3400003 	movt	r0, #3
   1ca8c:	e3a02e11 	mov	r2, #272	; 0x110
   1ca90:	eb002137 	bl	24f74 <assertion_failed>
   1ca94:	e3a03000 	mov	r3, #0
   1ca98:	e5803044 	str	r3, [r0, #68]	; 0x44
   1ca9c:	e1a0000c 	mov	r0, ip
   1caa0:	e12fff1e 	bx	lr
   1caa4:	e1a0c00a 	mov	ip, sl
   1caa8:	eafffff0 	b	1ca70 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1caac:	e1a00009 	mov	r0, r9
   1cab0:	e1a01004 	mov	r1, r4
   1cab4:	eb000c88 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1cab8:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1cabc:	e1d430b4 	ldrh	r3, [r4, #4]
   1cac0:	e1c230b0 	strh	r3, [r2]
   1cac4:	eaffffe5 	b	1ca60 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x94>
   1cac8:	e3051730 	movw	r1, #22320	; 0x5730
   1cacc:	e3401003 	movt	r1, #3
   1cad0:	e30500d4 	movw	r0, #20692	; 0x50d4
   1cad4:	e3400003 	movt	r0, #3
   1cad8:	e3a02f4a 	mov	r2, #296	; 0x128
   1cadc:	eb002124 	bl	24f74 <assertion_failed>

0001cae0 <CUDPConnection::Connect()>:
   1cae0:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1cae4:	e3530000 	cmp	r3, #0
   1cae8:	0a000001 	beq	1caf4 <CUDPConnection::Connect()+0x14>
   1caec:	e3a00000 	mov	r0, #0
   1caf0:	e12fff1e 	bx	lr
   1caf4:	e3051730 	movw	r1, #22320	; 0x5730
   1caf8:	e3401003 	movt	r1, #3
   1cafc:	e3050744 	movw	r0, #22340	; 0x5744
   1cb00:	e3400003 	movt	r0, #3
   1cb04:	e92d4010 	push	{r4, lr}
   1cb08:	e3a02049 	mov	r2, #73	; 0x49
   1cb0c:	eb002118 	bl	24f74 <assertion_failed>

0001cb10 <CUDPConnection::~CUDPConnection()>:
   1cb10:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1cb14:	e59f2048 	ldr	r2, [pc, #72]	; 1cb64 <CUDPConnection::~CUDPConnection()+0x54>
   1cb18:	e92d4010 	push	{r4, lr}
   1cb1c:	e3530000 	cmp	r3, #0
   1cb20:	e5802000 	str	r2, [r0]
   1cb24:	1a000008 	bne	1cb4c <CUDPConnection::~CUDPConnection()+0x3c>
   1cb28:	e1a04000 	mov	r4, r0
   1cb2c:	e2800038 	add	r0, r0, #56	; 0x38
   1cb30:	eb0020d8 	bl	24e98 <CSynchronizationEvent::~CSynchronizationEvent()>
   1cb34:	e284002c 	add	r0, r4, #44	; 0x2c
   1cb38:	eb000d67 	bl	200dc <CNetQueue::~CNetQueue()>
   1cb3c:	e1a00004 	mov	r0, r4
   1cb40:	ebfffe45 	bl	1c45c <CNetConnection::~CNetConnection()>
   1cb44:	e1a00004 	mov	r0, r4
   1cb48:	e8bd8010 	pop	{r4, pc}
   1cb4c:	e3051730 	movw	r1, #22320	; 0x5730
   1cb50:	e3401003 	movt	r1, #3
   1cb54:	e305074c 	movw	r0, #22348	; 0x574c
   1cb58:	e3400003 	movt	r0, #3
   1cb5c:	e3a02044 	mov	r2, #68	; 0x44
   1cb60:	eb002103 	bl	24f74 <assertion_failed>
   1cb64:	000356f4 	.word	0x000356f4

0001cb68 <CUDPConnection::~CUDPConnection()>:
   1cb68:	e92d4010 	push	{r4, lr}
   1cb6c:	e1a04000 	mov	r4, r0
   1cb70:	ebffffe6 	bl	1cb10 <CUDPConnection::~CUDPConnection()>
   1cb74:	e1a00004 	mov	r0, r4
   1cb78:	e3a01048 	mov	r1, #72	; 0x48
   1cb7c:	eb003ce9 	bl	2bf28 <operator delete(void*, unsigned int)>
   1cb80:	e1a00004 	mov	r0, r4
   1cb84:	e8bd8010 	pop	{r4, pc}

0001cb88 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1cb88:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cb8c:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1cb90:	e35c0011 	cmp	ip, #17
   1cb94:	0a000001 	beq	1cba0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1cb98:	e3a00000 	mov	r0, #0
   1cb9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cba0:	e3520008 	cmp	r2, #8
   1cba4:	9a00005b 	bls	1cd18 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1cba8:	e1d1c0b2 	ldrh	ip, [r1, #2]
   1cbac:	e1d0e1b6 	ldrh	lr, [r0, #22]
   1cbb0:	e6bfcfbc 	rev16	ip, ip
   1cbb4:	e6ffc07c 	uxth	ip, ip
   1cbb8:	e15e000c 	cmp	lr, ip
   1cbbc:	1afffff5 	bne	1cb98 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1cbc0:	e1a06003 	mov	r6, r3
   1cbc4:	e5903004 	ldr	r3, [r0, #4]
   1cbc8:	e1a05002 	mov	r5, r2
   1cbcc:	e1a04001 	mov	r4, r1
   1cbd0:	e1a07000 	mov	r7, r0
   1cbd4:	e3530000 	cmp	r3, #0
   1cbd8:	0a000050 	beq	1cd20 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   1cbdc:	e1d180b0 	ldrh	r8, [r1]
   1cbe0:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1cbe4:	e6bf8fb8 	rev16	r8, r8
   1cbe8:	e6ff2078 	uxth	r2, r8
   1cbec:	e3530000 	cmp	r3, #0
   1cbf0:	0a000013 	beq	1cc44 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1cbf4:	e1d031b4 	ldrh	r3, [r0, #20]
   1cbf8:	e1530002 	cmp	r3, r2
   1cbfc:	1affffe5 	bne	1cb98 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1cc00:	e280900c 	add	r9, r0, #12
   1cc04:	e1a01006 	mov	r1, r6
   1cc08:	e1a00009 	mov	r0, r9
   1cc0c:	eb000bd8 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   1cc10:	e3500000 	cmp	r0, #0
   1cc14:	0a00000a 	beq	1cc44 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1cc18:	e1a00009 	mov	r0, r9
   1cc1c:	eb000c95 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   1cc20:	e3500000 	cmp	r0, #0
   1cc24:	1a000006 	bne	1cc44 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   1cc28:	e5970004 	ldr	r0, [r7, #4]
   1cc2c:	eb000b4e 	bl	1f96c <CNetConfig::GetBroadcastAddress() const>
   1cc30:	e1a01000 	mov	r1, r0
   1cc34:	e1a00009 	mov	r0, r9
   1cc38:	eb000bcd 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   1cc3c:	e3500000 	cmp	r0, #0
   1cc40:	1affffd4 	bne	1cb98 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1cc44:	e1d430b4 	ldrh	r3, [r4, #4]
   1cc48:	e6bf3fb3 	rev16	r3, r3
   1cc4c:	e6ff3073 	uxth	r3, r3
   1cc50:	e1550003 	cmp	r5, r3
   1cc54:	3a00002f 	bcc	1cd18 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1cc58:	e1d430b6 	ldrh	r3, [r4, #6]
   1cc5c:	e3530000 	cmp	r3, #0
   1cc60:	1a00001f 	bne	1cce4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x15c>
   1cc64:	e5d73040 	ldrb	r3, [r7, #64]	; 0x40
   1cc68:	e3530000 	cmp	r3, #0
   1cc6c:	1a00000c 	bne	1cca4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x11c>
   1cc70:	e59d0020 	ldr	r0, [sp, #32]
   1cc74:	eb000c7f 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   1cc78:	e3500000 	cmp	r0, #0
   1cc7c:	0a000001 	beq	1cc88 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x100>
   1cc80:	e3a00001 	mov	r0, #1
   1cc84:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc88:	e5970004 	ldr	r0, [r7, #4]
   1cc8c:	eb000b36 	bl	1f96c <CNetConfig::GetBroadcastAddress() const>
   1cc90:	e1a01000 	mov	r1, r0
   1cc94:	e59d0020 	ldr	r0, [sp, #32]
   1cc98:	eb000b9c 	bl	1fb10 <CIPAddress::operator==(CIPAddress const&) const>
   1cc9c:	e3500000 	cmp	r0, #0
   1cca0:	1afffff6 	bne	1cc80 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xf8>
   1cca4:	e3a00006 	mov	r0, #6
   1cca8:	eb003c90 	bl	2bef0 <operator new(unsigned int)>
   1ccac:	e1a09000 	mov	r9, r0
   1ccb0:	e1a01000 	mov	r1, r0
   1ccb4:	e1a00006 	mov	r0, r6
   1ccb8:	eb000c48 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   1ccbc:	e1a03009 	mov	r3, r9
   1ccc0:	e2452008 	sub	r2, r5, #8
   1ccc4:	e2841008 	add	r1, r4, #8
   1ccc8:	e287002c 	add	r0, r7, #44	; 0x2c
   1cccc:	e1c980b4 	strh	r8, [r9, #4]
   1ccd0:	eb000d06 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ccd4:	e2870038 	add	r0, r7, #56	; 0x38
   1ccd8:	eb00207d 	bl	24ed4 <CSynchronizationEvent::Set()>
   1ccdc:	e3a00001 	mov	r0, #1
   1cce0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cce4:	e287901c 	add	r9, r7, #28
   1cce8:	e1a01006 	mov	r1, r6
   1ccec:	e1a00009 	mov	r0, r9
   1ccf0:	eb000db0 	bl	203b8 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1ccf4:	e59d1020 	ldr	r1, [sp, #32]
   1ccf8:	e1a00009 	mov	r0, r9
   1ccfc:	eb000db1 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1cd00:	e1a02005 	mov	r2, r5
   1cd04:	e1a01004 	mov	r1, r4
   1cd08:	e1a00009 	mov	r0, r9
   1cd0c:	eb000ddb 	bl	20480 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1cd10:	e3500000 	cmp	r0, #0
   1cd14:	0affffd2 	beq	1cc64 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdc>
   1cd18:	e3e00000 	mvn	r0, #0
   1cd1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cd20:	e3051730 	movw	r1, #22320	; 0x5730
   1cd24:	e3401003 	movt	r1, #3
   1cd28:	e3050058 	movw	r0, #20568	; 0x5058
   1cd2c:	e3400003 	movt	r0, #3
   1cd30:	e300215e 	movw	r2, #350	; 0x15e
   1cd34:	eb00208e 	bl	24f74 <assertion_failed>

0001cd38 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1cd38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1cd3c:	e59dc020 	ldr	ip, [sp, #32]
   1cd40:	e1dd71b8 	ldrh	r7, [sp, #24]
   1cd44:	e35c0011 	cmp	ip, #17
   1cd48:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1cd4c:	0a000001 	beq	1cd58 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1cd50:	e3a00000 	mov	r0, #0
   1cd54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1cd58:	e1d011b6 	ldrh	r1, [r0, #22]
   1cd5c:	e151000c 	cmp	r1, ip
   1cd60:	1afffffa 	bne	1cd50 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1cd64:	e1a04000 	mov	r4, r0
   1cd68:	e5900004 	ldr	r0, [r0, #4]
   1cd6c:	e1a05003 	mov	r5, r3
   1cd70:	e1a06002 	mov	r6, r2
   1cd74:	e3500000 	cmp	r0, #0
   1cd78:	0a000016 	beq	1cdd8 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1cd7c:	eb000af0 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1cd80:	e1a01000 	mov	r1, r0
   1cd84:	e1a00005 	mov	r0, r5
   1cd88:	eb000b79 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   1cd8c:	e3500000 	cmp	r0, #0
   1cd90:	1affffee 	bne	1cd50 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1cd94:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1cd98:	e3530000 	cmp	r3, #0
   1cd9c:	0a000007 	beq	1cdc0 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1cda0:	e1d431b4 	ldrh	r3, [r4, #20]
   1cda4:	e1530007 	cmp	r3, r7
   1cda8:	1affffe8 	bne	1cd50 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1cdac:	e1a01006 	mov	r1, r6
   1cdb0:	e284000c 	add	r0, r4, #12
   1cdb4:	eb000b6e 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   1cdb8:	e3500000 	cmp	r0, #0
   1cdbc:	1affffe3 	bne	1cd50 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1cdc0:	e3e03000 	mvn	r3, #0
   1cdc4:	e2840038 	add	r0, r4, #56	; 0x38
   1cdc8:	e5843044 	str	r3, [r4, #68]	; 0x44
   1cdcc:	eb002040 	bl	24ed4 <CSynchronizationEvent::Set()>
   1cdd0:	e3a00001 	mov	r0, #1
   1cdd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1cdd8:	e3051730 	movw	r1, #22320	; 0x5730
   1cddc:	e3401003 	movt	r1, #3
   1cde0:	e3050058 	movw	r0, #20568	; 0x5058
   1cde4:	e3400003 	movt	r0, #3
   1cde8:	e30021a7 	movw	r2, #423	; 0x1a7
   1cdec:	eb002060 	bl	24f74 <assertion_failed>

0001cdf0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1cdf0:	e92d4010 	push	{r4, lr}
   1cdf4:	e1a04000 	mov	r4, r0
   1cdf8:	e24dd010 	sub	sp, sp, #16
   1cdfc:	e1ddc1b8 	ldrh	ip, [sp, #24]
   1ce00:	e58dc000 	str	ip, [sp]
   1ce04:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1ce08:	e58dc004 	str	ip, [sp, #4]
   1ce0c:	e3a0c011 	mov	ip, #17
   1ce10:	e58dc008 	str	ip, [sp, #8]
   1ce14:	ebfffd3d 	bl	1c310 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1ce18:	e59f3038 	ldr	r3, [pc, #56]	; 1ce58 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1ce1c:	e5843000 	str	r3, [r4]
   1ce20:	e284002c 	add	r0, r4, #44	; 0x2c
   1ce24:	e3a03001 	mov	r3, #1
   1ce28:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1ce2c:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1ce30:	eb000c70 	bl	1fff8 <CNetQueue::CNetQueue()>
   1ce34:	e2840038 	add	r0, r4, #56	; 0x38
   1ce38:	e3a01000 	mov	r1, #0
   1ce3c:	eb002011 	bl	24e88 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1ce40:	e3a03000 	mov	r3, #0
   1ce44:	e1a00004 	mov	r0, r4
   1ce48:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   1ce4c:	e5843044 	str	r3, [r4, #68]	; 0x44
   1ce50:	e28dd010 	add	sp, sp, #16
   1ce54:	e8bd8010 	pop	{r4, pc}
   1ce58:	000356f4 	.word	0x000356f4

0001ce5c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1ce5c:	e92d4030 	push	{r4, r5, lr}
   1ce60:	e1a04000 	mov	r4, r0
   1ce64:	e3a0c011 	mov	ip, #17
   1ce68:	e24dd00c 	sub	sp, sp, #12
   1ce6c:	e3a05000 	mov	r5, #0
   1ce70:	e58dc000 	str	ip, [sp]
   1ce74:	ebfffd51 	bl	1c3c0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1ce78:	e59f3034 	ldr	r3, [pc, #52]	; 1ceb4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1ce7c:	e5843000 	str	r3, [r4]
   1ce80:	e284002c 	add	r0, r4, #44	; 0x2c
   1ce84:	e3a03001 	mov	r3, #1
   1ce88:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1ce8c:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1ce90:	eb000c58 	bl	1fff8 <CNetQueue::CNetQueue()>
   1ce94:	e1a01005 	mov	r1, r5
   1ce98:	e2840038 	add	r0, r4, #56	; 0x38
   1ce9c:	eb001ff9 	bl	24e88 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1cea0:	e1a00004 	mov	r0, r4
   1cea4:	e5c45040 	strb	r5, [r4, #64]	; 0x40
   1cea8:	e5845044 	str	r5, [r4, #68]	; 0x44
   1ceac:	e28dd00c 	add	sp, sp, #12
   1ceb0:	e8bd8030 	pop	{r4, r5, pc}
   1ceb4:	000356f4 	.word	0x000356f4

0001ceb8 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1ceb8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1cebc:	e590c000 	ldr	ip, [r0]
   1cec0:	e59ce014 	ldr	lr, [ip, #20]
   1cec4:	e1a0c00e 	mov	ip, lr
   1cec8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1cecc:	e12fff1c 	bx	ip

0001ced0 <CTCPConnection::SetOptionBroadcast(bool)>:
   1ced0:	e3a00000 	mov	r0, #0
   1ced4:	e12fff1e 	bx	lr

0001ced8 <CTCPConnection::IsConnected() const>:
   1ced8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1cedc:	e3530002 	cmp	r3, #2
   1cee0:	9a000003 	bls	1cef4 <CTCPConnection::IsConnected() const+0x1c>
   1cee4:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1cee8:	e250000a 	subs	r0, r0, #10
   1ceec:	13a00001 	movne	r0, #1
   1cef0:	e12fff1e 	bx	lr
   1cef4:	e3a00000 	mov	r0, #0
   1cef8:	e12fff1e 	bx	lr

0001cefc <CTCPConnection::IsTerminated() const>:
   1cefc:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1cf00:	e16f0f10 	clz	r0, r0
   1cf04:	e1a002a0 	lsr	r0, r0, #5
   1cf08:	e12fff1e 	bx	lr

0001cf0c <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1cf0c:	e92d4070 	push	{r4, r5, r6, lr}
   1cf10:	e1a04000 	mov	r4, r0
   1cf14:	e1a06003 	mov	r6, r3
   1cf18:	e590c000 	ldr	ip, [r0]
   1cf1c:	e59c5018 	ldr	r5, [ip, #24]
   1cf20:	e12fff35 	blx	r5
   1cf24:	e3500000 	cmp	r0, #0
   1cf28:	d8bd8070 	pople	{r4, r5, r6, pc}
   1cf2c:	e59d3010 	ldr	r3, [sp, #16]
   1cf30:	e2930000 	adds	r0, r3, #0
   1cf34:	13a00001 	movne	r0, #1
   1cf38:	e3560000 	cmp	r6, #0
   1cf3c:	03a00000 	moveq	r0, #0
   1cf40:	e3500000 	cmp	r0, #0
   1cf44:	08bd8070 	popeq	{r4, r5, r6, pc}
   1cf48:	e1a00006 	mov	r0, r6
   1cf4c:	e284100c 	add	r1, r4, #12
   1cf50:	eb000b76 	bl	1fd30 <CIPAddress::Set(CIPAddress const&)>
   1cf54:	e59d2010 	ldr	r2, [sp, #16]
   1cf58:	e1d431b4 	ldrh	r3, [r4, #20]
   1cf5c:	e3a00000 	mov	r0, #0
   1cf60:	e1c230b0 	strh	r3, [r2]
   1cf64:	e8bd8070 	pop	{r4, r5, r6, pc}

0001cf68 <CTCPConnection::Send(void const*, unsigned int, int)>:
   1cf68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cf6c:	e1a09003 	mov	r9, r3
   1cf70:	e3d93040 	bics	r3, r9, #64	; 0x40
   1cf74:	1a000025 	bne	1d010 <CTCPConnection::Send(void const*, unsigned int, int)+0xa8>
   1cf78:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1cf7c:	e1a08000 	mov	r8, r0
   1cf80:	e3530000 	cmp	r3, #0
   1cf84:	ba00002b 	blt	1d038 <CTCPConnection::Send(void const*, unsigned int, int)+0xd0>
   1cf88:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1cf8c:	e1a04001 	mov	r4, r1
   1cf90:	e1a06002 	mov	r6, r2
   1cf94:	e6ef3073 	uxtb	r3, r3
   1cf98:	e353000a 	cmp	r3, #10
   1cf9c:	9a000017 	bls	1d000 <CTCPConnection::Send(void const*, unsigned int, int)+0x98>
   1cfa0:	e3540000 	cmp	r4, #0
   1cfa4:	0a00002a 	beq	1d054 <CTCPConnection::Send(void const*, unsigned int, int)+0xec>
   1cfa8:	e3560d19 	cmp	r6, #1600	; 0x640
   1cfac:	9a000023 	bls	1d040 <CTCPConnection::Send(void const*, unsigned int, int)+0xd8>
   1cfb0:	e2887030 	add	r7, r8, #48	; 0x30
   1cfb4:	e1a05006 	mov	r5, r6
   1cfb8:	e3a02d19 	mov	r2, #1600	; 0x640
   1cfbc:	e1a01004 	mov	r1, r4
   1cfc0:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1cfc4:	e3a03000 	mov	r3, #0
   1cfc8:	e1a00007 	mov	r0, r7
   1cfcc:	e0844002 	add	r4, r4, r2
   1cfd0:	eb000c46 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cfd4:	e3550d19 	cmp	r5, #1600	; 0x640
   1cfd8:	8afffff6 	bhi	1cfb8 <CTCPConnection::Send(void const*, unsigned int, int)+0x50>
   1cfdc:	e1a02005 	mov	r2, r5
   1cfe0:	e1a01004 	mov	r1, r4
   1cfe4:	e1a00007 	mov	r0, r7
   1cfe8:	e3a03000 	mov	r3, #0
   1cfec:	eb000c3f 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cff0:	e3190040 	tst	r9, #64	; 0x40
   1cff4:	0a000007 	beq	1d018 <CTCPConnection::Send(void const*, unsigned int, int)+0xb0>
   1cff8:	e1a00006 	mov	r0, r6
   1cffc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d000:	e3a01001 	mov	r1, #1
   1d004:	e3002763 	movw	r2, #1891	; 0x763
   1d008:	e0123311 	ands	r3, r2, r1, lsl r3
   1d00c:	0affffe3 	beq	1cfa0 <CTCPConnection::Send(void const*, unsigned int, int)+0x38>
   1d010:	e3e00000 	mvn	r0, #0
   1d014:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d018:	e2884068 	add	r4, r8, #104	; 0x68
   1d01c:	e1a00004 	mov	r0, r4
   1d020:	eb001fa8 	bl	24ec8 <CSynchronizationEvent::Clear()>
   1d024:	e1a00004 	mov	r0, r4
   1d028:	eb001fb7 	bl	24f0c <CSynchronizationEvent::Wait()>
   1d02c:	e598302c 	ldr	r3, [r8, #44]	; 0x2c
   1d030:	e3530000 	cmp	r3, #0
   1d034:	aaffffef 	bge	1cff8 <CTCPConnection::Send(void const*, unsigned int, int)+0x90>
   1d038:	e598002c 	ldr	r0, [r8, #44]	; 0x2c
   1d03c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d040:	e3560000 	cmp	r6, #0
   1d044:	0affffe9 	beq	1cff0 <CTCPConnection::Send(void const*, unsigned int, int)+0x88>
   1d048:	e1a05006 	mov	r5, r6
   1d04c:	e2887030 	add	r7, r8, #48	; 0x30
   1d050:	eaffffe1 	b	1cfdc <CTCPConnection::Send(void const*, unsigned int, int)+0x74>
   1d054:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d058:	e3401003 	movt	r1, #3
   1d05c:	e30500d4 	movw	r0, #20692	; 0x50d4
   1d060:	e3400003 	movt	r0, #3
   1d064:	e3a02f5f 	mov	r2, #380	; 0x17c
   1d068:	eb001fc1 	bl	24f74 <assertion_failed>

0001d06c <CTCPConnection::Receive(void*, int)>:
   1d06c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d070:	e3d2b040 	bics	fp, r2, #64	; 0x40
   1d074:	1a000026 	bne	1d114 <CTCPConnection::Receive(void*, int)+0xa8>
   1d078:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1d07c:	e3530000 	cmp	r3, #0
   1d080:	b590b02c 	ldrlt	fp, [r0, #44]	; 0x2c
   1d084:	ba00001d 	blt	1d100 <CTCPConnection::Receive(void*, int)+0x94>
   1d088:	e1a07001 	mov	r7, r1
   1d08c:	e1a04000 	mov	r4, r0
   1d090:	e1a06002 	mov	r6, r2
   1d094:	e280803c 	add	r8, r0, #60	; 0x3c
   1d098:	e3a0a001 	mov	sl, #1
   1d09c:	e30097e3 	movw	r9, #2019	; 0x7e3
   1d0a0:	ea00000d 	b	1d0dc <CTCPConnection::Receive(void*, int)+0x70>
   1d0a4:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1d0a8:	e6ef3073 	uxtb	r3, r3
   1d0ac:	e353000a 	cmp	r3, #10
   1d0b0:	8a000001 	bhi	1d0bc <CTCPConnection::Receive(void*, int)+0x50>
   1d0b4:	e019331a 	ands	r3, r9, sl, lsl r3
   1d0b8:	1a000015 	bne	1d114 <CTCPConnection::Receive(void*, int)+0xa8>
   1d0bc:	e3160040 	tst	r6, #64	; 0x40
   1d0c0:	1a00000e 	bne	1d100 <CTCPConnection::Receive(void*, int)+0x94>
   1d0c4:	eb001f7f 	bl	24ec8 <CSynchronizationEvent::Clear()>
   1d0c8:	e1a00005 	mov	r0, r5
   1d0cc:	eb001f8e 	bl	24f0c <CSynchronizationEvent::Wait()>
   1d0d0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d0d4:	e3530000 	cmp	r3, #0
   1d0d8:	ba00000a 	blt	1d108 <CTCPConnection::Receive(void*, int)+0x9c>
   1d0dc:	e2845068 	add	r5, r4, #104	; 0x68
   1d0e0:	e3a02000 	mov	r2, #0
   1d0e4:	e1a01007 	mov	r1, r7
   1d0e8:	e1a00008 	mov	r0, r8
   1d0ec:	eb000c4a 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1d0f0:	e2503000 	subs	r3, r0, #0
   1d0f4:	e1a00005 	mov	r0, r5
   1d0f8:	0affffe9 	beq	1d0a4 <CTCPConnection::Receive(void*, int)+0x38>
   1d0fc:	e1a0b003 	mov	fp, r3
   1d100:	e1a0000b 	mov	r0, fp
   1d104:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d108:	e594b02c 	ldr	fp, [r4, #44]	; 0x2c
   1d10c:	e1a0000b 	mov	r0, fp
   1d110:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d114:	e3e0b000 	mvn	fp, #0
   1d118:	e1a0000b 	mov	r0, fp
   1d11c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d120 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1d120:	e92d4070 	push	{r4, r5, r6, lr}
   1d124:	e1a04000 	mov	r4, r0
   1d128:	e3a0c006 	mov	ip, #6
   1d12c:	e24dd008 	sub	sp, sp, #8
   1d130:	e3a05000 	mov	r5, #0
   1d134:	e3a06001 	mov	r6, #1
   1d138:	e58dc000 	str	ip, [sp]
   1d13c:	ebfffc9f 	bl	1c3c0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1d140:	e59f30a8 	ldr	r3, [pc, #168]	; 1d1f0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd0>
   1d144:	e5843000 	str	r3, [r4]
   1d148:	e2840030 	add	r0, r4, #48	; 0x30
   1d14c:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   1d150:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   1d154:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1d158:	eb000ba6 	bl	1fff8 <CNetQueue::CNetQueue()>
   1d15c:	e284003c 	add	r0, r4, #60	; 0x3c
   1d160:	eb000ba4 	bl	1fff8 <CNetQueue::CNetQueue()>
   1d164:	e2840048 	add	r0, r4, #72	; 0x48
   1d168:	e3a01801 	mov	r1, #65536	; 0x10000
   1d16c:	eb000766 	bl	1ef0c <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1d170:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1d174:	e1a01005 	mov	r1, r5
   1d178:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1d17c:	e2840068 	add	r0, r4, #104	; 0x68
   1d180:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1d184:	e5845060 	str	r5, [r4, #96]	; 0x60
   1d188:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1d18c:	eb001f3d 	bl	24e88 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1d190:	eb003898 	bl	2b3f8 <CTimer::Get()>
   1d194:	e3033908 	movw	r3, #14600	; 0x3908
   1d198:	e5840070 	str	r0, [r4, #112]	; 0x70
   1d19c:	e3a02f86 	mov	r2, #536	; 0x218
   1d1a0:	e584308c 	str	r3, [r4, #140]	; 0x8c
   1d1a4:	e28400b0 	add	r0, r4, #176	; 0xb0
   1d1a8:	e1c42abc 	strh	r2, [r4, #172]	; 0xac
   1d1ac:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1d1b0:	e5846080 	str	r6, [r4, #128]	; 0x80
   1d1b4:	e1c459b0 	strh	r5, [r4, #144]	; 0x90
   1d1b8:	e58450a0 	str	r5, [r4, #160]	; 0xa0
   1d1bc:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1d1c0:	eb000846 	bl	1f2e0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1d1c4:	e309340c 	movw	r3, #37900	; 0x940c
   1d1c8:	e3403003 	movt	r3, #3
   1d1cc:	e1a00004 	mov	r0, r4
   1d1d0:	e5845074 	str	r5, [r4, #116]	; 0x74
   1d1d4:	e5845078 	str	r5, [r4, #120]	; 0x78
   1d1d8:	e5932000 	ldr	r2, [r3]
   1d1dc:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1d1e0:	e0822006 	add	r2, r2, r6
   1d1e4:	e5832000 	str	r2, [r3]
   1d1e8:	e28dd008 	add	sp, sp, #8
   1d1ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d1f0:	00035760 	.word	0x00035760

0001d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1d1f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d1f8:	e2016c02 	and	r6, r1, #512	; 0x200
   1d1fc:	e3560000 	cmp	r6, #0
   1d200:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1d204:	e1a04000 	mov	r4, r0
   1d208:	e24dd008 	sub	sp, sp, #8
   1d20c:	13a00018 	movne	r0, #24
   1d210:	03a00014 	moveq	r0, #20
   1d214:	13a08006 	movne	r8, #6
   1d218:	03a08005 	moveq	r8, #5
   1d21c:	e59dc664 	ldr	ip, [sp, #1636]	; 0x664
   1d220:	e090500c 	adds	r5, r0, ip
   1d224:	2a000042 	bcs	1d334 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   1d228:	e1d4e1b4 	ldrh	lr, [r4, #20]
   1d22c:	e6bf2f32 	rev	r2, r2
   1d230:	e1d471b6 	ldrh	r7, [r4, #22]
   1d234:	e58d200c 	str	r2, [sp, #12]
   1d238:	e6bf2fbe 	rev16	r2, lr
   1d23c:	e6bf7fb7 	rev16	r7, r7
   1d240:	e1cd20ba 	strh	r2, [sp, #10]
   1d244:	e1cd70b8 	strh	r7, [sp, #8]
   1d248:	e211ea01 	ands	lr, r1, #4096	; 0x1000
   1d24c:	1a00002a 	bne	1d2fc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x108>
   1d250:	e1d439b0 	ldrh	r3, [r4, #144]	; 0x90
   1d254:	e3560000 	cmp	r6, #0
   1d258:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1d25c:	e1811208 	orr	r1, r1, r8, lsl #4
   1d260:	e6bf3fb3 	rev16	r3, r3
   1d264:	e1cd11b4 	strh	r1, [sp, #20]
   1d268:	e1cd31ba 	strh	r3, [sp, #26]
   1d26c:	e6bf2fb2 	rev16	r2, r2
   1d270:	13003402 	movwne	r3, #1026	; 0x402
   1d274:	e58de010 	str	lr, [sp, #16]
   1d278:	134b3405 	movtne	r3, #46085	; 0xb405
   1d27c:	e1cd21b6 	strh	r2, [sp, #22]
   1d280:	158d301c 	strne	r3, [sp, #28]
   1d284:	e35c0000 	cmp	ip, #0
   1d288:	0a000007 	beq	1d2ac <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb8>
   1d28c:	e59d3660 	ldr	r3, [sp, #1632]	; 0x660
   1d290:	e3530000 	cmp	r3, #0
   1d294:	0a000020 	beq	1d31c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x128>
   1d298:	e28d3008 	add	r3, sp, #8
   1d29c:	e1a0200c 	mov	r2, ip
   1d2a0:	e0830000 	add	r0, r3, r0
   1d2a4:	e59d1660 	ldr	r1, [sp, #1632]	; 0x660
   1d2a8:	eb003a06 	bl	2bac8 <memcpy>
   1d2ac:	e1a02005 	mov	r2, r5
   1d2b0:	e28d1008 	add	r1, sp, #8
   1d2b4:	e284001c 	add	r0, r4, #28
   1d2b8:	e3a03000 	mov	r3, #0
   1d2bc:	e1cd31b8 	strh	r3, [sp, #24]
   1d2c0:	eb000c6e 	bl	20480 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d2c4:	e594c008 	ldr	ip, [r4, #8]
   1d2c8:	e1cd01b8 	strh	r0, [sp, #24]
   1d2cc:	e35c0000 	cmp	ip, #0
   1d2d0:	0a00000b 	beq	1d304 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x110>
   1d2d4:	e1a03005 	mov	r3, r5
   1d2d8:	e28d2008 	add	r2, sp, #8
   1d2dc:	e284100c 	add	r1, r4, #12
   1d2e0:	e1a0000c 	mov	r0, ip
   1d2e4:	e3a0c006 	mov	ip, #6
   1d2e8:	e58dc000 	str	ip, [sp]
   1d2ec:	ebfff2c8 	bl	19e14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d2f0:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1d2f4:	e28dd008 	add	sp, sp, #8
   1d2f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d2fc:	e6bfef33 	rev	lr, r3
   1d300:	eaffffd2 	b	1d250 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x5c>
   1d304:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d308:	e3401003 	movt	r1, #3
   1d30c:	e305006c 	movw	r0, #20588	; 0x506c
   1d310:	e3400003 	movt	r0, #3
   1d314:	e300257d 	movw	r2, #1405	; 0x57d
   1d318:	eb001f15 	bl	24f74 <assertion_failed>
   1d31c:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d320:	e3401003 	movt	r1, #3
   1d324:	e30500d4 	movw	r0, #20692	; 0x50d4
   1d328:	e3400003 	movt	r0, #3
   1d32c:	e3002567 	movw	r2, #1383	; 0x567
   1d330:	eb001f0f 	bl	24f74 <assertion_failed>
   1d334:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d338:	e3401003 	movt	r1, #3
   1d33c:	e30507e0 	movw	r0, #22496	; 0x57e0
   1d340:	e3400003 	movt	r0, #3
   1d344:	e300254d 	movw	r2, #1357	; 0x54d
   1d348:	eb001f09 	bl	24f74 <assertion_failed>

0001d34c <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1d34c:	e92d4010 	push	{r4, lr}
   1d350:	e3510000 	cmp	r1, #0
   1d354:	0a000023 	beq	1d3e8 <CTCPConnection::ScanOptions(TTCPHeader*)+0x9c>
   1d358:	e1d120bc 	ldrh	r2, [r1, #12]
   1d35c:	e2813014 	add	r3, r1, #20
   1d360:	e300e5c8 	movw	lr, #1480	; 0x5c8
   1d364:	e7e32252 	ubfx	r2, r2, #4, #4
   1d368:	e0811102 	add	r1, r1, r2, lsl #2
   1d36c:	e2832002 	add	r2, r3, #2
   1d370:	e1510002 	cmp	r1, r2
   1d374:	38bd8010 	popcc	{r4, pc}
   1d378:	e5d32000 	ldrb	r2, [r3]
   1d37c:	e3520001 	cmp	r2, #1
   1d380:	0a000007 	beq	1d3a4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x58>
   1d384:	38bd8010 	popcc	{r4, pc}
   1d388:	e3520002 	cmp	r2, #2
   1d38c:	e5d32001 	ldrb	r2, [r3, #1]
   1d390:	1a000001 	bne	1d39c <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1d394:	e3520004 	cmp	r2, #4
   1d398:	0a000003 	beq	1d3ac <CTCPConnection::ScanOptions(TTCPHeader*)+0x60>
   1d39c:	e0833002 	add	r3, r3, r2
   1d3a0:	eafffff1 	b	1d36c <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1d3a4:	e2833001 	add	r3, r3, #1
   1d3a8:	eaffffef 	b	1d36c <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1d3ac:	e283c004 	add	ip, r3, #4
   1d3b0:	e151000c 	cmp	r1, ip
   1d3b4:	3afffff8 	bcc	1d39c <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1d3b8:	e1d3c0b2 	ldrh	ip, [r3, #2]
   1d3bc:	e6bfcfbc 	rev16	ip, ip
   1d3c0:	e6ffc07c 	uxth	ip, ip
   1d3c4:	e28cc014 	add	ip, ip, #20
   1d3c8:	e15c000e 	cmp	ip, lr
   1d3cc:	21a0c00e 	movcs	ip, lr
   1d3d0:	e24cc014 	sub	ip, ip, #20
   1d3d4:	e35c0009 	cmp	ip, #9
   1d3d8:	81c0cabc 	strhhi	ip, [r0, #172]	; 0xac
   1d3dc:	85d32001 	ldrbhi	r2, [r3, #1]
   1d3e0:	e0833002 	add	r3, r3, r2
   1d3e4:	eaffffe0 	b	1d36c <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1d3e8:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d3ec:	e3401003 	movt	r1, #3
   1d3f0:	e3050800 	movw	r0, #22528	; 0x5800
   1d3f4:	e3400003 	movt	r0, #3
   1d3f8:	e3002583 	movw	r2, #1411	; 0x583
   1d3fc:	eb001edc 	bl	24f74 <assertion_failed>

0001d400 <CTCPConnection::CalculateISN()>:
   1d400:	e92d4070 	push	{r4, r5, r6, lr}
   1d404:	e1a05000 	mov	r5, r0
   1d408:	e5900070 	ldr	r0, [r0, #112]	; 0x70
   1d40c:	e3500000 	cmp	r0, #0
   1d410:	0a00000d 	beq	1d44c <CTCPConnection::CalculateISN()+0x4c>
   1d414:	eb003530 	bl	2a8dc <CTimer::GetTime() const>
   1d418:	e1a04000 	mov	r4, r0
   1d41c:	e5950070 	ldr	r0, [r5, #112]	; 0x70
   1d420:	eb003529 	bl	2a8cc <CTimer::GetTicks() const>
   1d424:	e308251f 	movw	r2, #34079	; 0x851f
   1d428:	e34521eb 	movt	r2, #20971	; 0x51eb
   1d42c:	e3a01064 	mov	r1, #100	; 0x64
   1d430:	e3a0c015 	mov	ip, #21
   1d434:	e0832290 	umull	r2, r3, r0, r2
   1d438:	e1a032a3 	lsr	r3, r3, #5
   1d43c:	e0630391 	mls	r3, r1, r3, r0
   1d440:	e0243491 	mla	r4, r1, r4, r3
   1d444:	e000049c 	mul	r0, ip, r4
   1d448:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d44c:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d450:	e3401003 	movt	r1, #3
   1d454:	e30007f4 	movw	r0, #2036	; 0x7f4
   1d458:	e3400003 	movt	r0, #3
   1d45c:	e30025ac 	movw	r2, #1452	; 0x5ac
   1d460:	eb001ec3 	bl	24f74 <assertion_failed>

0001d464 <CTCPConnection::StopTimer(unsigned int)>:
   1d464:	e92d4070 	push	{r4, r5, r6, lr}
   1d468:	e3510002 	cmp	r1, #2
   1d46c:	8a00001c 	bhi	1d4e4 <CTCPConnection::StopTimer(unsigned int)+0x80>
   1d470:	e5903070 	ldr	r3, [r0, #112]	; 0x70
   1d474:	e1a05000 	mov	r5, r0
   1d478:	e3530000 	cmp	r3, #0
   1d47c:	0a00001e 	beq	1d4fc <CTCPConnection::StopTimer(unsigned int)+0x98>
   1d480:	e5900080 	ldr	r0, [r0, #128]	; 0x80
   1d484:	e281401c 	add	r4, r1, #28
   1d488:	e3500000 	cmp	r0, #0
   1d48c:	1a00000d 	bne	1d4c8 <CTCPConnection::StopTimer(unsigned int)+0x64>
   1d490:	e0852104 	add	r2, r5, r4, lsl #2
   1d494:	e5921004 	ldr	r1, [r2, #4]
   1d498:	e3510000 	cmp	r1, #0
   1d49c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d4a0:	e1a00003 	mov	r0, r3
   1d4a4:	eb003652 	bl	2adf4 <CTimer::CancelKernelTimer(unsigned int)>
   1d4a8:	e0851104 	add	r1, r5, r4, lsl #2
   1d4ac:	e3a03000 	mov	r3, #0
   1d4b0:	e5813004 	str	r3, [r1, #4]
   1d4b4:	e5953080 	ldr	r3, [r5, #128]	; 0x80
   1d4b8:	e3530000 	cmp	r3, #0
   1d4bc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d4c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d4c4:	ea003e0d 	b	2cd00 <LeaveCritical>
   1d4c8:	eb003ddf 	bl	2cc4c <EnterCritical>
   1d4cc:	e0853104 	add	r3, r5, r4, lsl #2
   1d4d0:	e5931004 	ldr	r1, [r3, #4]
   1d4d4:	e3510000 	cmp	r1, #0
   1d4d8:	0afffff5 	beq	1d4b4 <CTCPConnection::StopTimer(unsigned int)+0x50>
   1d4dc:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   1d4e0:	eaffffee 	b	1d4a0 <CTCPConnection::StopTimer(unsigned int)+0x3c>
   1d4e4:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d4e8:	e3401003 	movt	r1, #3
   1d4ec:	e3050810 	movw	r0, #22544	; 0x5810
   1d4f0:	e3400003 	movt	r0, #3
   1d4f4:	e30025bf 	movw	r2, #1471	; 0x5bf
   1d4f8:	eb001e9d 	bl	24f74 <assertion_failed>
   1d4fc:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d500:	e3401003 	movt	r1, #3
   1d504:	e30007f4 	movw	r0, #2036	; 0x7f4
   1d508:	e3400003 	movt	r0, #3
   1d50c:	e3a02d17 	mov	r2, #1472	; 0x5c0
   1d510:	eb001e97 	bl	24f74 <assertion_failed>

0001d514 <CTCPConnection::~CTCPConnection()>:
   1d514:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1d518:	e59f30b0 	ldr	r3, [pc, #176]	; 1d5d0 <CTCPConnection::~CTCPConnection()+0xbc>
   1d51c:	e92d4010 	push	{r4, lr}
   1d520:	e21110ff 	ands	r1, r1, #255	; 0xff
   1d524:	e5803000 	str	r3, [r0]
   1d528:	1a00001c 	bne	1d5a0 <CTCPConnection::~CTCPConnection()+0x8c>
   1d52c:	e1a04000 	mov	r4, r0
   1d530:	ebffffcb 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1d534:	e3a01001 	mov	r1, #1
   1d538:	e1a00004 	mov	r0, r4
   1d53c:	ebffffc8 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1d540:	e3a01002 	mov	r1, #2
   1d544:	e1a00004 	mov	r0, r4
   1d548:	ebffffc5 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1d54c:	e309340c 	movw	r3, #37900	; 0x940c
   1d550:	e3403003 	movt	r3, #3
   1d554:	e5932000 	ldr	r2, [r3]
   1d558:	e3520000 	cmp	r2, #0
   1d55c:	0a000015 	beq	1d5b8 <CTCPConnection::~CTCPConnection()+0xa4>
   1d560:	e28400b0 	add	r0, r4, #176	; 0xb0
   1d564:	e2422001 	sub	r2, r2, #1
   1d568:	e5832000 	str	r2, [r3]
   1d56c:	eb000772 	bl	1f33c <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1d570:	e2840068 	add	r0, r4, #104	; 0x68
   1d574:	eb001e47 	bl	24e98 <CSynchronizationEvent::~CSynchronizationEvent()>
   1d578:	e2840048 	add	r0, r4, #72	; 0x48
   1d57c:	eb000676 	bl	1ef5c <CRetransmissionQueue::~CRetransmissionQueue()>
   1d580:	e284003c 	add	r0, r4, #60	; 0x3c
   1d584:	eb000ad4 	bl	200dc <CNetQueue::~CNetQueue()>
   1d588:	e2840030 	add	r0, r4, #48	; 0x30
   1d58c:	eb000ad2 	bl	200dc <CNetQueue::~CNetQueue()>
   1d590:	e1a00004 	mov	r0, r4
   1d594:	ebfffbb0 	bl	1c45c <CNetConnection::~CNetConnection()>
   1d598:	e1a00004 	mov	r0, r4
   1d59c:	e8bd8010 	pop	{r4, pc}
   1d5a0:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d5a4:	e3401003 	movt	r1, #3
   1d5a8:	e305082c 	movw	r0, #22572	; 0x582c
   1d5ac:	e3400003 	movt	r0, #3
   1d5b0:	e3a020d1 	mov	r2, #209	; 0xd1
   1d5b4:	eb001e6e 	bl	24f74 <assertion_failed>
   1d5b8:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d5bc:	e3401003 	movt	r1, #3
   1d5c0:	e3050848 	movw	r0, #22600	; 0x5848
   1d5c4:	e3400003 	movt	r0, #3
   1d5c8:	e3a020d8 	mov	r2, #216	; 0xd8
   1d5cc:	eb001e68 	bl	24f74 <assertion_failed>
   1d5d0:	00035760 	.word	0x00035760

0001d5d4 <CTCPConnection::~CTCPConnection()>:
   1d5d4:	e92d4010 	push	{r4, lr}
   1d5d8:	e1a04000 	mov	r4, r0
   1d5dc:	ebffffcc 	bl	1d514 <CTCPConnection::~CTCPConnection()>
   1d5e0:	e1a00004 	mov	r0, r4
   1d5e4:	e3a010d8 	mov	r1, #216	; 0xd8
   1d5e8:	eb003a4e 	bl	2bf28 <operator delete(void*, unsigned int)>
   1d5ec:	e1a00004 	mov	r0, r4
   1d5f0:	e8bd8010 	pop	{r4, pc}

0001d5f4 <CTCPConnection::Close()>:
   1d5f4:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1d5f8:	e3530000 	cmp	r3, #0
   1d5fc:	ba000020 	blt	1d684 <CTCPConnection::Close()+0x90>
   1d600:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1d604:	e92d4010 	push	{r4, lr}
   1d608:	e1a04000 	mov	r4, r0
   1d60c:	e353000a 	cmp	r3, #10
   1d610:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1d614:	ea000013 	b	1d668 <CTCPConnection::Close()+0x74>
   1d618:	0001d68c 	.word	0x0001d68c
   1d61c:	0001d694 	.word	0x0001d694
   1d620:	0001d694 	.word	0x0001d694
   1d624:	0001d6b4 	.word	0x0001d6b4
   1d628:	0001d6b4 	.word	0x0001d6b4
   1d62c:	0001d668 	.word	0x0001d668
   1d630:	0001d668 	.word	0x0001d668
   1d634:	0001d644 	.word	0x0001d644
   1d638:	0001d68c 	.word	0x0001d68c
   1d63c:	0001d68c 	.word	0x0001d68c
   1d640:	0001d68c 	.word	0x0001d68c
   1d644:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1d648:	e3530000 	cmp	r3, #0
   1d64c:	1a00002a 	bne	1d6fc <CTCPConnection::Close()+0x108>
   1d650:	e3a03005 	mov	r3, #5
   1d654:	e3a02009 	mov	r2, #9
   1d658:	e5803060 	str	r3, [r0, #96]	; 0x60
   1d65c:	e3a03001 	mov	r3, #1
   1d660:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   1d664:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   1d668:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d66c:	e3530000 	cmp	r3, #0
   1d670:	ba000001 	blt	1d67c <CTCPConnection::Close()+0x88>
   1d674:	e3a00000 	mov	r0, #0
   1d678:	e8bd8010 	pop	{r4, pc}
   1d67c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d680:	e8bd8010 	pop	{r4, pc}
   1d684:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d688:	e12fff1e 	bx	lr
   1d68c:	e3e00000 	mvn	r0, #0
   1d690:	e8bd8010 	pop	{r4, pc}
   1d694:	e3a01001 	mov	r1, #1
   1d698:	ebffff71 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1d69c:	e3a03000 	mov	r3, #0
   1d6a0:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1d6a4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d6a8:	e3530000 	cmp	r3, #0
   1d6ac:	aafffff0 	bge	1d674 <CTCPConnection::Close()+0x80>
   1d6b0:	eafffff1 	b	1d67c <CTCPConnection::Close()+0x88>
   1d6b4:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1d6b8:	e3530000 	cmp	r3, #0
   1d6bc:	1a000008 	bne	1d6e4 <CTCPConnection::Close()+0xf0>
   1d6c0:	e3a03005 	mov	r3, #5
   1d6c4:	e3a02001 	mov	r2, #1
   1d6c8:	e5803060 	str	r3, [r0, #96]	; 0x60
   1d6cc:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   1d6d0:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   1d6d4:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d6d8:	e3530000 	cmp	r3, #0
   1d6dc:	aaffffe4 	bge	1d674 <CTCPConnection::Close()+0x80>
   1d6e0:	eaffffe5 	b	1d67c <CTCPConnection::Close()+0x88>
   1d6e4:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d6e8:	e3401003 	movt	r1, #3
   1d6ec:	e305085c 	movw	r0, #22620	; 0x585c
   1d6f0:	e3400003 	movt	r0, #3
   1d6f4:	e3a02f4f 	mov	r2, #316	; 0x13c
   1d6f8:	eb001e1d 	bl	24f74 <assertion_failed>
   1d6fc:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d700:	e3401003 	movt	r1, #3
   1d704:	e305085c 	movw	r0, #22620	; 0x585c
   1d708:	e3400003 	movt	r0, #3
   1d70c:	e3002147 	movw	r2, #327	; 0x147
   1d710:	eb001e17 	bl	24f74 <assertion_failed>

0001d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1d714:	e92d4070 	push	{r4, r5, r6, lr}
   1d718:	e3510002 	cmp	r1, #2
   1d71c:	e24dd008 	sub	sp, sp, #8
   1d720:	8a000013 	bhi	1d774 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x60>
   1d724:	e1a06002 	mov	r6, r2
   1d728:	e3520000 	cmp	r2, #0
   1d72c:	0a000016 	beq	1d78c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x78>
   1d730:	e5903070 	ldr	r3, [r0, #112]	; 0x70
   1d734:	e1a04000 	mov	r4, r0
   1d738:	e3530000 	cmp	r3, #0
   1d73c:	0a000018 	beq	1d7a4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   1d740:	e1a05001 	mov	r5, r1
   1d744:	ebffff46 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1d748:	e5940070 	ldr	r0, [r4, #112]	; 0x70
   1d74c:	e1a01006 	mov	r1, r6
   1d750:	e58d4000 	str	r4, [sp]
   1d754:	e0844105 	add	r4, r4, r5, lsl #2
   1d758:	e1a03005 	mov	r3, r5
   1d75c:	e30e2ec0 	movw	r2, #61120	; 0xeec0
   1d760:	e3402001 	movt	r2, #1
   1d764:	eb003550 	bl	2acac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1d768:	e5840074 	str	r0, [r4, #116]	; 0x74
   1d76c:	e28dd008 	add	sp, sp, #8
   1d770:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d774:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d778:	e3401003 	movt	r1, #3
   1d77c:	e3050810 	movw	r0, #22544	; 0x5810
   1d780:	e3400003 	movt	r0, #3
   1d784:	e30025b4 	movw	r2, #1460	; 0x5b4
   1d788:	eb001df9 	bl	24f74 <assertion_failed>
   1d78c:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d790:	e3401003 	movt	r1, #3
   1d794:	e305086c 	movw	r0, #22636	; 0x586c
   1d798:	e3400003 	movt	r0, #3
   1d79c:	e30025b5 	movw	r2, #1461	; 0x5b5
   1d7a0:	eb001df3 	bl	24f74 <assertion_failed>
   1d7a4:	e30517cc 	movw	r1, #22476	; 0x57cc
   1d7a8:	e3401003 	movt	r1, #3
   1d7ac:	e30007f4 	movw	r0, #2036	; 0x7f4
   1d7b0:	e3400003 	movt	r0, #3
   1d7b4:	e30025b6 	movw	r2, #1462	; 0x5b6
   1d7b8:	eb001ded 	bl	24f74 <assertion_failed>

0001d7bc <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1d7bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1d7c0:	e1a04000 	mov	r4, r0
   1d7c4:	e3a0c006 	mov	ip, #6
   1d7c8:	e24dd014 	sub	sp, sp, #20
   1d7cc:	e28070b0 	add	r7, r0, #176	; 0xb0
   1d7d0:	e3a06001 	mov	r6, #1
   1d7d4:	e1dde2bc 	ldrh	lr, [sp, #44]	; 0x2c
   1d7d8:	e1dd52b8 	ldrh	r5, [sp, #40]	; 0x28
   1d7dc:	e58de004 	str	lr, [sp, #4]
   1d7e0:	e58dc008 	str	ip, [sp, #8]
   1d7e4:	e58d5000 	str	r5, [sp]
   1d7e8:	e3a05000 	mov	r5, #0
   1d7ec:	ebfffac7 	bl	1c310 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1d7f0:	e59f3128 	ldr	r3, [pc, #296]	; 1d920 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x164>
   1d7f4:	e5843000 	str	r3, [r4]
   1d7f8:	e2840030 	add	r0, r4, #48	; 0x30
   1d7fc:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1d800:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   1d804:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1d808:	eb0009fa 	bl	1fff8 <CNetQueue::CNetQueue()>
   1d80c:	e284003c 	add	r0, r4, #60	; 0x3c
   1d810:	eb0009f8 	bl	1fff8 <CNetQueue::CNetQueue()>
   1d814:	e3a01801 	mov	r1, #65536	; 0x10000
   1d818:	e2840048 	add	r0, r4, #72	; 0x48
   1d81c:	eb0005ba 	bl	1ef0c <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1d820:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1d824:	e1a01005 	mov	r1, r5
   1d828:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1d82c:	e2840068 	add	r0, r4, #104	; 0x68
   1d830:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1d834:	e5845060 	str	r5, [r4, #96]	; 0x60
   1d838:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1d83c:	eb001d91 	bl	24e88 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1d840:	eb0036ec 	bl	2b3f8 <CTimer::Get()>
   1d844:	e3033908 	movw	r3, #14600	; 0x3908
   1d848:	e3a02f86 	mov	r2, #536	; 0x218
   1d84c:	e5840070 	str	r0, [r4, #112]	; 0x70
   1d850:	e1c42abc 	strh	r2, [r4, #172]	; 0xac
   1d854:	e1a00007 	mov	r0, r7
   1d858:	e584308c 	str	r3, [r4, #140]	; 0x8c
   1d85c:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1d860:	e5846080 	str	r6, [r4, #128]	; 0x80
   1d864:	e1c459b0 	strh	r5, [r4, #144]	; 0x90
   1d868:	e58450a0 	str	r5, [r4, #160]	; 0xa0
   1d86c:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1d870:	eb00069a 	bl	1f2e0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1d874:	e309340c 	movw	r3, #37900	; 0x940c
   1d878:	e3403003 	movt	r3, #3
   1d87c:	e5845074 	str	r5, [r4, #116]	; 0x74
   1d880:	e1a00004 	mov	r0, r4
   1d884:	e5845078 	str	r5, [r4, #120]	; 0x78
   1d888:	e5932000 	ldr	r2, [r3]
   1d88c:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1d890:	e0822006 	add	r2, r2, r6
   1d894:	e5832000 	str	r2, [r3]
   1d898:	ebfffed8 	bl	1d400 <CTCPConnection::CalculateISN()>
   1d89c:	e1a01000 	mov	r1, r0
   1d8a0:	e584009c 	str	r0, [r4, #156]	; 0x9c
   1d8a4:	e1a00007 	mov	r0, r7
   1d8a8:	eb0006a6 	bl	1f348 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1d8ac:	e594209c 	ldr	r2, [r4, #156]	; 0x9c
   1d8b0:	e1a03005 	mov	r3, r5
   1d8b4:	e58d5004 	str	r5, [sp, #4]
   1d8b8:	e58d5000 	str	r5, [sp]
   1d8bc:	e0821006 	add	r1, r2, r6
   1d8c0:	e5842084 	str	r2, [r4, #132]	; 0x84
   1d8c4:	e1a00004 	mov	r0, r4
   1d8c8:	e5841088 	str	r1, [r4, #136]	; 0x88
   1d8cc:	e3a01c02 	mov	r1, #512	; 0x200
   1d8d0:	ebfffe47 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1d8d4:	e1500005 	cmp	r0, r5
   1d8d8:	0a00000d 	beq	1d914 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x158>
   1d8dc:	e594109c 	ldr	r1, [r4, #156]	; 0x9c
   1d8e0:	e1a02006 	mov	r2, r6
   1d8e4:	e1a00007 	mov	r0, r7
   1d8e8:	eb0006b3 	bl	1f3bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1d8ec:	e3a02002 	mov	r2, #2
   1d8f0:	e3a03005 	mov	r3, #5
   1d8f4:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1d8f8:	e1a00007 	mov	r0, r7
   1d8fc:	e5843060 	str	r3, [r4, #96]	; 0x60
   1d900:	eb00068e 	bl	1f340 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1d904:	e1a01006 	mov	r1, r6
   1d908:	e1a02000 	mov	r2, r0
   1d90c:	e1a00004 	mov	r0, r4
   1d910:	ebffff7f 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1d914:	e1a00004 	mov	r0, r4
   1d918:	e28dd014 	add	sp, sp, #20
   1d91c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1d920:	00035760 	.word	0x00035760

0001d924 <CTCPConnection::Process()>:
   1d924:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1d928:	e1a04000 	mov	r4, r0
   1d92c:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   1d930:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1d934:	e24dd00c 	sub	sp, sp, #12
   1d938:	e3530000 	cmp	r3, #0
   1d93c:	1a000075 	bne	1db18 <CTCPConnection::Process()+0x1f4>
   1d940:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1d944:	e6ef3073 	uxtb	r3, r3
   1d948:	e353000a 	cmp	r3, #10
   1d94c:	9a00004a 	bls	1da7c <CTCPConnection::Process()+0x158>
   1d950:	e2846048 	add	r6, r4, #72	; 0x48
   1d954:	e2845030 	add	r5, r4, #48	; 0x30
   1d958:	ea000008 	b	1d980 <CTCPConnection::Process()+0x5c>
   1d95c:	e3a02000 	mov	r2, #0
   1d960:	e28d1008 	add	r1, sp, #8
   1d964:	e1a00005 	mov	r0, r5
   1d968:	eb000a2b 	bl	2021c <CNetQueue::Dequeue(void*, void**)>
   1d96c:	e2502000 	subs	r2, r0, #0
   1d970:	0a000006 	beq	1d990 <CTCPConnection::Process()+0x6c>
   1d974:	e28d1008 	add	r1, sp, #8
   1d978:	e1a00006 	mov	r0, r6
   1d97c:	eb0005a5 	bl	1f018 <CRetransmissionQueue::Write(void const*, unsigned int)>
   1d980:	e1a00006 	mov	r0, r6
   1d984:	eb000581 	bl	1ef90 <CRetransmissionQueue::GetFreeSpace() const>
   1d988:	e3500d19 	cmp	r0, #1600	; 0x640
   1d98c:	2afffff2 	bcs	1d95c <CTCPConnection::Process()+0x38>
   1d990:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   1d994:	e3530000 	cmp	r3, #0
   1d998:	1a00006d 	bne	1db54 <CTCPConnection::Process()+0x230>
   1d99c:	e28d7008 	add	r7, sp, #8
   1d9a0:	e2848030 	add	r8, r4, #48	; 0x30
   1d9a4:	ea000014 	b	1d9fc <CTCPConnection::Process()+0xd8>
   1d9a8:	e3a01a01 	mov	r1, #4096	; 0x1000
   1d9ac:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   1d9b0:	e28490b0 	add	r9, r4, #176	; 0xb0
   1d9b4:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   1d9b8:	e1a00004 	mov	r0, r4
   1d9bc:	e58d5004 	str	r5, [sp, #4]
   1d9c0:	e58d7000 	str	r7, [sp]
   1d9c4:	ebfffe0a 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1d9c8:	e1a02005 	mov	r2, r5
   1d9cc:	e5941088 	ldr	r1, [r4, #136]	; 0x88
   1d9d0:	e1a00009 	mov	r0, r9
   1d9d4:	eb000678 	bl	1f3bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1d9d8:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   1d9dc:	e1a00009 	mov	r0, r9
   1d9e0:	e0835005 	add	r5, r3, r5
   1d9e4:	e5845088 	str	r5, [r4, #136]	; 0x88
   1d9e8:	eb000654 	bl	1f340 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1d9ec:	e3a01001 	mov	r1, #1
   1d9f0:	e1a02000 	mov	r2, r0
   1d9f4:	e1a00004 	mov	r0, r4
   1d9f8:	ebffff45 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1d9fc:	e1a00006 	mov	r0, r6
   1da00:	eb0005b8 	bl	1f0e8 <CRetransmissionQueue::GetBytesAvailable() const>
   1da04:	e3500000 	cmp	r0, #0
   1da08:	0a00003f 	beq	1db0c <CTCPConnection::Process()+0x1e8>
   1da0c:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   1da10:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   1da14:	e5945088 	ldr	r5, [r4, #136]	; 0x88
   1da18:	e0833002 	add	r3, r3, r2
   1da1c:	e0533005 	subs	r3, r3, r5
   1da20:	0a000039 	beq	1db0c <CTCPConnection::Process()+0x1e8>
   1da24:	e1d45abc 	ldrh	r5, [r4, #172]	; 0xac
   1da28:	e1550003 	cmp	r5, r3
   1da2c:	31a03005 	movcc	r3, r5
   1da30:	e1530000 	cmp	r3, r0
   1da34:	31a05003 	movcc	r5, r3
   1da38:	21a05000 	movcs	r5, r0
   1da3c:	e3550d19 	cmp	r5, #1600	; 0x640
   1da40:	8a00003d 	bhi	1db3c <CTCPConnection::Process()+0x218>
   1da44:	e1a02005 	mov	r2, r5
   1da48:	e1a01007 	mov	r1, r7
   1da4c:	e1a00006 	mov	r0, r6
   1da50:	eb0005c5 	bl	1f16c <CRetransmissionQueue::Read(void*, unsigned int)>
   1da54:	e1a00006 	mov	r0, r6
   1da58:	eb000546 	bl	1ef78 <CRetransmissionQueue::IsEmpty() const>
   1da5c:	e3500000 	cmp	r0, #0
   1da60:	0affffd0 	beq	1d9a8 <CTCPConnection::Process()+0x84>
   1da64:	e1a00008 	mov	r0, r8
   1da68:	eb000967 	bl	2000c <CNetQueue::IsEmpty() const>
   1da6c:	e3500000 	cmp	r0, #0
   1da70:	13a01b06 	movne	r1, #6144	; 0x1800
   1da74:	1affffcc 	bne	1d9ac <CTCPConnection::Process()+0x88>
   1da78:	eaffffca 	b	1d9a8 <CTCPConnection::Process()+0x84>
   1da7c:	e3a07001 	mov	r7, #1
   1da80:	e3002443 	movw	r2, #1091	; 0x443
   1da84:	e1a03317 	lsl	r3, r7, r3
   1da88:	e0135002 	ands	r5, r3, r2
   1da8c:	1a00001e 	bne	1db0c <CTCPConnection::Process()+0x1e8>
   1da90:	e213ce3b 	ands	ip, r3, #944	; 0x3b0
   1da94:	1a000035 	bne	1db70 <CTCPConnection::Process()+0x24c>
   1da98:	e313000c 	tst	r3, #12
   1da9c:	0affffab 	beq	1d950 <CTCPConnection::Process()+0x2c>
   1daa0:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   1daa4:	e3530000 	cmp	r3, #0
   1daa8:	0a000017 	beq	1db0c <CTCPConnection::Process()+0x1e8>
   1daac:	e5c0c05d 	strb	ip, [r0, #93]	; 0x5d
   1dab0:	e28450b0 	add	r5, r4, #176	; 0xb0
   1dab4:	e590209c 	ldr	r2, [r0, #156]	; 0x9c
   1dab8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dabc:	e3530002 	cmp	r3, #2
   1dac0:	058dc004 	streq	ip, [sp, #4]
   1dac4:	03a01c02 	moveq	r1, #512	; 0x200
   1dac8:	13a01c12 	movne	r1, #4608	; 0x1200
   1dacc:	01a0300c 	moveq	r3, ip
   1dad0:	058dc000 	streq	ip, [sp]
   1dad4:	159030a0 	ldrne	r3, [r0, #160]	; 0xa0
   1dad8:	158dc004 	strne	ip, [sp, #4]
   1dadc:	158dc000 	strne	ip, [sp]
   1dae0:	ebfffdc3 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1dae4:	e3a02001 	mov	r2, #1
   1dae8:	e594109c 	ldr	r1, [r4, #156]	; 0x9c
   1daec:	e1a00005 	mov	r0, r5
   1daf0:	eb000631 	bl	1f3bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1daf4:	e1a00005 	mov	r0, r5
   1daf8:	eb000610 	bl	1f340 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1dafc:	e3a01001 	mov	r1, #1
   1db00:	e1a02000 	mov	r2, r0
   1db04:	e1a00004 	mov	r0, r4
   1db08:	ebffff01 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1db0c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1db10:	e28dd00c 	add	sp, sp, #12
   1db14:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1db18:	e3e02000 	mvn	r2, #0
   1db1c:	e3a03000 	mov	r3, #0
   1db20:	e580202c 	str	r2, [r0, #44]	; 0x2c
   1db24:	e2800068 	add	r0, r0, #104	; 0x68
   1db28:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1db2c:	eb001ce8 	bl	24ed4 <CSynchronizationEvent::Set()>
   1db30:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1db34:	e28dd00c 	add	sp, sp, #12
   1db38:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1db3c:	e30517cc 	movw	r1, #22476	; 0x57cc
   1db40:	e3401003 	movt	r1, #3
   1db44:	e3020ebc 	movw	r0, #11964	; 0x2ebc
   1db48:	e3400003 	movt	r0, #3
   1db4c:	e300224f 	movw	r2, #591	; 0x24f
   1db50:	eb001d07 	bl	24f74 <assertion_failed>
   1db54:	e3a03000 	mov	r3, #0
   1db58:	e1a00006 	mov	r0, r6
   1db5c:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   1db60:	eb0005d6 	bl	1f2c0 <CRetransmissionQueue::Reset()>
   1db64:	e5943084 	ldr	r3, [r4, #132]	; 0x84
   1db68:	e5843088 	str	r3, [r4, #136]	; 0x88
   1db6c:	eaffff8a 	b	1d99c <CTCPConnection::Process()+0x78>
   1db70:	e2806048 	add	r6, r0, #72	; 0x48
   1db74:	e1a00006 	mov	r0, r6
   1db78:	eb0004fe 	bl	1ef78 <CRetransmissionQueue::IsEmpty() const>
   1db7c:	e3500000 	cmp	r0, #0
   1db80:	0affff73 	beq	1d954 <CTCPConnection::Process()+0x30>
   1db84:	e2840030 	add	r0, r4, #48	; 0x30
   1db88:	eb00091f 	bl	2000c <CNetQueue::IsEmpty() const>
   1db8c:	e3500000 	cmp	r0, #0
   1db90:	0affff6f 	beq	1d954 <CTCPConnection::Process()+0x30>
   1db94:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   1db98:	e3530000 	cmp	r3, #0
   1db9c:	0affff6c 	beq	1d954 <CTCPConnection::Process()+0x30>
   1dba0:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   1dba4:	e28480b0 	add	r8, r4, #176	; 0xb0
   1dba8:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   1dbac:	e3a01c11 	mov	r1, #4352	; 0x1100
   1dbb0:	e1a00004 	mov	r0, r4
   1dbb4:	e58d5004 	str	r5, [sp, #4]
   1dbb8:	e58d5000 	str	r5, [sp]
   1dbbc:	ebfffd8c 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1dbc0:	e5941088 	ldr	r1, [r4, #136]	; 0x88
   1dbc4:	e1a00008 	mov	r0, r8
   1dbc8:	e1a02007 	mov	r2, r7
   1dbcc:	eb0005fa 	bl	1f3bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1dbd0:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   1dbd4:	e5d4205f 	ldrb	r2, [r4, #95]	; 0x5f
   1dbd8:	e1a00008 	mov	r0, r8
   1dbdc:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1dbe0:	e2833001 	add	r3, r3, #1
   1dbe4:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1dbe8:	e5843088 	str	r3, [r4, #136]	; 0x88
   1dbec:	eb0005d3 	bl	1f340 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1dbf0:	e1a01007 	mov	r1, r7
   1dbf4:	e1a02000 	mov	r2, r0
   1dbf8:	e1a00004 	mov	r0, r4
   1dbfc:	ebfffec4 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1dc00:	eaffff53 	b	1d954 <CTCPConnection::Process()+0x30>

0001dc04 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1dc04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dc08:	e59dc020 	ldr	ip, [sp, #32]
   1dc0c:	e1dd61b8 	ldrh	r6, [sp, #24]
   1dc10:	e35c0006 	cmp	ip, #6
   1dc14:	e1dd71bc 	ldrh	r7, [sp, #28]
   1dc18:	0a000001 	beq	1dc24 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1dc1c:	e3a00000 	mov	r0, #0
   1dc20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dc24:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1dc28:	e3510001 	cmp	r1, #1
   1dc2c:	9afffffa 	bls	1dc1c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dc30:	e1a01002 	mov	r1, r2
   1dc34:	e1a04000 	mov	r4, r0
   1dc38:	e280000c 	add	r0, r0, #12
   1dc3c:	e1a05003 	mov	r5, r3
   1dc40:	eb0007cb 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   1dc44:	e3500000 	cmp	r0, #0
   1dc48:	1afffff3 	bne	1dc1c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dc4c:	e1d431b4 	ldrh	r3, [r4, #20]
   1dc50:	e1530006 	cmp	r3, r6
   1dc54:	1afffff0 	bne	1dc1c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dc58:	e5940004 	ldr	r0, [r4, #4]
   1dc5c:	e3500000 	cmp	r0, #0
   1dc60:	0a000017 	beq	1dcc4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   1dc64:	eb000736 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1dc68:	e1a01000 	mov	r1, r0
   1dc6c:	e1a00005 	mov	r0, r5
   1dc70:	eb0007bf 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   1dc74:	e3500000 	cmp	r0, #0
   1dc78:	1affffe7 	bne	1dc1c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dc7c:	e1d431b6 	ldrh	r3, [r4, #22]
   1dc80:	e1530007 	cmp	r3, r7
   1dc84:	1affffe4 	bne	1dc1c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dc88:	e3e03000 	mvn	r3, #0
   1dc8c:	e1a00004 	mov	r0, r4
   1dc90:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1dc94:	e3a01001 	mov	r1, #1
   1dc98:	ebfffdf1 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1dc9c:	e3a0300a 	mov	r3, #10
   1dca0:	e3012770 	movw	r2, #6000	; 0x1770
   1dca4:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1dca8:	e3a01002 	mov	r1, #2
   1dcac:	e1a00004 	mov	r0, r4
   1dcb0:	ebfffe97 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1dcb4:	e2840068 	add	r0, r4, #104	; 0x68
   1dcb8:	eb001c85 	bl	24ed4 <CSynchronizationEvent::Set()>
   1dcbc:	e3a00001 	mov	r0, #1
   1dcc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dcc4:	e30517cc 	movw	r1, #22476	; 0x57cc
   1dcc8:	e3401003 	movt	r1, #3
   1dccc:	e3050058 	movw	r0, #20568	; 0x5058
   1dcd0:	e3400003 	movt	r0, #3
   1dcd4:	e300252f 	movw	r2, #1327	; 0x52f
   1dcd8:	eb001ca5 	bl	24f74 <assertion_failed>

0001dcdc <CTCPConnection::DumpStatus()>:
   1dcdc:	e92d4010 	push	{r4, lr}
   1dce0:	e1a04000 	mov	r4, r0
   1dce4:	e24dd020 	sub	sp, sp, #32
   1dce8:	eb002246 	bl	26608 <CLogger::Get()>
   1dcec:	e594e09c 	ldr	lr, [r4, #156]	; 0x9c
   1dcf0:	e5941088 	ldr	r1, [r4, #136]	; 0x88
   1dcf4:	e3a02004 	mov	r2, #4
   1dcf8:	e594c084 	ldr	ip, [r4, #132]	; 0x84
   1dcfc:	e3053874 	movw	r3, #22644	; 0x5874
   1dd00:	e3403003 	movt	r3, #3
   1dd04:	e041100e 	sub	r1, r1, lr
   1dd08:	e58d1008 	str	r1, [sp, #8]
   1dd0c:	e04cc00e 	sub	ip, ip, lr
   1dd10:	e59410a0 	ldr	r1, [r4, #160]	; 0xa0
   1dd14:	e58dc004 	str	ip, [sp, #4]
   1dd18:	e5d4c02a 	ldrb	ip, [r4, #42]	; 0x2a
   1dd1c:	e594e0a8 	ldr	lr, [r4, #168]	; 0xa8
   1dd20:	e58dc000 	str	ip, [sp]
   1dd24:	e041100e 	sub	r1, r1, lr
   1dd28:	e1d4e1b4 	ldrh	lr, [r4, #20]
   1dd2c:	e58d1010 	str	r1, [sp, #16]
   1dd30:	e594108c 	ldr	r1, [r4, #140]	; 0x8c
   1dd34:	e594c0a4 	ldr	ip, [r4, #164]	; 0xa4
   1dd38:	e58dc014 	str	ip, [sp, #20]
   1dd3c:	e58d100c 	str	r1, [sp, #12]
   1dd40:	e58de018 	str	lr, [sp, #24]
   1dd44:	e59f1008 	ldr	r1, [pc, #8]	; 1dd54 <CTCPConnection::DumpStatus()+0x78>
   1dd48:	eb00216f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1dd4c:	e28dd020 	add	sp, sp, #32
   1dd50:	e8bd8010 	pop	{r4, pc}
   1dd54:	0003579c 	.word	0x0003579c

0001dd58 <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1dd58:	e92d4070 	push	{r4, r5, r6, lr}
   1dd5c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dd60:	e24dd010 	sub	sp, sp, #16
   1dd64:	e353000a 	cmp	r3, #10
   1dd68:	8a000018 	bhi	1ddd0 <CTCPConnection::NewState(TTCPState, unsigned int)+0x78>
   1dd6c:	e1a04001 	mov	r4, r1
   1dd70:	e351000a 	cmp	r1, #10
   1dd74:	8a00001b 	bhi	1dde8 <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   1dd78:	e1a05000 	mov	r5, r0
   1dd7c:	e1a06002 	mov	r6, r2
   1dd80:	eb002220 	bl	26608 <CLogger::Get()>
   1dd84:	e3051758 	movw	r1, #22360	; 0x5758
   1dd88:	e3401003 	movt	r1, #3
   1dd8c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1dd90:	e081c104 	add	ip, r1, r4, lsl #2
   1dd94:	e58d6008 	str	r6, [sp, #8]
   1dd98:	e0812103 	add	r2, r1, r3, lsl #2
   1dd9c:	e59ce048 	ldr	lr, [ip, #72]	; 0x48
   1dda0:	e2811044 	add	r1, r1, #68	; 0x44
   1dda4:	e58de004 	str	lr, [sp, #4]
   1dda8:	e3053910 	movw	r3, #22800	; 0x5910
   1ddac:	e3403003 	movt	r3, #3
   1ddb0:	e592c048 	ldr	ip, [r2, #72]	; 0x48
   1ddb4:	e3a02004 	mov	r2, #4
   1ddb8:	e58dc000 	str	ip, [sp]
   1ddbc:	eb002152 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ddc0:	e1a00004 	mov	r0, r4
   1ddc4:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1ddc8:	e28dd010 	add	sp, sp, #16
   1ddcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ddd0:	e30517cc 	movw	r1, #22476	; 0x57cc
   1ddd4:	e3401003 	movt	r1, #3
   1ddd8:	e30508ac 	movw	r0, #22700	; 0x58ac
   1dddc:	e3400003 	movt	r0, #3
   1dde0:	e300263d 	movw	r2, #1597	; 0x63d
   1dde4:	eb001c62 	bl	24f74 <assertion_failed>
   1dde8:	e30517cc 	movw	r1, #22476	; 0x57cc
   1ddec:	e3401003 	movt	r1, #3
   1ddf0:	e30508e0 	movw	r0, #22752	; 0x58e0
   1ddf4:	e3400003 	movt	r0, #3
   1ddf8:	e300263e 	movw	r2, #1598	; 0x63e
   1ddfc:	eb001c5c 	bl	24f74 <assertion_failed>

0001de00 <CTCPConnection::UnexpectedState(unsigned int)>:
   1de00:	e92d4030 	push	{r4, r5, lr}
   1de04:	e1a04000 	mov	r4, r0
   1de08:	e1a05001 	mov	r5, r1
   1de0c:	e24dd00c 	sub	sp, sp, #12
   1de10:	ebffffb1 	bl	1dcdc <CTCPConnection::DumpStatus()>
   1de14:	eb0021fb 	bl	26608 <CLogger::Get()>
   1de18:	e59f1020 	ldr	r1, [pc, #32]	; 1de40 <CTCPConnection::UnexpectedState(unsigned int)+0x40>
   1de1c:	e58d5004 	str	r5, [sp, #4]
   1de20:	e305392c 	movw	r3, #22828	; 0x592c
   1de24:	e3403003 	movt	r3, #3
   1de28:	e5d4202a 	ldrb	r2, [r4, #42]	; 0x2a
   1de2c:	e58d2000 	str	r2, [sp]
   1de30:	e3a02000 	mov	r2, #0
   1de34:	eb002134 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1de38:	e28dd00c 	add	sp, sp, #12
   1de3c:	e8bd8030 	pop	{r4, r5, pc}
   1de40:	0003579c 	.word	0x0003579c

0001de44 <CTCPConnection::Connect()>:
   1de44:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   1de48:	e92d4070 	push	{r4, r5, r6, lr}
   1de4c:	e1a04000 	mov	r4, r0
   1de50:	e3520000 	cmp	r2, #0
   1de54:	ba00000c 	blt	1de8c <CTCPConnection::Connect()+0x48>
   1de58:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1de5c:	e6ef3073 	uxtb	r3, r3
   1de60:	e353000a 	cmp	r3, #10
   1de64:	8a000008 	bhi	1de8c <CTCPConnection::Connect()+0x48>
   1de68:	e3a02001 	mov	r2, #1
   1de6c:	e30017e2 	movw	r1, #2018	; 0x7e2
   1de70:	e1a02312 	lsl	r2, r2, r3
   1de74:	e1120001 	tst	r2, r1
   1de78:	1a00000e 	bne	1deb8 <CTCPConnection::Connect()+0x74>
   1de7c:	e3530000 	cmp	r3, #0
   1de80:	0a00000a 	beq	1deb0 <CTCPConnection::Connect()+0x6c>
   1de84:	e312000c 	tst	r2, #12
   1de88:	1a000001 	bne	1de94 <CTCPConnection::Connect()+0x50>
   1de8c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1de90:	e8bd8070 	pop	{r4, r5, r6, pc}
   1de94:	e2805068 	add	r5, r0, #104	; 0x68
   1de98:	e1a00005 	mov	r0, r5
   1de9c:	eb001c09 	bl	24ec8 <CSynchronizationEvent::Clear()>
   1dea0:	e1a00005 	mov	r0, r5
   1dea4:	eb001c18 	bl	24f0c <CSynchronizationEvent::Wait()>
   1dea8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1deac:	e8bd8070 	pop	{r4, r5, r6, pc}
   1deb0:	e3e00000 	mvn	r0, #0
   1deb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1deb8:	e3a010f5 	mov	r1, #245	; 0xf5
   1debc:	ebffffcf 	bl	1de00 <CTCPConnection::UnexpectedState(unsigned int)>
   1dec0:	e3e00000 	mvn	r0, #0
   1dec4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001dec8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1dec8:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1decc:	e3530000 	cmp	r3, #0
   1ded0:	ba000022 	blt	1df60 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x98>
   1ded4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ded8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dedc:	e1a06002 	mov	r6, r2
   1dee0:	e1a05001 	mov	r5, r1
   1dee4:	e1a04000 	mov	r4, r0
   1dee8:	e353000a 	cmp	r3, #10
   1deec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1def0:	ea00000f 	b	1df34 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x6c>
   1def4:	0001df68 	.word	0x0001df68
   1def8:	0001df20 	.word	0x0001df20
   1defc:	0001df70 	.word	0x0001df70
   1df00:	0001df34 	.word	0x0001df34
   1df04:	0001df34 	.word	0x0001df34
   1df08:	0001df68 	.word	0x0001df68
   1df0c:	0001df68 	.word	0x0001df68
   1df10:	0001df68 	.word	0x0001df68
   1df14:	0001df68 	.word	0x0001df68
   1df18:	0001df68 	.word	0x0001df68
   1df1c:	0001df68 	.word	0x0001df68
   1df20:	e2807068 	add	r7, r0, #104	; 0x68
   1df24:	e1a00007 	mov	r0, r7
   1df28:	eb001be6 	bl	24ec8 <CSynchronizationEvent::Clear()>
   1df2c:	e1a00007 	mov	r0, r7
   1df30:	eb001bf5 	bl	24f0c <CSynchronizationEvent::Wait()>
   1df34:	e3550000 	cmp	r5, #0
   1df38:	0a000010 	beq	1df80 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb8>
   1df3c:	e1a00005 	mov	r0, r5
   1df40:	e284100c 	add	r1, r4, #12
   1df44:	eb000779 	bl	1fd30 <CIPAddress::Set(CIPAddress const&)>
   1df48:	e3560000 	cmp	r6, #0
   1df4c:	0a000011 	beq	1df98 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xd0>
   1df50:	e1d431b4 	ldrh	r3, [r4, #20]
   1df54:	e1c630b0 	strh	r3, [r6]
   1df58:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1df5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1df60:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1df64:	e12fff1e 	bx	lr
   1df68:	e3e00000 	mvn	r0, #0
   1df6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1df70:	e3001109 	movw	r1, #265	; 0x109
   1df74:	ebffffa1 	bl	1de00 <CTCPConnection::UnexpectedState(unsigned int)>
   1df78:	e3e00000 	mvn	r0, #0
   1df7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1df80:	e30517cc 	movw	r1, #22476	; 0x57cc
   1df84:	e3401003 	movt	r1, #3
   1df88:	e30500b0 	movw	r0, #20656	; 0x50b0
   1df8c:	e3400003 	movt	r0, #3
   1df90:	e300211f 	movw	r2, #287	; 0x11f
   1df94:	eb001bf6 	bl	24f74 <assertion_failed>
   1df98:	e30517cc 	movw	r1, #22476	; 0x57cc
   1df9c:	e3401003 	movt	r1, #3
   1dfa0:	e30500c0 	movw	r0, #20672	; 0x50c0
   1dfa4:	e3400003 	movt	r0, #3
   1dfa8:	e3002122 	movw	r2, #290	; 0x122
   1dfac:	eb001bf0 	bl	24f74 <assertion_failed>

0001dfb0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1dfb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfb4:	e24dd024 	sub	sp, sp, #36	; 0x24
   1dfb8:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1dfbc:	e35c0006 	cmp	ip, #6
   1dfc0:	0a000002 	beq	1dfd0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x20>
   1dfc4:	e3a00000 	mov	r0, #0
   1dfc8:	e28dd024 	add	sp, sp, #36	; 0x24
   1dfcc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfd0:	e3520013 	cmp	r2, #19
   1dfd4:	9a0000eb 	bls	1e388 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3d8>
   1dfd8:	e1a07003 	mov	r7, r3
   1dfdc:	e1a06002 	mov	r6, r2
   1dfe0:	e1a04001 	mov	r4, r1
   1dfe4:	e1a05000 	mov	r5, r0
   1dfe8:	e3510000 	cmp	r1, #0
   1dfec:	0a0000df 	beq	1e370 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c0>
   1dff0:	e1d130b2 	ldrh	r3, [r1, #2]
   1dff4:	e1d021b6 	ldrh	r2, [r0, #22]
   1dff8:	e6bf3fb3 	rev16	r3, r3
   1dffc:	e6ff3073 	uxth	r3, r3
   1e000:	e1520003 	cmp	r2, r3
   1e004:	1affffee 	bne	1dfc4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e008:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e00c:	e3530001 	cmp	r3, #1
   1e010:	0a000038 	beq	1e0f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x148>
   1e014:	e1a01007 	mov	r1, r7
   1e018:	e280000c 	add	r0, r0, #12
   1e01c:	eb0006d4 	bl	1fb74 <CIPAddress::operator!=(CIPAddress const&) const>
   1e020:	e3500000 	cmp	r0, #0
   1e024:	1affffe6 	bne	1dfc4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e028:	e1d430b0 	ldrh	r3, [r4]
   1e02c:	e1d521b4 	ldrh	r2, [r5, #20]
   1e030:	e6bf3fb3 	rev16	r3, r3
   1e034:	e6ff3073 	uxth	r3, r3
   1e038:	e1520003 	cmp	r2, r3
   1e03c:	0285901c 	addeq	r9, r5, #28
   1e040:	1affffdf 	bne	1dfc4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e044:	e1a02006 	mov	r2, r6
   1e048:	e1a01004 	mov	r1, r4
   1e04c:	e1a00009 	mov	r0, r9
   1e050:	eb00090a 	bl	20480 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1e054:	e3500000 	cmp	r0, #0
   1e058:	1affffd9 	bne	1dfc4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e05c:	e1d480bc 	ldrh	r8, [r4, #12]
   1e060:	e1a01004 	mov	r1, r4
   1e064:	e5942004 	ldr	r2, [r4, #4]
   1e068:	e1a00005 	mov	r0, r5
   1e06c:	e594a008 	ldr	sl, [r4, #8]
   1e070:	e2183c02 	ands	r3, r8, #512	; 0x200
   1e074:	e58d301c 	str	r3, [sp, #28]
   1e078:	e7e33258 	ubfx	r3, r8, #4, #4
   1e07c:	e1a03103 	lsl	r3, r3, #2
   1e080:	e6bf2f32 	rev	r2, r2
   1e084:	e0466003 	sub	r6, r6, r3
   1e088:	e58d3014 	str	r3, [sp, #20]
   1e08c:	e58d200c 	str	r2, [sp, #12]
   1e090:	1286b001 	addne	fp, r6, #1
   1e094:	01a0b006 	moveq	fp, r6
   1e098:	e2183c01 	ands	r3, r8, #256	; 0x100
   1e09c:	e58d3018 	str	r3, [sp, #24]
   1e0a0:	128bb001 	addne	fp, fp, #1
   1e0a4:	e6bfaf3a 	rev	sl, sl
   1e0a8:	e1d430be 	ldrh	r3, [r4, #14]
   1e0ac:	e6bf3fb3 	rev16	r3, r3
   1e0b0:	e6ff3073 	uxth	r3, r3
   1e0b4:	e58d3010 	str	r3, [sp, #16]
   1e0b8:	ebfffca3 	bl	1d34c <CTCPConnection::ScanOptions(TTCPHeader*)>
   1e0bc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e0c0:	e353000a 	cmp	r3, #10
   1e0c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e0c8:	ea000036 	b	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e0cc:	0001e1b0 	.word	0x0001e1b0
   1e0d0:	0001e208 	.word	0x0001e208
   1e0d4:	0001e188 	.word	0x0001e188
   1e0d8:	0001e118 	.word	0x0001e118
   1e0dc:	0001e118 	.word	0x0001e118
   1e0e0:	0001e118 	.word	0x0001e118
   1e0e4:	0001e118 	.word	0x0001e118
   1e0e8:	0001e118 	.word	0x0001e118
   1e0ec:	0001e118 	.word	0x0001e118
   1e0f0:	0001e118 	.word	0x0001e118
   1e0f4:	0001e118 	.word	0x0001e118
   1e0f8:	e1d130bc 	ldrh	r3, [r1, #12]
   1e0fc:	e3130c02 	tst	r3, #512	; 0x200
   1e100:	0affffaf 	beq	1dfc4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e104:	e280901c 	add	r9, r0, #28
   1e108:	e1a01007 	mov	r1, r7
   1e10c:	e1a00009 	mov	r0, r9
   1e110:	eb0008ac 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e114:	eaffffca 	b	1e044 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x94>
   1e118:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1e11c:	e3530000 	cmp	r3, #0
   1e120:	0a00009a 	beq	1e390 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1e124:	e59520a0 	ldr	r2, [r5, #160]	; 0xa0
   1e128:	e35b0000 	cmp	fp, #0
   1e12c:	e59d100c 	ldr	r1, [sp, #12]
   1e130:	e0421001 	sub	r1, r2, r1
   1e134:	1a0000e0 	bne	1e4bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50c>
   1e138:	e3510000 	cmp	r1, #0
   1e13c:	da0001d7 	ble	1e8a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8f0>
   1e140:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e144:	e3530003 	cmp	r3, #3
   1e148:	1a0000a1 	bne	1e3d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x424>
   1e14c:	e3180b01 	tst	r8, #1024	; 0x400
   1e150:	0a0000a9 	beq	1e3fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x44c>
   1e154:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e158:	e2433003 	sub	r3, r3, #3
   1e15c:	e3530007 	cmp	r3, #7
   1e160:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e164:	ea0001de 	b	1e8e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x934>
   1e168:	0001e350 	.word	0x0001e350
   1e16c:	0001e318 	.word	0x0001e318
   1e170:	0001e318 	.word	0x0001e318
   1e174:	0001e318 	.word	0x0001e318
   1e178:	0001e318 	.word	0x0001e318
   1e17c:	0001e338 	.word	0x0001e338
   1e180:	0001e338 	.word	0x0001e338
   1e184:	0001e338 	.word	0x0001e338
   1e188:	e3180a01 	tst	r8, #4096	; 0x1000
   1e18c:	1a000086 	bne	1e3ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3fc>
   1e190:	e2183c02 	ands	r3, r8, #512	; 0x200
   1e194:	e2282b01 	eor	r2, r8, #1024	; 0x400
   1e198:	e2933000 	adds	r3, r3, #0
   1e19c:	13a03001 	movne	r3, #1
   1e1a0:	e0133522 	ands	r3, r3, r2, lsr #10
   1e1a4:	1a0001c9 	bne	1e8d0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x920>
   1e1a8:	e3a00001 	mov	r0, #1
   1e1ac:	eaffff85 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e1b0:	e2186b01 	ands	r6, r8, #1024	; 0x400
   1e1b4:	1afffffb 	bne	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e1b8:	e1a01007 	mov	r1, r7
   1e1bc:	e2188a01 	ands	r8, r8, #4096	; 0x1000
   1e1c0:	e285000c 	add	r0, r5, #12
   1e1c4:	0a0000ac 	beq	1e47c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4cc>
   1e1c8:	eb0006d8 	bl	1fd30 <CIPAddress::Set(CIPAddress const&)>
   1e1cc:	e1d430b0 	ldrh	r3, [r4]
   1e1d0:	e1a01007 	mov	r1, r7
   1e1d4:	e1a00009 	mov	r0, r9
   1e1d8:	e6bf3fb3 	rev16	r3, r3
   1e1dc:	e1c531b4 	strh	r3, [r5, #20]
   1e1e0:	eb000878 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e1e4:	e1a03006 	mov	r3, r6
   1e1e8:	e58d6004 	str	r6, [sp, #4]
   1e1ec:	e58d6000 	str	r6, [sp]
   1e1f0:	e1a0200a 	mov	r2, sl
   1e1f4:	e1a00005 	mov	r0, r5
   1e1f8:	e3a01b01 	mov	r1, #1024	; 0x400
   1e1fc:	ebfffbfc 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e200:	e3a00001 	mov	r0, #1
   1e204:	eaffff6f 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e208:	e2183b01 	ands	r3, r8, #1024	; 0x400
   1e20c:	1affffe5 	bne	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e210:	e2188a01 	ands	r8, r8, #4096	; 0x1000
   1e214:	1a00018a 	bne	1e844 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x894>
   1e218:	e59d301c 	ldr	r3, [sp, #28]
   1e21c:	e3530000 	cmp	r3, #0
   1e220:	0affffe0 	beq	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e224:	e309340c 	movw	r3, #37900	; 0x940c
   1e228:	e3403003 	movt	r3, #3
   1e22c:	e5933000 	ldr	r3, [r3]
   1e230:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1e234:	2a00008e 	bcs	1e474 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4c4>
   1e238:	e59d200c 	ldr	r2, [sp, #12]
   1e23c:	e35b0000 	cmp	fp, #0
   1e240:	e59d3010 	ldr	r3, [sp, #16]
   1e244:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1e248:	e2823001 	add	r3, r2, #1
   1e24c:	e58520a8 	str	r2, [r5, #168]	; 0xa8
   1e250:	e5852094 	str	r2, [r5, #148]	; 0x94
   1e254:	e58530a0 	str	r3, [r5, #160]	; 0xa0
   1e258:	e585a098 	str	sl, [r5, #152]	; 0x98
   1e25c:	0a0001dc 	beq	1e9d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa24>
   1e260:	e3560000 	cmp	r6, #0
   1e264:	0a000005 	beq	1e280 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2d0>
   1e268:	e59d1014 	ldr	r1, [sp, #20]
   1e26c:	e1a03008 	mov	r3, r8
   1e270:	e1a02006 	mov	r2, r6
   1e274:	e285003c 	add	r0, r5, #60	; 0x3c
   1e278:	e0841001 	add	r1, r4, r1
   1e27c:	eb00079b 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e280:	e28560b0 	add	r6, r5, #176	; 0xb0
   1e284:	e1a00005 	mov	r0, r5
   1e288:	ebfffc5c 	bl	1d400 <CTCPConnection::CalculateISN()>
   1e28c:	e1a01000 	mov	r1, r0
   1e290:	e585009c 	str	r0, [r5, #156]	; 0x9c
   1e294:	e1a00006 	mov	r0, r6
   1e298:	eb00042a 	bl	1f348 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1e29c:	e1a01007 	mov	r1, r7
   1e2a0:	e285000c 	add	r0, r5, #12
   1e2a4:	eb0006a1 	bl	1fd30 <CIPAddress::Set(CIPAddress const&)>
   1e2a8:	e1d430b0 	ldrh	r3, [r4]
   1e2ac:	e1a01007 	mov	r1, r7
   1e2b0:	e1a00009 	mov	r0, r9
   1e2b4:	e6bf3fb3 	rev16	r3, r3
   1e2b8:	e1c531b4 	strh	r3, [r5, #20]
   1e2bc:	eb000841 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e2c0:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1e2c4:	e3a02000 	mov	r2, #0
   1e2c8:	e58d2004 	str	r2, [sp, #4]
   1e2cc:	e58d2000 	str	r2, [sp]
   1e2d0:	e3a01c12 	mov	r1, #4608	; 0x1200
   1e2d4:	e1a00005 	mov	r0, r5
   1e2d8:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
   1e2dc:	ebfffbc4 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e2e0:	e1a00006 	mov	r0, r6
   1e2e4:	e3a02001 	mov	r2, #1
   1e2e8:	e595109c 	ldr	r1, [r5, #156]	; 0x9c
   1e2ec:	eb000432 	bl	1f3bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e2f0:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1e2f4:	e5853084 	str	r3, [r5, #132]	; 0x84
   1e2f8:	e3a02003 	mov	r2, #3
   1e2fc:	e2833001 	add	r3, r3, #1
   1e300:	e2850068 	add	r0, r5, #104	; 0x68
   1e304:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1e308:	e5853088 	str	r3, [r5, #136]	; 0x88
   1e30c:	eb001af0 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e310:	e3a00001 	mov	r0, #1
   1e314:	eaffff2b 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e318:	e3e03000 	mvn	r3, #0
   1e31c:	e2850048 	add	r0, r5, #72	; 0x48
   1e320:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1e324:	eb0003e8 	bl	1f2cc <CRetransmissionQueue::Flush()>
   1e328:	e2850030 	add	r0, r5, #48	; 0x30
   1e32c:	eb00073a 	bl	2001c <CNetQueue::Flush()>
   1e330:	e285003c 	add	r0, r5, #60	; 0x3c
   1e334:	eb000738 	bl	2001c <CNetQueue::Flush()>
   1e338:	e3a03000 	mov	r3, #0
   1e33c:	e2850068 	add	r0, r5, #104	; 0x68
   1e340:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e344:	eb001ae2 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e348:	e3a00001 	mov	r0, #1
   1e34c:	eaffff1d 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e350:	e2850048 	add	r0, r5, #72	; 0x48
   1e354:	eb0003dc 	bl	1f2cc <CRetransmissionQueue::Flush()>
   1e358:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1e35c:	e3530000 	cmp	r3, #0
   1e360:	1a00018f 	bne	1e9a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9f4>
   1e364:	e3a00001 	mov	r0, #1
   1e368:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   1e36c:	eaffff15 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e370:	e30517cc 	movw	r1, #22476	; 0x57cc
   1e374:	e3401003 	movt	r1, #3
   1e378:	e3050150 	movw	r0, #20816	; 0x5150
   1e37c:	e3400003 	movt	r0, #3
   1e380:	e3a02e27 	mov	r2, #624	; 0x270
   1e384:	eb001afa 	bl	24f74 <assertion_failed>
   1e388:	e3e00000 	mvn	r0, #0
   1e38c:	eaffff0d 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e390:	e35b0000 	cmp	fp, #0
   1e394:	1affff69 	bne	1e140 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1e398:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1e39c:	e59d200c 	ldr	r2, [sp, #12]
   1e3a0:	e1520003 	cmp	r2, r3
   1e3a4:	1affff65 	bne	1e140 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1e3a8:	eaffff67 	b	1e14c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   1e3ac:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1e3b0:	e043300a 	sub	r3, r3, sl
   1e3b4:	e3530000 	cmp	r3, #0
   1e3b8:	ba00004c 	blt	1e4f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x540>
   1e3bc:	e2188b01 	ands	r8, r8, #1024	; 0x400
   1e3c0:	058d8004 	streq	r8, [sp, #4]
   1e3c4:	01a03008 	moveq	r3, r8
   1e3c8:	058d8000 	streq	r8, [sp]
   1e3cc:	1affff75 	bne	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e3d0:	eaffff86 	b	1e1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x240>
   1e3d4:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1e3d8:	e3a01000 	mov	r1, #0
   1e3dc:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1e3e0:	e1a00005 	mov	r0, r5
   1e3e4:	e58d1004 	str	r1, [sp, #4]
   1e3e8:	e58d1000 	str	r1, [sp]
   1e3ec:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e3f0:	ebfffb7f 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e3f4:	e3a00001 	mov	r0, #1
   1e3f8:	eafffef2 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e3fc:	e2183c02 	ands	r3, r8, #512	; 0x200
   1e400:	e3530000 	cmp	r3, #0
   1e404:	0a00007e 	beq	1e604 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x654>
   1e408:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e40c:	e3530003 	cmp	r3, #3
   1e410:	1a000002 	bne	1e420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x470>
   1e414:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1e418:	e3530000 	cmp	r3, #0
   1e41c:	0affffd0 	beq	1e364 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3b4>
   1e420:	e3a04000 	mov	r4, #0
   1e424:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1e428:	e3a01b01 	mov	r1, #1024	; 0x400
   1e42c:	e1a03004 	mov	r3, r4
   1e430:	e58d4004 	str	r4, [sp, #4]
   1e434:	e1a00005 	mov	r0, r5
   1e438:	e58d4000 	str	r4, [sp]
   1e43c:	ebfffb6c 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e440:	e3e03000 	mvn	r3, #0
   1e444:	e2850048 	add	r0, r5, #72	; 0x48
   1e448:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1e44c:	eb00039e 	bl	1f2cc <CRetransmissionQueue::Flush()>
   1e450:	e2850030 	add	r0, r5, #48	; 0x30
   1e454:	eb0006f0 	bl	2001c <CNetQueue::Flush()>
   1e458:	e285003c 	add	r0, r5, #60	; 0x3c
   1e45c:	eb0006ee 	bl	2001c <CNetQueue::Flush()>
   1e460:	e2850068 	add	r0, r5, #104	; 0x68
   1e464:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1e468:	eb001a99 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e46c:	e3a00001 	mov	r0, #1
   1e470:	eafffed4 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e474:	e1a01007 	mov	r1, r7
   1e478:	e285000c 	add	r0, r5, #12
   1e47c:	eb00062b 	bl	1fd30 <CIPAddress::Set(CIPAddress const&)>
   1e480:	e1d430b0 	ldrh	r3, [r4]
   1e484:	e1a01007 	mov	r1, r7
   1e488:	e1a00009 	mov	r0, r9
   1e48c:	e6bf3fb3 	rev16	r3, r3
   1e490:	e1c531b4 	strh	r3, [r5, #20]
   1e494:	eb0007cb 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e498:	e59d300c 	ldr	r3, [sp, #12]
   1e49c:	e58d8004 	str	r8, [sp, #4]
   1e4a0:	e1a02008 	mov	r2, r8
   1e4a4:	e58d8000 	str	r8, [sp]
   1e4a8:	e083300b 	add	r3, r3, fp
   1e4ac:	e1a00005 	mov	r0, r5
   1e4b0:	e3a01b05 	mov	r1, #5120	; 0x1400
   1e4b4:	ebfffb4e 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e4b8:	eaffff3a 	b	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e4bc:	e3510000 	cmp	r1, #0
   1e4c0:	da0000fc 	ble	1e8b8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x908>
   1e4c4:	e59d100c 	ldr	r1, [sp, #12]
   1e4c8:	e081000b 	add	r0, r1, fp
   1e4cc:	e2821001 	add	r1, r2, #1
   1e4d0:	e0411000 	sub	r1, r1, r0
   1e4d4:	e3510000 	cmp	r1, #0
   1e4d8:	caffff18 	bgt	1e140 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1e4dc:	e0833002 	add	r3, r3, r2
   1e4e0:	e1e03003 	mvn	r3, r3
   1e4e4:	e1730000 	cmn	r3, r0
   1e4e8:	5affff14 	bpl	1e140 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1e4ec:	eaffff16 	b	1e14c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   1e4f0:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e4f4:	e04a3003 	sub	r3, sl, r3
   1e4f8:	e3530000 	cmp	r3, #0
   1e4fc:	caffffae 	bgt	1e3bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x40c>
   1e500:	e5953084 	ldr	r3, [r5, #132]	; 0x84
   1e504:	e043300a 	sub	r3, r3, sl
   1e508:	e3530000 	cmp	r3, #0
   1e50c:	caffff25 	bgt	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e510:	e3180b01 	tst	r8, #1024	; 0x400
   1e514:	1a0000d8 	bne	1e87c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8cc>
   1e518:	e2183c02 	ands	r3, r8, #512	; 0x200
   1e51c:	e3530000 	cmp	r3, #0
   1e520:	0affff20 	beq	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e524:	e59d300c 	ldr	r3, [sp, #12]
   1e528:	e1a0100a 	mov	r1, sl
   1e52c:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1e530:	e28500b0 	add	r0, r5, #176	; 0xb0
   1e534:	e2833001 	add	r3, r3, #1
   1e538:	e58530a0 	str	r3, [r5, #160]	; 0xa0
   1e53c:	eb000400 	bl	1f544 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1e540:	e5951084 	ldr	r1, [r5, #132]	; 0x84
   1e544:	e04a1001 	sub	r1, sl, r1
   1e548:	e3510001 	cmp	r1, #1
   1e54c:	9a000002 	bls	1e55c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5ac>
   1e550:	e2411001 	sub	r1, r1, #1
   1e554:	e2850048 	add	r0, r5, #72	; 0x48
   1e558:	eb000337 	bl	1f23c <CRetransmissionQueue::Advance(unsigned int)>
   1e55c:	e585a084 	str	sl, [r5, #132]	; 0x84
   1e560:	e595209c 	ldr	r2, [r5, #156]	; 0x9c
   1e564:	e5953084 	ldr	r3, [r5, #132]	; 0x84
   1e568:	e0423003 	sub	r3, r2, r3
   1e56c:	e3530000 	cmp	r3, #0
   1e570:	ba0000e0 	blt	1e8f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x948>
   1e574:	e3a07000 	mov	r7, #0
   1e578:	e3a03003 	mov	r3, #3
   1e57c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e580:	e3a01c12 	mov	r1, #4608	; 0x1200
   1e584:	e58d7004 	str	r7, [sp, #4]
   1e588:	e28580b0 	add	r8, r5, #176	; 0xb0
   1e58c:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1e590:	e1a00005 	mov	r0, r5
   1e594:	e58d7000 	str	r7, [sp]
   1e598:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1e59c:	ebfffb14 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e5a0:	e3a02001 	mov	r2, #1
   1e5a4:	e595109c 	ldr	r1, [r5, #156]	; 0x9c
   1e5a8:	e1a00008 	mov	r0, r8
   1e5ac:	eb000382 	bl	1f3bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e5b0:	e3a03005 	mov	r3, #5
   1e5b4:	e1a00008 	mov	r0, r8
   1e5b8:	e5853060 	str	r3, [r5, #96]	; 0x60
   1e5bc:	eb00035f 	bl	1f340 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1e5c0:	e3a01001 	mov	r1, #1
   1e5c4:	e1a02000 	mov	r2, r0
   1e5c8:	e1a00005 	mov	r0, r5
   1e5cc:	ebfffc50 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e5d0:	e59d3018 	ldr	r3, [sp, #24]
   1e5d4:	e1530007 	cmp	r3, r7
   1e5d8:	1a0000e2 	bne	1e968 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9b8>
   1e5dc:	e1560007 	cmp	r6, r7
   1e5e0:	0afffef0 	beq	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e5e4:	e59d3014 	ldr	r3, [sp, #20]
   1e5e8:	e285003c 	add	r0, r5, #60	; 0x3c
   1e5ec:	e1a02006 	mov	r2, r6
   1e5f0:	e0841003 	add	r1, r4, r3
   1e5f4:	e3a03000 	mov	r3, #0
   1e5f8:	eb0006bc 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e5fc:	e3a00001 	mov	r0, #1
   1e600:	eafffe70 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e604:	e3180a01 	tst	r8, #4096	; 0x1000
   1e608:	0afffee6 	beq	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e60c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e610:	e2433003 	sub	r3, r3, #3
   1e614:	e3530007 	cmp	r3, #7
   1e618:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e61c:	ea0000e8 	b	1e9c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa14>
   1e620:	0001e800 	.word	0x0001e800
   1e624:	0001e7a8 	.word	0x0001e7a8
   1e628:	0001e7a8 	.word	0x0001e7a8
   1e62c:	0001e7a8 	.word	0x0001e7a8
   1e630:	0001e7a8 	.word	0x0001e7a8
   1e634:	0001e7a8 	.word	0x0001e7a8
   1e638:	0001e780 	.word	0x0001e780
   1e63c:	0001e640 	.word	0x0001e640
   1e640:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e644:	e15a0003 	cmp	sl, r3
   1e648:	0a0000f1 	beq	1ea14 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa64>
   1e64c:	e35b0000 	cmp	fp, #0
   1e650:	0afffed4 	beq	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e654:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e658:	e2433004 	sub	r3, r3, #4
   1e65c:	e3530006 	cmp	r3, #6
   1e660:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e664:	ea0000e0 	b	1e9ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa3c>
   1e668:	0001e684 	.word	0x0001e684
   1e66c:	0001e684 	.word	0x0001e684
   1e670:	0001e684 	.word	0x0001e684
   1e674:	0001e6ec 	.word	0x0001e6ec
   1e678:	0001e6ec 	.word	0x0001e6ec
   1e67c:	0001e6ec 	.word	0x0001e6ec
   1e680:	0001e6ec 	.word	0x0001e6ec
   1e684:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1e688:	e59d200c 	ldr	r2, [sp, #12]
   1e68c:	e1520003 	cmp	r2, r3
   1e690:	1a0000ed 	bne	1ea4c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa9c>
   1e694:	e3560000 	cmp	r6, #0
   1e698:	0a000013 	beq	1e6ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x73c>
   1e69c:	e59d3014 	ldr	r3, [sp, #20]
   1e6a0:	e1a02006 	mov	r2, r6
   1e6a4:	e285003c 	add	r0, r5, #60	; 0x3c
   1e6a8:	e0841003 	add	r1, r4, r3
   1e6ac:	e3a03000 	mov	r3, #0
   1e6b0:	eb00068e 	bl	200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e6b4:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1e6b8:	e3a01000 	mov	r1, #0
   1e6bc:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1e6c0:	e0863003 	add	r3, r6, r3
   1e6c4:	e58d1004 	str	r1, [sp, #4]
   1e6c8:	e1a00005 	mov	r0, r5
   1e6cc:	e58530a0 	str	r3, [r5, #160]	; 0xa0
   1e6d0:	e58d1000 	str	r1, [sp]
   1e6d4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e6d8:	ebfffac5 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e6dc:	e3180b02 	tst	r8, #2048	; 0x800
   1e6e0:	0a000001 	beq	1e6ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x73c>
   1e6e4:	e2850068 	add	r0, r5, #104	; 0x68
   1e6e8:	eb0019f9 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e6ec:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e6f0:	e3530000 	cmp	r3, #0
   1e6f4:	0afffeab 	beq	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e6f8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e6fc:	e3530001 	cmp	r3, #1
   1e700:	0afffea8 	beq	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e704:	e5d5202a 	ldrb	r2, [r5, #42]	; 0x2a
   1e708:	e59d3018 	ldr	r3, [sp, #24]
   1e70c:	e2422002 	sub	r2, r2, #2
   1e710:	e3530000 	cmp	r3, #0
   1e714:	e16f2f12 	clz	r2, r2
   1e718:	e1a022a2 	lsr	r2, r2, #5
   1e71c:	03a02001 	moveq	r2, #1
   1e720:	e3520000 	cmp	r2, #0
   1e724:	1afffe9f 	bne	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e728:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1e72c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e730:	e58d2004 	str	r2, [sp, #4]
   1e734:	e1a00005 	mov	r0, r5
   1e738:	e58d2000 	str	r2, [sp]
   1e73c:	e2833001 	add	r3, r3, #1
   1e740:	e58530a0 	str	r3, [r5, #160]	; 0xa0
   1e744:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1e748:	ebfffaa9 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e74c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e750:	e2433003 	sub	r3, r3, #3
   1e754:	e3530007 	cmp	r3, #7
   1e758:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e75c:	ea00011a 	b	1ebcc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc1c>
   1e760:	0001ebb4 	.word	0x0001ebb4
   1e764:	0001ebb4 	.word	0x0001ebb4
   1e768:	0001eb8c 	.word	0x0001eb8c
   1e76c:	0001eb58 	.word	0x0001eb58
   1e770:	0001e1a8 	.word	0x0001e1a8
   1e774:	0001e1a8 	.word	0x0001e1a8
   1e778:	0001e1a8 	.word	0x0001e1a8
   1e77c:	0001e9fc 	.word	0x0001e9fc
   1e780:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e784:	e15a0003 	cmp	sl, r3
   1e788:	1affffaf 	bne	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1e78c:	e3a03000 	mov	r3, #0
   1e790:	e2850068 	add	r0, r5, #104	; 0x68
   1e794:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1e798:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e79c:	eb0019cc 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e7a0:	e3a00001 	mov	r0, #1
   1e7a4:	eafffe07 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e7a8:	e5953084 	ldr	r3, [r5, #132]	; 0x84
   1e7ac:	e053200a 	subs	r2, r3, sl
   1e7b0:	4a0000c8 	bmi	1ead8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb28>
   1e7b4:	e04a3003 	sub	r3, sl, r3
   1e7b8:	e3530000 	cmp	r3, #0
   1e7bc:	c5952088 	ldrgt	r2, [r5, #136]	; 0x88
   1e7c0:	da0000ad 	ble	1ea7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xacc>
   1e7c4:	e042300a 	sub	r3, r2, sl
   1e7c8:	e3530000 	cmp	r3, #0
   1e7cc:	b3a0c000 	movlt	ip, #0
   1e7d0:	b59530a0 	ldrlt	r3, [r5, #160]	; 0xa0
   1e7d4:	ba00009e 	blt	1ea54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaa4>
   1e7d8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e7dc:	e2433004 	sub	r3, r3, #4
   1e7e0:	e3530004 	cmp	r3, #4
   1e7e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e7e8:	ea00009f 	b	1ea6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xabc>
   1e7ec:	0001e64c 	.word	0x0001e64c
   1e7f0:	0001eaf8 	.word	0x0001eaf8
   1e7f4:	0001eb3c 	.word	0x0001eb3c
   1e7f8:	0001e64c 	.word	0x0001e64c
   1e7fc:	0001ebdc 	.word	0x0001ebdc
   1e800:	e5953084 	ldr	r3, [r5, #132]	; 0x84
   1e804:	e043300a 	sub	r3, r3, sl
   1e808:	e3530000 	cmp	r3, #0
   1e80c:	ca000003 	bgt	1e820 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x870>
   1e810:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e814:	e04a3003 	sub	r3, sl, r3
   1e818:	e3530000 	cmp	r3, #0
   1e81c:	da000100 	ble	1ec24 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc74>
   1e820:	e3a01000 	mov	r1, #0
   1e824:	e1a0200a 	mov	r2, sl
   1e828:	e58d1004 	str	r1, [sp, #4]
   1e82c:	e1a03001 	mov	r3, r1
   1e830:	e58d1000 	str	r1, [sp]
   1e834:	e1a00005 	mov	r0, r5
   1e838:	e3a01b01 	mov	r1, #1024	; 0x400
   1e83c:	ebfffa6c 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e840:	eaffff81 	b	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1e844:	e1a01007 	mov	r1, r7
   1e848:	e285000c 	add	r0, r5, #12
   1e84c:	e58d300c 	str	r3, [sp, #12]
   1e850:	eb000536 	bl	1fd30 <CIPAddress::Set(CIPAddress const&)>
   1e854:	e1d420b0 	ldrh	r2, [r4]
   1e858:	e1a01007 	mov	r1, r7
   1e85c:	e1a00009 	mov	r0, r9
   1e860:	e6bf2fb2 	rev16	r2, r2
   1e864:	e1c521b4 	strh	r2, [r5, #20]
   1e868:	eb0006d6 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e86c:	e59d300c 	ldr	r3, [sp, #12]
   1e870:	e58d3004 	str	r3, [sp, #4]
   1e874:	e58d3000 	str	r3, [sp]
   1e878:	eafffe5c 	b	1e1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x240>
   1e87c:	e3a03000 	mov	r3, #0
   1e880:	e3e02000 	mvn	r2, #0
   1e884:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e888:	e2850068 	add	r0, r5, #104	; 0x68
   1e88c:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   1e890:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1e894:	eb00198e 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e898:	e3a00001 	mov	r0, #1
   1e89c:	eafffdc9 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e8a0:	e0833002 	add	r3, r3, r2
   1e8a4:	e59d200c 	ldr	r2, [sp, #12]
   1e8a8:	e0423003 	sub	r3, r2, r3
   1e8ac:	e3530000 	cmp	r3, #0
   1e8b0:	aafffe22 	bge	1e140 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   1e8b4:	eafffe24 	b	1e14c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   1e8b8:	e59d000c 	ldr	r0, [sp, #12]
   1e8bc:	e0831002 	add	r1, r3, r2
   1e8c0:	e0401001 	sub	r1, r0, r1
   1e8c4:	e3510000 	cmp	r1, #0
   1e8c8:	aafffefd 	bge	1e4c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x514>
   1e8cc:	eafffe1e 	b	1e14c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   1e8d0:	e59d300c 	ldr	r3, [sp, #12]
   1e8d4:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1e8d8:	e2833001 	add	r3, r3, #1
   1e8dc:	e58530a0 	str	r3, [r5, #160]	; 0xa0
   1e8e0:	eaffff1e 	b	1e560 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5b0>
   1e8e4:	e1a00005 	mov	r0, r5
   1e8e8:	e30013d7 	movw	r1, #983	; 0x3d7
   1e8ec:	ebfffd43 	bl	1de00 <CTCPConnection::UnexpectedState(unsigned int)>
   1e8f0:	e3a00001 	mov	r0, #1
   1e8f4:	eafffdb3 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e8f8:	e3a07000 	mov	r7, #0
   1e8fc:	e3a03004 	mov	r3, #4
   1e900:	e3a01001 	mov	r1, #1
   1e904:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e908:	e1a00005 	mov	r0, r5
   1e90c:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1e910:	ebfffad3 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1e914:	e3a03005 	mov	r3, #5
   1e918:	e2850068 	add	r0, r5, #104	; 0x68
   1e91c:	e5853060 	str	r3, [r5, #96]	; 0x60
   1e920:	eb00196b 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e924:	e58d7004 	str	r7, [sp, #4]
   1e928:	e58d7000 	str	r7, [sp]
   1e92c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e930:	e59d3010 	ldr	r3, [sp, #16]
   1e934:	e1a00005 	mov	r0, r5
   1e938:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1e93c:	e59d300c 	ldr	r3, [sp, #12]
   1e940:	e5853094 	str	r3, [r5, #148]	; 0x94
   1e944:	e585a098 	str	sl, [r5, #152]	; 0x98
   1e948:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1e94c:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1e950:	ebfffa27 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e954:	e2183c01 	ands	r3, r8, #256	; 0x100
   1e958:	e1530007 	cmp	r3, r7
   1e95c:	01560007 	cmpeq	r6, r7
   1e960:	1affff39 	bne	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1e964:	eafffe0f 	b	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e968:	e58d7004 	str	r7, [sp, #4]
   1e96c:	e1a03007 	mov	r3, r7
   1e970:	e58d7000 	str	r7, [sp]
   1e974:	e3a01b01 	mov	r1, #1024	; 0x400
   1e978:	e1a00005 	mov	r0, r5
   1e97c:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1e980:	ebfffa1b 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e984:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   1e988:	e3e03000 	mvn	r3, #0
   1e98c:	e2850068 	add	r0, r5, #104	; 0x68
   1e990:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1e994:	eb00194e 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e998:	e3560000 	cmp	r6, #0
   1e99c:	0afffe01 	beq	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1e9a0:	eaffff0f 	b	1e5e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x634>
   1e9a4:	e3e02000 	mvn	r2, #0
   1e9a8:	e3a03000 	mov	r3, #0
   1e9ac:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1e9b0:	e2850068 	add	r0, r5, #104	; 0x68
   1e9b4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e9b8:	eb001945 	bl	24ed4 <CSynchronizationEvent::Set()>
   1e9bc:	e3a00001 	mov	r0, #1
   1e9c0:	eafffd80 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e9c4:	e300149f 	movw	r1, #1183	; 0x49f
   1e9c8:	e1a00005 	mov	r0, r5
   1e9cc:	ebfffd0b 	bl	1de00 <CTCPConnection::UnexpectedState(unsigned int)>
   1e9d0:	eaffff1d 	b	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1e9d4:	e30517cc 	movw	r1, #22476	; 0x57cc
   1e9d8:	e3401003 	movt	r1, #3
   1e9dc:	e305094c 	movw	r0, #22860	; 0x594c
   1e9e0:	e3400003 	movt	r0, #3
   1e9e4:	e30022f5 	movw	r2, #757	; 0x2f5
   1e9e8:	eb001961 	bl	24f74 <assertion_failed>
   1e9ec:	e30014d2 	movw	r1, #1234	; 0x4d2
   1e9f0:	e1a00005 	mov	r0, r5
   1e9f4:	ebfffd01 	bl	1de00 <CTCPConnection::UnexpectedState(unsigned int)>
   1e9f8:	eaffff3b 	b	1e6ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x73c>
   1e9fc:	e1a00005 	mov	r0, r5
   1ea00:	e3012770 	movw	r2, #6000	; 0x1770
   1ea04:	e3a01002 	mov	r1, #2
   1ea08:	ebfffb41 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ea0c:	e3a00001 	mov	r0, #1
   1ea10:	eafffd6c 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ea14:	e3a00000 	mov	r0, #0
   1ea18:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1ea1c:	e5c5005e 	strb	r0, [r5, #94]	; 0x5e
   1ea20:	e1a0200a 	mov	r2, sl
   1ea24:	e58d0004 	str	r0, [sp, #4]
   1ea28:	e3a01a01 	mov	r1, #4096	; 0x1000
   1ea2c:	e58d0000 	str	r0, [sp]
   1ea30:	e1a00005 	mov	r0, r5
   1ea34:	ebfff9ee 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ea38:	e3012770 	movw	r2, #6000	; 0x1770
   1ea3c:	e3a01002 	mov	r1, #2
   1ea40:	e1a00005 	mov	r0, r5
   1ea44:	ebfffb32 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ea48:	eafffeff 	b	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1ea4c:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1ea50:	e3a0c000 	mov	ip, #0
   1ea54:	e1a00005 	mov	r0, r5
   1ea58:	e58dc004 	str	ip, [sp, #4]
   1ea5c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1ea60:	e58dc000 	str	ip, [sp]
   1ea64:	ebfff9e2 	bl	1d1f4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ea68:	eafffdce 	b	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1ea6c:	e3001486 	movw	r1, #1158	; 0x486
   1ea70:	e1a00005 	mov	r0, r5
   1ea74:	ebfffce1 	bl	1de00 <CTCPConnection::UnexpectedState(unsigned int)>
   1ea78:	eafffef3 	b	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1ea7c:	e3520000 	cmp	r2, #0
   1ea80:	1affff54 	bne	1e7d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x828>
   1ea84:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1ea88:	e04a3003 	sub	r3, sl, r3
   1ea8c:	e3530000 	cmp	r3, #0
   1ea90:	caffff50 	bgt	1e7d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x828>
   1ea94:	e5953094 	ldr	r3, [r5, #148]	; 0x94
   1ea98:	e59d100c 	ldr	r1, [sp, #12]
   1ea9c:	e0432001 	sub	r2, r3, r1
   1eaa0:	e3520000 	cmp	r2, #0
   1eaa4:	ba000005 	blt	1eac0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   1eaa8:	e1510003 	cmp	r1, r3
   1eaac:	1affff49 	bne	1e7d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x828>
   1eab0:	e5953098 	ldr	r3, [r5, #152]	; 0x98
   1eab4:	e043300a 	sub	r3, r3, sl
   1eab8:	e3530000 	cmp	r3, #0
   1eabc:	caffff45 	bgt	1e7d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x828>
   1eac0:	e59d3010 	ldr	r3, [sp, #16]
   1eac4:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1eac8:	e59d300c 	ldr	r3, [sp, #12]
   1eacc:	e5853094 	str	r3, [r5, #148]	; 0x94
   1ead0:	e585a098 	str	sl, [r5, #152]	; 0x98
   1ead4:	eaffff3f 	b	1e7d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x828>
   1ead8:	e5952088 	ldr	r2, [r5, #136]	; 0x88
   1eadc:	e04a1002 	sub	r1, sl, r2
   1eae0:	e3510000 	cmp	r1, #0
   1eae4:	da00005c 	ble	1ec5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcac>
   1eae8:	e04a3003 	sub	r3, sl, r3
   1eaec:	e3530000 	cmp	r3, #0
   1eaf0:	caffff33 	bgt	1e7c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x814>
   1eaf4:	eaffff37 	b	1e7d8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x828>
   1eaf8:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1eafc:	e15a0003 	cmp	sl, r3
   1eb00:	1afffed1 	bne	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1eb04:	e1a0100a 	mov	r1, sl
   1eb08:	e28500b0 	add	r0, r5, #176	; 0xb0
   1eb0c:	eb00028c 	bl	1f544 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1eb10:	e3a03000 	mov	r3, #0
   1eb14:	e3a01001 	mov	r1, #1
   1eb18:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1eb1c:	e1a00005 	mov	r0, r5
   1eb20:	ebfffa4f 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1eb24:	e3a03006 	mov	r3, #6
   1eb28:	e3012770 	movw	r2, #6000	; 0x1770
   1eb2c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1eb30:	e3a01002 	mov	r1, #2
   1eb34:	e1a00005 	mov	r0, r5
   1eb38:	ebfffaf5 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eb3c:	e2850048 	add	r0, r5, #72	; 0x48
   1eb40:	eb00010c 	bl	1ef78 <CRetransmissionQueue::IsEmpty() const>
   1eb44:	e3500000 	cmp	r0, #0
   1eb48:	0afffebf 	beq	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1eb4c:	e2850068 	add	r0, r5, #104	; 0x68
   1eb50:	eb0018df 	bl	24ed4 <CSynchronizationEvent::Set()>
   1eb54:	eafffebc 	b	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1eb58:	e3a01001 	mov	r1, #1
   1eb5c:	e1a00005 	mov	r0, r5
   1eb60:	ebfffa3f 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1eb64:	e1a00005 	mov	r0, r5
   1eb68:	e3a01000 	mov	r1, #0
   1eb6c:	ebfffa3c 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1eb70:	e3a0300a 	mov	r3, #10
   1eb74:	e1a00005 	mov	r0, r5
   1eb78:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1eb7c:	e3012770 	movw	r2, #6000	; 0x1770
   1eb80:	e3a01002 	mov	r1, #2
   1eb84:	ebfffae2 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eb88:	eafffd86 	b	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1eb8c:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1eb90:	e15a0003 	cmp	sl, r3
   1eb94:	03a04000 	moveq	r4, #0
   1eb98:	03a01001 	moveq	r1, #1
   1eb9c:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   1eba0:	0affffed 	beq	1eb5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbac>
   1eba4:	e3a03008 	mov	r3, #8
   1eba8:	e3a00001 	mov	r0, #1
   1ebac:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ebb0:	eafffd04 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ebb4:	e3a03007 	mov	r3, #7
   1ebb8:	e2850068 	add	r0, r5, #104	; 0x68
   1ebbc:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ebc0:	eb0018c3 	bl	24ed4 <CSynchronizationEvent::Set()>
   1ebc4:	e3a00001 	mov	r0, #1
   1ebc8:	eafffcfe 	b	1dfc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ebcc:	e1a00005 	mov	r0, r5
   1ebd0:	e300150f 	movw	r1, #1295	; 0x50f
   1ebd4:	ebfffc89 	bl	1de00 <CTCPConnection::UnexpectedState(unsigned int)>
   1ebd8:	eafffd72 	b	1e1a8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1f8>
   1ebdc:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1ebe0:	e15a0003 	cmp	sl, r3
   1ebe4:	1afffe98 	bne	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1ebe8:	e1a0100a 	mov	r1, sl
   1ebec:	e28500b0 	add	r0, r5, #176	; 0xb0
   1ebf0:	eb000253 	bl	1f544 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ebf4:	e3a03000 	mov	r3, #0
   1ebf8:	e1a00005 	mov	r0, r5
   1ebfc:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1ec00:	e3a01001 	mov	r1, #1
   1ec04:	ebfffa16 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1ec08:	e3a0300a 	mov	r3, #10
   1ec0c:	e3012770 	movw	r2, #6000	; 0x1770
   1ec10:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ec14:	e3a01002 	mov	r1, #2
   1ec18:	e1a00005 	mov	r0, r5
   1ec1c:	ebfffabc 	bl	1d714 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ec20:	eafffe89 	b	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1ec24:	e59d3010 	ldr	r3, [sp, #16]
   1ec28:	e1a0100a 	mov	r1, sl
   1ec2c:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1ec30:	e28500b0 	add	r0, r5, #176	; 0xb0
   1ec34:	e59d300c 	ldr	r3, [sp, #12]
   1ec38:	e5853094 	str	r3, [r5, #148]	; 0x94
   1ec3c:	e585a098 	str	sl, [r5, #152]	; 0x98
   1ec40:	e585a084 	str	sl, [r5, #132]	; 0x84
   1ec44:	eb00023e 	bl	1f544 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ec48:	e3a02004 	mov	r2, #4
   1ec4c:	e3a03005 	mov	r3, #5
   1ec50:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1ec54:	e5853060 	str	r3, [r5, #96]	; 0x60
   1ec58:	eafffe7b 	b	1e64c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   1ec5c:	e1a0100a 	mov	r1, sl
   1ec60:	e28500b0 	add	r0, r5, #176	; 0xb0
   1ec64:	eb000236 	bl	1f544 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ec68:	e5957084 	ldr	r7, [r5, #132]	; 0x84
   1ec6c:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1ec70:	e04a7007 	sub	r7, sl, r7
   1ec74:	e585a084 	str	sl, [r5, #132]	; 0x84
   1ec78:	e15a0003 	cmp	sl, r3
   1ec7c:	1a000006 	bne	1ec9c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcec>
   1ec80:	e1a00005 	mov	r0, r5
   1ec84:	e3a01001 	mov	r1, #1
   1ec88:	ebfff9f5 	bl	1d464 <CTCPConnection::StopTimer(unsigned int)>
   1ec8c:	e3a03005 	mov	r3, #5
   1ec90:	e2850068 	add	r0, r5, #104	; 0x68
   1ec94:	e5853060 	str	r3, [r5, #96]	; 0x60
   1ec98:	eb00188d 	bl	24ed4 <CSynchronizationEvent::Set()>
   1ec9c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1eca0:	e3530005 	cmp	r3, #5
   1eca4:	0a00000c 	beq	1ecdc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd2c>
   1eca8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ecac:	e3530008 	cmp	r3, #8
   1ecb0:	0a000009 	beq	1ecdc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd2c>
   1ecb4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ecb8:	e3570001 	cmp	r7, #1
   1ecbc:	03530004 	cmpeq	r3, #4
   1ecc0:	0affff73 	beq	1ea94 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xae4>
   1ecc4:	e3570000 	cmp	r7, #0
   1ecc8:	0affff71 	beq	1ea94 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xae4>
   1eccc:	e1a01007 	mov	r1, r7
   1ecd0:	e2850048 	add	r0, r5, #72	; 0x48
   1ecd4:	eb000158 	bl	1f23c <CRetransmissionQueue::Advance(unsigned int)>
   1ecd8:	eaffff6d 	b	1ea94 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xae4>
   1ecdc:	e3a03000 	mov	r3, #0
   1ece0:	e2477001 	sub	r7, r7, #1
   1ece4:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1ece8:	eafffff1 	b	1ecb4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd04>

0001ecec <CTCPConnection::TimerHandler(unsigned int)>:
   1ecec:	e92d4070 	push	{r4, r5, r6, lr}
   1ecf0:	e3510002 	cmp	r1, #2
   1ecf4:	8a00003b 	bhi	1ede8 <CTCPConnection::TimerHandler(unsigned int)+0xfc>
   1ecf8:	e1a04000 	mov	r4, r0
   1ecfc:	e5900080 	ldr	r0, [r0, #128]	; 0x80
   1ed00:	e1a05001 	mov	r5, r1
   1ed04:	e3500000 	cmp	r0, #0
   1ed08:	1a00000c 	bne	1ed40 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1ed0c:	e281301c 	add	r3, r1, #28
   1ed10:	e0843103 	add	r3, r4, r3, lsl #2
   1ed14:	e5932004 	ldr	r2, [r3, #4]
   1ed18:	e3520000 	cmp	r2, #0
   1ed1c:	15830004 	strne	r0, [r3, #4]
   1ed20:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ed24:	e3550001 	cmp	r5, #1
   1ed28:	0a000017 	beq	1ed8c <CTCPConnection::TimerHandler(unsigned int)+0xa0>
   1ed2c:	e3550002 	cmp	r5, #2
   1ed30:	1a000034 	bne	1ee08 <CTCPConnection::TimerHandler(unsigned int)+0x11c>
   1ed34:	e3a03000 	mov	r3, #0
   1ed38:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1ed3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ed40:	eb0037c1 	bl	2cc4c <EnterCritical>
   1ed44:	e285301c 	add	r3, r5, #28
   1ed48:	e0843103 	add	r3, r4, r3, lsl #2
   1ed4c:	e5932004 	ldr	r2, [r3, #4]
   1ed50:	e3520000 	cmp	r2, #0
   1ed54:	1a000004 	bne	1ed6c <CTCPConnection::TimerHandler(unsigned int)+0x80>
   1ed58:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   1ed5c:	e3530000 	cmp	r3, #0
   1ed60:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ed64:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ed68:	ea0037e4 	b	2cd00 <LeaveCritical>
   1ed6c:	e5942080 	ldr	r2, [r4, #128]	; 0x80
   1ed70:	e3a01000 	mov	r1, #0
   1ed74:	e5831004 	str	r1, [r3, #4]
   1ed78:	e1520001 	cmp	r2, r1
   1ed7c:	0affffe8 	beq	1ed24 <CTCPConnection::TimerHandler(unsigned int)+0x38>
   1ed80:	eb0037de 	bl	2cd00 <LeaveCritical>
   1ed84:	e3550001 	cmp	r5, #1
   1ed88:	1affffe7 	bne	1ed2c <CTCPConnection::TimerHandler(unsigned int)+0x40>
   1ed8c:	e28400b0 	add	r0, r4, #176	; 0xb0
   1ed90:	eb0001ae 	bl	1f450 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   1ed94:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   1ed98:	e3530000 	cmp	r3, #0
   1ed9c:	e2433001 	sub	r3, r3, #1
   1eda0:	e5843060 	str	r3, [r4, #96]	; 0x60
   1eda4:	0a000015 	beq	1ee00 <CTCPConnection::TimerHandler(unsigned int)+0x114>
   1eda8:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1edac:	e353000a 	cmp	r3, #10
   1edb0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1edb4:	ea00000a 	b	1ede4 <CTCPConnection::TimerHandler(unsigned int)+0xf8>
   1edb8:	0001ee68 	.word	0x0001ee68
   1edbc:	0001ee68 	.word	0x0001ee68
   1edc0:	0001ee50 	.word	0x0001ee50
   1edc4:	0001ee50 	.word	0x0001ee50
   1edc8:	0001ee38 	.word	0x0001ee38
   1edcc:	0001ee20 	.word	0x0001ee20
   1edd0:	0001ee68 	.word	0x0001ee68
   1edd4:	0001ee38 	.word	0x0001ee38
   1edd8:	0001ee20 	.word	0x0001ee20
   1eddc:	0001ee20 	.word	0x0001ee20
   1ede0:	0001ee68 	.word	0x0001ee68
   1ede4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ede8:	e30517cc 	movw	r1, #22476	; 0x57cc
   1edec:	e3401003 	movt	r1, #3
   1edf0:	e3050810 	movw	r0, #22544	; 0x5810
   1edf4:	e3400003 	movt	r0, #3
   1edf8:	e30025cf 	movw	r2, #1487	; 0x5cf
   1edfc:	eb00185c 	bl	24f74 <assertion_failed>
   1ee00:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1ee04:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ee08:	e30517cc 	movw	r1, #22476	; 0x57cc
   1ee0c:	e3401003 	movt	r1, #3
   1ee10:	e3010398 	movw	r0, #5016	; 0x1398
   1ee14:	e3400003 	movt	r0, #3
   1ee18:	e300260d 	movw	r2, #1549	; 0x60d
   1ee1c:	eb001854 	bl	24f74 <assertion_failed>
   1ee20:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   1ee24:	e3530000 	cmp	r3, #0
   1ee28:	1a000012 	bne	1ee78 <CTCPConnection::TimerHandler(unsigned int)+0x18c>
   1ee2c:	e3a03001 	mov	r3, #1
   1ee30:	e5c4305e 	strb	r3, [r4, #94]	; 0x5e
   1ee34:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ee38:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   1ee3c:	e3530000 	cmp	r3, #0
   1ee40:	1a000012 	bne	1ee90 <CTCPConnection::TimerHandler(unsigned int)+0x1a4>
   1ee44:	e3a03001 	mov	r3, #1
   1ee48:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   1ee4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ee50:	e5d4305d 	ldrb	r3, [r4, #93]	; 0x5d
   1ee54:	e3530000 	cmp	r3, #0
   1ee58:	1a000012 	bne	1eea8 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   1ee5c:	e3a03001 	mov	r3, #1
   1ee60:	e5c4305d 	strb	r3, [r4, #93]	; 0x5d
   1ee64:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ee68:	e1a00004 	mov	r0, r4
   1ee6c:	e30015ef 	movw	r1, #1519	; 0x5ef
   1ee70:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ee74:	eafffbe1 	b	1de00 <CTCPConnection::UnexpectedState(unsigned int)>
   1ee78:	e30517cc 	movw	r1, #22476	; 0x57cc
   1ee7c:	e3401003 	movt	r1, #3
   1ee80:	e305085c 	movw	r0, #22620	; 0x585c
   1ee84:	e3400003 	movt	r0, #3
   1ee88:	e3002601 	movw	r2, #1537	; 0x601
   1ee8c:	eb001838 	bl	24f74 <assertion_failed>
   1ee90:	e30517cc 	movw	r1, #22476	; 0x57cc
   1ee94:	e3401003 	movt	r1, #3
   1ee98:	e3050968 	movw	r0, #22888	; 0x5968
   1ee9c:	e3400003 	movt	r0, #3
   1eea0:	e30025fa 	movw	r2, #1530	; 0x5fa
   1eea4:	eb001832 	bl	24f74 <assertion_failed>
   1eea8:	e30517cc 	movw	r1, #22476	; 0x57cc
   1eeac:	e3401003 	movt	r1, #3
   1eeb0:	e305095c 	movw	r0, #22876	; 0x595c
   1eeb4:	e3400003 	movt	r0, #3
   1eeb8:	e30025f4 	movw	r2, #1524	; 0x5f4
   1eebc:	eb00182c 	bl	24f74 <assertion_failed>

0001eec0 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   1eec0:	e92d4010 	push	{r4, lr}
   1eec4:	e2520000 	subs	r0, r2, #0
   1eec8:	0a000003 	beq	1eedc <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   1eecc:	e3510002 	cmp	r1, #2
   1eed0:	8a000007 	bhi	1eef4 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x34>
   1eed4:	e8bd4010 	pop	{r4, lr}
   1eed8:	eaffff83 	b	1ecec <CTCPConnection::TimerHandler(unsigned int)>
   1eedc:	e30517cc 	movw	r1, #22476	; 0x57cc
   1eee0:	e3401003 	movt	r1, #3
   1eee4:	e30007a4 	movw	r0, #1956	; 0x7a4
   1eee8:	e3400003 	movt	r0, #3
   1eeec:	e3002615 	movw	r2, #1557	; 0x615
   1eef0:	eb00181f 	bl	24f74 <assertion_failed>
   1eef4:	e30517cc 	movw	r1, #22476	; 0x57cc
   1eef8:	e3401003 	movt	r1, #3
   1eefc:	e3050810 	movw	r0, #22544	; 0x5810
   1ef00:	e3400003 	movt	r0, #3
   1ef04:	e3002618 	movw	r2, #1560	; 0x618
   1ef08:	eb001819 	bl	24f74 <assertion_failed>

0001ef0c <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   1ef0c:	e92d4010 	push	{r4, lr}
   1ef10:	e3a03000 	mov	r3, #0
   1ef14:	e3510001 	cmp	r1, #1
   1ef18:	e880000a 	stm	r0, {r1, r3}
   1ef1c:	e5803008 	str	r3, [r0, #8]
   1ef20:	e580300c 	str	r3, [r0, #12]
   1ef24:	e5803010 	str	r3, [r0, #16]
   1ef28:	9a000005 	bls	1ef44 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x38>
   1ef2c:	e1a04000 	mov	r4, r0
   1ef30:	e1a00001 	mov	r0, r1
   1ef34:	eb0033f3 	bl	2bf08 <operator new[](unsigned int)>
   1ef38:	e5840004 	str	r0, [r4, #4]
   1ef3c:	e1a00004 	mov	r0, r4
   1ef40:	e8bd8010 	pop	{r4, pc}
   1ef44:	e30519f4 	movw	r1, #23028	; 0x59f4
   1ef48:	e3401003 	movt	r1, #3
   1ef4c:	e3050a0c 	movw	r0, #23052	; 0x5a0c
   1ef50:	e3400003 	movt	r0, #3
   1ef54:	e3a0201e 	mov	r2, #30
   1ef58:	eb001805 	bl	24f74 <assertion_failed>

0001ef5c <CRetransmissionQueue::~CRetransmissionQueue()>:
   1ef5c:	e92d4010 	push	{r4, lr}
   1ef60:	e3a01001 	mov	r1, #1
   1ef64:	e1a04000 	mov	r4, r0
   1ef68:	e5900004 	ldr	r0, [r0, #4]
   1ef6c:	eb0033ed 	bl	2bf28 <operator delete(void*, unsigned int)>
   1ef70:	e1a00004 	mov	r0, r4
   1ef74:	e8bd8010 	pop	{r4, pc}

0001ef78 <CRetransmissionQueue::IsEmpty() const>:
   1ef78:	e590200c 	ldr	r2, [r0, #12]
   1ef7c:	e5900008 	ldr	r0, [r0, #8]
   1ef80:	e0420000 	sub	r0, r2, r0
   1ef84:	e16f0f10 	clz	r0, r0
   1ef88:	e1a002a0 	lsr	r0, r0, #5
   1ef8c:	e12fff1e 	bx	lr

0001ef90 <CRetransmissionQueue::GetFreeSpace() const>:
   1ef90:	e5903000 	ldr	r3, [r0]
   1ef94:	e92d4010 	push	{r4, lr}
   1ef98:	e3530001 	cmp	r3, #1
   1ef9c:	9a00000b 	bls	1efd0 <CRetransmissionQueue::GetFreeSpace() const+0x40>
   1efa0:	e5902008 	ldr	r2, [r0, #8]
   1efa4:	e1530002 	cmp	r3, r2
   1efa8:	9a00000e 	bls	1efe8 <CRetransmissionQueue::GetFreeSpace() const+0x58>
   1efac:	e590000c 	ldr	r0, [r0, #12]
   1efb0:	e1530000 	cmp	r3, r0
   1efb4:	9a000011 	bls	1f000 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   1efb8:	e1520000 	cmp	r2, r0
   1efbc:	20833000 	addcs	r3, r3, r0
   1efc0:	32403001 	subcc	r3, r0, #1
   1efc4:	22433001 	subcs	r3, r3, #1
   1efc8:	e0430002 	sub	r0, r3, r2
   1efcc:	e8bd8010 	pop	{r4, pc}
   1efd0:	e30519f4 	movw	r1, #23028	; 0x59f4
   1efd4:	e3401003 	movt	r1, #3
   1efd8:	e3050a0c 	movw	r0, #23052	; 0x5a0c
   1efdc:	e3400003 	movt	r0, #3
   1efe0:	e3a02033 	mov	r2, #51	; 0x33
   1efe4:	eb0017e2 	bl	24f74 <assertion_failed>
   1efe8:	e30519f4 	movw	r1, #23028	; 0x59f4
   1efec:	e3401003 	movt	r1, #3
   1eff0:	e3050a18 	movw	r0, #23064	; 0x5a18
   1eff4:	e3400003 	movt	r0, #3
   1eff8:	e3a02034 	mov	r2, #52	; 0x34
   1effc:	eb0017dc 	bl	24f74 <assertion_failed>
   1f000:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f004:	e3401003 	movt	r1, #3
   1f008:	e3050a2c 	movw	r0, #23084	; 0x5a2c
   1f00c:	e3400003 	movt	r0, #3
   1f010:	e3a02035 	mov	r2, #53	; 0x35
   1f014:	eb0017d6 	bl	24f74 <assertion_failed>

0001f018 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   1f018:	e92d4070 	push	{r4, r5, r6, lr}
   1f01c:	e2526000 	subs	r6, r2, #0
   1f020:	0a000018 	beq	1f088 <CRetransmissionQueue::Write(void const*, unsigned int)+0x70>
   1f024:	e1a05001 	mov	r5, r1
   1f028:	e1a04000 	mov	r4, r0
   1f02c:	ebffffd7 	bl	1ef90 <CRetransmissionQueue::GetFreeSpace() const>
   1f030:	e1500006 	cmp	r0, r6
   1f034:	3a000019 	bcc	1f0a0 <CRetransmissionQueue::Write(void const*, unsigned int)+0x88>
   1f038:	e3550000 	cmp	r5, #0
   1f03c:	0a00001d 	beq	1f0b8 <CRetransmissionQueue::Write(void const*, unsigned int)+0xa0>
   1f040:	e5941004 	ldr	r1, [r4, #4]
   1f044:	e3510000 	cmp	r1, #0
   1f048:	10852006 	addne	r2, r5, r6
   1f04c:	15943008 	ldrne	r3, [r4, #8]
   1f050:	0a00001e 	beq	1f0d0 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   1f054:	e2830001 	add	r0, r3, #1
   1f058:	e5840008 	str	r0, [r4, #8]
   1f05c:	e4d50001 	ldrb	r0, [r5], #1
   1f060:	e7c10003 	strb	r0, [r1, r3]
   1f064:	e1520005 	cmp	r2, r5
   1f068:	e5940008 	ldr	r0, [r4, #8]
   1f06c:	e5941000 	ldr	r1, [r4]
   1f070:	e733f110 	udiv	r3, r0, r1
   1f074:	e0630391 	mls	r3, r1, r3, r0
   1f078:	e5843008 	str	r3, [r4, #8]
   1f07c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1f080:	e5941004 	ldr	r1, [r4, #4]
   1f084:	eafffff2 	b	1f054 <CRetransmissionQueue::Write(void const*, unsigned int)+0x3c>
   1f088:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f08c:	e3401003 	movt	r1, #3
   1f090:	e30500e0 	movw	r0, #20704	; 0x50e0
   1f094:	e3400003 	movt	r0, #3
   1f098:	e3a02041 	mov	r2, #65	; 0x41
   1f09c:	eb0017b4 	bl	24f74 <assertion_failed>
   1f0a0:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f0a4:	e3401003 	movt	r1, #3
   1f0a8:	e3050a40 	movw	r0, #23104	; 0x5a40
   1f0ac:	e3400003 	movt	r0, #3
   1f0b0:	e3a02042 	mov	r2, #66	; 0x42
   1f0b4:	eb0017ae 	bl	24f74 <assertion_failed>
   1f0b8:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f0bc:	e3401003 	movt	r1, #3
   1f0c0:	e3050a5c 	movw	r0, #23132	; 0x5a5c
   1f0c4:	e3400003 	movt	r0, #3
   1f0c8:	e3a02045 	mov	r2, #69	; 0x45
   1f0cc:	eb0017a8 	bl	24f74 <assertion_failed>
   1f0d0:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f0d4:	e3401003 	movt	r1, #3
   1f0d8:	e3020f00 	movw	r0, #12032	; 0x2f00
   1f0dc:	e3400003 	movt	r0, #3
   1f0e0:	e3a02046 	mov	r2, #70	; 0x46
   1f0e4:	eb0017a2 	bl	24f74 <assertion_failed>

0001f0e8 <CRetransmissionQueue::GetBytesAvailable() const>:
   1f0e8:	e5903000 	ldr	r3, [r0]
   1f0ec:	e92d4010 	push	{r4, lr}
   1f0f0:	e3530001 	cmp	r3, #1
   1f0f4:	9a00000a 	bls	1f124 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   1f0f8:	e5902008 	ldr	r2, [r0, #8]
   1f0fc:	e1530002 	cmp	r3, r2
   1f100:	9a00000d 	bls	1f13c <CRetransmissionQueue::GetBytesAvailable() const+0x54>
   1f104:	e5900010 	ldr	r0, [r0, #16]
   1f108:	e1530000 	cmp	r3, r0
   1f10c:	9a000010 	bls	1f154 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1f110:	e1520000 	cmp	r2, r0
   1f114:	30833002 	addcc	r3, r3, r2
   1f118:	30430000 	subcc	r0, r3, r0
   1f11c:	20420000 	subcs	r0, r2, r0
   1f120:	e8bd8010 	pop	{r4, pc}
   1f124:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f128:	e3401003 	movt	r1, #3
   1f12c:	e3050a0c 	movw	r0, #23052	; 0x5a0c
   1f130:	e3400003 	movt	r0, #3
   1f134:	e3a02051 	mov	r2, #81	; 0x51
   1f138:	eb00178d 	bl	24f74 <assertion_failed>
   1f13c:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f140:	e3401003 	movt	r1, #3
   1f144:	e3050a18 	movw	r0, #23064	; 0x5a18
   1f148:	e3400003 	movt	r0, #3
   1f14c:	e3a02052 	mov	r2, #82	; 0x52
   1f150:	eb001787 	bl	24f74 <assertion_failed>
   1f154:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f158:	e3401003 	movt	r1, #3
   1f15c:	e3050a64 	movw	r0, #23140	; 0x5a64
   1f160:	e3400003 	movt	r0, #3
   1f164:	e3a02053 	mov	r2, #83	; 0x53
   1f168:	eb001781 	bl	24f74 <assertion_failed>

0001f16c <CRetransmissionQueue::Read(void*, unsigned int)>:
   1f16c:	e92d4070 	push	{r4, r5, r6, lr}
   1f170:	e2526000 	subs	r6, r2, #0
   1f174:	0a000018 	beq	1f1dc <CRetransmissionQueue::Read(void*, unsigned int)+0x70>
   1f178:	e1a05001 	mov	r5, r1
   1f17c:	e1a04000 	mov	r4, r0
   1f180:	ebffffd8 	bl	1f0e8 <CRetransmissionQueue::GetBytesAvailable() const>
   1f184:	e1500006 	cmp	r0, r6
   1f188:	3a000019 	bcc	1f1f4 <CRetransmissionQueue::Read(void*, unsigned int)+0x88>
   1f18c:	e3550000 	cmp	r5, #0
   1f190:	0a00001d 	beq	1f20c <CRetransmissionQueue::Read(void*, unsigned int)+0xa0>
   1f194:	e5941004 	ldr	r1, [r4, #4]
   1f198:	e3510000 	cmp	r1, #0
   1f19c:	10852006 	addne	r2, r5, r6
   1f1a0:	15943010 	ldrne	r3, [r4, #16]
   1f1a4:	0a00001e 	beq	1f224 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   1f1a8:	e2830001 	add	r0, r3, #1
   1f1ac:	e5840010 	str	r0, [r4, #16]
   1f1b0:	e7d13003 	ldrb	r3, [r1, r3]
   1f1b4:	e4c53001 	strb	r3, [r5], #1
   1f1b8:	e5940010 	ldr	r0, [r4, #16]
   1f1bc:	e1520005 	cmp	r2, r5
   1f1c0:	e5941000 	ldr	r1, [r4]
   1f1c4:	e733f110 	udiv	r3, r0, r1
   1f1c8:	e0630391 	mls	r3, r1, r3, r0
   1f1cc:	e5843010 	str	r3, [r4, #16]
   1f1d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1f1d4:	e5941004 	ldr	r1, [r4, #4]
   1f1d8:	eafffff2 	b	1f1a8 <CRetransmissionQueue::Read(void*, unsigned int)+0x3c>
   1f1dc:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f1e0:	e3401003 	movt	r1, #3
   1f1e4:	e30500e0 	movw	r0, #20704	; 0x50e0
   1f1e8:	e3400003 	movt	r0, #3
   1f1ec:	e3a0205f 	mov	r2, #95	; 0x5f
   1f1f0:	eb00175f 	bl	24f74 <assertion_failed>
   1f1f4:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f1f8:	e3401003 	movt	r1, #3
   1f1fc:	e3050a7c 	movw	r0, #23164	; 0x5a7c
   1f200:	e3400003 	movt	r0, #3
   1f204:	e3a02060 	mov	r2, #96	; 0x60
   1f208:	eb001759 	bl	24f74 <assertion_failed>
   1f20c:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f210:	e3401003 	movt	r1, #3
   1f214:	e3050a5c 	movw	r0, #23132	; 0x5a5c
   1f218:	e3400003 	movt	r0, #3
   1f21c:	e3a02063 	mov	r2, #99	; 0x63
   1f220:	eb001753 	bl	24f74 <assertion_failed>
   1f224:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f228:	e3401003 	movt	r1, #3
   1f22c:	e3020f00 	movw	r0, #12032	; 0x2f00
   1f230:	e3400003 	movt	r0, #3
   1f234:	e3a02064 	mov	r2, #100	; 0x64
   1f238:	eb00174d 	bl	24f74 <assertion_failed>

0001f23c <CRetransmissionQueue::Advance(unsigned int)>:
   1f23c:	e5903000 	ldr	r3, [r0]
   1f240:	e92d4010 	push	{r4, lr}
   1f244:	e3530001 	cmp	r3, #1
   1f248:	9a00000a 	bls	1f278 <CRetransmissionQueue::Advance(unsigned int)+0x3c>
   1f24c:	e590200c 	ldr	r2, [r0, #12]
   1f250:	e1530002 	cmp	r3, r2
   1f254:	9a00000d 	bls	1f290 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   1f258:	e590c010 	ldr	ip, [r0, #16]
   1f25c:	e153000c 	cmp	r3, ip
   1f260:	9a000010 	bls	1f2a8 <CRetransmissionQueue::Advance(unsigned int)+0x6c>
   1f264:	e0822001 	add	r2, r2, r1
   1f268:	e731f312 	udiv	r1, r2, r3
   1f26c:	e0622193 	mls	r2, r3, r1, r2
   1f270:	e580200c 	str	r2, [r0, #12]
   1f274:	e8bd8010 	pop	{r4, pc}
   1f278:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f27c:	e3401003 	movt	r1, #3
   1f280:	e3050a0c 	movw	r0, #23052	; 0x5a0c
   1f284:	e3400003 	movt	r0, #3
   1f288:	e3a0206f 	mov	r2, #111	; 0x6f
   1f28c:	eb001738 	bl	24f74 <assertion_failed>
   1f290:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f294:	e3401003 	movt	r1, #3
   1f298:	e3050a2c 	movw	r0, #23084	; 0x5a2c
   1f29c:	e3400003 	movt	r0, #3
   1f2a0:	e3a02070 	mov	r2, #112	; 0x70
   1f2a4:	eb001732 	bl	24f74 <assertion_failed>
   1f2a8:	e30519f4 	movw	r1, #23028	; 0x59f4
   1f2ac:	e3401003 	movt	r1, #3
   1f2b0:	e3050a64 	movw	r0, #23140	; 0x5a64
   1f2b4:	e3400003 	movt	r0, #3
   1f2b8:	e3a02071 	mov	r2, #113	; 0x71
   1f2bc:	eb00172c 	bl	24f74 <assertion_failed>

0001f2c0 <CRetransmissionQueue::Reset()>:
   1f2c0:	e590300c 	ldr	r3, [r0, #12]
   1f2c4:	e5803010 	str	r3, [r0, #16]
   1f2c8:	e12fff1e 	bx	lr

0001f2cc <CRetransmissionQueue::Flush()>:
   1f2cc:	e3a03000 	mov	r3, #0
   1f2d0:	e5803008 	str	r3, [r0, #8]
   1f2d4:	e580300c 	str	r3, [r0, #12]
   1f2d8:	e5803010 	str	r3, [r0, #16]
   1f2dc:	e12fff1e 	bx	lr

0001f2e0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   1f2e0:	e92d4010 	push	{r4, lr}
   1f2e4:	e1a04000 	mov	r4, r0
   1f2e8:	eb003042 	bl	2b3f8 <CTimer::Get()>
   1f2ec:	e3a03000 	mov	r3, #0
   1f2f0:	e3a02f4b 	mov	r2, #300	; 0x12c
   1f2f4:	e3500000 	cmp	r0, #0
   1f2f8:	e5842008 	str	r2, [r4, #8]
   1f2fc:	e5840000 	str	r0, [r4]
   1f300:	e3a02001 	mov	r2, #1
   1f304:	e5843004 	str	r3, [r4, #4]
   1f308:	e5c43018 	strb	r3, [r4, #24]
   1f30c:	e5843020 	str	r3, [r4, #32]
   1f310:	e5c4200c 	strb	r2, [r4, #12]
   1f314:	e5842024 	str	r2, [r4, #36]	; 0x24
   1f318:	0a000001 	beq	1f324 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   1f31c:	e1a00004 	mov	r0, r4
   1f320:	e8bd8010 	pop	{r4, pc}
   1f324:	e3051a9c 	movw	r1, #23196	; 0x5a9c
   1f328:	e3401003 	movt	r1, #3
   1f32c:	e30007f4 	movw	r0, #2036	; 0x7f4
   1f330:	e3400003 	movt	r0, #3
   1f334:	e3a02033 	mov	r2, #51	; 0x33
   1f338:	eb00170d 	bl	24f74 <assertion_failed>

0001f33c <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   1f33c:	e12fff1e 	bx	lr

0001f340 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   1f340:	e5900008 	ldr	r0, [r0, #8]
   1f344:	e12fff1e 	bx	lr

0001f348 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   1f348:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f34c:	e3530000 	cmp	r3, #0
   1f350:	1a000007 	bne	1f374 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x2c>
   1f354:	e5801004 	str	r1, [r0, #4]
   1f358:	e3a02001 	mov	r2, #1
   1f35c:	e3a01f4b 	mov	r1, #300	; 0x12c
   1f360:	e5c03018 	strb	r3, [r0, #24]
   1f364:	e5803020 	str	r3, [r0, #32]
   1f368:	e5801008 	str	r1, [r0, #8]
   1f36c:	e5c0200c 	strb	r2, [r0, #12]
   1f370:	e12fff1e 	bx	lr
   1f374:	e92d4070 	push	{r4, r5, r6, lr}
   1f378:	e1a04000 	mov	r4, r0
   1f37c:	e1a00003 	mov	r0, r3
   1f380:	e1a05001 	mov	r5, r1
   1f384:	eb003630 	bl	2cc4c <EnterCritical>
   1f388:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1f38c:	e3a03f4b 	mov	r3, #300	; 0x12c
   1f390:	e5845004 	str	r5, [r4, #4]
   1f394:	e3520000 	cmp	r2, #0
   1f398:	e5843008 	str	r3, [r4, #8]
   1f39c:	e3a02001 	mov	r2, #1
   1f3a0:	e3a03000 	mov	r3, #0
   1f3a4:	e5c4200c 	strb	r2, [r4, #12]
   1f3a8:	e5c43018 	strb	r3, [r4, #24]
   1f3ac:	e5843020 	str	r3, [r4, #32]
   1f3b0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1f3b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f3b8:	ea003650 	b	2cd00 <LeaveCritical>

0001f3bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   1f3bc:	e92d4010 	push	{r4, lr}
   1f3c0:	e1a04000 	mov	r4, r0
   1f3c4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1f3c8:	e3500000 	cmp	r0, #0
   1f3cc:	1a000011 	bne	1f418 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   1f3d0:	e5d43018 	ldrb	r3, [r4, #24]
   1f3d4:	e3530000 	cmp	r3, #0
   1f3d8:	18bd8010 	popne	{r4, pc}
   1f3dc:	e5943020 	ldr	r3, [r4, #32]
   1f3e0:	e3530000 	cmp	r3, #0
   1f3e4:	1a000006 	bne	1f404 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1f3e8:	e5940000 	ldr	r0, [r4]
   1f3ec:	e3a03001 	mov	r3, #1
   1f3f0:	e5c43018 	strb	r3, [r4, #24]
   1f3f4:	e3500000 	cmp	r0, #0
   1f3f8:	0a00000e 	beq	1f438 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x7c>
   1f3fc:	eb002d32 	bl	2a8cc <CTimer::GetTicks() const>
   1f400:	e584001c 	str	r0, [r4, #28]
   1f404:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f408:	e3530000 	cmp	r3, #0
   1f40c:	08bd8010 	popeq	{r4, pc}
   1f410:	e8bd4010 	pop	{r4, lr}
   1f414:	ea003639 	b	2cd00 <LeaveCritical>
   1f418:	eb00360b 	bl	2cc4c <EnterCritical>
   1f41c:	e5d43018 	ldrb	r3, [r4, #24]
   1f420:	e3530000 	cmp	r3, #0
   1f424:	1afffff6 	bne	1f404 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1f428:	e5943020 	ldr	r3, [r4, #32]
   1f42c:	e3530000 	cmp	r3, #0
   1f430:	1afffff3 	bne	1f404 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1f434:	eaffffeb 	b	1f3e8 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   1f438:	e3051a9c 	movw	r1, #23196	; 0x5a9c
   1f43c:	e3401003 	movt	r1, #3
   1f440:	e30007f4 	movw	r0, #2036	; 0x7f4
   1f444:	e3400003 	movt	r0, #3
   1f448:	e3a0205f 	mov	r2, #95	; 0x5f
   1f44c:	eb0016c8 	bl	24f74 <assertion_failed>

0001f450 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   1f450:	e92d4010 	push	{r4, lr}
   1f454:	e1a04000 	mov	r4, r0
   1f458:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1f45c:	e3500000 	cmp	r0, #0
   1f460:	1a000011 	bne	1f4ac <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   1f464:	e5943008 	ldr	r3, [r4, #8]
   1f468:	e3021ee0 	movw	r1, #12000	; 0x2ee0
   1f46c:	e5942020 	ldr	r2, [r4, #32]
   1f470:	e1a03083 	lsl	r3, r3, #1
   1f474:	e2822001 	add	r2, r2, #1
   1f478:	e1530001 	cmp	r3, r1
   1f47c:	e5842020 	str	r2, [r4, #32]
   1f480:	21a03001 	movcs	r3, r1
   1f484:	e3520002 	cmp	r2, #2
   1f488:	e5843008 	str	r3, [r4, #8]
   1f48c:	83a03001 	movhi	r3, #1
   1f490:	85c4300c 	strbhi	r3, [r4, #12]
   1f494:	e3500000 	cmp	r0, #0
   1f498:	e3a03000 	mov	r3, #0
   1f49c:	e5c43018 	strb	r3, [r4, #24]
   1f4a0:	08bd8010 	popeq	{r4, pc}
   1f4a4:	e8bd4010 	pop	{r4, lr}
   1f4a8:	ea003614 	b	2cd00 <LeaveCritical>
   1f4ac:	eb0035e6 	bl	2cc4c <EnterCritical>
   1f4b0:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   1f4b4:	eaffffea 	b	1f464 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>

0001f4b8 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   1f4b8:	e5d0300c 	ldrb	r3, [r0, #12]
   1f4bc:	e3530000 	cmp	r3, #0
   1f4c0:	0a00000e 	beq	1f500 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x48>
   1f4c4:	e3a02000 	mov	r2, #0
   1f4c8:	e1a030a1 	lsr	r3, r1, #1
   1f4cc:	e5801010 	str	r1, [r0, #16]
   1f4d0:	e5c0200c 	strb	r2, [r0, #12]
   1f4d4:	e5803014 	str	r3, [r0, #20]
   1f4d8:	e1b03103 	lsls	r3, r3, #2
   1f4dc:	03a03001 	moveq	r3, #1
   1f4e0:	e0833001 	add	r3, r3, r1
   1f4e4:	e3530063 	cmp	r3, #99	; 0x63
   1f4e8:	9a000012 	bls	1f538 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x80>
   1f4ec:	e3021ee0 	movw	r1, #12000	; 0x2ee0
   1f4f0:	e1530001 	cmp	r3, r1
   1f4f4:	21a03001 	movcs	r3, r1
   1f4f8:	e5803008 	str	r3, [r0, #8]
   1f4fc:	e12fff1e 	bx	lr
   1f500:	e5903010 	ldr	r3, [r0, #16]
   1f504:	e5902014 	ldr	r2, [r0, #20]
   1f508:	e043c001 	sub	ip, r3, r1
   1f50c:	e35c0000 	cmp	ip, #0
   1f510:	e0633183 	rsb	r3, r3, r3, lsl #3
   1f514:	b26cc000 	rsblt	ip, ip, #0
   1f518:	e0822082 	add	r2, r2, r2, lsl #1
   1f51c:	e0833001 	add	r3, r3, r1
   1f520:	e082200c 	add	r2, r2, ip
   1f524:	e1a011a3 	lsr	r1, r3, #3
   1f528:	e1a03122 	lsr	r3, r2, #2
   1f52c:	e5801010 	str	r1, [r0, #16]
   1f530:	e5803014 	str	r3, [r0, #20]
   1f534:	eaffffe7 	b	1f4d8 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   1f538:	e3a03064 	mov	r3, #100	; 0x64
   1f53c:	e5803008 	str	r3, [r0, #8]
   1f540:	e12fff1e 	bx	lr

0001f544 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   1f544:	e92d4010 	push	{r4, lr}
   1f548:	e1a04000 	mov	r4, r0
   1f54c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1f550:	e3500000 	cmp	r0, #0
   1f554:	1a000015 	bne	1f5b0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x6c>
   1f558:	e5d43018 	ldrb	r3, [r4, #24]
   1f55c:	e3530000 	cmp	r3, #0
   1f560:	0a00000a 	beq	1f590 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   1f564:	e5943020 	ldr	r3, [r4, #32]
   1f568:	e3530000 	cmp	r3, #0
   1f56c:	1a000007 	bne	1f590 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   1f570:	e5940000 	ldr	r0, [r4]
   1f574:	e3500000 	cmp	r0, #0
   1f578:	0a00000e 	beq	1f5b8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x74>
   1f57c:	eb002cd2 	bl	2a8cc <CTimer::GetTicks() const>
   1f580:	e594101c 	ldr	r1, [r4, #28]
   1f584:	e0401001 	sub	r1, r0, r1
   1f588:	e1a00004 	mov	r0, r4
   1f58c:	ebffffc9 	bl	1f4b8 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   1f590:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1f594:	e3a03000 	mov	r3, #0
   1f598:	e5c43018 	strb	r3, [r4, #24]
   1f59c:	e1520003 	cmp	r2, r3
   1f5a0:	e5843020 	str	r3, [r4, #32]
   1f5a4:	08bd8010 	popeq	{r4, pc}
   1f5a8:	e8bd4010 	pop	{r4, lr}
   1f5ac:	ea0035d3 	b	2cd00 <LeaveCritical>
   1f5b0:	eb0035a5 	bl	2cc4c <EnterCritical>
   1f5b4:	eaffffe7 	b	1f558 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   1f5b8:	e3051a9c 	movw	r1, #23196	; 0x5a9c
   1f5bc:	e3401003 	movt	r1, #3
   1f5c0:	e30007f4 	movw	r0, #2036	; 0x7f4
   1f5c4:	e3400003 	movt	r0, #3
   1f5c8:	e3a02074 	mov	r2, #116	; 0x74
   1f5cc:	eb001668 	bl	24f74 <assertion_failed>

0001f5d0 <CTCPRejector::~CTCPRejector()>:
   1f5d0:	e59f3014 	ldr	r3, [pc, #20]	; 1f5ec <CTCPRejector::~CTCPRejector()+0x1c>
   1f5d4:	e92d4010 	push	{r4, lr}
   1f5d8:	e1a04000 	mov	r4, r0
   1f5dc:	e5803000 	str	r3, [r0]
   1f5e0:	ebfff39d 	bl	1c45c <CNetConnection::~CNetConnection()>
   1f5e4:	e1a00004 	mov	r0, r4
   1f5e8:	e8bd8010 	pop	{r4, pc}
   1f5ec:	00035abc 	.word	0x00035abc

0001f5f0 <CTCPRejector::~CTCPRejector()>:
   1f5f0:	e59f3020 	ldr	r3, [pc, #32]	; 1f618 <CTCPRejector::~CTCPRejector()+0x28>
   1f5f4:	e92d4010 	push	{r4, lr}
   1f5f8:	e1a04000 	mov	r4, r0
   1f5fc:	e5803000 	str	r3, [r0]
   1f600:	ebfff395 	bl	1c45c <CNetConnection::~CNetConnection()>
   1f604:	e1a00004 	mov	r0, r4
   1f608:	e3a0102c 	mov	r1, #44	; 0x2c
   1f60c:	eb003245 	bl	2bf28 <operator delete(void*, unsigned int)>
   1f610:	e1a00004 	mov	r0, r4
   1f614:	e8bd8010 	pop	{r4, pc}
   1f618:	00035abc 	.word	0x00035abc

0001f61c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   1f61c:	e92d4010 	push	{r4, lr}
   1f620:	e1a04000 	mov	r4, r0
   1f624:	e3a03006 	mov	r3, #6
   1f628:	e24dd008 	sub	sp, sp, #8
   1f62c:	e58d3000 	str	r3, [sp]
   1f630:	e3a03000 	mov	r3, #0
   1f634:	ebfff361 	bl	1c3c0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1f638:	e59f300c 	ldr	r3, [pc, #12]	; 1f64c <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   1f63c:	e1a00004 	mov	r0, r4
   1f640:	e5843000 	str	r3, [r4]
   1f644:	e28dd008 	add	sp, sp, #8
   1f648:	e8bd8010 	pop	{r4, pc}
   1f64c:	00035abc 	.word	0x00035abc

0001f650 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   1f650:	e92d4010 	push	{r4, lr}
   1f654:	e3110c02 	tst	r1, #512	; 0x200
   1f658:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1f65c:	e24dd008 	sub	sp, sp, #8
   1f660:	1a000025 	bne	1f6fc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xac>
   1f664:	e1a04000 	mov	r4, r0
   1f668:	e1a0c001 	mov	ip, r1
   1f66c:	e1d001b6 	ldrh	r0, [r0, #22]
   1f670:	e6bf2f32 	rev	r2, r2
   1f674:	e58d200c 	str	r2, [sp, #12]
   1f678:	e1d411b4 	ldrh	r1, [r4, #20]
   1f67c:	e6bf0fb0 	rev16	r0, r0
   1f680:	e1cd00b8 	strh	r0, [sp, #8]
   1f684:	e284001c 	add	r0, r4, #28
   1f688:	e6bf2fb1 	rev16	r2, r1
   1f68c:	e1cd20ba 	strh	r2, [sp, #10]
   1f690:	e21c2a01 	ands	r2, ip, #4096	; 0x1000
   1f694:	e28d1008 	add	r1, sp, #8
   1f698:	01a03002 	moveq	r3, r2
   1f69c:	e3a02014 	mov	r2, #20
   1f6a0:	16bf3f33 	revne	r3, r3
   1f6a4:	e38cc050 	orr	ip, ip, #80	; 0x50
   1f6a8:	e58d3010 	str	r3, [sp, #16]
   1f6ac:	e3a03000 	mov	r3, #0
   1f6b0:	e1cdc1b4 	strh	ip, [sp, #20]
   1f6b4:	e1cd31b6 	strh	r3, [sp, #22]
   1f6b8:	e1cd31ba 	strh	r3, [sp, #26]
   1f6bc:	e1cd31b8 	strh	r3, [sp, #24]
   1f6c0:	eb00036e 	bl	20480 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f6c4:	e5943008 	ldr	r3, [r4, #8]
   1f6c8:	e1cd01b8 	strh	r0, [sp, #24]
   1f6cc:	e3530000 	cmp	r3, #0
   1f6d0:	0a00000f 	beq	1f714 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc4>
   1f6d4:	e3a0c006 	mov	ip, #6
   1f6d8:	e28d2008 	add	r2, sp, #8
   1f6dc:	e284100c 	add	r1, r4, #12
   1f6e0:	e1a00003 	mov	r0, r3
   1f6e4:	e58dc000 	str	ip, [sp]
   1f6e8:	e3a03014 	mov	r3, #20
   1f6ec:	ebffe9c8 	bl	19e14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1f6f0:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1f6f4:	e28dd008 	add	sp, sp, #8
   1f6f8:	e8bd8010 	pop	{r4, pc}
   1f6fc:	e3051af8 	movw	r1, #23288	; 0x5af8
   1f700:	e3401003 	movt	r1, #3
   1f704:	e3050b08 	movw	r0, #23304	; 0x5b08
   1f708:	e3400003 	movt	r0, #3
   1f70c:	e3a020a1 	mov	r2, #161	; 0xa1
   1f710:	eb001617 	bl	24f74 <assertion_failed>
   1f714:	e3051af8 	movw	r1, #23288	; 0x5af8
   1f718:	e3401003 	movt	r1, #3
   1f71c:	e305006c 	movw	r0, #20588	; 0x506c
   1f720:	e3400003 	movt	r0, #3
   1f724:	e3a020c7 	mov	r2, #199	; 0xc7
   1f728:	eb001611 	bl	24f74 <assertion_failed>

0001f72c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1f72c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f730:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1f734:	e35c0006 	cmp	ip, #6
   1f738:	0a000001 	beq	1f744 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f73c:	e3a00000 	mov	r0, #0
   1f740:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f744:	e3520013 	cmp	r2, #19
   1f748:	9a00004c 	bls	1f880 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x154>
   1f74c:	e1a06003 	mov	r6, r3
   1f750:	e1a07002 	mov	r7, r2
   1f754:	e1a04001 	mov	r4, r1
   1f758:	e1a05000 	mov	r5, r0
   1f75c:	e3510000 	cmp	r1, #0
   1f760:	0a00003a 	beq	1f850 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x124>
   1f764:	e1d110b2 	ldrh	r1, [r1, #2]
   1f768:	e6bf1fb1 	rev16	r1, r1
   1f76c:	e1c011b6 	strh	r1, [r0, #22]
   1f770:	e6ff1071 	uxth	r1, r1
   1f774:	e3510000 	cmp	r1, #0
   1f778:	0a000040 	beq	1f880 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x154>
   1f77c:	e5900004 	ldr	r0, [r0, #4]
   1f780:	e3500000 	cmp	r0, #0
   1f784:	0a000037 	beq	1f868 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1f788:	eb00006d 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1f78c:	eb0001ab 	bl	1fe40 <CIPAddress::IsNull() const>
   1f790:	e3500000 	cmp	r0, #0
   1f794:	1affffe8 	bne	1f73c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1f798:	e285801c 	add	r8, r5, #28
   1f79c:	e5950004 	ldr	r0, [r5, #4]
   1f7a0:	eb000067 	bl	1f944 <CNetConfig::GetIPAddress() const>
   1f7a4:	e1a01000 	mov	r1, r0
   1f7a8:	e1a00008 	mov	r0, r8
   1f7ac:	eb000301 	bl	203b8 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1f7b0:	e1a01006 	mov	r1, r6
   1f7b4:	e1a00008 	mov	r0, r8
   1f7b8:	eb000302 	bl	203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f7bc:	e1a02007 	mov	r2, r7
   1f7c0:	e1a01004 	mov	r1, r4
   1f7c4:	e1a00008 	mov	r0, r8
   1f7c8:	eb00032c 	bl	20480 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f7cc:	e3500000 	cmp	r0, #0
   1f7d0:	1affffd9 	bne	1f73c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1f7d4:	e1d480bc 	ldrh	r8, [r4, #12]
   1f7d8:	e1a01006 	mov	r1, r6
   1f7dc:	e285000c 	add	r0, r5, #12
   1f7e0:	e5949004 	ldr	r9, [r4, #4]
   1f7e4:	e3180c02 	tst	r8, #512	; 0x200
   1f7e8:	e594a008 	ldr	sl, [r4, #8]
   1f7ec:	e7e32258 	ubfx	r2, r8, #4, #4
   1f7f0:	e6bf9f39 	rev	r9, r9
   1f7f4:	e0477102 	sub	r7, r7, r2, lsl #2
   1f7f8:	e6bfaf3a 	rev	sl, sl
   1f7fc:	12877001 	addne	r7, r7, #1
   1f800:	e3180c01 	tst	r8, #256	; 0x100
   1f804:	12877001 	addne	r7, r7, #1
   1f808:	eb000148 	bl	1fd30 <CIPAddress::Set(CIPAddress const&)>
   1f80c:	e1d420b0 	ldrh	r2, [r4]
   1f810:	e2183b01 	ands	r3, r8, #1024	; 0x400
   1f814:	e6bf2fb2 	rev16	r2, r2
   1f818:	e1c521b4 	strh	r2, [r5, #20]
   1f81c:	1a000009 	bne	1f848 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x11c>
   1f820:	e2182a01 	ands	r2, r8, #4096	; 0x1000
   1f824:	00893007 	addeq	r3, r9, r7
   1f828:	01a00005 	moveq	r0, r5
   1f82c:	03a01b05 	moveq	r1, #5120	; 0x1400
   1f830:	11a0200a 	movne	r2, sl
   1f834:	11a00005 	movne	r0, r5
   1f838:	13a01b01 	movne	r1, #1024	; 0x400
   1f83c:	ebffff83 	bl	1f650 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   1f840:	e3a00001 	mov	r0, #1
   1f844:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f848:	e3a00001 	mov	r0, #1
   1f84c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f850:	e3051af8 	movw	r1, #23288	; 0x5af8
   1f854:	e3401003 	movt	r1, #3
   1f858:	e3050150 	movw	r0, #20816	; 0x5150
   1f85c:	e3400003 	movt	r0, #3
   1f860:	e3a02052 	mov	r2, #82	; 0x52
   1f864:	eb0015c2 	bl	24f74 <assertion_failed>
   1f868:	e3051af8 	movw	r1, #23288	; 0x5af8
   1f86c:	e3401003 	movt	r1, #3
   1f870:	e3050058 	movw	r0, #20568	; 0x5058
   1f874:	e3400003 	movt	r0, #3
   1f878:	e3a0205b 	mov	r2, #91	; 0x5b
   1f87c:	eb0015bc 	bl	24f74 <assertion_failed>
   1f880:	e3e00000 	mvn	r0, #0
   1f884:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001f888 <CTCPRejector::Connect()>:
   1f888:	e3e00000 	mvn	r0, #0
   1f88c:	e12fff1e 	bx	lr

0001f890 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   1f890:	e3e00000 	mvn	r0, #0
   1f894:	e12fff1e 	bx	lr

0001f898 <CTCPRejector::Close()>:
   1f898:	e3e00000 	mvn	r0, #0
   1f89c:	e12fff1e 	bx	lr

0001f8a0 <CTCPRejector::Send(void const*, unsigned int, int)>:
   1f8a0:	e3e00000 	mvn	r0, #0
   1f8a4:	e12fff1e 	bx	lr

0001f8a8 <CTCPRejector::Receive(void*, int)>:
   1f8a8:	e3e00000 	mvn	r0, #0
   1f8ac:	e12fff1e 	bx	lr

0001f8b0 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1f8b0:	e3e00000 	mvn	r0, #0
   1f8b4:	e12fff1e 	bx	lr

0001f8b8 <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1f8b8:	e3e00000 	mvn	r0, #0
   1f8bc:	e12fff1e 	bx	lr

0001f8c0 <CTCPRejector::SetOptionBroadcast(bool)>:
   1f8c0:	e3e00000 	mvn	r0, #0
   1f8c4:	e12fff1e 	bx	lr

0001f8c8 <CTCPRejector::IsConnected() const>:
   1f8c8:	e3a00000 	mov	r0, #0
   1f8cc:	e12fff1e 	bx	lr

0001f8d0 <CTCPRejector::IsTerminated() const>:
   1f8d0:	e3a00000 	mov	r0, #0
   1f8d4:	e12fff1e 	bx	lr

0001f8d8 <CTCPRejector::Process()>:
   1f8d8:	e12fff1e 	bx	lr

0001f8dc <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1f8dc:	e3a00000 	mov	r0, #0
   1f8e0:	e12fff1e 	bx	lr

0001f8e4 <CNetConfig::~CNetConfig()>:
   1f8e4:	e92d4010 	push	{r4, lr}
   1f8e8:	e1a04000 	mov	r4, r0
   1f8ec:	e2800024 	add	r0, r0, #36	; 0x24
   1f8f0:	eb000085 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1f8f4:	e284001c 	add	r0, r4, #28
   1f8f8:	eb000083 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1f8fc:	e2840014 	add	r0, r4, #20
   1f900:	eb000081 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1f904:	e284000c 	add	r0, r4, #12
   1f908:	eb00007f 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1f90c:	e2840004 	add	r0, r4, #4
   1f910:	eb00007d 	bl	1fb0c <CIPAddress::~CIPAddress()>
   1f914:	e1a00004 	mov	r0, r4
   1f918:	e8bd8010 	pop	{r4, pc}

0001f91c <CNetConfig::SetDHCP(bool)>:
   1f91c:	e5c01000 	strb	r1, [r0]
   1f920:	e12fff1e 	bx	lr

0001f924 <CNetConfig::SetDefaultGateway(unsigned int)>:
   1f924:	e2800014 	add	r0, r0, #20
   1f928:	ea0000e7 	b	1fccc <CIPAddress::Set(unsigned int)>

0001f92c <CNetConfig::SetDNSServer(unsigned int)>:
   1f92c:	e280001c 	add	r0, r0, #28
   1f930:	ea0000e5 	b	1fccc <CIPAddress::Set(unsigned int)>

0001f934 <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   1f934:	e2800014 	add	r0, r0, #20
   1f938:	ea0000e7 	b	1fcdc <CIPAddress::Set(unsigned char const*)>

0001f93c <CNetConfig::SetDNSServer(unsigned char const*)>:
   1f93c:	e280001c 	add	r0, r0, #28
   1f940:	ea0000e5 	b	1fcdc <CIPAddress::Set(unsigned char const*)>

0001f944 <CNetConfig::GetIPAddress() const>:
   1f944:	e2800004 	add	r0, r0, #4
   1f948:	e12fff1e 	bx	lr

0001f94c <CNetConfig::IsDHCPUsed() const>:
   1f94c:	e5d00000 	ldrb	r0, [r0]
   1f950:	e12fff1e 	bx	lr

0001f954 <CNetConfig::GetNetMask() const>:
   1f954:	e280000c 	add	r0, r0, #12
   1f958:	ea000114 	b	1fdb0 <CIPAddress::Get() const>

0001f95c <CNetConfig::GetDefaultGateway() const>:
   1f95c:	e2800014 	add	r0, r0, #20
   1f960:	e12fff1e 	bx	lr

0001f964 <CNetConfig::GetDNSServer() const>:
   1f964:	e280001c 	add	r0, r0, #28
   1f968:	e12fff1e 	bx	lr

0001f96c <CNetConfig::GetBroadcastAddress() const>:
   1f96c:	e2800024 	add	r0, r0, #36	; 0x24
   1f970:	e12fff1e 	bx	lr

0001f974 <CNetConfig::UpdateBroadcastAddress()>:
   1f974:	e92d4010 	push	{r4, lr}
   1f978:	e1a04000 	mov	r4, r0
   1f97c:	e2800004 	add	r0, r0, #4
   1f980:	e24dd008 	sub	sp, sp, #8
   1f984:	e1a0100d 	mov	r1, sp
   1f988:	eb000114 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   1f98c:	e284000c 	add	r0, r4, #12
   1f990:	e28d1004 	add	r1, sp, #4
   1f994:	eb000111 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   1f998:	e2840024 	add	r0, r4, #36	; 0x24
   1f99c:	e89d000a 	ldm	sp, {r1, r3}
   1f9a0:	e1e03003 	mvn	r3, r3
   1f9a4:	e1831001 	orr	r1, r3, r1
   1f9a8:	eb0000c7 	bl	1fccc <CIPAddress::Set(unsigned int)>
   1f9ac:	e28dd008 	add	sp, sp, #8
   1f9b0:	e8bd8010 	pop	{r4, pc}

0001f9b4 <CNetConfig::Reset()>:
   1f9b4:	e92d4070 	push	{r4, r5, r6, lr}
   1f9b8:	e3054b24 	movw	r4, #23332	; 0x5b24
   1f9bc:	e3404003 	movt	r4, #3
   1f9c0:	e1a05000 	mov	r5, r0
   1f9c4:	e1a01004 	mov	r1, r4
   1f9c8:	e2800004 	add	r0, r0, #4
   1f9cc:	eb0000c2 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1f9d0:	e1a01004 	mov	r1, r4
   1f9d4:	e285000c 	add	r0, r5, #12
   1f9d8:	eb0000bf 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1f9dc:	e1a01004 	mov	r1, r4
   1f9e0:	e2850014 	add	r0, r5, #20
   1f9e4:	eb0000bc 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1f9e8:	e285001c 	add	r0, r5, #28
   1f9ec:	e1a01004 	mov	r1, r4
   1f9f0:	eb0000b9 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1f9f4:	e1a00005 	mov	r0, r5
   1f9f8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f9fc:	eaffffdc 	b	1f974 <CNetConfig::UpdateBroadcastAddress()>

0001fa00 <CNetConfig::CNetConfig()>:
   1fa00:	e92d4010 	push	{r4, lr}
   1fa04:	e3a03001 	mov	r3, #1
   1fa08:	e1a04000 	mov	r4, r0
   1fa0c:	e4c03004 	strb	r3, [r0], #4
   1fa10:	eb000027 	bl	1fab4 <CIPAddress::CIPAddress()>
   1fa14:	e284000c 	add	r0, r4, #12
   1fa18:	eb000025 	bl	1fab4 <CIPAddress::CIPAddress()>
   1fa1c:	e2840014 	add	r0, r4, #20
   1fa20:	eb000023 	bl	1fab4 <CIPAddress::CIPAddress()>
   1fa24:	e284001c 	add	r0, r4, #28
   1fa28:	eb000021 	bl	1fab4 <CIPAddress::CIPAddress()>
   1fa2c:	e2840024 	add	r0, r4, #36	; 0x24
   1fa30:	eb00001f 	bl	1fab4 <CIPAddress::CIPAddress()>
   1fa34:	e1a00004 	mov	r0, r4
   1fa38:	ebffffdd 	bl	1f9b4 <CNetConfig::Reset()>
   1fa3c:	e1a00004 	mov	r0, r4
   1fa40:	e8bd8010 	pop	{r4, pc}

0001fa44 <CNetConfig::SetIPAddress(unsigned int)>:
   1fa44:	e92d4010 	push	{r4, lr}
   1fa48:	e1a04000 	mov	r4, r0
   1fa4c:	e2800004 	add	r0, r0, #4
   1fa50:	eb00009d 	bl	1fccc <CIPAddress::Set(unsigned int)>
   1fa54:	e1a00004 	mov	r0, r4
   1fa58:	e8bd4010 	pop	{r4, lr}
   1fa5c:	eaffffc4 	b	1f974 <CNetConfig::UpdateBroadcastAddress()>

0001fa60 <CNetConfig::SetNetMask(unsigned int)>:
   1fa60:	e92d4010 	push	{r4, lr}
   1fa64:	e1a04000 	mov	r4, r0
   1fa68:	e280000c 	add	r0, r0, #12
   1fa6c:	eb000096 	bl	1fccc <CIPAddress::Set(unsigned int)>
   1fa70:	e1a00004 	mov	r0, r4
   1fa74:	e8bd4010 	pop	{r4, lr}
   1fa78:	eaffffbd 	b	1f974 <CNetConfig::UpdateBroadcastAddress()>

0001fa7c <CNetConfig::SetIPAddress(unsigned char const*)>:
   1fa7c:	e92d4010 	push	{r4, lr}
   1fa80:	e1a04000 	mov	r4, r0
   1fa84:	e2800004 	add	r0, r0, #4
   1fa88:	eb000093 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1fa8c:	e1a00004 	mov	r0, r4
   1fa90:	e8bd4010 	pop	{r4, lr}
   1fa94:	eaffffb6 	b	1f974 <CNetConfig::UpdateBroadcastAddress()>

0001fa98 <CNetConfig::SetNetMask(unsigned char const*)>:
   1fa98:	e92d4010 	push	{r4, lr}
   1fa9c:	e1a04000 	mov	r4, r0
   1faa0:	e280000c 	add	r0, r0, #12
   1faa4:	eb00008c 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1faa8:	e1a00004 	mov	r0, r4
   1faac:	e8bd4010 	pop	{r4, lr}
   1fab0:	eaffffaf 	b	1f974 <CNetConfig::UpdateBroadcastAddress()>

0001fab4 <CIPAddress::CIPAddress()>:
   1fab4:	e3a02000 	mov	r2, #0
   1fab8:	e5c02000 	strb	r2, [r0]
   1fabc:	e12fff1e 	bx	lr

0001fac0 <CIPAddress::CIPAddress(unsigned int)>:
   1fac0:	e3a02001 	mov	r2, #1
   1fac4:	e5801004 	str	r1, [r0, #4]
   1fac8:	e5c02000 	strb	r2, [r0]
   1facc:	e12fff1e 	bx	lr

0001fad0 <CIPAddress::CIPAddress(CIPAddress const&)>:
   1fad0:	e5d12000 	ldrb	r2, [r1]
   1fad4:	e3520000 	cmp	r2, #0
   1fad8:	0a000004 	beq	1faf0 <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   1fadc:	e5911004 	ldr	r1, [r1, #4]
   1fae0:	e3a02001 	mov	r2, #1
   1fae4:	e5801004 	str	r1, [r0, #4]
   1fae8:	e5c02000 	strb	r2, [r0]
   1faec:	e12fff1e 	bx	lr
   1faf0:	e3051b28 	movw	r1, #23336	; 0x5b28
   1faf4:	e3401003 	movt	r1, #3
   1faf8:	e3050b38 	movw	r0, #23352	; 0x5b38
   1fafc:	e3400003 	movt	r0, #3
   1fb00:	e92d4010 	push	{r4, lr}
   1fb04:	e3a0202e 	mov	r2, #46	; 0x2e
   1fb08:	eb001519 	bl	24f74 <assertion_failed>

0001fb0c <CIPAddress::~CIPAddress()>:
   1fb0c:	e12fff1e 	bx	lr

0001fb10 <CIPAddress::operator==(CIPAddress const&) const>:
   1fb10:	e5d03000 	ldrb	r3, [r0]
   1fb14:	e92d4010 	push	{r4, lr}
   1fb18:	e3530000 	cmp	r3, #0
   1fb1c:	0a000008 	beq	1fb44 <CIPAddress::operator==(CIPAddress const&) const+0x34>
   1fb20:	e5d13000 	ldrb	r3, [r1]
   1fb24:	e3530000 	cmp	r3, #0
   1fb28:	0a00000b 	beq	1fb5c <CIPAddress::operator==(CIPAddress const&) const+0x4c>
   1fb2c:	e5900004 	ldr	r0, [r0, #4]
   1fb30:	e5913004 	ldr	r3, [r1, #4]
   1fb34:	e0400003 	sub	r0, r0, r3
   1fb38:	e16f0f10 	clz	r0, r0
   1fb3c:	e1a002a0 	lsr	r0, r0, #5
   1fb40:	e8bd8010 	pop	{r4, pc}
   1fb44:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fb48:	e3401003 	movt	r1, #3
   1fb4c:	e3000f54 	movw	r0, #3924	; 0xf54
   1fb50:	e3400003 	movt	r0, #3
   1fb54:	e3a0203e 	mov	r2, #62	; 0x3e
   1fb58:	eb001505 	bl	24f74 <assertion_failed>
   1fb5c:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fb60:	e3401003 	movt	r1, #3
   1fb64:	e3050b4c 	movw	r0, #23372	; 0x5b4c
   1fb68:	e3400003 	movt	r0, #3
   1fb6c:	e3a0203f 	mov	r2, #63	; 0x3f
   1fb70:	eb0014ff 	bl	24f74 <assertion_failed>

0001fb74 <CIPAddress::operator!=(CIPAddress const&) const>:
   1fb74:	e5d03000 	ldrb	r3, [r0]
   1fb78:	e92d4010 	push	{r4, lr}
   1fb7c:	e3530000 	cmp	r3, #0
   1fb80:	0a000007 	beq	1fba4 <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   1fb84:	e5d13000 	ldrb	r3, [r1]
   1fb88:	e3530000 	cmp	r3, #0
   1fb8c:	0a00000a 	beq	1fbbc <CIPAddress::operator!=(CIPAddress const&) const+0x48>
   1fb90:	e5900004 	ldr	r0, [r0, #4]
   1fb94:	e5913004 	ldr	r3, [r1, #4]
   1fb98:	e0500003 	subs	r0, r0, r3
   1fb9c:	13a00001 	movne	r0, #1
   1fba0:	e8bd8010 	pop	{r4, pc}
   1fba4:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fba8:	e3401003 	movt	r1, #3
   1fbac:	e3000f54 	movw	r0, #3924	; 0xf54
   1fbb0:	e3400003 	movt	r0, #3
   1fbb4:	e3a02045 	mov	r2, #69	; 0x45
   1fbb8:	eb0014ed 	bl	24f74 <assertion_failed>
   1fbbc:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fbc0:	e3401003 	movt	r1, #3
   1fbc4:	e3050b4c 	movw	r0, #23372	; 0x5b4c
   1fbc8:	e3400003 	movt	r0, #3
   1fbcc:	e3a02046 	mov	r2, #70	; 0x46
   1fbd0:	eb0014e7 	bl	24f74 <assertion_failed>

0001fbd4 <CIPAddress::operator==(unsigned char const*) const>:
   1fbd4:	e5d03000 	ldrb	r3, [r0]
   1fbd8:	e92d4010 	push	{r4, lr}
   1fbdc:	e3530000 	cmp	r3, #0
   1fbe0:	0a000007 	beq	1fc04 <CIPAddress::operator==(unsigned char const*) const+0x30>
   1fbe4:	e3510000 	cmp	r1, #0
   1fbe8:	0a00000b 	beq	1fc1c <CIPAddress::operator==(unsigned char const*) const+0x48>
   1fbec:	e3a02004 	mov	r2, #4
   1fbf0:	e2800004 	add	r0, r0, #4
   1fbf4:	eb002e44 	bl	2b50c <memcmp>
   1fbf8:	e16f0f10 	clz	r0, r0
   1fbfc:	e1a002a0 	lsr	r0, r0, #5
   1fc00:	e8bd8010 	pop	{r4, pc}
   1fc04:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fc08:	e3401003 	movt	r1, #3
   1fc0c:	e3000f54 	movw	r0, #3924	; 0xf54
   1fc10:	e3400003 	movt	r0, #3
   1fc14:	e3a0204c 	mov	r2, #76	; 0x4c
   1fc18:	eb0014d5 	bl	24f74 <assertion_failed>
   1fc1c:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fc20:	e3401003 	movt	r1, #3
   1fc24:	e3050b60 	movw	r0, #23392	; 0x5b60
   1fc28:	e3400003 	movt	r0, #3
   1fc2c:	e3a0204d 	mov	r2, #77	; 0x4d
   1fc30:	eb0014cf 	bl	24f74 <assertion_failed>

0001fc34 <CIPAddress::operator!=(unsigned char const*) const>:
   1fc34:	e92d4010 	push	{r4, lr}
   1fc38:	ebffffe5 	bl	1fbd4 <CIPAddress::operator==(unsigned char const*) const>
   1fc3c:	e2200001 	eor	r0, r0, #1
   1fc40:	e6ef0070 	uxtb	r0, r0
   1fc44:	e8bd8010 	pop	{r4, pc}

0001fc48 <CIPAddress::operator==(unsigned int) const>:
   1fc48:	e5d03000 	ldrb	r3, [r0]
   1fc4c:	e3530000 	cmp	r3, #0
   1fc50:	0a000004 	beq	1fc68 <CIPAddress::operator==(unsigned int) const+0x20>
   1fc54:	e5900004 	ldr	r0, [r0, #4]
   1fc58:	e0400001 	sub	r0, r0, r1
   1fc5c:	e16f0f10 	clz	r0, r0
   1fc60:	e1a002a0 	lsr	r0, r0, #5
   1fc64:	e12fff1e 	bx	lr
   1fc68:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fc6c:	e3401003 	movt	r1, #3
   1fc70:	e3000f54 	movw	r0, #3924	; 0xf54
   1fc74:	e3400003 	movt	r0, #3
   1fc78:	e92d4010 	push	{r4, lr}
   1fc7c:	e3a02058 	mov	r2, #88	; 0x58
   1fc80:	eb0014bb 	bl	24f74 <assertion_failed>

0001fc84 <CIPAddress::operator!=(unsigned int) const>:
   1fc84:	e5d03000 	ldrb	r3, [r0]
   1fc88:	e3530000 	cmp	r3, #0
   1fc8c:	0a000003 	beq	1fca0 <CIPAddress::operator!=(unsigned int) const+0x1c>
   1fc90:	e5900004 	ldr	r0, [r0, #4]
   1fc94:	e0500001 	subs	r0, r0, r1
   1fc98:	13a00001 	movne	r0, #1
   1fc9c:	e12fff1e 	bx	lr
   1fca0:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fca4:	e3401003 	movt	r1, #3
   1fca8:	e3000f54 	movw	r0, #3924	; 0xf54
   1fcac:	e3400003 	movt	r0, #3
   1fcb0:	e92d4010 	push	{r4, lr}
   1fcb4:	e3a0205e 	mov	r2, #94	; 0x5e
   1fcb8:	eb0014ad 	bl	24f74 <assertion_failed>

0001fcbc <CIPAddress::operator=(unsigned int)>:
   1fcbc:	e3a02001 	mov	r2, #1
   1fcc0:	e5801004 	str	r1, [r0, #4]
   1fcc4:	e5c02000 	strb	r2, [r0]
   1fcc8:	e12fff1e 	bx	lr

0001fccc <CIPAddress::Set(unsigned int)>:
   1fccc:	e3a03001 	mov	r3, #1
   1fcd0:	e5801004 	str	r1, [r0, #4]
   1fcd4:	e5c03000 	strb	r3, [r0]
   1fcd8:	e12fff1e 	bx	lr

0001fcdc <CIPAddress::Set(unsigned char const*)>:
   1fcdc:	e92d4010 	push	{r4, lr}
   1fce0:	e3510000 	cmp	r1, #0
   1fce4:	0a000006 	beq	1fd04 <CIPAddress::Set(unsigned char const*)+0x28>
   1fce8:	e1a04000 	mov	r4, r0
   1fcec:	e3a02004 	mov	r2, #4
   1fcf0:	e0800002 	add	r0, r0, r2
   1fcf4:	eb002f73 	bl	2bac8 <memcpy>
   1fcf8:	e3a03001 	mov	r3, #1
   1fcfc:	e5c43000 	strb	r3, [r4]
   1fd00:	e8bd8010 	pop	{r4, pc}
   1fd04:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fd08:	e3401003 	movt	r1, #3
   1fd0c:	e3050b70 	movw	r0, #23408	; 0x5b70
   1fd10:	e3400003 	movt	r0, #3
   1fd14:	e3a02075 	mov	r2, #117	; 0x75
   1fd18:	eb001495 	bl	24f74 <assertion_failed>

0001fd1c <CIPAddress::CIPAddress(unsigned char const*)>:
   1fd1c:	e92d4010 	push	{r4, lr}
   1fd20:	e1a04000 	mov	r4, r0
   1fd24:	ebffffec 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   1fd28:	e1a00004 	mov	r0, r4
   1fd2c:	e8bd8010 	pop	{r4, pc}

0001fd30 <CIPAddress::Set(CIPAddress const&)>:
   1fd30:	e5d13000 	ldrb	r3, [r1]
   1fd34:	e3530000 	cmp	r3, #0
   1fd38:	0a000004 	beq	1fd50 <CIPAddress::Set(CIPAddress const&)+0x20>
   1fd3c:	e5912004 	ldr	r2, [r1, #4]
   1fd40:	e3a03001 	mov	r3, #1
   1fd44:	e5802004 	str	r2, [r0, #4]
   1fd48:	e5c03000 	strb	r3, [r0]
   1fd4c:	e12fff1e 	bx	lr
   1fd50:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fd54:	e3401003 	movt	r1, #3
   1fd58:	e3050b38 	movw	r0, #23352	; 0x5b38
   1fd5c:	e3400003 	movt	r0, #3
   1fd60:	e92d4010 	push	{r4, lr}
   1fd64:	e3a0207e 	mov	r2, #126	; 0x7e
   1fd68:	eb001481 	bl	24f74 <assertion_failed>

0001fd6c <CIPAddress::SetBroadcast()>:
   1fd6c:	e3e02000 	mvn	r2, #0
   1fd70:	e3a03001 	mov	r3, #1
   1fd74:	e5802004 	str	r2, [r0, #4]
   1fd78:	e5c03000 	strb	r3, [r0]
   1fd7c:	e12fff1e 	bx	lr

0001fd80 <CIPAddress::operator unsigned int() const>:
   1fd80:	e5d03000 	ldrb	r3, [r0]
   1fd84:	e3530000 	cmp	r3, #0
   1fd88:	0a000001 	beq	1fd94 <CIPAddress::operator unsigned int() const+0x14>
   1fd8c:	e5900004 	ldr	r0, [r0, #4]
   1fd90:	e12fff1e 	bx	lr
   1fd94:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fd98:	e3401003 	movt	r1, #3
   1fd9c:	e3000f54 	movw	r0, #3924	; 0xf54
   1fda0:	e3400003 	movt	r0, #3
   1fda4:	e92d4010 	push	{r4, lr}
   1fda8:	e3a0208f 	mov	r2, #143	; 0x8f
   1fdac:	eb001470 	bl	24f74 <assertion_failed>

0001fdb0 <CIPAddress::Get() const>:
   1fdb0:	e5d03000 	ldrb	r3, [r0]
   1fdb4:	e3530000 	cmp	r3, #0
   1fdb8:	0a000001 	beq	1fdc4 <CIPAddress::Get() const+0x14>
   1fdbc:	e2800004 	add	r0, r0, #4
   1fdc0:	e12fff1e 	bx	lr
   1fdc4:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fdc8:	e3401003 	movt	r1, #3
   1fdcc:	e3000f54 	movw	r0, #3924	; 0xf54
   1fdd0:	e3400003 	movt	r0, #3
   1fdd4:	e92d4010 	push	{r4, lr}
   1fdd8:	e3a02095 	mov	r2, #149	; 0x95
   1fddc:	eb001464 	bl	24f74 <assertion_failed>

0001fde0 <CIPAddress::CopyTo(unsigned char*) const>:
   1fde0:	e5d02000 	ldrb	r2, [r0]
   1fde4:	e92d4010 	push	{r4, lr}
   1fde8:	e3520000 	cmp	r2, #0
   1fdec:	0a000007 	beq	1fe10 <CIPAddress::CopyTo(unsigned char*) const+0x30>
   1fdf0:	e1a03001 	mov	r3, r1
   1fdf4:	e3510000 	cmp	r1, #0
   1fdf8:	0a00000a 	beq	1fe28 <CIPAddress::CopyTo(unsigned char*) const+0x48>
   1fdfc:	e2801004 	add	r1, r0, #4
   1fe00:	e3a02004 	mov	r2, #4
   1fe04:	e1a00003 	mov	r0, r3
   1fe08:	e8bd4010 	pop	{r4, lr}
   1fe0c:	ea002f2d 	b	2bac8 <memcpy>
   1fe10:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fe14:	e3401003 	movt	r1, #3
   1fe18:	e3000f54 	movw	r0, #3924	; 0xf54
   1fe1c:	e3400003 	movt	r0, #3
   1fe20:	e3a0209b 	mov	r2, #155	; 0x9b
   1fe24:	eb001452 	bl	24f74 <assertion_failed>
   1fe28:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fe2c:	e3401003 	movt	r1, #3
   1fe30:	e3020270 	movw	r0, #8816	; 0x2270
   1fe34:	e3400003 	movt	r0, #3
   1fe38:	e3a0209c 	mov	r2, #156	; 0x9c
   1fe3c:	eb00144c 	bl	24f74 <assertion_failed>

0001fe40 <CIPAddress::IsNull() const>:
   1fe40:	e5d03000 	ldrb	r3, [r0]
   1fe44:	e3530000 	cmp	r3, #0
   1fe48:	0a000003 	beq	1fe5c <CIPAddress::IsNull() const+0x1c>
   1fe4c:	e5900004 	ldr	r0, [r0, #4]
   1fe50:	e16f0f10 	clz	r0, r0
   1fe54:	e1a002a0 	lsr	r0, r0, #5
   1fe58:	e12fff1e 	bx	lr
   1fe5c:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fe60:	e3401003 	movt	r1, #3
   1fe64:	e3000f54 	movw	r0, #3924	; 0xf54
   1fe68:	e3400003 	movt	r0, #3
   1fe6c:	e92d4010 	push	{r4, lr}
   1fe70:	e3a020a2 	mov	r2, #162	; 0xa2
   1fe74:	eb00143e 	bl	24f74 <assertion_failed>

0001fe78 <CIPAddress::IsBroadcast() const>:
   1fe78:	e5d03000 	ldrb	r3, [r0]
   1fe7c:	e3530000 	cmp	r3, #0
   1fe80:	0a000004 	beq	1fe98 <CIPAddress::IsBroadcast() const+0x20>
   1fe84:	e5900004 	ldr	r0, [r0, #4]
   1fe88:	e3700001 	cmn	r0, #1
   1fe8c:	13a00000 	movne	r0, #0
   1fe90:	03a00001 	moveq	r0, #1
   1fe94:	e12fff1e 	bx	lr
   1fe98:	e3051b28 	movw	r1, #23336	; 0x5b28
   1fe9c:	e3401003 	movt	r1, #3
   1fea0:	e3000f54 	movw	r0, #3924	; 0xf54
   1fea4:	e3400003 	movt	r0, #3
   1fea8:	e92d4010 	push	{r4, lr}
   1feac:	e3a020a8 	mov	r2, #168	; 0xa8
   1feb0:	eb00142f 	bl	24f74 <assertion_failed>

0001feb4 <CIPAddress::GetSize() const>:
   1feb4:	e3a00004 	mov	r0, #4
   1feb8:	e12fff1e 	bx	lr

0001febc <CIPAddress::Format(CString*) const>:
   1febc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1fec0:	e5d03000 	ldrb	r3, [r0]
   1fec4:	e24dd00c 	sub	sp, sp, #12
   1fec8:	e3530000 	cmp	r3, #0
   1fecc:	0a00000e 	beq	1ff0c <CIPAddress::Format(CString*) const+0x50>
   1fed0:	e3510000 	cmp	r1, #0
   1fed4:	0a000012 	beq	1ff24 <CIPAddress::Format(CString*) const+0x68>
   1fed8:	e5902004 	ldr	r2, [r0, #4]
   1fedc:	e1a00001 	mov	r0, r1
   1fee0:	e3051b90 	movw	r1, #23440	; 0x5b90
   1fee4:	e3401003 	movt	r1, #3
   1fee8:	e7e7c852 	ubfx	ip, r2, #16, #8
   1feec:	e1a03c22 	lsr	r3, r2, #24
   1fef0:	e58dc000 	str	ip, [sp]
   1fef4:	e58d3004 	str	r3, [sp, #4]
   1fef8:	e7e73452 	ubfx	r3, r2, #8, #8
   1fefc:	e6ef2072 	uxtb	r2, r2
   1ff00:	eb002989 	bl	2a52c <CString::Format(char const*, ...)>
   1ff04:	e28dd00c 	add	sp, sp, #12
   1ff08:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1ff0c:	e3051b28 	movw	r1, #23336	; 0x5b28
   1ff10:	e3401003 	movt	r1, #3
   1ff14:	e3000f54 	movw	r0, #3924	; 0xf54
   1ff18:	e3400003 	movt	r0, #3
   1ff1c:	e3a020b3 	mov	r2, #179	; 0xb3
   1ff20:	eb001413 	bl	24f74 <assertion_failed>
   1ff24:	e3051b28 	movw	r1, #23336	; 0x5b28
   1ff28:	e3401003 	movt	r1, #3
   1ff2c:	e3050b80 	movw	r0, #23424	; 0x5b80
   1ff30:	e3400003 	movt	r0, #3
   1ff34:	e3a020b4 	mov	r2, #180	; 0xb4
   1ff38:	eb00140d 	bl	24f74 <assertion_failed>

0001ff3c <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   1ff3c:	e92d4030 	push	{r4, r5, lr}
   1ff40:	e1a05000 	mov	r5, r0
   1ff44:	e5d10000 	ldrb	r0, [r1]
   1ff48:	e24dd00c 	sub	sp, sp, #12
   1ff4c:	e3500000 	cmp	r0, #0
   1ff50:	0a000016 	beq	1ffb0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x74>
   1ff54:	e5913004 	ldr	r3, [r1, #4]
   1ff58:	e1a04001 	mov	r4, r1
   1ff5c:	e3730001 	cmn	r3, #1
   1ff60:	0a000010 	beq	1ffa8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x6c>
   1ff64:	e3520000 	cmp	r2, #0
   1ff68:	0a000016 	beq	1ffc8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x8c>
   1ff6c:	e1a01002 	mov	r1, r2
   1ff70:	e3a02004 	mov	r2, #4
   1ff74:	e08d0002 	add	r0, sp, r2
   1ff78:	eb002ed2 	bl	2bac8 <memcpy>
   1ff7c:	e5d53000 	ldrb	r3, [r5]
   1ff80:	e3530000 	cmp	r3, #0
   1ff84:	0a000015 	beq	1ffe0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa4>
   1ff88:	e59d3004 	ldr	r3, [sp, #4]
   1ff8c:	e5950004 	ldr	r0, [r5, #4]
   1ff90:	e5942004 	ldr	r2, [r4, #4]
   1ff94:	e0000003 	and	r0, r0, r3
   1ff98:	e0033002 	and	r3, r3, r2
   1ff9c:	e0400003 	sub	r0, r0, r3
   1ffa0:	e16f0f10 	clz	r0, r0
   1ffa4:	e1a002a0 	lsr	r0, r0, #5
   1ffa8:	e28dd00c 	add	sp, sp, #12
   1ffac:	e8bd8030 	pop	{r4, r5, pc}
   1ffb0:	e3051b28 	movw	r1, #23336	; 0x5b28
   1ffb4:	e3401003 	movt	r1, #3
   1ffb8:	e3000f54 	movw	r0, #3924	; 0xf54
   1ffbc:	e3400003 	movt	r0, #3
   1ffc0:	e3a020a8 	mov	r2, #168	; 0xa8
   1ffc4:	eb0013ea 	bl	24f74 <assertion_failed>
   1ffc8:	e3051b28 	movw	r1, #23336	; 0x5b28
   1ffcc:	e3401003 	movt	r1, #3
   1ffd0:	e3050b9c 	movw	r0, #23452	; 0x5b9c
   1ffd4:	e3400003 	movt	r0, #3
   1ffd8:	e3a020c1 	mov	r2, #193	; 0xc1
   1ffdc:	eb0013e4 	bl	24f74 <assertion_failed>
   1ffe0:	e3051b28 	movw	r1, #23336	; 0x5b28
   1ffe4:	e3401003 	movt	r1, #3
   1ffe8:	e3000f54 	movw	r0, #3924	; 0xf54
   1ffec:	e3400003 	movt	r0, #3
   1fff0:	e3a020c5 	mov	r2, #197	; 0xc5
   1fff4:	eb0013de 	bl	24f74 <assertion_failed>

0001fff8 <CNetQueue::CNetQueue()>:
   1fff8:	e3a02000 	mov	r2, #0
   1fffc:	e5802000 	str	r2, [r0]
   20000:	e5802004 	str	r2, [r0, #4]
   20004:	e5802008 	str	r2, [r0, #8]
   20008:	e12fff1e 	bx	lr

0002000c <CNetQueue::IsEmpty() const>:
   2000c:	e5900000 	ldr	r0, [r0]
   20010:	e16f0f10 	clz	r0, r0
   20014:	e1a002a0 	lsr	r0, r0, #5
   20018:	e12fff1e 	bx	lr

0002001c <CNetQueue::Flush()>:
   2001c:	e92d4070 	push	{r4, r5, r6, lr}
   20020:	e5904000 	ldr	r4, [r0]
   20024:	e3540000 	cmp	r4, #0
   20028:	08bd8070 	popeq	{r4, r5, r6, pc}
   2002c:	e1a05000 	mov	r5, r0
   20030:	e3a06000 	mov	r6, #0
   20034:	ea00000f 	b	20078 <CNetQueue::Flush()+0x5c>
   20038:	e3540000 	cmp	r4, #0
   2003c:	0a000014 	beq	20094 <CNetQueue::Flush()+0x78>
   20040:	e5943004 	ldr	r3, [r4, #4]
   20044:	e5853000 	str	r3, [r5]
   20048:	e3530000 	cmp	r3, #0
   2004c:	15836000 	strne	r6, [r3]
   20050:	0a000017 	beq	200b4 <CNetQueue::Flush()+0x98>
   20054:	e5953008 	ldr	r3, [r5, #8]
   20058:	e3530000 	cmp	r3, #0
   2005c:	1a000012 	bne	200ac <CNetQueue::Flush()+0x90>
   20060:	e1a00004 	mov	r0, r4
   20064:	e3a01e65 	mov	r1, #1616	; 0x650
   20068:	eb002fae 	bl	2bf28 <operator delete(void*, unsigned int)>
   2006c:	e5954000 	ldr	r4, [r5]
   20070:	e3540000 	cmp	r4, #0
   20074:	08bd8070 	popeq	{r4, r5, r6, pc}
   20078:	e5950008 	ldr	r0, [r5, #8]
   2007c:	e3500000 	cmp	r0, #0
   20080:	0affffec 	beq	20038 <CNetQueue::Flush()+0x1c>
   20084:	eb0032f0 	bl	2cc4c <EnterCritical>
   20088:	e5954000 	ldr	r4, [r5]
   2008c:	e3540000 	cmp	r4, #0
   20090:	1affffea 	bne	20040 <CNetQueue::Flush()+0x24>
   20094:	e3051bac 	movw	r1, #23468	; 0x5bac
   20098:	e3401003 	movt	r1, #3
   2009c:	e3050678 	movw	r0, #22136	; 0x5678
   200a0:	e3400003 	movt	r0, #3
   200a4:	e3a0203a 	mov	r2, #58	; 0x3a
   200a8:	eb0013b1 	bl	24f74 <assertion_failed>
   200ac:	eb003313 	bl	2cd00 <LeaveCritical>
   200b0:	eaffffea 	b	20060 <CNetQueue::Flush()+0x44>
   200b4:	e5952004 	ldr	r2, [r5, #4]
   200b8:	e1520004 	cmp	r2, r4
   200bc:	05853004 	streq	r3, [r5, #4]
   200c0:	0affffe3 	beq	20054 <CNetQueue::Flush()+0x38>
   200c4:	e3051bac 	movw	r1, #23468	; 0x5bac
   200c8:	e3401003 	movt	r1, #3
   200cc:	e3050bbc 	movw	r0, #23484	; 0x5bbc
   200d0:	e3400003 	movt	r0, #3
   200d4:	e3a02043 	mov	r2, #67	; 0x43
   200d8:	eb0013a5 	bl	24f74 <assertion_failed>

000200dc <CNetQueue::~CNetQueue()>:
   200dc:	e92d4010 	push	{r4, lr}
   200e0:	e1a04000 	mov	r4, r0
   200e4:	ebffffcc 	bl	2001c <CNetQueue::Flush()>
   200e8:	e1a00004 	mov	r0, r4
   200ec:	e8bd8010 	pop	{r4, pc}

000200f0 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   200f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   200f4:	e1a06002 	mov	r6, r2
   200f8:	e1a05000 	mov	r5, r0
   200fc:	e3a00e65 	mov	r0, #1616	; 0x650
   20100:	e1a07001 	mov	r7, r1
   20104:	e1a08003 	mov	r8, r3
   20108:	eb002f78 	bl	2bef0 <operator new(unsigned int)>
   2010c:	e3560000 	cmp	r6, #0
   20110:	0a000029 	beq	201bc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xcc>
   20114:	e3560d19 	cmp	r6, #1600	; 0x640
   20118:	8a00002d 	bhi	201d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe4>
   2011c:	e1a04000 	mov	r4, r0
   20120:	e5806008 	str	r6, [r0, #8]
   20124:	e3570000 	cmp	r7, #0
   20128:	0a00002f 	beq	201ec <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xfc>
   2012c:	e1a02006 	mov	r2, r6
   20130:	e1a01007 	mov	r1, r7
   20134:	e280000c 	add	r0, r0, #12
   20138:	eb002e62 	bl	2bac8 <memcpy>
   2013c:	e5950008 	ldr	r0, [r5, #8]
   20140:	e584864c 	str	r8, [r4, #1612]	; 0x64c
   20144:	e3500000 	cmp	r0, #0
   20148:	1a000013 	bne	2019c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xac>
   2014c:	e5951000 	ldr	r1, [r5]
   20150:	e3a02000 	mov	r2, #0
   20154:	e5953004 	ldr	r3, [r5, #4]
   20158:	e1510002 	cmp	r1, r2
   2015c:	e5843000 	str	r3, [r4]
   20160:	e5842004 	str	r2, [r4, #4]
   20164:	05854000 	streq	r4, [r5]
   20168:	0a000005 	beq	20184 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x94>
   2016c:	e3530000 	cmp	r3, #0
   20170:	0a00000b 	beq	201a4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb4>
   20174:	e5932004 	ldr	r2, [r3, #4]
   20178:	e3520000 	cmp	r2, #0
   2017c:	05834004 	streq	r4, [r3, #4]
   20180:	1a00001f 	bne	20204 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x114>
   20184:	e5953008 	ldr	r3, [r5, #8]
   20188:	e5854004 	str	r4, [r5, #4]
   2018c:	e3530000 	cmp	r3, #0
   20190:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20194:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20198:	ea0032d8 	b	2cd00 <LeaveCritical>
   2019c:	eb0032aa 	bl	2cc4c <EnterCritical>
   201a0:	eaffffe9 	b	2014c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   201a4:	e3051bac 	movw	r1, #23468	; 0x5bac
   201a8:	e3401003 	movt	r1, #3
   201ac:	e3050bd0 	movw	r0, #23504	; 0x5bd0
   201b0:	e3400003 	movt	r0, #3
   201b4:	e3a02066 	mov	r2, #102	; 0x66
   201b8:	eb00136d 	bl	24f74 <assertion_failed>
   201bc:	e3051bac 	movw	r1, #23468	; 0x5bac
   201c0:	e3401003 	movt	r1, #3
   201c4:	e30500e0 	movw	r0, #20704	; 0x50e0
   201c8:	e3400003 	movt	r0, #3
   201cc:	e3a02052 	mov	r2, #82	; 0x52
   201d0:	eb001367 	bl	24f74 <assertion_failed>
   201d4:	e3051bac 	movw	r1, #23468	; 0x5bac
   201d8:	e3401003 	movt	r1, #3
   201dc:	e3020ebc 	movw	r0, #11964	; 0x2ebc
   201e0:	e3400003 	movt	r0, #3
   201e4:	e3a02053 	mov	r2, #83	; 0x53
   201e8:	eb001361 	bl	24f74 <assertion_failed>
   201ec:	e3051bac 	movw	r1, #23468	; 0x5bac
   201f0:	e3401003 	movt	r1, #3
   201f4:	e3020270 	movw	r0, #8816	; 0x2270
   201f8:	e3400003 	movt	r0, #3
   201fc:	e3a02056 	mov	r2, #86	; 0x56
   20200:	eb00135b 	bl	24f74 <assertion_failed>
   20204:	e3051bac 	movw	r1, #23468	; 0x5bac
   20208:	e3401003 	movt	r1, #3
   2020c:	e3050be0 	movw	r0, #23520	; 0x5be0
   20210:	e3400003 	movt	r0, #3
   20214:	e3a02067 	mov	r2, #103	; 0x67
   20218:	eb001355 	bl	24f74 <assertion_failed>

0002021c <CNetQueue::Dequeue(void*, void**)>:
   2021c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20220:	e5905000 	ldr	r5, [r0]
   20224:	e3550000 	cmp	r5, #0
   20228:	0a000029 	beq	202d4 <CNetQueue::Dequeue(void*, void**)+0xb8>
   2022c:	e1a04000 	mov	r4, r0
   20230:	e5900008 	ldr	r0, [r0, #8]
   20234:	e1a07002 	mov	r7, r2
   20238:	e1a06001 	mov	r6, r1
   2023c:	e3500000 	cmp	r0, #0
   20240:	1a000019 	bne	202ac <CNetQueue::Dequeue(void*, void**)+0x90>
   20244:	e5953004 	ldr	r3, [r5, #4]
   20248:	e5843000 	str	r3, [r4]
   2024c:	e3530000 	cmp	r3, #0
   20250:	0a000024 	beq	202e8 <CNetQueue::Dequeue(void*, void**)+0xcc>
   20254:	e3a02000 	mov	r2, #0
   20258:	e5832000 	str	r2, [r3]
   2025c:	e5943008 	ldr	r3, [r4, #8]
   20260:	e3530000 	cmp	r3, #0
   20264:	1a00001d 	bne	202e0 <CNetQueue::Dequeue(void*, void**)+0xc4>
   20268:	e5954008 	ldr	r4, [r5, #8]
   2026c:	e3540000 	cmp	r4, #0
   20270:	0a000026 	beq	20310 <CNetQueue::Dequeue(void*, void**)+0xf4>
   20274:	e3540d19 	cmp	r4, #1600	; 0x640
   20278:	8a00002a 	bhi	20328 <CNetQueue::Dequeue(void*, void**)+0x10c>
   2027c:	e1a02004 	mov	r2, r4
   20280:	e285100c 	add	r1, r5, #12
   20284:	e1a00006 	mov	r0, r6
   20288:	eb002e0e 	bl	2bac8 <memcpy>
   2028c:	e3570000 	cmp	r7, #0
   20290:	e1a00005 	mov	r0, r5
   20294:	e3a01e65 	mov	r1, #1616	; 0x650
   20298:	1595364c 	ldrne	r3, [r5, #1612]	; 0x64c
   2029c:	15873000 	strne	r3, [r7]
   202a0:	eb002f20 	bl	2bf28 <operator delete(void*, unsigned int)>
   202a4:	e1a00004 	mov	r0, r4
   202a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   202ac:	eb003266 	bl	2cc4c <EnterCritical>
   202b0:	e5945000 	ldr	r5, [r4]
   202b4:	e3550000 	cmp	r5, #0
   202b8:	1affffe1 	bne	20244 <CNetQueue::Dequeue(void*, void**)+0x28>
   202bc:	e3051bac 	movw	r1, #23468	; 0x5bac
   202c0:	e3401003 	movt	r1, #3
   202c4:	e3050678 	movw	r0, #22136	; 0x5678
   202c8:	e3400003 	movt	r0, #3
   202cc:	e3a02078 	mov	r2, #120	; 0x78
   202d0:	eb001327 	bl	24f74 <assertion_failed>
   202d4:	e1a04005 	mov	r4, r5
   202d8:	e1a00004 	mov	r0, r4
   202dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   202e0:	eb003286 	bl	2cd00 <LeaveCritical>
   202e4:	eaffffdf 	b	20268 <CNetQueue::Dequeue(void*, void**)+0x4c>
   202e8:	e5942004 	ldr	r2, [r4, #4]
   202ec:	e1520005 	cmp	r2, r5
   202f0:	05843004 	streq	r3, [r4, #4]
   202f4:	0affffd8 	beq	2025c <CNetQueue::Dequeue(void*, void**)+0x40>
   202f8:	e3051bac 	movw	r1, #23468	; 0x5bac
   202fc:	e3401003 	movt	r1, #3
   20300:	e3050bbc 	movw	r0, #23484	; 0x5bbc
   20304:	e3400003 	movt	r0, #3
   20308:	e3a02081 	mov	r2, #129	; 0x81
   2030c:	eb001318 	bl	24f74 <assertion_failed>
   20310:	e3051bac 	movw	r1, #23468	; 0x5bac
   20314:	e3401003 	movt	r1, #3
   20318:	e3050bf4 	movw	r0, #23540	; 0x5bf4
   2031c:	e3400003 	movt	r0, #3
   20320:	e3a02088 	mov	r2, #136	; 0x88
   20324:	eb001312 	bl	24f74 <assertion_failed>
   20328:	e3051bac 	movw	r1, #23468	; 0x5bac
   2032c:	e3401003 	movt	r1, #3
   20330:	e3050c00 	movw	r0, #23552	; 0x5c00
   20334:	e3400003 	movt	r0, #3
   20338:	e3a02089 	mov	r2, #137	; 0x89
   2033c:	eb00130c 	bl	24f74 <assertion_failed>

00020340 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   20340:	e92d4070 	push	{r4, r5, r6, lr}
   20344:	e1a04000 	mov	r4, r0
   20348:	e3a05000 	mov	r5, #0
   2034c:	e1a00001 	mov	r0, r1
   20350:	e1a01004 	mov	r1, r4
   20354:	e5c4500c 	strb	r5, [r4, #12]
   20358:	e1a06002 	mov	r6, r2
   2035c:	ebfffe9f 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   20360:	e5c45008 	strb	r5, [r4, #8]
   20364:	e5c46009 	strb	r6, [r4, #9]
   20368:	e1a00004 	mov	r0, r4
   2036c:	e8bd8070 	pop	{r4, r5, r6, pc}

00020370 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   20370:	e92d4070 	push	{r4, r5, r6, lr}
   20374:	e1a04000 	mov	r4, r0
   20378:	e1a06002 	mov	r6, r2
   2037c:	e1a00001 	mov	r0, r1
   20380:	e3a02001 	mov	r2, #1
   20384:	e1a01004 	mov	r1, r4
   20388:	e5c4200c 	strb	r2, [r4, #12]
   2038c:	e1a05003 	mov	r5, r3
   20390:	ebfffe92 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   20394:	e1a00006 	mov	r0, r6
   20398:	e2841004 	add	r1, r4, #4
   2039c:	ebfffe8f 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   203a0:	e3a03000 	mov	r3, #0
   203a4:	e5c45009 	strb	r5, [r4, #9]
   203a8:	e1a00004 	mov	r0, r4
   203ac:	e5c43008 	strb	r3, [r4, #8]
   203b0:	e8bd8070 	pop	{r4, r5, r6, pc}

000203b4 <CChecksumCalculator::~CChecksumCalculator()>:
   203b4:	e12fff1e 	bx	lr

000203b8 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   203b8:	e1a03001 	mov	r3, r1
   203bc:	e1a01000 	mov	r1, r0
   203c0:	e1a00003 	mov	r0, r3
   203c4:	eafffe85 	b	1fde0 <CIPAddress::CopyTo(unsigned char*) const>

000203c8 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   203c8:	e92d4010 	push	{r4, lr}
   203cc:	e1a04000 	mov	r4, r0
   203d0:	e1a00001 	mov	r0, r1
   203d4:	e2841004 	add	r1, r4, #4
   203d8:	ebfffe80 	bl	1fde0 <CIPAddress::CopyTo(unsigned char*) const>
   203dc:	e3a03001 	mov	r3, #1
   203e0:	e5c4300c 	strb	r3, [r4, #12]
   203e4:	e8bd8010 	pop	{r4, pc}

000203e8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   203e8:	e92d4010 	push	{r4, lr}
   203ec:	e2504000 	subs	r4, r0, #0
   203f0:	0a000016 	beq	20450 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x68>
   203f4:	e3510000 	cmp	r1, #0
   203f8:	0a00001a 	beq	20468 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x80>
   203fc:	e3510001 	cmp	r1, #1
   20400:	9a000010 	bls	20448 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x60>
   20404:	e241e002 	sub	lr, r1, #2
   20408:	e1a00002 	mov	r0, r2
   2040c:	e1a0e0ae 	lsr	lr, lr, #1
   20410:	e1a03004 	mov	r3, r4
   20414:	e084c08e 	add	ip, r4, lr, lsl #1
   20418:	e28cc002 	add	ip, ip, #2
   2041c:	e0d320b2 	ldrh	r2, [r3], #2
   20420:	e0800002 	add	r0, r0, r2
   20424:	e153000c 	cmp	r3, ip
   20428:	1afffffb 	bne	2041c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x34>
   2042c:	e3110001 	tst	r1, #1
   20430:	e28ee001 	add	lr, lr, #1
   20434:	e084408e 	add	r4, r4, lr, lsl #1
   20438:	08bd8010 	popeq	{r4, pc}
   2043c:	e5d43000 	ldrb	r3, [r4]
   20440:	e0800003 	add	r0, r0, r3
   20444:	e8bd8010 	pop	{r4, pc}
   20448:	e1a00002 	mov	r0, r2
   2044c:	eafffffa 	b	2043c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x54>
   20450:	e3051c20 	movw	r1, #23584	; 0x5c20
   20454:	e3401003 	movt	r1, #3
   20458:	e3050c38 	movw	r0, #23608	; 0x5c38
   2045c:	e3400003 	movt	r0, #3
   20460:	e3a02054 	mov	r2, #84	; 0x54
   20464:	eb0012c2 	bl	24f74 <assertion_failed>
   20468:	e3051c20 	movw	r1, #23584	; 0x5c20
   2046c:	e3401003 	movt	r1, #3
   20470:	e30500e0 	movw	r0, #20704	; 0x50e0
   20474:	e3400003 	movt	r0, #3
   20478:	e3a02055 	mov	r2, #85	; 0x55
   2047c:	eb0012bc 	bl	24f74 <assertion_failed>

00020480 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   20480:	e92d4070 	push	{r4, r5, r6, lr}
   20484:	e1a04002 	mov	r4, r2
   20488:	e5d0200c 	ldrb	r2, [r0, #12]
   2048c:	e3520000 	cmp	r2, #0
   20490:	0a000018 	beq	204f8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x78>
   20494:	e1a05001 	mov	r5, r1
   20498:	e6bf2fb4 	rev16	r2, r4
   2049c:	e3a0100c 	mov	r1, #12
   204a0:	e1c020ba 	strh	r2, [r0, #10]
   204a4:	e3a02000 	mov	r2, #0
   204a8:	ebffffce 	bl	203e8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   204ac:	e3550000 	cmp	r5, #0
   204b0:	0a000016 	beq	20510 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x90>
   204b4:	e3540000 	cmp	r4, #0
   204b8:	0a00001a 	beq	20528 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa8>
   204bc:	e1a02000 	mov	r2, r0
   204c0:	e1a01004 	mov	r1, r4
   204c4:	e1a00005 	mov	r0, r5
   204c8:	ebffffc6 	bl	203e8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   204cc:	e1a03820 	lsr	r3, r0, #16
   204d0:	e3530000 	cmp	r3, #0
   204d4:	e6ff3073 	uxth	r3, r3
   204d8:	0a000003 	beq	204ec <CChecksumCalculator::Calculate(void const*, unsigned int)+0x6c>
   204dc:	e6f30070 	uxtah	r0, r3, r0
   204e0:	e3a03001 	mov	r3, #1
   204e4:	e1b02820 	lsrs	r2, r0, #16
   204e8:	1afffffb 	bne	204dc <CChecksumCalculator::Calculate(void const*, unsigned int)+0x5c>
   204ec:	e1e00000 	mvn	r0, r0
   204f0:	e6ff0070 	uxth	r0, r0
   204f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   204f8:	e3051c20 	movw	r1, #23584	; 0x5c20
   204fc:	e3401003 	movt	r1, #3
   20500:	e3050c48 	movw	r0, #23624	; 0x5c48
   20504:	e3400003 	movt	r0, #3
   20508:	e3a0203c 	mov	r2, #60	; 0x3c
   2050c:	eb001298 	bl	24f74 <assertion_failed>
   20510:	e3051c20 	movw	r1, #23584	; 0x5c20
   20514:	e3401003 	movt	r1, #3
   20518:	e3020270 	movw	r0, #8816	; 0x2270
   2051c:	e3400003 	movt	r0, #3
   20520:	e3a02041 	mov	r2, #65	; 0x41
   20524:	eb001292 	bl	24f74 <assertion_failed>
   20528:	e3051c20 	movw	r1, #23584	; 0x5c20
   2052c:	e3401003 	movt	r1, #3
   20530:	e30500e0 	movw	r0, #20704	; 0x50e0
   20534:	e3400003 	movt	r0, #3
   20538:	e3a02042 	mov	r2, #66	; 0x42
   2053c:	eb00128c 	bl	24f74 <assertion_failed>

00020540 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   20540:	e92d4010 	push	{r4, lr}
   20544:	e3500000 	cmp	r0, #0
   20548:	0a00000e 	beq	20588 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x48>
   2054c:	e3510000 	cmp	r1, #0
   20550:	0a000012 	beq	205a0 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x60>
   20554:	e3a02000 	mov	r2, #0
   20558:	ebffffa2 	bl	203e8 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   2055c:	e1a03820 	lsr	r3, r0, #16
   20560:	e3530000 	cmp	r3, #0
   20564:	e6ff3073 	uxth	r3, r3
   20568:	0a000003 	beq	2057c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x3c>
   2056c:	e6f30070 	uxtah	r0, r3, r0
   20570:	e3a03001 	mov	r3, #1
   20574:	e1b02820 	lsrs	r2, r0, #16
   20578:	1afffffb 	bne	2056c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x2c>
   2057c:	e1e00000 	mvn	r0, r0
   20580:	e6ff0070 	uxth	r0, r0
   20584:	e8bd8010 	pop	{r4, pc}
   20588:	e3051c20 	movw	r1, #23584	; 0x5c20
   2058c:	e3401003 	movt	r1, #3
   20590:	e3020270 	movw	r0, #8816	; 0x2270
   20594:	e3400003 	movt	r0, #3
   20598:	e3a0204a 	mov	r2, #74	; 0x4a
   2059c:	eb001274 	bl	24f74 <assertion_failed>
   205a0:	e3051c20 	movw	r1, #23584	; 0x5c20
   205a4:	e3401003 	movt	r1, #3
   205a8:	e30500e0 	movw	r0, #20704	; 0x50e0
   205ac:	e3400003 	movt	r0, #3
   205b0:	e3a0204b 	mov	r2, #75	; 0x4b
   205b4:	eb00126e 	bl	24f74 <assertion_failed>

000205b8 <CChecksumCalculator::FoldResult(unsigned int)>:
   205b8:	e1a03820 	lsr	r3, r0, #16
   205bc:	e3530000 	cmp	r3, #0
   205c0:	e6ff3073 	uxth	r3, r3
   205c4:	0a000003 	beq	205d8 <CChecksumCalculator::FoldResult(unsigned int)+0x20>
   205c8:	e6f30070 	uxtah	r0, r3, r0
   205cc:	e3a03001 	mov	r3, #1
   205d0:	e1b02820 	lsrs	r2, r0, #16
   205d4:	1afffffb 	bne	205c8 <CChecksumCalculator::FoldResult(unsigned int)+0x10>
   205d8:	e6ff0070 	uxth	r0, r0
   205dc:	e12fff1e 	bx	lr

000205e0 <CDHCPClient::HaltNetwork() [clone .part.0]>:
   205e0:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   205e4:	e3401003 	movt	r1, #3
   205e8:	e3050058 	movw	r0, #20568	; 0x5058
   205ec:	e3400003 	movt	r0, #3
   205f0:	e92d4010 	push	{r4, lr}
   205f4:	e30021ae 	movw	r2, #430	; 0x1ae
   205f8:	eb00125d 	bl	24f74 <assertion_failed>

000205fc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   205fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20600:	e1a04000 	mov	r4, r0
   20604:	e1a05001 	mov	r5, r1
   20608:	e3a01902 	mov	r1, #32768	; 0x8000
   2060c:	e1a06002 	mov	r6, r2
   20610:	eb00105c 	bl	24788 <CTask::CTask(unsigned int)>
   20614:	e59f30bc 	ldr	r3, [pc, #188]	; 206d8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xdc>
   20618:	e5843000 	str	r3, [r4]
   2061c:	e1a00005 	mov	r0, r5
   20620:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   20624:	e28470e0 	add	r7, r4, #224	; 0xe0
   20628:	ebffe09d 	bl	188a4 <CNetSubSystem::GetConfig()>
   2062c:	e3560000 	cmp	r6, #0
   20630:	e58400dc 	str	r0, [r4, #220]	; 0xdc
   20634:	e3061108 	movw	r1, #24840	; 0x6108
   20638:	e3401003 	movt	r1, #3
   2063c:	11a01006 	movne	r1, r6
   20640:	e1a00007 	mov	r0, r7
   20644:	eb0023ee 	bl	29604 <CString::CString(char const*)>
   20648:	e3a02011 	mov	r2, #17
   2064c:	e1a01005 	mov	r1, r5
   20650:	e28400f0 	add	r0, r4, #240	; 0xf0
   20654:	eb000d3c 	bl	23b4c <CSocket::CSocket(CNetSubSystem*, int)>
   20658:	e59430d8 	ldr	r3, [r4, #216]	; 0xd8
   2065c:	e3a02000 	mov	r2, #0
   20660:	e5c42190 	strb	r2, [r4, #400]	; 0x190
   20664:	e1530002 	cmp	r3, r2
   20668:	0a000008 	beq	20690 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0x94>
   2066c:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   20670:	e3530000 	cmp	r3, #0
   20674:	0a00000b 	beq	206a8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xac>
   20678:	e1a00007 	mov	r0, r7
   2067c:	eb002421 	bl	29708 <CString::GetLength() const>
   20680:	e350001e 	cmp	r0, #30
   20684:	8a00000d 	bhi	206c0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc4>
   20688:	e1a00004 	mov	r0, r4
   2068c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20690:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20694:	e3401003 	movt	r1, #3
   20698:	e305002c 	movw	r0, #20524	; 0x502c
   2069c:	e3400003 	movt	r0, #3
   206a0:	e3a02073 	mov	r2, #115	; 0x73
   206a4:	eb001232 	bl	24f74 <assertion_failed>
   206a8:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   206ac:	e3401003 	movt	r1, #3
   206b0:	e3050058 	movw	r0, #20568	; 0x5058
   206b4:	e3400003 	movt	r0, #3
   206b8:	e3a02074 	mov	r2, #116	; 0x74
   206bc:	eb00122c 	bl	24f74 <assertion_failed>
   206c0:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   206c4:	e3401003 	movt	r1, #3
   206c8:	e3050cb0 	movw	r0, #23728	; 0x5cb0
   206cc:	e3400003 	movt	r0, #3
   206d0:	e3a02076 	mov	r2, #118	; 0x76
   206d4:	eb001226 	bl	24f74 <assertion_failed>
   206d8:	00035c64 	.word	0x00035c64

000206dc <CDHCPClient::IsBound() const>:
   206dc:	e5d00190 	ldrb	r0, [r0, #400]	; 0x190
   206e0:	e12fff1e 	bx	lr

000206e4 <CDHCPClient::HaltNetwork()>:
   206e4:	e59030dc 	ldr	r3, [r0, #220]	; 0xdc
   206e8:	e3a02000 	mov	r2, #0
   206ec:	e5c02190 	strb	r2, [r0, #400]	; 0x190
   206f0:	e1530002 	cmp	r3, r2
   206f4:	0a000001 	beq	20700 <CDHCPClient::HaltNetwork()+0x1c>
   206f8:	e1a00003 	mov	r0, r3
   206fc:	eafffcac 	b	1f9b4 <CNetConfig::Reset()>
   20700:	e92d4010 	push	{r4, lr}
   20704:	ebffffb5 	bl	205e0 <CDHCPClient::HaltNetwork() [clone .part.0]>

00020708 <CDHCPClient::CheckConfig()>:
   20708:	e92d4030 	push	{r4, r5, lr}
   2070c:	e1a04000 	mov	r4, r0
   20710:	e59031b8 	ldr	r3, [r0, #440]	; 0x1b8
   20714:	e24dd014 	sub	sp, sp, #20
   20718:	e3530000 	cmp	r3, #0
   2071c:	0a00002b 	beq	207d0 <CDHCPClient::CheckConfig()+0xc8>
   20720:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   20724:	e3520000 	cmp	r2, #0
   20728:	0a000028 	beq	207d0 <CDHCPClient::CheckConfig()+0xc8>
   2072c:	e59011c0 	ldr	r1, [r0, #448]	; 0x1c0
   20730:	e3510000 	cmp	r1, #0
   20734:	0a000025 	beq	207d0 <CDHCPClient::CheckConfig()+0xc8>
   20738:	e59001c4 	ldr	r0, [r0, #452]	; 0x1c4
   2073c:	e3500000 	cmp	r0, #0
   20740:	0a000022 	beq	207d0 <CDHCPClient::CheckConfig()+0xc8>
   20744:	e0233001 	eor	r3, r3, r1
   20748:	e1130002 	tst	r3, r2
   2074c:	1a000036 	bne	2082c <CDHCPClient::CheckConfig()+0x124>
   20750:	e59451c8 	ldr	r5, [r4, #456]	; 0x1c8
   20754:	e3550000 	cmp	r5, #0
   20758:	0a00003a 	beq	20848 <CDHCPClient::CheckConfig()+0x140>
   2075c:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   20760:	e59401d8 	ldr	r0, [r4, #472]	; 0x1d8
   20764:	e3530000 	cmp	r3, #0
   20768:	0a000027 	beq	2080c <CDHCPClient::CheckConfig()+0x104>
   2076c:	e3500000 	cmp	r0, #0
   20770:	00450003 	subeq	r0, r5, r3
   20774:	008300a0 	addeq	r0, r3, r0, lsr #1
   20778:	058401d8 	streq	r0, [r4, #472]	; 0x1d8
   2077c:	e1530000 	cmp	r3, r0
   20780:	93a03000 	movls	r3, #0
   20784:	83a03001 	movhi	r3, #1
   20788:	e1550000 	cmp	r5, r0
   2078c:	21a00003 	movcs	r0, r3
   20790:	33830001 	orrcc	r0, r3, #1
   20794:	e3500000 	cmp	r0, #0
   20798:	03a00001 	moveq	r0, #1
   2079c:	0a000018 	beq	20804 <CDHCPClient::CheckConfig()+0xfc>
   207a0:	eb001798 	bl	26608 <CLogger::Get()>
   207a4:	e594e1c8 	ldr	lr, [r4, #456]	; 0x1c8
   207a8:	e594c1d8 	ldr	ip, [r4, #472]	; 0x1d8
   207ac:	e3053d44 	movw	r3, #23876	; 0x5d44
   207b0:	e3403003 	movt	r3, #3
   207b4:	e59411d4 	ldr	r1, [r4, #468]	; 0x1d4
   207b8:	e88d5002 	stm	sp, {r1, ip, lr}
   207bc:	e3a02002 	mov	r2, #2
   207c0:	e59f10a0 	ldr	r1, [pc, #160]	; 20868 <CDHCPClient::CheckConfig()+0x160>
   207c4:	eb0016d0 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   207c8:	e3a00000 	mov	r0, #0
   207cc:	ea00000c 	b	20804 <CDHCPClient::CheckConfig()+0xfc>
   207d0:	eb00178c 	bl	26608 <CLogger::Get()>
   207d4:	e59421c4 	ldr	r2, [r4, #452]	; 0x1c4
   207d8:	e59411b8 	ldr	r1, [r4, #440]	; 0x1b8
   207dc:	e3053cd0 	movw	r3, #23760	; 0x5cd0
   207e0:	e3403003 	movt	r3, #3
   207e4:	e594e1c0 	ldr	lr, [r4, #448]	; 0x1c0
   207e8:	e594c1bc 	ldr	ip, [r4, #444]	; 0x1bc
   207ec:	e88d5002 	stm	sp, {r1, ip, lr}
   207f0:	e59f1070 	ldr	r1, [pc, #112]	; 20868 <CDHCPClient::CheckConfig()+0x160>
   207f4:	e58d200c 	str	r2, [sp, #12]
   207f8:	e3a02002 	mov	r2, #2
   207fc:	eb0016c2 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   20800:	e3a00000 	mov	r0, #0
   20804:	e28dd014 	add	sp, sp, #20
   20808:	e8bd8030 	pop	{r4, r5, pc}
   2080c:	e3500000 	cmp	r0, #0
   20810:	01a030a5 	lsreq	r3, r5, #1
   20814:	004501a5 	subeq	r0, r5, r5, lsr #3
   20818:	10653080 	rsbne	r3, r5, r0, lsl #1
   2081c:	058431d4 	streq	r3, [r4, #468]	; 0x1d4
   20820:	058401d8 	streq	r0, [r4, #472]	; 0x1d8
   20824:	158431d4 	strne	r3, [r4, #468]	; 0x1d4
   20828:	eaffffd3 	b	2077c <CDHCPClient::CheckConfig()+0x74>
   2082c:	eb001775 	bl	26608 <CLogger::Get()>
   20830:	e3053d00 	movw	r3, #23808	; 0x5d00
   20834:	e3403003 	movt	r3, #3
   20838:	e594e1bc 	ldr	lr, [r4, #444]	; 0x1bc
   2083c:	e594c1c0 	ldr	ip, [r4, #448]	; 0x1c0
   20840:	e59411b8 	ldr	r1, [r4, #440]	; 0x1b8
   20844:	eaffffdb 	b	207b8 <CDHCPClient::CheckConfig()+0xb0>
   20848:	eb00176e 	bl	26608 <CLogger::Get()>
   2084c:	e3053d2c 	movw	r3, #23852	; 0x5d2c
   20850:	e3403003 	movt	r3, #3
   20854:	e3a02002 	mov	r2, #2
   20858:	e59f1008 	ldr	r1, [pc, #8]	; 20868 <CDHCPClient::CheckConfig()+0x160>
   2085c:	eb0016aa 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   20860:	e1a00005 	mov	r0, r5
   20864:	eaffffe6 	b	20804 <CDHCPClient::CheckConfig()+0xfc>
   20868:	00035c70 	.word	0x00035c70

0002086c <CDHCPClient::GetUnaligned(void const*)>:
   2086c:	e3500000 	cmp	r0, #0
   20870:	0a000001 	beq	2087c <CDHCPClient::GetUnaligned(void const*)+0x10>
   20874:	e5900000 	ldr	r0, [r0]
   20878:	e12fff1e 	bx	lr
   2087c:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20880:	e3401003 	movt	r1, #3
   20884:	e3050d64 	movw	r0, #23908	; 0x5d64
   20888:	e3400003 	movt	r0, #3
   2088c:	e92d4010 	push	{r4, lr}
   20890:	e3a02e36 	mov	r2, #864	; 0x360
   20894:	eb0011b6 	bl	24f74 <assertion_failed>

00020898 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   20898:	e92d4070 	push	{r4, r5, r6, lr}
   2089c:	e2514000 	subs	r4, r1, #0
   208a0:	11a06000 	movne	r6, r0
   208a4:	10845002 	addne	r5, r4, r2
   208a8:	0a00007e 	beq	20aa8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x210>
   208ac:	e2840002 	add	r0, r4, #2
   208b0:	e1550000 	cmp	r5, r0
   208b4:	38bd8070 	popcc	{r4, r5, r6, pc}
   208b8:	e5d43000 	ldrb	r3, [r4]
   208bc:	e3530034 	cmp	r3, #52	; 0x34
   208c0:	0a00006f 	beq	20a84 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1ec>
   208c4:	8a00001e 	bhi	20944 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xac>
   208c8:	e3530003 	cmp	r3, #3
   208cc:	0a00005f 	beq	20a50 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1b8>
   208d0:	8a00002c 	bhi	20988 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf0>
   208d4:	e3530000 	cmp	r3, #0
   208d8:	02844001 	addeq	r4, r4, #1
   208dc:	0afffff2 	beq	208ac <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14>
   208e0:	e3530001 	cmp	r3, #1
   208e4:	1a000012 	bne	20934 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x9c>
   208e8:	e5d43001 	ldrb	r3, [r4, #1]
   208ec:	e3530004 	cmp	r3, #4
   208f0:	1a000010 	bne	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   208f4:	e2842006 	add	r2, r4, #6
   208f8:	e1550002 	cmp	r5, r2
   208fc:	3a00000d 	bcc	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20900:	ebffffd9 	bl	2086c <CDHCPClient::GetUnaligned(void const*)>
   20904:	e58601bc 	str	r0, [r6, #444]	; 0x1bc
   20908:	e5d43001 	ldrb	r3, [r4, #1]
   2090c:	ea000009 	b	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20910:	e5d43001 	ldrb	r3, [r4, #1]
   20914:	e3530004 	cmp	r3, #4
   20918:	1a000006 	bne	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   2091c:	e2842006 	add	r2, r4, #6
   20920:	e1550002 	cmp	r5, r2
   20924:	3a000003 	bcc	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20928:	ebffffcf 	bl	2086c <CDHCPClient::GetUnaligned(void const*)>
   2092c:	e6bf0f30 	rev	r0, r0
   20930:	e58601d8 	str	r0, [r6, #472]	; 0x1d8
   20934:	e5d43001 	ldrb	r3, [r4, #1]
   20938:	e2833002 	add	r3, r3, #2
   2093c:	e0844003 	add	r4, r4, r3
   20940:	eaffffd9 	b	208ac <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14>
   20944:	e353003a 	cmp	r3, #58	; 0x3a
   20948:	0a000022 	beq	209d8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x140>
   2094c:	8a00001c 	bhi	209c4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   20950:	e3530035 	cmp	r3, #53	; 0x35
   20954:	0a000034 	beq	20a2c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x194>
   20958:	e3530036 	cmp	r3, #54	; 0x36
   2095c:	1afffff4 	bne	20934 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x9c>
   20960:	e5d43001 	ldrb	r3, [r4, #1]
   20964:	e3530004 	cmp	r3, #4
   20968:	1afffff2 	bne	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   2096c:	e2842006 	add	r2, r4, #6
   20970:	e1550002 	cmp	r5, r2
   20974:	3affffef 	bcc	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20978:	ebffffbb 	bl	2086c <CDHCPClient::GetUnaligned(void const*)>
   2097c:	e58601d0 	str	r0, [r6, #464]	; 0x1d0
   20980:	e5d43001 	ldrb	r3, [r4, #1]
   20984:	eaffffeb 	b	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20988:	e3530006 	cmp	r3, #6
   2098c:	0a00001c 	beq	20a04 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x16c>
   20990:	e3530033 	cmp	r3, #51	; 0x33
   20994:	1affffe6 	bne	20934 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x9c>
   20998:	e5d43001 	ldrb	r3, [r4, #1]
   2099c:	e3530004 	cmp	r3, #4
   209a0:	1affffe4 	bne	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   209a4:	e2842006 	add	r2, r4, #6
   209a8:	e1550002 	cmp	r5, r2
   209ac:	3affffe1 	bcc	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   209b0:	ebffffad 	bl	2086c <CDHCPClient::GetUnaligned(void const*)>
   209b4:	e6bf0f30 	rev	r0, r0
   209b8:	e58601c8 	str	r0, [r6, #456]	; 0x1c8
   209bc:	e5d43001 	ldrb	r3, [r4, #1]
   209c0:	eaffffdc 	b	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   209c4:	e353003b 	cmp	r3, #59	; 0x3b
   209c8:	0affffd0 	beq	20910 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x78>
   209cc:	e35300ff 	cmp	r3, #255	; 0xff
   209d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   209d4:	eaffffd6 	b	20934 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x9c>
   209d8:	e5d43001 	ldrb	r3, [r4, #1]
   209dc:	e3530004 	cmp	r3, #4
   209e0:	1affffd4 	bne	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   209e4:	e2842006 	add	r2, r4, #6
   209e8:	e1550002 	cmp	r5, r2
   209ec:	3affffd1 	bcc	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   209f0:	ebffff9d 	bl	2086c <CDHCPClient::GetUnaligned(void const*)>
   209f4:	e6bf0f30 	rev	r0, r0
   209f8:	e58601d4 	str	r0, [r6, #468]	; 0x1d4
   209fc:	e5d43001 	ldrb	r3, [r4, #1]
   20a00:	eaffffcc 	b	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a04:	e5d43001 	ldrb	r3, [r4, #1]
   20a08:	e3530003 	cmp	r3, #3
   20a0c:	9affffc9 	bls	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a10:	e2842006 	add	r2, r4, #6
   20a14:	e1550002 	cmp	r5, r2
   20a18:	3affffc6 	bcc	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a1c:	ebffff92 	bl	2086c <CDHCPClient::GetUnaligned(void const*)>
   20a20:	e58601c4 	str	r0, [r6, #452]	; 0x1c4
   20a24:	e5d43001 	ldrb	r3, [r4, #1]
   20a28:	eaffffc2 	b	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a2c:	e5d43001 	ldrb	r3, [r4, #1]
   20a30:	e3530001 	cmp	r3, #1
   20a34:	1affffbf 	bne	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a38:	e2842003 	add	r2, r4, #3
   20a3c:	e1550002 	cmp	r5, r2
   20a40:	25d43002 	ldrbcs	r3, [r4, #2]
   20a44:	25c631cd 	strbcs	r3, [r6, #461]	; 0x1cd
   20a48:	25d43001 	ldrbcs	r3, [r4, #1]
   20a4c:	eaffffb9 	b	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a50:	e5d43001 	ldrb	r3, [r4, #1]
   20a54:	e3530003 	cmp	r3, #3
   20a58:	9affffb6 	bls	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a5c:	e2842006 	add	r2, r4, #6
   20a60:	e1550002 	cmp	r5, r2
   20a64:	3affffb3 	bcc	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a68:	e59621c0 	ldr	r2, [r6, #448]	; 0x1c0
   20a6c:	e3520000 	cmp	r2, #0
   20a70:	1affffb0 	bne	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a74:	ebffff7c 	bl	2086c <CDHCPClient::GetUnaligned(void const*)>
   20a78:	e58601c0 	str	r0, [r6, #448]	; 0x1c0
   20a7c:	e5d43001 	ldrb	r3, [r4, #1]
   20a80:	eaffffac 	b	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a84:	e5d43001 	ldrb	r3, [r4, #1]
   20a88:	e3530001 	cmp	r3, #1
   20a8c:	1affffa9 	bne	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20a90:	e2842003 	add	r2, r4, #3
   20a94:	e1550002 	cmp	r5, r2
   20a98:	25d43002 	ldrbcs	r3, [r4, #2]
   20a9c:	25c631cc 	strbcs	r3, [r6, #460]	; 0x1cc
   20aa0:	25d43001 	ldrbcs	r3, [r4, #1]
   20aa4:	eaffffa3 	b	20938 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xa0>
   20aa8:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20aac:	e3401003 	movt	r1, #3
   20ab0:	e3050d70 	movw	r0, #23920	; 0x5d70
   20ab4:	e3400003 	movt	r0, #3
   20ab8:	e30022ad 	movw	r2, #685	; 0x2ad
   20abc:	eb00112c 	bl	24f74 <assertion_failed>

00020ac0 <CDHCPClient::GetXID() const>:
   20ac0:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   20ac4:	e92d4010 	push	{r4, lr}
   20ac8:	e3500000 	cmp	r0, #0
   20acc:	0a00000b 	beq	20b00 <CDHCPClient::GetXID() const+0x40>
   20ad0:	ebffdf75 	bl	188ac <CNetSubSystem::GetNetDeviceLayer()>
   20ad4:	ebffe853 	bl	1ac28 <CNetDeviceLayer::GetMACAddress() const>
   20ad8:	eb002c80 	bl	2bce0 <CMACAddress::Get() const>
   20adc:	e2504000 	subs	r4, r0, #0
   20ae0:	0a00000c 	beq	20b18 <CDHCPClient::GetXID() const+0x58>
   20ae4:	eb002a43 	bl	2b3f8 <CTimer::Get()>
   20ae8:	e2840002 	add	r0, r4, #2
   20aec:	ebffff5e 	bl	2086c <CDHCPClient::GetUnaligned(void const*)>
   20af0:	e1a04000 	mov	r4, r0
   20af4:	eb002771 	bl	2a8c0 <CTimer::GetClockTicks()>
   20af8:	e0840000 	add	r0, r4, r0
   20afc:	e8bd8010 	pop	{r4, pc}
   20b00:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20b04:	e3401003 	movt	r1, #3
   20b08:	e305002c 	movw	r0, #20524	; 0x502c
   20b0c:	e3400003 	movt	r0, #3
   20b10:	e3002356 	movw	r2, #854	; 0x356
   20b14:	eb001116 	bl	24f74 <assertion_failed>
   20b18:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20b1c:	e3401003 	movt	r1, #3
   20b20:	e30503a8 	movw	r0, #21416	; 0x53a8
   20b24:	e3400003 	movt	r0, #3
   20b28:	e3a02fd6 	mov	r2, #856	; 0x358
   20b2c:	eb001110 	bl	24f74 <assertion_failed>

00020b30 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   20b30:	e3500000 	cmp	r0, #0
   20b34:	0a000007 	beq	20b58 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x28>
   20b38:	e1a02421 	lsr	r2, r1, #8
   20b3c:	e1a03821 	lsr	r3, r1, #16
   20b40:	e5c01000 	strb	r1, [r0]
   20b44:	e1a01c21 	lsr	r1, r1, #24
   20b48:	e5c02001 	strb	r2, [r0, #1]
   20b4c:	e5c03002 	strb	r3, [r0, #2]
   20b50:	e5c01003 	strb	r1, [r0, #3]
   20b54:	e12fff1e 	bx	lr
   20b58:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20b5c:	e3401003 	movt	r1, #3
   20b60:	e3050d64 	movw	r0, #23908	; 0x5d64
   20b64:	e3400003 	movt	r0, #3
   20b68:	e92d4010 	push	{r4, lr}
   20b6c:	e300236d 	movw	r2, #877	; 0x36d
   20b70:	eb0010ff 	bl	24f74 <assertion_failed>

00020b74 <CDHCPClient::~CDHCPClient()>:
   20b74:	e92d4010 	push	{r4, lr}
   20b78:	e1a04000 	mov	r4, r0
   20b7c:	e59f2028 	ldr	r2, [pc, #40]	; 20bac <CDHCPClient::~CDHCPClient()+0x38>
   20b80:	e3a03000 	mov	r3, #0
   20b84:	e28000f0 	add	r0, r0, #240	; 0xf0
   20b88:	e5842000 	str	r2, [r4]
   20b8c:	e58430d8 	str	r3, [r4, #216]	; 0xd8
   20b90:	eb000ac3 	bl	236a4 <CSocket::~CSocket()>
   20b94:	e28400e0 	add	r0, r4, #224	; 0xe0
   20b98:	eb002260 	bl	29520 <CString::~CString()>
   20b9c:	e1a00004 	mov	r0, r4
   20ba0:	eb000ea8 	bl	24648 <CTask::~CTask()>
   20ba4:	e1a00004 	mov	r0, r4
   20ba8:	e8bd8010 	pop	{r4, pc}
   20bac:	00035c64 	.word	0x00035c64

00020bb0 <CDHCPClient::~CDHCPClient()>:
   20bb0:	e92d4010 	push	{r4, lr}
   20bb4:	e1a04000 	mov	r4, r0
   20bb8:	ebffffed 	bl	20b74 <CDHCPClient::~CDHCPClient()>
   20bbc:	e1a00004 	mov	r0, r4
   20bc0:	e3a01f77 	mov	r1, #476	; 0x1dc
   20bc4:	eb002cd7 	bl	2bf28 <operator delete(void*, unsigned int)>
   20bc8:	e1a00004 	mov	r0, r4
   20bcc:	e8bd8010 	pop	{r4, pc}

00020bd0 <CDHCPClient::ReceiveMessage()>:
   20bd0:	e92d4070 	push	{r4, r5, r6, lr}
   20bd4:	e3a03040 	mov	r3, #64	; 0x40
   20bd8:	e1a04000 	mov	r4, r0
   20bdc:	e24dde23 	sub	sp, sp, #560	; 0x230
   20be0:	e28000f0 	add	r0, r0, #240	; 0xf0
   20be4:	e3a02f89 	mov	r2, #548	; 0x224
   20be8:	e28d100c 	add	r1, sp, #12
   20bec:	eb000b54 	bl	23944 <CSocket::Receive(void*, unsigned int, int)>
   20bf0:	e35000ef 	cmp	r0, #239	; 0xef
   20bf4:	da000002 	ble	20c04 <CDHCPClient::ReceiveMessage()+0x34>
   20bf8:	e5dd300c 	ldrb	r3, [sp, #12]
   20bfc:	e3530002 	cmp	r3, #2
   20c00:	0a000003 	beq	20c14 <CDHCPClient::ReceiveMessage()+0x44>
   20c04:	e3a05000 	mov	r5, #0
   20c08:	e1a00005 	mov	r0, r5
   20c0c:	e28dde23 	add	sp, sp, #560	; 0x230
   20c10:	e8bd8070 	pop	{r4, r5, r6, pc}
   20c14:	e5dd300d 	ldrb	r3, [sp, #13]
   20c18:	e3530001 	cmp	r3, #1
   20c1c:	1afffff8 	bne	20c04 <CDHCPClient::ReceiveMessage()+0x34>
   20c20:	e5dd300e 	ldrb	r3, [sp, #14]
   20c24:	e3530006 	cmp	r3, #6
   20c28:	1afffff5 	bne	20c04 <CDHCPClient::ReceiveMessage()+0x34>
   20c2c:	e59d2010 	ldr	r2, [sp, #16]
   20c30:	e59431b0 	ldr	r3, [r4, #432]	; 0x1b0
   20c34:	e1520003 	cmp	r2, r3
   20c38:	1afffff1 	bne	20c04 <CDHCPClient::ReceiveMessage()+0x34>
   20c3c:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   20c40:	e3083263 	movw	r3, #33379	; 0x8263
   20c44:	e3463353 	movt	r3, #25427	; 0x6353
   20c48:	e1520003 	cmp	r2, r3
   20c4c:	1affffec 	bne	20c04 <CDHCPClient::ReceiveMessage()+0x34>
   20c50:	e1a05000 	mov	r5, r0
   20c54:	e59400d8 	ldr	r0, [r4, #216]	; 0xd8
   20c58:	e3500000 	cmp	r0, #0
   20c5c:	0a000031 	beq	20d28 <CDHCPClient::ReceiveMessage()+0x158>
   20c60:	ebffdf11 	bl	188ac <CNetSubSystem::GetNetDeviceLayer()>
   20c64:	ebffe7ef 	bl	1ac28 <CNetDeviceLayer::GetMACAddress() const>
   20c68:	e2506000 	subs	r6, r0, #0
   20c6c:	0a000027 	beq	20d10 <CDHCPClient::ReceiveMessage()+0x140>
   20c70:	e28d1028 	add	r1, sp, #40	; 0x28
   20c74:	e28d0004 	add	r0, sp, #4
   20c78:	eb002c0a 	bl	2bca8 <CMACAddress::CMACAddress(unsigned char const*)>
   20c7c:	e1a01006 	mov	r1, r6
   20c80:	e28d0004 	add	r0, sp, #4
   20c84:	eb002bf2 	bl	2bc54 <CMACAddress::operator!=(CMACAddress const&) const>
   20c88:	e2503000 	subs	r3, r0, #0
   20c8c:	13a05000 	movne	r5, #0
   20c90:	0a000002 	beq	20ca0 <CDHCPClient::ReceiveMessage()+0xd0>
   20c94:	e28d0004 	add	r0, sp, #4
   20c98:	eb002bd2 	bl	2bbe8 <CMACAddress::~CMACAddress()>
   20c9c:	eaffffd9 	b	20c08 <CDHCPClient::ReceiveMessage()+0x38>
   20ca0:	e2840f73 	add	r0, r4, #460	; 0x1cc
   20ca4:	e59d101c 	ldr	r1, [sp, #28]
   20ca8:	e58411b8 	str	r1, [r4, #440]	; 0x1b8
   20cac:	e24520f0 	sub	r2, r5, #240	; 0xf0
   20cb0:	e58431bc 	str	r3, [r4, #444]	; 0x1bc
   20cb4:	e28d10fc 	add	r1, sp, #252	; 0xfc
   20cb8:	e58431c0 	str	r3, [r4, #448]	; 0x1c0
   20cbc:	e58431c4 	str	r3, [r4, #452]	; 0x1c4
   20cc0:	e58431c8 	str	r3, [r4, #456]	; 0x1c8
   20cc4:	e1c030b0 	strh	r3, [r0]
   20cc8:	e1a00004 	mov	r0, r4
   20ccc:	e58431d0 	str	r3, [r4, #464]	; 0x1d0
   20cd0:	e58431d4 	str	r3, [r4, #468]	; 0x1d4
   20cd4:	e58431d8 	str	r3, [r4, #472]	; 0x1d8
   20cd8:	ebfffeee 	bl	20898 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20cdc:	e5d451cc 	ldrb	r5, [r4, #460]	; 0x1cc
   20ce0:	e3550002 	cmp	r5, #2
   20ce4:	0a00001f 	beq	20d68 <CDHCPClient::ReceiveMessage()+0x198>
   20ce8:	e3550003 	cmp	r5, #3
   20cec:	0a000013 	beq	20d40 <CDHCPClient::ReceiveMessage()+0x170>
   20cf0:	e3550001 	cmp	r5, #1
   20cf4:	13a05001 	movne	r5, #1
   20cf8:	1affffe5 	bne	20c94 <CDHCPClient::ReceiveMessage()+0xc4>
   20cfc:	e1a00004 	mov	r0, r4
   20d00:	e3a02080 	mov	r2, #128	; 0x80
   20d04:	e28d1078 	add	r1, sp, #120	; 0x78
   20d08:	ebfffee2 	bl	20898 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20d0c:	eaffffe0 	b	20c94 <CDHCPClient::ReceiveMessage()+0xc4>
   20d10:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20d14:	e3401003 	movt	r1, #3
   20d18:	e3050244 	movw	r0, #21060	; 0x5244
   20d1c:	e3400003 	movt	r0, #3
   20d20:	e300227d 	movw	r2, #637	; 0x27d
   20d24:	eb001092 	bl	24f74 <assertion_failed>
   20d28:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20d2c:	e3401003 	movt	r1, #3
   20d30:	e305002c 	movw	r0, #20524	; 0x502c
   20d34:	e3400003 	movt	r0, #3
   20d38:	e300227b 	movw	r2, #635	; 0x27b
   20d3c:	eb00108c 	bl	24f74 <assertion_failed>
   20d40:	e28d1078 	add	r1, sp, #120	; 0x78
   20d44:	e1a00004 	mov	r0, r4
   20d48:	e3a02080 	mov	r2, #128	; 0x80
   20d4c:	e3a05001 	mov	r5, #1
   20d50:	ebfffed0 	bl	20898 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20d54:	e1a00004 	mov	r0, r4
   20d58:	e3a02040 	mov	r2, #64	; 0x40
   20d5c:	e28d1038 	add	r1, sp, #56	; 0x38
   20d60:	ebfffecc 	bl	20898 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20d64:	eaffffca 	b	20c94 <CDHCPClient::ReceiveMessage()+0xc4>
   20d68:	e1a00004 	mov	r0, r4
   20d6c:	e3a02040 	mov	r2, #64	; 0x40
   20d70:	e28d1038 	add	r1, sp, #56	; 0x38
   20d74:	e3a05001 	mov	r5, #1
   20d78:	ebfffec6 	bl	20898 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20d7c:	eaffffc4 	b	20c94 <CDHCPClient::ReceiveMessage()+0xc4>

00020d80 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   20d80:	e92d4070 	push	{r4, r5, r6, lr}
   20d84:	e1a04000 	mov	r4, r0
   20d88:	e1a05001 	mov	r5, r1
   20d8c:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   20d90:	e3a01000 	mov	r1, #0
   20d94:	e1a06002 	mov	r6, r2
   20d98:	e28d0004 	add	r0, sp, #4
   20d9c:	e3a02f89 	mov	r2, #548	; 0x224
   20da0:	eb0029a0 	bl	2b428 <memset>
   20da4:	e5d421ac 	ldrb	r2, [r4, #428]	; 0x1ac
   20da8:	e59400d8 	ldr	r0, [r4, #216]	; 0xd8
   20dac:	e3003101 	movw	r3, #257	; 0x101
   20db0:	e3520000 	cmp	r2, #0
   20db4:	e59411b0 	ldr	r1, [r4, #432]	; 0x1b0
   20db8:	e59421b4 	ldr	r2, [r4, #436]	; 0x1b4
   20dbc:	e1cd30b4 	strh	r3, [sp, #4]
   20dc0:	13a03080 	movne	r3, #128	; 0x80
   20dc4:	03a03000 	moveq	r3, #0
   20dc8:	e58d1008 	str	r1, [sp, #8]
   20dcc:	e1cd30be 	strh	r3, [sp, #14]
   20dd0:	e3500000 	cmp	r0, #0
   20dd4:	e3083263 	movw	r3, #33379	; 0x8263
   20dd8:	e3463353 	movt	r3, #25427	; 0x6353
   20ddc:	e58d2010 	str	r2, [sp, #16]
   20de0:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   20de4:	e3a03006 	mov	r3, #6
   20de8:	e5cd3006 	strb	r3, [sp, #6]
   20dec:	0a000017 	beq	20e50 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xd0>
   20df0:	ebffdead 	bl	188ac <CNetSubSystem::GetNetDeviceLayer()>
   20df4:	ebffe78b 	bl	1ac28 <CNetDeviceLayer::GetMACAddress() const>
   20df8:	e3500000 	cmp	r0, #0
   20dfc:	0a000019 	beq	20e68 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xe8>
   20e00:	e28d1020 	add	r1, sp, #32
   20e04:	eb002bc1 	bl	2bd10 <CMACAddress::CopyTo(unsigned char*) const>
   20e08:	e3550000 	cmp	r5, #0
   20e0c:	0a00001b 	beq	20e80 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x100>
   20e10:	e3560f4d 	cmp	r6, #308	; 0x134
   20e14:	8a00001f 	bhi	20e98 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x118>
   20e18:	e1a02006 	mov	r2, r6
   20e1c:	e1a01005 	mov	r1, r5
   20e20:	e28d00f4 	add	r0, sp, #244	; 0xf4
   20e24:	eb002b27 	bl	2bac8 <memcpy>
   20e28:	e28d1004 	add	r1, sp, #4
   20e2c:	e28400f0 	add	r0, r4, #240	; 0xf0
   20e30:	e3a03000 	mov	r3, #0
   20e34:	e3a02f89 	mov	r2, #548	; 0x224
   20e38:	eb000aa2 	bl	238c8 <CSocket::Send(void const*, unsigned int, int)>
   20e3c:	e2400f89 	sub	r0, r0, #548	; 0x224
   20e40:	e16f0f10 	clz	r0, r0
   20e44:	e1a002a0 	lsr	r0, r0, #5
   20e48:	e28ddf8a 	add	sp, sp, #552	; 0x228
   20e4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   20e50:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20e54:	e3401003 	movt	r1, #3
   20e58:	e305002c 	movw	r0, #20524	; 0x502c
   20e5c:	e3400003 	movt	r0, #3
   20e60:	e3a02f96 	mov	r2, #600	; 0x258
   20e64:	eb001042 	bl	24f74 <assertion_failed>
   20e68:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20e6c:	e3401003 	movt	r1, #3
   20e70:	e30503a8 	movw	r0, #21416	; 0x53a8
   20e74:	e3400003 	movt	r0, #3
   20e78:	e300225a 	movw	r2, #602	; 0x25a
   20e7c:	eb00103c 	bl	24f74 <assertion_failed>
   20e80:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20e84:	e3401003 	movt	r1, #3
   20e88:	e3050d70 	movw	r0, #23920	; 0x5d70
   20e8c:	e3400003 	movt	r0, #3
   20e90:	e300225d 	movw	r2, #605	; 0x25d
   20e94:	eb001036 	bl	24f74 <assertion_failed>
   20e98:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20e9c:	e3401003 	movt	r1, #3
   20ea0:	e3050d80 	movw	r0, #23936	; 0x5d80
   20ea4:	e3400003 	movt	r0, #3
   20ea8:	e300225e 	movw	r2, #606	; 0x25e
   20eac:	eb001030 	bl	24f74 <assertion_failed>

00020eb0 <CDHCPClient::SendDiscover()>:
   20eb0:	e3a0c000 	mov	ip, #0
   20eb4:	e3a0200c 	mov	r2, #12
   20eb8:	e59f1004 	ldr	r1, [pc, #4]	; 20ec4 <CDHCPClient::SendDiscover()+0x14>
   20ebc:	e580c1b4 	str	ip, [r0, #436]	; 0x1b4
   20ec0:	eaffffae 	b	20d80 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   20ec4:	00035c78 	.word	0x00035c78

00020ec8 <CDHCPClient::SendRequest(unsigned int)>:
   20ec8:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20ecc:	e3510000 	cmp	r1, #0
   20ed0:	e1a05000 	mov	r5, r0
   20ed4:	e28db01c 	add	fp, sp, #28
   20ed8:	e58011b4 	str	r1, [r0, #436]	; 0x1b4
   20edc:	1a000037 	bne	20fc0 <CDHCPClient::SendRequest(unsigned int)+0xf8>
   20ee0:	e590019c 	ldr	r0, [r0, #412]	; 0x19c
   20ee4:	e3093068 	movw	r3, #36968	; 0x9068
   20ee8:	e3403003 	movt	r3, #3
   20eec:	e5952198 	ldr	r2, [r5, #408]	; 0x198
   20ef0:	e1a09003 	mov	r9, r3
   20ef4:	e3a04018 	mov	r4, #24
   20ef8:	e1a01420 	lsr	r1, r0, #8
   20efc:	e1a0e820 	lsr	lr, r0, #16
   20f00:	e5c31006 	strb	r1, [r3, #6]
   20f04:	e5c30005 	strb	r0, [r3, #5]
   20f08:	e1a01c20 	lsr	r1, r0, #24
   20f0c:	e1a0c422 	lsr	ip, r2, #8
   20f10:	e1a00822 	lsr	r0, r2, #16
   20f14:	e5c31008 	strb	r1, [r3, #8]
   20f18:	e1a01c22 	lsr	r1, r2, #24
   20f1c:	e5c3e007 	strb	lr, [r3, #7]
   20f20:	e5c3200b 	strb	r2, [r3, #11]
   20f24:	e5c3c00c 	strb	ip, [r3, #12]
   20f28:	e5c3000d 	strb	r0, [r3, #13]
   20f2c:	e5c3100e 	strb	r1, [r3, #14]
   20f30:	e28580e0 	add	r8, r5, #224	; 0xe0
   20f34:	e1a00008 	mov	r0, r8
   20f38:	eb0021f2 	bl	29708 <CString::GetLength() const>
   20f3c:	e2506000 	subs	r6, r0, #0
   20f40:	0a000021 	beq	20fcc <CDHCPClient::SendRequest(unsigned int)+0x104>
   20f44:	e35600ff 	cmp	r6, #255	; 0xff
   20f48:	8a000025 	bhi	20fe4 <CDHCPClient::SendRequest(unsigned int)+0x11c>
   20f4c:	e0847006 	add	r7, r4, r6
   20f50:	e1a01009 	mov	r1, r9
   20f54:	e2873009 	add	r3, r7, #9
   20f58:	e1a02004 	mov	r2, r4
   20f5c:	e3c33007 	bic	r3, r3, #7
   20f60:	e2444001 	sub	r4, r4, #1
   20f64:	e04dd003 	sub	sp, sp, r3
   20f68:	e2877002 	add	r7, r7, #2
   20f6c:	e1a0000d 	mov	r0, sp
   20f70:	eb002ad4 	bl	2bac8 <memcpy>
   20f74:	e08d3004 	add	r3, sp, r4
   20f78:	e1a00008 	mov	r0, r8
   20f7c:	e2838002 	add	r8, r3, #2
   20f80:	e3a0200c 	mov	r2, #12
   20f84:	e7cd2004 	strb	r2, [sp, r4]
   20f88:	e5c36001 	strb	r6, [r3, #1]
   20f8c:	eb0021ad 	bl	29648 <CString::operator char const*() const>
   20f90:	e1a02006 	mov	r2, r6
   20f94:	e1a01000 	mov	r1, r0
   20f98:	e1a00008 	mov	r0, r8
   20f9c:	eb002ac9 	bl	2bac8 <memcpy>
   20fa0:	e3e03000 	mvn	r3, #0
   20fa4:	e1a02007 	mov	r2, r7
   20fa8:	e1a00005 	mov	r0, r5
   20fac:	e1a0100d 	mov	r1, sp
   20fb0:	e7c83006 	strb	r3, [r8, r6]
   20fb4:	ebffff71 	bl	20d80 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   20fb8:	e24bd01c 	sub	sp, fp, #28
   20fbc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20fc0:	e59f9034 	ldr	r9, [pc, #52]	; 20ffc <CDHCPClient::SendRequest(unsigned int)+0x134>
   20fc4:	e3a0400c 	mov	r4, #12
   20fc8:	eaffffd8 	b	20f30 <CDHCPClient::SendRequest(unsigned int)+0x68>
   20fcc:	e1a02004 	mov	r2, r4
   20fd0:	e1a01009 	mov	r1, r9
   20fd4:	e1a00005 	mov	r0, r5
   20fd8:	ebffff68 	bl	20d80 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   20fdc:	e24bd01c 	sub	sp, fp, #28
   20fe0:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20fe4:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   20fe8:	e3401003 	movt	r1, #3
   20fec:	e3050da8 	movw	r0, #23976	; 0x5da8
   20ff0:	e3400003 	movt	r0, #3
   20ff4:	e3002231 	movw	r2, #561	; 0x231
   20ff8:	eb000fdd 	bl	24f74 <assertion_failed>
   20ffc:	00035c84 	.word	0x00035c84

00021000 <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   21000:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21004:	e305adf4 	movw	sl, #24052	; 0x5df4
   21008:	e340a003 	movt	sl, #3
   2100c:	e24dd014 	sub	sp, sp, #20
   21010:	e59f917c 	ldr	r9, [pc, #380]	; 21194 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x194>
   21014:	e1a04000 	mov	r4, r0
   21018:	e1a08001 	mov	r8, r1
   2101c:	e289b010 	add	fp, r9, #16
   21020:	e58d200c 	str	r2, [sp, #12]
   21024:	e3580000 	cmp	r8, #0
   21028:	0a000041 	beq	21134 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x134>
   2102c:	e59d100c 	ldr	r1, [sp, #12]
   21030:	e1a00004 	mov	r0, r4
   21034:	ebffffa3 	bl	20ec8 <CDHCPClient::SendRequest(unsigned int)>
   21038:	e2200001 	eor	r0, r0, #1
   2103c:	e6ef0070 	uxtb	r0, r0
   21040:	e3500000 	cmp	r0, #0
   21044:	1a000042 	bne	21154 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x154>
   21048:	eb0028ea 	bl	2b3f8 <CTimer::Get()>
   2104c:	eb00261e 	bl	2a8cc <CTimer::GetTicks() const>
   21050:	e4995004 	ldr	r5, [r9], #4
   21054:	e1a06000 	mov	r6, r0
   21058:	ea000004 	b	21070 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x70>
   2105c:	e2433005 	sub	r3, r3, #5
   21060:	e3530001 	cmp	r3, #1
   21064:	9a000016 	bls	210c4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc4>
   21068:	eb000f71 	bl	24e34 <CScheduler::Get()>
   2106c:	eb000ed7 	bl	24bd0 <CScheduler::Yield()>
   21070:	eb0028e0 	bl	2b3f8 <CTimer::Get()>
   21074:	eb002614 	bl	2a8cc <CTimer::GetTicks() const>
   21078:	e0403006 	sub	r3, r0, r6
   2107c:	e1530005 	cmp	r3, r5
   21080:	e1a00004 	mov	r0, r4
   21084:	2a000011 	bcs	210d0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xd0>
   21088:	ebfffed0 	bl	20bd0 <CDHCPClient::ReceiveMessage()>
   2108c:	e2507000 	subs	r7, r0, #0
   21090:	0afffff4 	beq	21068 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   21094:	e3580000 	cmp	r8, #0
   21098:	e5d431cd 	ldrb	r3, [r4, #461]	; 0x1cd
   2109c:	1affffee 	bne	2105c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x5c>
   210a0:	e3530002 	cmp	r3, #2
   210a4:	1affffef 	bne	21068 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   210a8:	e1a00004 	mov	r0, r4
   210ac:	ebfffd95 	bl	20708 <CDHCPClient::CheckConfig()>
   210b0:	e3500000 	cmp	r0, #0
   210b4:	0affffeb 	beq	21068 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   210b8:	e59431d0 	ldr	r3, [r4, #464]	; 0x1d0
   210bc:	e3530000 	cmp	r3, #0
   210c0:	0affffe8 	beq	21068 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   210c4:	e1a00007 	mov	r0, r7
   210c8:	e28dd014 	add	sp, sp, #20
   210cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   210d0:	eb00154c 	bl	26608 <CLogger::Get()>
   210d4:	e1a0300a 	mov	r3, sl
   210d8:	e3a02002 	mov	r2, #2
   210dc:	e59f10b4 	ldr	r1, [pc, #180]	; 21198 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   210e0:	eb001489 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   210e4:	e159000b 	cmp	r9, fp
   210e8:	1affffcd 	bne	21024 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x24>
   210ec:	e3a07000 	mov	r7, #0
   210f0:	eb001544 	bl	26608 <CLogger::Get()>
   210f4:	e1580007 	cmp	r8, r7
   210f8:	e3053ddc 	movw	r3, #24028	; 0x5ddc
   210fc:	e3403003 	movt	r3, #3
   21100:	e3052dd0 	movw	r2, #24016	; 0x5dd0
   21104:	e3402003 	movt	r2, #3
   21108:	01a08003 	moveq	r8, r3
   2110c:	11a08002 	movne	r8, r2
   21110:	e59f1080 	ldr	r1, [pc, #128]	; 21198 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   21114:	e3a02002 	mov	r2, #2
   21118:	e58d8000 	str	r8, [sp]
   2111c:	e3053e18 	movw	r3, #24088	; 0x5e18
   21120:	e3403003 	movt	r3, #3
   21124:	eb001478 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21128:	e1a00007 	mov	r0, r7
   2112c:	e28dd014 	add	sp, sp, #20
   21130:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21134:	e58481b4 	str	r8, [r4, #436]	; 0x1b4
   21138:	e3a0200c 	mov	r2, #12
   2113c:	e59f1058 	ldr	r1, [pc, #88]	; 2119c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   21140:	e1a00004 	mov	r0, r4
   21144:	ebffff0d 	bl	20d80 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   21148:	e2200001 	eor	r0, r0, #1
   2114c:	e6ef0070 	uxtb	r0, r0
   21150:	eaffffba 	b	21040 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x40>
   21154:	eb00152b 	bl	26608 <CLogger::Get()>
   21158:	e3580000 	cmp	r8, #0
   2115c:	e3053dc4 	movw	r3, #24004	; 0x5dc4
   21160:	e3403003 	movt	r3, #3
   21164:	e3052dbc 	movw	r2, #23996	; 0x5dbc
   21168:	e3402003 	movt	r2, #3
   2116c:	01a08003 	moveq	r8, r3
   21170:	11a08002 	movne	r8, r2
   21174:	e3053de4 	movw	r3, #24036	; 0x5de4
   21178:	e3403003 	movt	r3, #3
   2117c:	e58d8000 	str	r8, [sp]
   21180:	e3a02001 	mov	r2, #1
   21184:	e59f100c 	ldr	r1, [pc, #12]	; 21198 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   21188:	e3a07000 	mov	r7, #0
   2118c:	eb00145e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21190:	eaffffcb 	b	210c4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc4>
   21194:	00035c90 	.word	0x00035c90
   21198:	00035c70 	.word	0x00035c70
   2119c:	00035c78 	.word	0x00035c78

000211a0 <CDHCPClient::SelectAndRequest()>:
   211a0:	e92d4070 	push	{r4, r5, r6, lr}
   211a4:	e1a04000 	mov	r4, r0
   211a8:	e3a05001 	mov	r5, #1
   211ac:	e24dd028 	sub	sp, sp, #40	; 0x28
   211b0:	e28460f0 	add	r6, r4, #240	; 0xf0
   211b4:	e28d0008 	add	r0, sp, #8
   211b8:	e5c451ac 	strb	r5, [r4, #428]	; 0x1ac
   211bc:	ebfffa3c 	bl	1fab4 <CIPAddress::CIPAddress()>
   211c0:	e28d0008 	add	r0, sp, #8
   211c4:	ebfffae8 	bl	1fd6c <CIPAddress::SetBroadcast()>
   211c8:	e1a00006 	mov	r0, r6
   211cc:	e28d1008 	add	r1, sp, #8
   211d0:	e3a02043 	mov	r2, #67	; 0x43
   211d4:	eb0008bf 	bl	234d8 <CSocket::Connect(CIPAddress&, unsigned short)>
   211d8:	e3500000 	cmp	r0, #0
   211dc:	ba000066 	blt	2137c <CDHCPClient::SelectAndRequest()+0x1dc>
   211e0:	e1a00006 	mov	r0, r6
   211e4:	e1a01005 	mov	r1, r5
   211e8:	eb000a32 	bl	23ab8 <CSocket::SetOptionBroadcast(bool)>
   211ec:	e2506000 	subs	r6, r0, #0
   211f0:	1a000056 	bne	21350 <CDHCPClient::SelectAndRequest()+0x1b0>
   211f4:	e1a00004 	mov	r0, r4
   211f8:	ebfffe30 	bl	20ac0 <CDHCPClient::GetXID() const>
   211fc:	e1a02006 	mov	r2, r6
   21200:	e58401b0 	str	r0, [r4, #432]	; 0x1b0
   21204:	e1a01006 	mov	r1, r6
   21208:	e1a00004 	mov	r0, r4
   2120c:	ebffff7b 	bl	21000 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   21210:	e3500000 	cmp	r0, #0
   21214:	0a000061 	beq	213a0 <CDHCPClient::SelectAndRequest()+0x200>
   21218:	e59431b8 	ldr	r3, [r4, #440]	; 0x1b8
   2121c:	e5843198 	str	r3, [r4, #408]	; 0x198
   21220:	e3530000 	cmp	r3, #0
   21224:	0a000071 	beq	213f0 <CDHCPClient::SelectAndRequest()+0x250>
   21228:	e59431d0 	ldr	r3, [r4, #464]	; 0x1d0
   2122c:	e584319c 	str	r3, [r4, #412]	; 0x19c
   21230:	e3530000 	cmp	r3, #0
   21234:	0a00007b 	beq	21428 <CDHCPClient::SelectAndRequest()+0x288>
   21238:	e1a02006 	mov	r2, r6
   2123c:	e1a01005 	mov	r1, r5
   21240:	e1a00004 	mov	r0, r4
   21244:	ebffff6d 	bl	21000 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   21248:	e3500000 	cmp	r0, #0
   2124c:	0a000053 	beq	213a0 <CDHCPClient::SelectAndRequest()+0x200>
   21250:	e5d431cd 	ldrb	r3, [r4, #461]	; 0x1cd
   21254:	e3530006 	cmp	r3, #6
   21258:	0a00005c 	beq	213d0 <CDHCPClient::SelectAndRequest()+0x230>
   2125c:	e1a00004 	mov	r0, r4
   21260:	ebfffd28 	bl	20708 <CDHCPClient::CheckConfig()>
   21264:	e3500000 	cmp	r0, #0
   21268:	0a000056 	beq	213c8 <CDHCPClient::SelectAndRequest()+0x228>
   2126c:	e5942198 	ldr	r2, [r4, #408]	; 0x198
   21270:	e59431b8 	ldr	r3, [r4, #440]	; 0x1b8
   21274:	e1520003 	cmp	r2, r3
   21278:	1a000062 	bne	21408 <CDHCPClient::SelectAndRequest()+0x268>
   2127c:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   21280:	e59431d0 	ldr	r3, [r4, #464]	; 0x1d0
   21284:	e1520003 	cmp	r2, r3
   21288:	1a000046 	bne	213a8 <CDHCPClient::SelectAndRequest()+0x208>
   2128c:	e28d0010 	add	r0, sp, #16
   21290:	ebfffa07 	bl	1fab4 <CIPAddress::CIPAddress()>
   21294:	e5941198 	ldr	r1, [r4, #408]	; 0x198
   21298:	e28d0010 	add	r0, sp, #16
   2129c:	ebfffa8a 	bl	1fccc <CIPAddress::Set(unsigned int)>
   212a0:	e28d0018 	add	r0, sp, #24
   212a4:	eb0020d0 	bl	295ec <CString::CString()>
   212a8:	e28d1018 	add	r1, sp, #24
   212ac:	e28d0010 	add	r0, sp, #16
   212b0:	ebfffb01 	bl	1febc <CIPAddress::Format(CString*) const>
   212b4:	eb0014d3 	bl	26608 <CLogger::Get()>
   212b8:	e1a05000 	mov	r5, r0
   212bc:	e28d0018 	add	r0, sp, #24
   212c0:	eb0020e0 	bl	29648 <CString::operator char const*() const>
   212c4:	e3053ef4 	movw	r3, #24308	; 0x5ef4
   212c8:	e3403003 	movt	r3, #3
   212cc:	e58d0000 	str	r0, [sp]
   212d0:	e3a02003 	mov	r2, #3
   212d4:	e1a00005 	mov	r0, r5
   212d8:	e59f1178 	ldr	r1, [pc, #376]	; 21458 <CDHCPClient::SelectAndRequest()+0x2b8>
   212dc:	eb00140a 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   212e0:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   212e4:	e3500000 	cmp	r0, #0
   212e8:	0a000054 	beq	21440 <CDHCPClient::SelectAndRequest()+0x2a0>
   212ec:	e5941198 	ldr	r1, [r4, #408]	; 0x198
   212f0:	e3a05000 	mov	r5, #0
   212f4:	ebfff9d2 	bl	1fa44 <CNetConfig::SetIPAddress(unsigned int)>
   212f8:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   212fc:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21300:	ebfff9d6 	bl	1fa60 <CNetConfig::SetNetMask(unsigned int)>
   21304:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   21308:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   2130c:	ebfff984 	bl	1f924 <CNetConfig::SetDefaultGateway(unsigned int)>
   21310:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   21314:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21318:	ebfff983 	bl	1f92c <CNetConfig::SetDNSServer(unsigned int)>
   2131c:	e59421d4 	ldr	r2, [r4, #468]	; 0x1d4
   21320:	e59431c8 	ldr	r3, [r4, #456]	; 0x1c8
   21324:	e28d0018 	add	r0, sp, #24
   21328:	e58421a4 	str	r2, [r4, #420]	; 0x1a4
   2132c:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   21330:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   21334:	e3a03001 	mov	r3, #1
   21338:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   2133c:	e5c43190 	strb	r3, [r4, #400]	; 0x190
   21340:	eb002076 	bl	29520 <CString::~CString()>
   21344:	e28d0010 	add	r0, sp, #16
   21348:	ebfff9ef 	bl	1fb0c <CIPAddress::~CIPAddress()>
   2134c:	ea000005 	b	21368 <CDHCPClient::SelectAndRequest()+0x1c8>
   21350:	eb0014ac 	bl	26608 <CLogger::Get()>
   21354:	e3053e50 	movw	r3, #24144	; 0x5e50
   21358:	e3403003 	movt	r3, #3
   2135c:	e1a02005 	mov	r2, r5
   21360:	e59f10f0 	ldr	r1, [pc, #240]	; 21458 <CDHCPClient::SelectAndRequest()+0x2b8>
   21364:	eb0013e8 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21368:	e28d0008 	add	r0, sp, #8
   2136c:	ebfff9e6 	bl	1fb0c <CIPAddress::~CIPAddress()>
   21370:	e1a00005 	mov	r0, r5
   21374:	e28dd028 	add	sp, sp, #40	; 0x28
   21378:	e8bd8070 	pop	{r4, r5, r6, pc}
   2137c:	eb0014a1 	bl	26608 <CLogger::Get()>
   21380:	e3a02043 	mov	r2, #67	; 0x43
   21384:	e3053e2c 	movw	r3, #24108	; 0x5e2c
   21388:	e3403003 	movt	r3, #3
   2138c:	e58d2000 	str	r2, [sp]
   21390:	e1a02005 	mov	r2, r5
   21394:	e59f10bc 	ldr	r1, [pc, #188]	; 21458 <CDHCPClient::SelectAndRequest()+0x2b8>
   21398:	eb0013db 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2139c:	eafffff1 	b	21368 <CDHCPClient::SelectAndRequest()+0x1c8>
   213a0:	e3a05002 	mov	r5, #2
   213a4:	eaffffef 	b	21368 <CDHCPClient::SelectAndRequest()+0x1c8>
   213a8:	eb001496 	bl	26608 <CLogger::Get()>
   213ac:	e3053ed4 	movw	r3, #24276	; 0x5ed4
   213b0:	e3403003 	movt	r3, #3
   213b4:	e3a02002 	mov	r2, #2
   213b8:	e59f1098 	ldr	r1, [pc, #152]	; 21458 <CDHCPClient::SelectAndRequest()+0x2b8>
   213bc:	eb0013d2 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   213c0:	e3a05005 	mov	r5, #5
   213c4:	eaffffe7 	b	21368 <CDHCPClient::SelectAndRequest()+0x1c8>
   213c8:	e3a05004 	mov	r5, #4
   213cc:	eaffffe5 	b	21368 <CDHCPClient::SelectAndRequest()+0x1c8>
   213d0:	eb00148c 	bl	26608 <CLogger::Get()>
   213d4:	e3053ea0 	movw	r3, #24224	; 0x5ea0
   213d8:	e3403003 	movt	r3, #3
   213dc:	e3a02002 	mov	r2, #2
   213e0:	e59f1070 	ldr	r1, [pc, #112]	; 21458 <CDHCPClient::SelectAndRequest()+0x2b8>
   213e4:	eb0013c8 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   213e8:	e3a05003 	mov	r5, #3
   213ec:	eaffffdd 	b	21368 <CDHCPClient::SelectAndRequest()+0x1c8>
   213f0:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   213f4:	e3401003 	movt	r1, #3
   213f8:	e3050e6c 	movw	r0, #24172	; 0x5e6c
   213fc:	e3400003 	movt	r0, #3
   21400:	e3a020f9 	mov	r2, #249	; 0xf9
   21404:	eb000eda 	bl	24f74 <assertion_failed>
   21408:	eb00147e 	bl	26608 <CLogger::Get()>
   2140c:	e3053ebc 	movw	r3, #24252	; 0x5ebc
   21410:	e3403003 	movt	r3, #3
   21414:	e3a02002 	mov	r2, #2
   21418:	e59f1038 	ldr	r1, [pc, #56]	; 21458 <CDHCPClient::SelectAndRequest()+0x2b8>
   2141c:	eb0013ba 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21420:	e3a05005 	mov	r5, #5
   21424:	eaffffcf 	b	21368 <CDHCPClient::SelectAndRequest()+0x1c8>
   21428:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   2142c:	e3401003 	movt	r1, #3
   21430:	e3050e84 	movw	r0, #24196	; 0x5e84
   21434:	e3400003 	movt	r0, #3
   21438:	e3a020fc 	mov	r2, #252	; 0xfc
   2143c:	eb000ecc 	bl	24f74 <assertion_failed>
   21440:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   21444:	e3401003 	movt	r1, #3
   21448:	e3050058 	movw	r0, #20568	; 0x5058
   2144c:	e3400003 	movt	r0, #3
   21450:	e3002126 	movw	r2, #294	; 0x126
   21454:	eb000ec6 	bl	24f74 <assertion_failed>
   21458:	00035c70 	.word	0x00035c70

0002145c <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   2145c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21460:	e1a05000 	mov	r5, r0
   21464:	e1a06002 	mov	r6, r2
   21468:	e24dd010 	sub	sp, sp, #16
   2146c:	e1a04001 	mov	r4, r1
   21470:	eb0027e0 	bl	2b3f8 <CTimer::Get()>
   21474:	eb002516 	bl	2a8d4 <CTimer::GetUptime() const>
   21478:	e5953194 	ldr	r3, [r5, #404]	; 0x194
   2147c:	e0400003 	sub	r0, r0, r3
   21480:	e1500006 	cmp	r0, r6
   21484:	2a000051 	bcs	215d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x174>
   21488:	eb00145e 	bl	26608 <CLogger::Get()>
   2148c:	e3540000 	cmp	r4, #0
   21490:	1a00003d 	bne	2158c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x130>
   21494:	e3a02004 	mov	r2, #4
   21498:	e59f12f8 	ldr	r1, [pc, #760]	; 21798 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   2149c:	e28d8008 	add	r8, sp, #8
   214a0:	e3057f14 	movw	r7, #24340	; 0x5f14
   214a4:	e3407003 	movt	r7, #3
   214a8:	e58d7000 	str	r7, [sp]
   214ac:	e3053f94 	movw	r3, #24468	; 0x5f94
   214b0:	e3403003 	movt	r3, #3
   214b4:	eb001394 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   214b8:	e1a00008 	mov	r0, r8
   214bc:	ebfff97c 	bl	1fab4 <CIPAddress::CIPAddress()>
   214c0:	e3a03001 	mov	r3, #1
   214c4:	e1a00008 	mov	r0, r8
   214c8:	e5c531ac 	strb	r3, [r5, #428]	; 0x1ac
   214cc:	ebfffa26 	bl	1fd6c <CIPAddress::SetBroadcast()>
   214d0:	e28540f0 	add	r4, r5, #240	; 0xf0
   214d4:	e3a02043 	mov	r2, #67	; 0x43
   214d8:	e1a00004 	mov	r0, r4
   214dc:	e1a01008 	mov	r1, r8
   214e0:	eb0007fc 	bl	234d8 <CSocket::Connect(CIPAddress&, unsigned short)>
   214e4:	e3500000 	cmp	r0, #0
   214e8:	ba00003c 	blt	215e0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x184>
   214ec:	e1a00004 	mov	r0, r4
   214f0:	e5d511ac 	ldrb	r1, [r5, #428]	; 0x1ac
   214f4:	eb00096f 	bl	23ab8 <CSocket::SetOptionBroadcast(bool)>
   214f8:	e3500000 	cmp	r0, #0
   214fc:	0a000016 	beq	2155c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x100>
   21500:	ea000048 	b	21628 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1cc>
   21504:	e1a00005 	mov	r0, r5
   21508:	ebfffd6c 	bl	20ac0 <CDHCPClient::GetXID() const>
   2150c:	e5952198 	ldr	r2, [r5, #408]	; 0x198
   21510:	e58501b0 	str	r0, [r5, #432]	; 0x1b0
   21514:	e3a01001 	mov	r1, #1
   21518:	e1a00005 	mov	r0, r5
   2151c:	ebfffeb7 	bl	21000 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   21520:	e3500000 	cmp	r0, #0
   21524:	1a000047 	bne	21648 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1ec>
   21528:	eb0027b2 	bl	2b3f8 <CTimer::Get()>
   2152c:	eb0024e8 	bl	2a8d4 <CTimer::GetUptime() const>
   21530:	e5951194 	ldr	r1, [r5, #404]	; 0x194
   21534:	e0400001 	sub	r0, r0, r1
   21538:	e1560000 	cmp	r6, r0
   2153c:	9a00000c 	bls	21574 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x118>
   21540:	e0460000 	sub	r0, r6, r0
   21544:	e1a040a0 	lsr	r4, r0, #1
   21548:	eb000e39 	bl	24e34 <CScheduler::Get()>
   2154c:	e354003c 	cmp	r4, #60	; 0x3c
   21550:	21a01004 	movcs	r1, r4
   21554:	33a0103c 	movcc	r1, #60	; 0x3c
   21558:	eb000dfa 	bl	24d48 <CScheduler::Sleep(unsigned int)>
   2155c:	eb0027a5 	bl	2b3f8 <CTimer::Get()>
   21560:	eb0024db 	bl	2a8d4 <CTimer::GetUptime() const>
   21564:	e5953194 	ldr	r3, [r5, #404]	; 0x194
   21568:	e0400003 	sub	r0, r0, r3
   2156c:	e1560000 	cmp	r6, r0
   21570:	8affffe3 	bhi	21504 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0xa8>
   21574:	e3a04002 	mov	r4, #2
   21578:	e1a00008 	mov	r0, r8
   2157c:	ebfff962 	bl	1fb0c <CIPAddress::~CIPAddress()>
   21580:	e1a00004 	mov	r0, r4
   21584:	e28dd010 	add	sp, sp, #16
   21588:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2158c:	e3a02004 	mov	r2, #4
   21590:	e59f1200 	ldr	r1, [pc, #512]	; 21798 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   21594:	e28d8008 	add	r8, sp, #8
   21598:	e3057f08 	movw	r7, #24328	; 0x5f08
   2159c:	e3407003 	movt	r7, #3
   215a0:	e58d7000 	str	r7, [sp]
   215a4:	e3053f94 	movw	r3, #24468	; 0x5f94
   215a8:	e3403003 	movt	r3, #3
   215ac:	eb001356 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   215b0:	e1a00008 	mov	r0, r8
   215b4:	ebfff93e 	bl	1fab4 <CIPAddress::CIPAddress()>
   215b8:	e3a03000 	mov	r3, #0
   215bc:	e1a00008 	mov	r0, r8
   215c0:	e595119c 	ldr	r1, [r5, #412]	; 0x19c
   215c4:	e5c531ac 	strb	r3, [r5, #428]	; 0x1ac
   215c8:	ebfff9bf 	bl	1fccc <CIPAddress::Set(unsigned int)>
   215cc:	eaffffbf 	b	214d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x74>
   215d0:	e3a04002 	mov	r4, #2
   215d4:	e1a00004 	mov	r0, r4
   215d8:	e28dd010 	add	sp, sp, #16
   215dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   215e0:	eb001408 	bl	26608 <CLogger::Get()>
   215e4:	e5d511ac 	ldrb	r1, [r5, #428]	; 0x1ac
   215e8:	e3052f28 	movw	r2, #24360	; 0x5f28
   215ec:	e3402003 	movt	r2, #3
   215f0:	e3510000 	cmp	r1, #0
   215f4:	e3053f20 	movw	r3, #24352	; 0x5f20
   215f8:	e3403003 	movt	r3, #3
   215fc:	01a03002 	moveq	r3, r2
   21600:	e59f1190 	ldr	r1, [pc, #400]	; 21798 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   21604:	e3a02043 	mov	r2, #67	; 0x43
   21608:	e58d3000 	str	r3, [sp]
   2160c:	e3053f2c 	movw	r3, #24364	; 0x5f2c
   21610:	e3403003 	movt	r3, #3
   21614:	e58d2004 	str	r2, [sp, #4]
   21618:	e3a02001 	mov	r2, #1
   2161c:	e1a04002 	mov	r4, r2
   21620:	eb001339 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21624:	eaffffd3 	b	21578 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   21628:	eb0013f6 	bl	26608 <CLogger::Get()>
   2162c:	e3053e50 	movw	r3, #24144	; 0x5e50
   21630:	e3403003 	movt	r3, #3
   21634:	e3a02001 	mov	r2, #1
   21638:	e59f1158 	ldr	r1, [pc, #344]	; 21798 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   2163c:	eb001332 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21640:	e3a04001 	mov	r4, #1
   21644:	eaffffcb 	b	21578 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   21648:	e5d531cd 	ldrb	r3, [r5, #461]	; 0x1cd
   2164c:	e3530006 	cmp	r3, #6
   21650:	0a00002c 	beq	21708 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2ac>
   21654:	e1a00005 	mov	r0, r5
   21658:	ebfffc2a 	bl	20708 <CDHCPClient::CheckConfig()>
   2165c:	e3500000 	cmp	r0, #0
   21660:	0a000026 	beq	21700 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2a4>
   21664:	e59531d0 	ldr	r3, [r5, #464]	; 0x1d0
   21668:	e585319c 	str	r3, [r5, #412]	; 0x19c
   2166c:	e3530000 	cmp	r3, #0
   21670:	0a00002c 	beq	21728 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2cc>
   21674:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   21678:	e3500000 	cmp	r0, #0
   2167c:	0a000031 	beq	21748 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2ec>
   21680:	ebfff8af 	bl	1f944 <CNetConfig::GetIPAddress() const>
   21684:	e59511b8 	ldr	r1, [r5, #440]	; 0x1b8
   21688:	ebfff97d 	bl	1fc84 <CIPAddress::operator!=(unsigned int) const>
   2168c:	e3500000 	cmp	r0, #0
   21690:	0a00000b 	beq	216c4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   21694:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   21698:	ebfff8ad 	bl	1f954 <CNetConfig::GetNetMask() const>
   2169c:	e59531bc 	ldr	r3, [r5, #444]	; 0x1bc
   216a0:	e5902000 	ldr	r2, [r0]
   216a4:	e1520003 	cmp	r2, r3
   216a8:	0a000005 	beq	216c4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   216ac:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   216b0:	ebfff8a9 	bl	1f95c <CNetConfig::GetDefaultGateway() const>
   216b4:	e59511c0 	ldr	r1, [r5, #448]	; 0x1c0
   216b8:	ebfff971 	bl	1fc84 <CIPAddress::operator!=(unsigned int) const>
   216bc:	e3500000 	cmp	r0, #0
   216c0:	1a000026 	bne	21760 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x304>
   216c4:	e59531c8 	ldr	r3, [r5, #456]	; 0x1c8
   216c8:	e3a04000 	mov	r4, #0
   216cc:	e59521d4 	ldr	r2, [r5, #468]	; 0x1d4
   216d0:	e58531a0 	str	r3, [r5, #416]	; 0x1a0
   216d4:	e59531d8 	ldr	r3, [r5, #472]	; 0x1d8
   216d8:	e58521a4 	str	r2, [r5, #420]	; 0x1a4
   216dc:	e58531a8 	str	r3, [r5, #424]	; 0x1a8
   216e0:	eb0013c8 	bl	26608 <CLogger::Get()>
   216e4:	e58d7000 	str	r7, [sp]
   216e8:	e3063630 	movw	r3, #26160	; 0x6630
   216ec:	e3403003 	movt	r3, #3
   216f0:	e3a02004 	mov	r2, #4
   216f4:	e59f109c 	ldr	r1, [pc, #156]	; 21798 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   216f8:	eb001303 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   216fc:	eaffff9d 	b	21578 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   21700:	e3a04004 	mov	r4, #4
   21704:	eaffff9b 	b	21578 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   21708:	eb0013be 	bl	26608 <CLogger::Get()>
   2170c:	e3053ea0 	movw	r3, #24224	; 0x5ea0
   21710:	e3403003 	movt	r3, #3
   21714:	e3a02002 	mov	r2, #2
   21718:	e59f1078 	ldr	r1, [pc, #120]	; 21798 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   2171c:	eb0012fa 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21720:	e3a04003 	mov	r4, #3
   21724:	eaffff93 	b	21578 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   21728:	eb0013b6 	bl	26608 <CLogger::Get()>
   2172c:	e3053f50 	movw	r3, #24400	; 0x5f50
   21730:	e3403003 	movt	r3, #3
   21734:	e3a02002 	mov	r2, #2
   21738:	e59f1058 	ldr	r1, [pc, #88]	; 21798 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   2173c:	eb0012f2 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21740:	e3a04004 	mov	r4, #4
   21744:	eaffff8b 	b	21578 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   21748:	e3051ca0 	movw	r1, #23712	; 0x5ca0
   2174c:	e3401003 	movt	r1, #3
   21750:	e3050058 	movw	r0, #20568	; 0x5058
   21754:	e3400003 	movt	r0, #3
   21758:	e3002195 	movw	r2, #405	; 0x195
   2175c:	eb000e04 	bl	24f74 <assertion_failed>
   21760:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   21764:	ebfff87e 	bl	1f964 <CNetConfig::GetDNSServer() const>
   21768:	e59511c4 	ldr	r1, [r5, #452]	; 0x1c4
   2176c:	ebfff944 	bl	1fc84 <CIPAddress::operator!=(unsigned int) const>
   21770:	e3500000 	cmp	r0, #0
   21774:	0affffd2 	beq	216c4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x268>
   21778:	eb0013a2 	bl	26608 <CLogger::Get()>
   2177c:	e3053f70 	movw	r3, #24432	; 0x5f70
   21780:	e3403003 	movt	r3, #3
   21784:	e3a02002 	mov	r2, #2
   21788:	e59f1008 	ldr	r1, [pc, #8]	; 21798 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   2178c:	eb0012de 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21790:	e3a04005 	mov	r4, #5
   21794:	eaffff77 	b	21578 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x11c>
   21798:	00035c70 	.word	0x00035c70

0002179c <CDHCPClient::Run()>:
   2179c:	e92d4030 	push	{r4, r5, lr}
   217a0:	e28040f0 	add	r4, r0, #240	; 0xf0
   217a4:	e1a05000 	mov	r5, r0
   217a8:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   217ac:	e3a01044 	mov	r1, #68	; 0x44
   217b0:	e1a00004 	mov	r0, r4
   217b4:	eb0007f3 	bl	23788 <CSocket::Bind(unsigned short)>
   217b8:	e3500000 	cmp	r0, #0
   217bc:	ba00004e 	blt	218fc <CDHCPClient::Run()+0x160>
   217c0:	e1a00005 	mov	r0, r5
   217c4:	ebfffe75 	bl	211a0 <CDHCPClient::SelectAndRequest()>
   217c8:	e3500001 	cmp	r0, #1
   217cc:	0a000009 	beq	217f8 <CDHCPClient::Run()+0x5c>
   217d0:	3a00000a 	bcc	21800 <CDHCPClient::Run()+0x64>
   217d4:	e3500005 	cmp	r0, #5
   217d8:	8a000008 	bhi	21800 <CDHCPClient::Run()+0x64>
   217dc:	eb000d94 	bl	24e34 <CScheduler::Get()>
   217e0:	e3a0103c 	mov	r1, #60	; 0x3c
   217e4:	eb000d57 	bl	24d48 <CScheduler::Sleep(unsigned int)>
   217e8:	e1a00005 	mov	r0, r5
   217ec:	ebfffe6b 	bl	211a0 <CDHCPClient::SelectAndRequest()>
   217f0:	e3500001 	cmp	r0, #1
   217f4:	1afffff5 	bne	217d0 <CDHCPClient::Run()+0x34>
   217f8:	e28ddf8d 	add	sp, sp, #564	; 0x234
   217fc:	e8bd8030 	pop	{r4, r5, pc}
   21800:	eb0026fc 	bl	2b3f8 <CTimer::Get()>
   21804:	eb002432 	bl	2a8d4 <CTimer::GetUptime() const>
   21808:	e5850194 	str	r0, [r5, #404]	; 0x194
   2180c:	eb0026f9 	bl	2b3f8 <CTimer::Get()>
   21810:	eb00242f 	bl	2a8d4 <CTimer::GetUptime() const>
   21814:	e5953194 	ldr	r3, [r5, #404]	; 0x194
   21818:	e59521a4 	ldr	r2, [r5, #420]	; 0x1a4
   2181c:	e0400003 	sub	r0, r0, r3
   21820:	e1500002 	cmp	r0, r2
   21824:	3a000002 	bcc	21834 <CDHCPClient::Run()+0x98>
   21828:	ea00000c 	b	21860 <CDHCPClient::Run()+0xc4>
   2182c:	eb000d80 	bl	24e34 <CScheduler::Get()>
   21830:	eb000ce6 	bl	24bd0 <CScheduler::Yield()>
   21834:	e3a03040 	mov	r3, #64	; 0x40
   21838:	e3a02f89 	mov	r2, #548	; 0x224
   2183c:	e28d100c 	add	r1, sp, #12
   21840:	e1a00004 	mov	r0, r4
   21844:	eb00083e 	bl	23944 <CSocket::Receive(void*, unsigned int, int)>
   21848:	e3500000 	cmp	r0, #0
   2184c:	cafffff6 	bgt	2182c <CDHCPClient::Run()+0x90>
   21850:	eb000d77 	bl	24e34 <CScheduler::Get()>
   21854:	e3a0100a 	mov	r1, #10
   21858:	eb000d3a 	bl	24d48 <CScheduler::Sleep(unsigned int)>
   2185c:	eaffffea 	b	2180c <CDHCPClient::Run()+0x70>
   21860:	e59521a8 	ldr	r2, [r5, #424]	; 0x1a8
   21864:	e3a01001 	mov	r1, #1
   21868:	e1a00005 	mov	r0, r5
   2186c:	ebfffefa 	bl	2145c <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   21870:	e3500005 	cmp	r0, #5
   21874:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   21878:	ea000012 	b	218c8 <CDHCPClient::Run()+0x12c>
   2187c:	00021800 	.word	0x00021800
   21880:	000217f8 	.word	0x000217f8
   21884:	000218c8 	.word	0x000218c8
   21888:	000218ac 	.word	0x000218ac
   2188c:	000218ac 	.word	0x000218ac
   21890:	000218ac 	.word	0x000218ac
   21894:	eb00135b 	bl	26608 <CLogger::Get()>
   21898:	e3053fb8 	movw	r3, #24504	; 0x5fb8
   2189c:	e3403003 	movt	r3, #3
   218a0:	e3a02001 	mov	r2, #1
   218a4:	e59f107c 	ldr	r1, [pc, #124]	; 21928 <CDHCPClient::Run()+0x18c>
   218a8:	eb001297 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   218ac:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   218b0:	e3a03000 	mov	r3, #0
   218b4:	e5c53190 	strb	r3, [r5, #400]	; 0x190
   218b8:	e1500003 	cmp	r0, r3
   218bc:	0a000018 	beq	21924 <CDHCPClient::Run()+0x188>
   218c0:	ebfff83b 	bl	1f9b4 <CNetConfig::Reset()>
   218c4:	eaffffbd 	b	217c0 <CDHCPClient::Run()+0x24>
   218c8:	e59521a0 	ldr	r2, [r5, #416]	; 0x1a0
   218cc:	e3a01000 	mov	r1, #0
   218d0:	e1a00005 	mov	r0, r5
   218d4:	ebfffee0 	bl	2145c <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   218d8:	e3500005 	cmp	r0, #5
   218dc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   218e0:	eaffffeb 	b	21894 <CDHCPClient::Run()+0xf8>
   218e4:	00021800 	.word	0x00021800
   218e8:	000217f8 	.word	0x000217f8
   218ec:	00021894 	.word	0x00021894
   218f0:	000218ac 	.word	0x000218ac
   218f4:	000218ac 	.word	0x000218ac
   218f8:	000218ac 	.word	0x000218ac
   218fc:	eb001341 	bl	26608 <CLogger::Get()>
   21900:	e3a02044 	mov	r2, #68	; 0x44
   21904:	e59f101c 	ldr	r1, [pc, #28]	; 21928 <CDHCPClient::Run()+0x18c>
   21908:	e3053fa0 	movw	r3, #24480	; 0x5fa0
   2190c:	e3403003 	movt	r3, #3
   21910:	e58d2000 	str	r2, [sp]
   21914:	e3a02001 	mov	r2, #1
   21918:	eb00127b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2191c:	e28ddf8d 	add	sp, sp, #564	; 0x234
   21920:	e8bd8030 	pop	{r4, r5, pc}
   21924:	ebfffb2d 	bl	205e0 <CDHCPClient::HaltNetwork() [clone .part.0]>
   21928:	00035c70 	.word	0x00035c70

0002192c <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.1]>:
   2192c:	e1530001 	cmp	r3, r1
   21930:	8a000013 	bhi	21984 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.1]+0x58>
   21934:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21938:	e1a05001 	mov	r5, r1
   2193c:	e1a06003 	mov	r6, r3
   21940:	e1a04000 	mov	r4, r0
   21944:	e1a07002 	mov	r7, r2
   21948:	ea000002 	b	21958 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.1]+0x2c>
   2194c:	e2844001 	add	r4, r4, #1
   21950:	e1560005 	cmp	r6, r5
   21954:	8a000008 	bhi	2197c <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.1]+0x50>
   21958:	e1a02006 	mov	r2, r6
   2195c:	e1a01007 	mov	r1, r7
   21960:	e1a00004 	mov	r0, r4
   21964:	e2455001 	sub	r5, r5, #1
   21968:	eb0026e7 	bl	2b50c <memcmp>
   2196c:	e3500000 	cmp	r0, #0
   21970:	1afffff5 	bne	2194c <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.1]+0x20>
   21974:	e1a00004 	mov	r0, r4
   21978:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2197c:	e3a00000 	mov	r0, #0
   21980:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21984:	e3a00000 	mov	r0, #0
   21988:	e12fff1e 	bx	lr

0002198c <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)>:
   2198c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21990:	e1a04000 	mov	r4, r0
   21994:	e1a09001 	mov	r9, r1
   21998:	e3a01902 	mov	r1, #32768	; 0x8000
   2199c:	e1a05003 	mov	r5, r3
   219a0:	e1a08002 	mov	r8, r2
   219a4:	e1dd72b0 	ldrh	r7, [sp, #32]
   219a8:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   219ac:	eb000b75 	bl	24788 <CTask::CTask(unsigned int)>
   219b0:	e59f304c 	ldr	r3, [pc, #76]	; 21a04 <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)+0x78>
   219b4:	e3091410 	movw	r1, #37904	; 0x9410
   219b8:	e3401003 	movt	r1, #3
   219bc:	e5843000 	str	r3, [r4]
   219c0:	e3550000 	cmp	r5, #0
   219c4:	e3a03000 	mov	r3, #0
   219c8:	e58490d8 	str	r9, [r4, #216]	; 0xd8
   219cc:	e5910000 	ldr	r0, [r1]
   219d0:	e58480dc 	str	r8, [r4, #220]	; 0xdc
   219d4:	e2802001 	add	r2, r0, #1
   219d8:	e58450e0 	str	r5, [r4, #224]	; 0xe0
   219dc:	e1c47eb4 	strh	r7, [r4, #228]	; 0xe4
   219e0:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   219e4:	e58430ec 	str	r3, [r4, #236]	; 0xec
   219e8:	e5812000 	str	r2, [r1]
   219ec:	0a000002 	beq	219fc <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)+0x70>
   219f0:	e1a00005 	mov	r0, r5
   219f4:	eb002943 	bl	2bf08 <operator new[](unsigned int)>
   219f8:	e58400ec 	str	r0, [r4, #236]	; 0xec
   219fc:	e1a00004 	mov	r0, r4
   21a00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21a04:	00035fd0 	.word	0x00035fd0

00021a08 <CHTTPDaemon::~CHTTPDaemon()>:
   21a08:	e92d4070 	push	{r4, r5, r6, lr}
   21a0c:	e59f3060 	ldr	r3, [pc, #96]	; 21a74 <CHTTPDaemon::~CHTTPDaemon()+0x6c>
   21a10:	e59050dc 	ldr	r5, [r0, #220]	; 0xdc
   21a14:	e5803000 	str	r3, [r0]
   21a18:	e3550000 	cmp	r5, #0
   21a1c:	1a00000e 	bne	21a5c <CHTTPDaemon::~CHTTPDaemon()+0x54>
   21a20:	e1a04000 	mov	r4, r0
   21a24:	e3a01001 	mov	r1, #1
   21a28:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   21a2c:	eb00293d 	bl	2bf28 <operator delete(void*, unsigned int)>
   21a30:	e3093410 	movw	r3, #37904	; 0x9410
   21a34:	e3403003 	movt	r3, #3
   21a38:	e58450ec 	str	r5, [r4, #236]	; 0xec
   21a3c:	e1a00004 	mov	r0, r4
   21a40:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   21a44:	e5932000 	ldr	r2, [r3]
   21a48:	e2422001 	sub	r2, r2, #1
   21a4c:	e5832000 	str	r2, [r3]
   21a50:	eb000afc 	bl	24648 <CTask::~CTask()>
   21a54:	e1a00004 	mov	r0, r4
   21a58:	e8bd8070 	pop	{r4, r5, r6, pc}
   21a5c:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   21a60:	e3401003 	movt	r1, #3
   21a64:	e3060008 	movw	r0, #24584	; 0x6008
   21a68:	e3400003 	movt	r0, #3
   21a6c:	e3a02040 	mov	r2, #64	; 0x40
   21a70:	eb000d3f 	bl	24f74 <assertion_failed>
   21a74:	00035fd0 	.word	0x00035fd0

00021a78 <CHTTPDaemon::~CHTTPDaemon()>:
   21a78:	e92d4010 	push	{r4, lr}
   21a7c:	e1a04000 	mov	r4, r0
   21a80:	ebffffe0 	bl	21a08 <CHTTPDaemon::~CHTTPDaemon()>
   21a84:	e1a00004 	mov	r0, r4
   21a88:	e301196c 	movw	r1, #6508	; 0x196c
   21a8c:	eb002925 	bl	2bf28 <operator delete(void*, unsigned int)>
   21a90:	e1a00004 	mov	r0, r4
   21a94:	e8bd8010 	pop	{r4, pc}

00021a98 <CHTTPDaemon::ParseMethod(char*)>:
   21a98:	e92d4030 	push	{r4, r5, lr}
   21a9c:	e1a04000 	mov	r4, r0
   21aa0:	e2510000 	subs	r0, r1, #0
   21aa4:	e24dd00c 	sub	sp, sp, #12
   21aa8:	0a00003c 	beq	21ba0 <CHTTPDaemon::ParseMethod(char*)+0x108>
   21aac:	e28d2004 	add	r2, sp, #4
   21ab0:	e30514e4 	movw	r1, #21732	; 0x54e4
   21ab4:	e3401003 	movt	r1, #3
   21ab8:	eb00276c 	bl	2b870 <strtok_r>
   21abc:	e2505000 	subs	r5, r0, #0
   21ac0:	0a000018 	beq	21b28 <CHTTPDaemon::ParseMethod(char*)+0x90>
   21ac4:	e3061024 	movw	r1, #24612	; 0x6024
   21ac8:	e3401003 	movt	r1, #3
   21acc:	eb0026af 	bl	2b590 <strcmp>
   21ad0:	e3500000 	cmp	r0, #0
   21ad4:	05c400f0 	strbeq	r0, [r4, #240]	; 0xf0
   21ad8:	1a000027 	bne	21b7c <CHTTPDaemon::ParseMethod(char*)+0xe4>
   21adc:	e30514e4 	movw	r1, #21732	; 0x54e4
   21ae0:	e3401003 	movt	r1, #3
   21ae4:	e28d2004 	add	r2, sp, #4
   21ae8:	e3a00000 	mov	r0, #0
   21aec:	eb00275f 	bl	2b870 <strtok_r>
   21af0:	e2505000 	subs	r5, r0, #0
   21af4:	0a00001d 	beq	21b70 <CHTTPDaemon::ParseMethod(char*)+0xd8>
   21af8:	eb00269a 	bl	2b568 <strlen>
   21afc:	e3500b02 	cmp	r0, #2048	; 0x800
   21b00:	8300019e 	movwhi	r0, #414	; 0x19e
   21b04:	9a00000a 	bls	21b34 <CHTTPDaemon::ParseMethod(char*)+0x9c>
   21b08:	e28dd00c 	add	sp, sp, #12
   21b0c:	e8bd8030 	pop	{r4, r5, pc}
   21b10:	e1a00005 	mov	r0, r5
   21b14:	e3061030 	movw	r1, #24624	; 0x6030
   21b18:	e3401003 	movt	r1, #3
   21b1c:	eb00269b 	bl	2b590 <strcmp>
   21b20:	e3500000 	cmp	r0, #0
   21b24:	0a000023 	beq	21bb8 <CHTTPDaemon::ParseMethod(char*)+0x120>
   21b28:	e30001f5 	movw	r0, #501	; 0x1f5
   21b2c:	e28dd00c 	add	sp, sp, #12
   21b30:	e8bd8030 	pop	{r4, r5, pc}
   21b34:	e1a01005 	mov	r1, r5
   21b38:	e28400f1 	add	r0, r4, #241	; 0xf1
   21b3c:	eb0026f3 	bl	2b710 <strcpy>
   21b40:	e28d2004 	add	r2, sp, #4
   21b44:	e30419d8 	movw	r1, #18904	; 0x49d8
   21b48:	e3401003 	movt	r1, #3
   21b4c:	e3a00000 	mov	r0, #0
   21b50:	eb002746 	bl	2b870 <strtok_r>
   21b54:	e3500000 	cmp	r0, #0
   21b58:	0a000004 	beq	21b70 <CHTTPDaemon::ParseMethod(char*)+0xd8>
   21b5c:	e3061038 	movw	r1, #24632	; 0x6038
   21b60:	e3401003 	movt	r1, #3
   21b64:	eb002689 	bl	2b590 <strcmp>
   21b68:	e3500000 	cmp	r0, #0
   21b6c:	0a000014 	beq	21bc4 <CHTTPDaemon::ParseMethod(char*)+0x12c>
   21b70:	e3a00e19 	mov	r0, #400	; 0x190
   21b74:	e28dd00c 	add	sp, sp, #12
   21b78:	e8bd8030 	pop	{r4, r5, pc}
   21b7c:	e3061028 	movw	r1, #24616	; 0x6028
   21b80:	e3401003 	movt	r1, #3
   21b84:	e1a00005 	mov	r0, r5
   21b88:	eb002680 	bl	2b590 <strcmp>
   21b8c:	e3500000 	cmp	r0, #0
   21b90:	1affffde 	bne	21b10 <CHTTPDaemon::ParseMethod(char*)+0x78>
   21b94:	e3a03001 	mov	r3, #1
   21b98:	e5c430f0 	strb	r3, [r4, #240]	; 0xf0
   21b9c:	eaffffce 	b	21adc <CHTTPDaemon::ParseMethod(char*)+0x44>
   21ba0:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   21ba4:	e3401003 	movt	r1, #3
   21ba8:	e3060018 	movw	r0, #24600	; 0x6018
   21bac:	e3400003 	movt	r0, #3
   21bb0:	e30021cb 	movw	r2, #459	; 0x1cb
   21bb4:	eb000cee 	bl	24f74 <assertion_failed>
   21bb8:	e3a03002 	mov	r3, #2
   21bbc:	e5c430f0 	strb	r3, [r4, #240]	; 0xf0
   21bc0:	eaffffc5 	b	21adc <CHTTPDaemon::ParseMethod(char*)+0x44>
   21bc4:	e28d2004 	add	r2, sp, #4
   21bc8:	e3061040 	movw	r1, #24640	; 0x6040
   21bcc:	e3401003 	movt	r1, #3
   21bd0:	eb002726 	bl	2b870 <strtok_r>
   21bd4:	e3500000 	cmp	r0, #0
   21bd8:	0affffe4 	beq	21b70 <CHTTPDaemon::ParseMethod(char*)+0xd8>
   21bdc:	e3061044 	movw	r1, #24644	; 0x6044
   21be0:	e3401003 	movt	r1, #3
   21be4:	eb002669 	bl	2b590 <strcmp>
   21be8:	e3500000 	cmp	r0, #0
   21bec:	e30001f9 	movw	r0, #505	; 0x1f9
   21bf0:	03a000c8 	moveq	r0, #200	; 0xc8
   21bf4:	eaffffc3 	b	21b08 <CHTTPDaemon::ParseMethod(char*)+0x70>

00021bf8 <CHTTPDaemon::ParseHeaderField(char*)>:
   21bf8:	e92d4030 	push	{r4, r5, lr}
   21bfc:	e1a05000 	mov	r5, r0
   21c00:	e2510000 	subs	r0, r1, #0
   21c04:	e24dd00c 	sub	sp, sp, #12
   21c08:	0a00003f 	beq	21d0c <CHTTPDaemon::ParseHeaderField(char*)+0x114>
   21c0c:	e28d2004 	add	r2, sp, #4
   21c10:	e3061048 	movw	r1, #24648	; 0x6048
   21c14:	e3401003 	movt	r1, #3
   21c18:	eb002714 	bl	2b870 <strtok_r>
   21c1c:	e2504000 	subs	r4, r0, #0
   21c20:	0a000014 	beq	21c78 <CHTTPDaemon::ParseHeaderField(char*)+0x80>
   21c24:	e306104c 	movw	r1, #24652	; 0x604c
   21c28:	e3401003 	movt	r1, #3
   21c2c:	eb002657 	bl	2b590 <strcmp>
   21c30:	e3500000 	cmp	r0, #0
   21c34:	1a000012 	bne	21c84 <CHTTPDaemon::ParseHeaderField(char*)+0x8c>
   21c38:	e306105c 	movw	r1, #24668	; 0x605c
   21c3c:	e3401003 	movt	r1, #3
   21c40:	e28d2004 	add	r2, sp, #4
   21c44:	eb002709 	bl	2b870 <strtok_r>
   21c48:	e2504000 	subs	r4, r0, #0
   21c4c:	0a000009 	beq	21c78 <CHTTPDaemon::ParseHeaderField(char*)+0x80>
   21c50:	e3061060 	movw	r1, #24672	; 0x6060
   21c54:	e3401003 	movt	r1, #3
   21c58:	eb00264c 	bl	2b590 <strcmp>
   21c5c:	e3500000 	cmp	r0, #0
   21c60:	1a00002f 	bne	21d24 <CHTTPDaemon::ParseHeaderField(char*)+0x12c>
   21c64:	e2855a01 	add	r5, r5, #4096	; 0x1000
   21c68:	e3a03001 	mov	r3, #1
   21c6c:	e3a000c8 	mov	r0, #200	; 0xc8
   21c70:	e5c530f3 	strb	r3, [r5, #243]	; 0xf3
   21c74:	ea000000 	b	21c7c <CHTTPDaemon::ParseHeaderField(char*)+0x84>
   21c78:	e3a00e19 	mov	r0, #400	; 0x190
   21c7c:	e28dd00c 	add	sp, sp, #12
   21c80:	e8bd8030 	pop	{r4, r5, pc}
   21c84:	e1a00004 	mov	r0, r4
   21c88:	e30610ac 	movw	r1, #24748	; 0x60ac
   21c8c:	e3401003 	movt	r1, #3
   21c90:	eb00263e 	bl	2b590 <strcmp>
   21c94:	e2504000 	subs	r4, r0, #0
   21c98:	0a000002 	beq	21ca8 <CHTTPDaemon::ParseHeaderField(char*)+0xb0>
   21c9c:	e3a000c8 	mov	r0, #200	; 0xc8
   21ca0:	e28dd00c 	add	sp, sp, #12
   21ca4:	e8bd8030 	pop	{r4, r5, pc}
   21ca8:	e28d2004 	add	r2, sp, #4
   21cac:	e30514e4 	movw	r1, #21732	; 0x54e4
   21cb0:	e3401003 	movt	r1, #3
   21cb4:	eb0026ed 	bl	2b870 <strtok_r>
   21cb8:	e3500000 	cmp	r0, #0
   21cbc:	0affffed 	beq	21c78 <CHTTPDaemon::ParseHeaderField(char*)+0x80>
   21cc0:	e3a01cca 	mov	r1, #51712	; 0xca00
   21cc4:	e3431b9a 	movt	r1, #15258	; 0x3b9a
   21cc8:	e2400001 	sub	r0, r0, #1
   21ccc:	e1a02004 	mov	r2, r4
   21cd0:	e3a0c00a 	mov	ip, #10
   21cd4:	ea000005 	b	21cf0 <CHTTPDaemon::ParseHeaderField(char*)+0xf8>
   21cd8:	e2433030 	sub	r3, r3, #48	; 0x30
   21cdc:	e3530009 	cmp	r3, #9
   21ce0:	8affffe4 	bhi	21c78 <CHTTPDaemon::ParseHeaderField(char*)+0x80>
   21ce4:	e022329c 	mla	r2, ip, r2, r3
   21ce8:	e1520001 	cmp	r2, r1
   21cec:	8a00002e 	bhi	21dac <CHTTPDaemon::ParseHeaderField(char*)+0x1b4>
   21cf0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   21cf4:	e3530000 	cmp	r3, #0
   21cf8:	1afffff6 	bne	21cd8 <CHTTPDaemon::ParseHeaderField(char*)+0xe0>
   21cfc:	e2855a01 	add	r5, r5, #4096	; 0x1000
   21d00:	e3a000c8 	mov	r0, #200	; 0xc8
   21d04:	e58520f4 	str	r2, [r5, #244]	; 0xf4
   21d08:	eaffffdb 	b	21c7c <CHTTPDaemon::ParseHeaderField(char*)+0x84>
   21d0c:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   21d10:	e3401003 	movt	r1, #3
   21d14:	e3060018 	movw	r0, #24600	; 0x6018
   21d18:	e3400003 	movt	r0, #3
   21d1c:	e3002206 	movw	r2, #518	; 0x206
   21d20:	eb000c93 	bl	24f74 <assertion_failed>
   21d24:	e1a00004 	mov	r0, r4
   21d28:	e3061084 	movw	r1, #24708	; 0x6084
   21d2c:	e3401003 	movt	r1, #3
   21d30:	eb002616 	bl	2b590 <strcmp>
   21d34:	e3500000 	cmp	r0, #0
   21d38:	1affffd7 	bne	21c9c <CHTTPDaemon::ParseHeaderField(char*)+0xa4>
   21d3c:	e3061098 	movw	r1, #24728	; 0x6098
   21d40:	e3401003 	movt	r1, #3
   21d44:	e28d2004 	add	r2, sp, #4
   21d48:	eb0026c8 	bl	2b870 <strtok_r>
   21d4c:	e3500000 	cmp	r0, #0
   21d50:	0affffc8 	beq	21c78 <CHTTPDaemon::ParseHeaderField(char*)+0x80>
   21d54:	e306109c 	movw	r1, #24732	; 0x609c
   21d58:	e3401003 	movt	r1, #3
   21d5c:	eb00260b 	bl	2b590 <strcmp>
   21d60:	e3500000 	cmp	r0, #0
   21d64:	1affffc3 	bne	21c78 <CHTTPDaemon::ParseHeaderField(char*)+0x80>
   21d68:	e28d2004 	add	r2, sp, #4
   21d6c:	e30610a8 	movw	r1, #24744	; 0x60a8
   21d70:	e3401003 	movt	r1, #3
   21d74:	eb0026bd 	bl	2b870 <strtok_r>
   21d78:	e2504000 	subs	r4, r0, #0
   21d7c:	0affffbd 	beq	21c78 <CHTTPDaemon::ParseHeaderField(char*)+0x80>
   21d80:	eb0025f8 	bl	2b568 <strlen>
   21d84:	e3500064 	cmp	r0, #100	; 0x64
   21d88:	8affffba 	bhi	21c78 <CHTTPDaemon::ParseHeaderField(char*)+0x80>
   21d8c:	e2853a01 	add	r3, r5, #4096	; 0x1000
   21d90:	e2850d63 	add	r0, r5, #6336	; 0x18c0
   21d94:	e3a02001 	mov	r2, #1
   21d98:	e1a01004 	mov	r1, r4
   21d9c:	e280003a 	add	r0, r0, #58	; 0x3a
   21da0:	e5c328f9 	strb	r2, [r3, #2297]	; 0x8f9
   21da4:	eb002659 	bl	2b710 <strcpy>
   21da8:	eaffffbb 	b	21c9c <CHTTPDaemon::ParseHeaderField(char*)+0xa4>
   21dac:	e300019d 	movw	r0, #413	; 0x19d
   21db0:	eaffffb1 	b	21c7c <CHTTPDaemon::ParseHeaderField(char*)+0x84>

00021db4 <CHTTPDaemon::ParseRequest()>:
   21db4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21db8:	e2808a01 	add	r8, r0, #4096	; 0x1000
   21dbc:	e3a06000 	mov	r6, #0
   21dc0:	e3a03003 	mov	r3, #3
   21dc4:	e5c060f1 	strb	r6, [r0, #241]	; 0xf1
   21dc8:	e5c030f0 	strb	r3, [r0, #240]	; 0xf0
   21dcc:	e1a09000 	mov	r9, r0
   21dd0:	e5c068f2 	strb	r6, [r0, #2290]	; 0x8f2
   21dd4:	e24ddee5 	sub	sp, sp, #3664	; 0xe50
   21dd8:	e5c069f3 	strb	r6, [r0, #2547]	; 0x9f3
   21ddc:	e24dd004 	sub	sp, sp, #4
   21de0:	e5c860f3 	strb	r6, [r8, #243]	; 0xf3
   21de4:	e58860f4 	str	r6, [r8, #244]	; 0xf4
   21de8:	e5c860f8 	strb	r6, [r8, #248]	; 0xf8
   21dec:	e5c868f9 	strb	r6, [r8, #2297]	; 0x8f9
   21df0:	e5c868fa 	strb	r6, [r8, #2298]	; 0x8fa
   21df4:	e5886960 	str	r6, [r8, #2400]	; 0x960
   21df8:	e5886964 	str	r6, [r8, #2404]	; 0x964
   21dfc:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   21e00:	e1500006 	cmp	r0, r6
   21e04:	13a0a0c8 	movne	sl, #200	; 0xc8
   21e08:	11a0b006 	movne	fp, r6
   21e0c:	11a05006 	movne	r5, r6
   21e10:	128d700c 	addne	r7, sp, #12
   21e14:	0a0000b1 	beq	220e0 <CHTTPDaemon::ParseRequest()+0x32c>
   21e18:	e590c000 	ldr	ip, [r0]
   21e1c:	e3a02d19 	mov	r2, #1600	; 0x640
   21e20:	e3a03000 	mov	r3, #0
   21e24:	e1a01007 	mov	r1, r7
   21e28:	e59c4020 	ldr	r4, [ip, #32]
   21e2c:	e12fff34 	blx	r4
   21e30:	e2502000 	subs	r2, r0, #0
   21e34:	da00009d 	ble	220b0 <CHTTPDaemon::ParseRequest()+0x2fc>
   21e38:	e1a04007 	mov	r4, r7
   21e3c:	e3550000 	cmp	r5, #0
   21e40:	e0d430d1 	ldrsb	r3, [r4], #1
   21e44:	1a000012 	bne	21e94 <CHTTPDaemon::ParseRequest()+0xe0>
   21e48:	e353000d 	cmp	r3, #13
   21e4c:	0a00000b 	beq	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21e50:	e353000a 	cmp	r3, #10
   21e54:	0a00002b 	beq	21f08 <CHTTPDaemon::ParseRequest()+0x154>
   21e58:	e3560b02 	cmp	r6, #2048	; 0x800
   21e5c:	2300a19d 	movwcs	sl, #413	; 0x19d
   21e60:	2a000006 	bcs	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21e64:	e2861001 	add	r1, r6, #1
   21e68:	e28d0ee5 	add	r0, sp, #3664	; 0xe50
   21e6c:	e080c006 	add	ip, r0, r6
   21e70:	e0800001 	add	r0, r0, r1
   21e74:	e1a06001 	mov	r6, r1
   21e78:	e54c3804 	strb	r3, [ip, #-2052]	; 0xfffff7fc
   21e7c:	e5405804 	strb	r5, [r0, #-2052]	; 0xfffff7fc
   21e80:	e0443007 	sub	r3, r4, r7
   21e84:	e1520003 	cmp	r2, r3
   21e88:	8affffeb 	bhi	21e3c <CHTTPDaemon::ParseRequest()+0x88>
   21e8c:	e59900dc 	ldr	r0, [r9, #220]	; 0xdc
   21e90:	eaffffe0 	b	21e18 <CHTTPDaemon::ParseRequest()+0x64>
   21e94:	e3550001 	cmp	r5, #1
   21e98:	0a000006 	beq	21eb8 <CHTTPDaemon::ParseRequest()+0x104>
   21e9c:	e3550002 	cmp	r5, #2
   21ea0:	0a000024 	beq	21f38 <CHTTPDaemon::ParseRequest()+0x184>
   21ea4:	e0443007 	sub	r3, r4, r7
   21ea8:	e1520003 	cmp	r2, r3
   21eac:	9a00000f 	bls	21ef0 <CHTTPDaemon::ParseRequest()+0x13c>
   21eb0:	e3a05003 	mov	r5, #3
   21eb4:	eaffffe0 	b	21e3c <CHTTPDaemon::ParseRequest()+0x88>
   21eb8:	e2861001 	add	r1, r6, #1
   21ebc:	e0896006 	add	r6, r9, r6
   21ec0:	e089c001 	add	ip, r9, r1
   21ec4:	e30100f8 	movw	r0, #4344	; 0x10f8
   21ec8:	e7c63000 	strb	r3, [r6, r0]
   21ecc:	e3a03000 	mov	r3, #0
   21ed0:	e7cc3000 	strb	r3, [ip, r0]
   21ed4:	e1a06001 	mov	r6, r1
   21ed8:	e59830f4 	ldr	r3, [r8, #244]	; 0xf4
   21edc:	e1530001 	cmp	r3, r1
   21ee0:	8affffe6 	bhi	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21ee4:	e0443007 	sub	r3, r4, r7
   21ee8:	e1520003 	cmp	r2, r3
   21eec:	8affffef 	bhi	21eb0 <CHTTPDaemon::ParseRequest()+0xfc>
   21ef0:	e35a00c8 	cmp	sl, #200	; 0xc8
   21ef4:	0a000052 	beq	22044 <CHTTPDaemon::ParseRequest()+0x290>
   21ef8:	e1a0000a 	mov	r0, sl
   21efc:	e28ddee5 	add	sp, sp, #3664	; 0xe50
   21f00:	e28dd004 	add	sp, sp, #4
   21f04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f08:	e3560000 	cmp	r6, #0
   21f0c:	1a000013 	bne	21f60 <CHTTPDaemon::ParseRequest()+0x1ac>
   21f10:	e5d830f3 	ldrb	r3, [r8, #243]	; 0xf3
   21f14:	e3530000 	cmp	r3, #0
   21f18:	0a000033 	beq	21fec <CHTTPDaemon::ParseRequest()+0x238>
   21f1c:	e59830f4 	ldr	r3, [r8, #244]	; 0xf4
   21f20:	e3530000 	cmp	r3, #0
   21f24:	0affffde 	beq	21ea4 <CHTTPDaemon::ParseRequest()+0xf0>
   21f28:	e3530b02 	cmp	r3, #2048	; 0x800
   21f2c:	8a000042 	bhi	2203c <CHTTPDaemon::ParseRequest()+0x288>
   21f30:	e3a05001 	mov	r5, #1
   21f34:	eaffffd1 	b	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21f38:	e5980964 	ldr	r0, [r8, #2404]	; 0x964
   21f3c:	e2861001 	add	r1, r6, #1
   21f40:	e7c03006 	strb	r3, [r0, r6]
   21f44:	e5983960 	ldr	r3, [r8, #2400]	; 0x960
   21f48:	e1530001 	cmp	r3, r1
   21f4c:	8a000016 	bhi	21fac <CHTTPDaemon::ParseRequest()+0x1f8>
   21f50:	e5983964 	ldr	r3, [r8, #2404]	; 0x964
   21f54:	e1a06001 	mov	r6, r1
   21f58:	e5883968 	str	r3, [r8, #2408]	; 0x968
   21f5c:	eaffffd0 	b	21ea4 <CHTTPDaemon::ParseRequest()+0xf0>
   21f60:	e35b0000 	cmp	fp, #0
   21f64:	e28b3001 	add	r3, fp, #1
   21f68:	1a000011 	bne	21fb4 <CHTTPDaemon::ParseRequest()+0x200>
   21f6c:	e35a00c8 	cmp	sl, #200	; 0xc8
   21f70:	11a0600b 	movne	r6, fp
   21f74:	13a0b001 	movne	fp, #1
   21f78:	11a05006 	movne	r5, r6
   21f7c:	1affffbf 	bne	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21f80:	e28d1d19 	add	r1, sp, #1600	; 0x640
   21f84:	e1a00009 	mov	r0, r9
   21f88:	e281100c 	add	r1, r1, #12
   21f8c:	e58d2004 	str	r2, [sp, #4]
   21f90:	e1a0600b 	mov	r6, fp
   21f94:	ebfffebf 	bl	21a98 <CHTTPDaemon::ParseMethod(char*)>
   21f98:	e1a0500b 	mov	r5, fp
   21f9c:	e1a0a000 	mov	sl, r0
   21fa0:	e3a0b001 	mov	fp, #1
   21fa4:	e59d2004 	ldr	r2, [sp, #4]
   21fa8:	eaffffb4 	b	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21fac:	e1a06001 	mov	r6, r1
   21fb0:	eaffffb2 	b	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21fb4:	e35a00c8 	cmp	sl, #200	; 0xc8
   21fb8:	11a0b003 	movne	fp, r3
   21fbc:	11a06005 	movne	r6, r5
   21fc0:	1affffae 	bne	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21fc4:	e28d1d19 	add	r1, sp, #1600	; 0x640
   21fc8:	e1a00009 	mov	r0, r9
   21fcc:	e281100c 	add	r1, r1, #12
   21fd0:	e58d2004 	str	r2, [sp, #4]
   21fd4:	e1a0b003 	mov	fp, r3
   21fd8:	e1a06005 	mov	r6, r5
   21fdc:	ebffff05 	bl	21bf8 <CHTTPDaemon::ParseHeaderField(char*)>
   21fe0:	e59d2004 	ldr	r2, [sp, #4]
   21fe4:	e1a0a000 	mov	sl, r0
   21fe8:	eaffffa4 	b	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   21fec:	e5d838f9 	ldrb	r3, [r8, #2297]	; 0x8f9
   21ff0:	e3530000 	cmp	r3, #0
   21ff4:	0affffaa 	beq	21ea4 <CHTTPDaemon::ParseRequest()+0xf0>
   21ff8:	e59800f4 	ldr	r0, [r8, #244]	; 0xf4
   21ffc:	e3500000 	cmp	r0, #0
   22000:	0affffa7 	beq	21ea4 <CHTTPDaemon::ParseRequest()+0xf0>
   22004:	e5880960 	str	r0, [r8, #2400]	; 0x960
   22008:	e58860f4 	str	r6, [r8, #244]	; 0xf4
   2200c:	e59930e8 	ldr	r3, [r9, #232]	; 0xe8
   22010:	e1500003 	cmp	r0, r3
   22014:	8a000008 	bhi	2203c <CHTTPDaemon::ParseRequest()+0x288>
   22018:	e5983964 	ldr	r3, [r8, #2404]	; 0x964
   2201c:	e3530000 	cmp	r3, #0
   22020:	1a000034 	bne	220f8 <CHTTPDaemon::ParseRequest()+0x344>
   22024:	e58d2004 	str	r2, [sp, #4]
   22028:	e3a05002 	mov	r5, #2
   2202c:	eb0027b5 	bl	2bf08 <operator new[](unsigned int)>
   22030:	e59d2004 	ldr	r2, [sp, #4]
   22034:	e5880964 	str	r0, [r8, #2404]	; 0x964
   22038:	eaffff90 	b	21e80 <CHTTPDaemon::ParseRequest()+0xcc>
   2203c:	e300a19d 	movw	sl, #413	; 0x19d
   22040:	eaffff97 	b	21ea4 <CHTTPDaemon::ParseRequest()+0xf0>
   22044:	e35b0000 	cmp	fp, #0
   22048:	03a0af82 	moveq	sl, #520	; 0x208
   2204c:	0affffa9 	beq	21ef8 <CHTTPDaemon::ParseRequest()+0x144>
   22050:	e28940f1 	add	r4, r9, #241	; 0xf1
   22054:	e3a0103f 	mov	r1, #63	; 0x3f
   22058:	e1a00004 	mov	r0, r4
   2205c:	eb0025d9 	bl	2b7c8 <strchr>
   22060:	e2893e8f 	add	r3, r9, #2288	; 0x8f0
   22064:	e2506000 	subs	r6, r0, #0
   22068:	e2833002 	add	r3, r3, #2
   2206c:	0a000027 	beq	22110 <CHTTPDaemon::ParseRequest()+0x35c>
   22070:	e0465004 	sub	r5, r6, r4
   22074:	e1a01004 	mov	r1, r4
   22078:	e1a02005 	mov	r2, r5
   2207c:	e0895005 	add	r5, r9, r5
   22080:	e1a00003 	mov	r0, r3
   22084:	eb0025ac 	bl	2b73c <strncpy>
   22088:	e2890e9f 	add	r0, r9, #2544	; 0x9f0
   2208c:	e3a03000 	mov	r3, #0
   22090:	e2861001 	add	r1, r6, #1
   22094:	e5c538f2 	strb	r3, [r5, #2290]	; 0x8f2
   22098:	e2800003 	add	r0, r0, #3
   2209c:	eb00259b 	bl	2b710 <strcpy>
   220a0:	e1a0000a 	mov	r0, sl
   220a4:	e28ddee5 	add	sp, sp, #3664	; 0xe50
   220a8:	e28dd004 	add	sp, sp, #4
   220ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220b0:	0affff8e 	beq	21ef0 <CHTTPDaemon::ParseRequest()+0x13c>
   220b4:	eb001153 	bl	26608 <CLogger::Get()>
   220b8:	e3a0af82 	mov	sl, #520	; 0x208
   220bc:	e3a02001 	mov	r2, #1
   220c0:	e59f1058 	ldr	r1, [pc, #88]	; 22120 <CHTTPDaemon::ParseRequest()+0x36c>
   220c4:	e30630e4 	movw	r3, #24804	; 0x60e4
   220c8:	e3403003 	movt	r3, #3
   220cc:	eb00108e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   220d0:	e1a0000a 	mov	r0, sl
   220d4:	e28ddee5 	add	sp, sp, #3664	; 0xe50
   220d8:	e28dd004 	add	sp, sp, #4
   220dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220e0:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   220e4:	e3401003 	movt	r1, #3
   220e8:	e30600bc 	movw	r0, #24764	; 0x60bc
   220ec:	e3400003 	movt	r0, #3
   220f0:	e3002127 	movw	r2, #295	; 0x127
   220f4:	eb000b9e 	bl	24f74 <assertion_failed>
   220f8:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   220fc:	e3401003 	movt	r1, #3
   22100:	e30600cc 	movw	r0, #24780	; 0x60cc
   22104:	e3400003 	movt	r0, #3
   22108:	e3a02e15 	mov	r2, #336	; 0x150
   2210c:	eb000b98 	bl	24f74 <assertion_failed>
   22110:	e1a01004 	mov	r1, r4
   22114:	e1a00003 	mov	r0, r3
   22118:	eb00257c 	bl	2b710 <strcpy>
   2211c:	eaffff75 	b	21ef8 <CHTTPDaemon::ParseRequest()+0x144>
   22120:	00035fe4 	.word	0x00035fe4

00022124 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)>:
   22124:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22128:	e2804a01 	add	r4, r0, #4096	; 0x1000
   2212c:	e5d468f9 	ldrb	r6, [r4, #2297]	; 0x8f9
   22130:	e3560000 	cmp	r6, #0
   22134:	0a00004c 	beq	2226c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x148>
   22138:	e594c968 	ldr	ip, [r4, #2408]	; 0x968
   2213c:	e35c0000 	cmp	ip, #0
   22140:	0a000049 	beq	2226c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x148>
   22144:	e1a07003 	mov	r7, r3
   22148:	e1a08002 	mov	r8, r2
   2214c:	e1a05000 	mov	r5, r0
   22150:	e3510000 	cmp	r1, #0
   22154:	0a000047 	beq	22278 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x154>
   22158:	e581c000 	str	ip, [r1]
   2215c:	e3062104 	movw	r2, #24836	; 0x6104
   22160:	e3402003 	movt	r2, #3
   22164:	e5941960 	ldr	r1, [r4, #2400]	; 0x960
   22168:	e3a03004 	mov	r3, #4
   2216c:	e5940968 	ldr	r0, [r4, #2408]	; 0x968
   22170:	ebfffded 	bl	2192c <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.1]>
   22174:	e2509000 	subs	r9, r0, #0
   22178:	0a00003b 	beq	2226c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x148>
   2217c:	e3a03000 	mov	r3, #0
   22180:	e3580000 	cmp	r8, #0
   22184:	e4c93004 	strb	r3, [r9], #4
   22188:	0a000040 	beq	22290 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x16c>
   2218c:	e5889000 	str	r9, [r8]
   22190:	e2855d63 	add	r5, r5, #6336	; 0x18c0
   22194:	e285503a 	add	r5, r5, #58	; 0x3a
   22198:	e5942968 	ldr	r2, [r4, #2408]	; 0x968
   2219c:	e1a00005 	mov	r0, r5
   221a0:	e5943960 	ldr	r3, [r4, #2400]	; 0x960
   221a4:	e0492002 	sub	r2, r9, r2
   221a8:	e5849968 	str	r9, [r4, #2408]	; 0x968
   221ac:	e0433002 	sub	r3, r3, r2
   221b0:	e5843960 	str	r3, [r4, #2400]	; 0x960
   221b4:	eb0024eb 	bl	2b568 <strlen>
   221b8:	e2508000 	subs	r8, r0, #0
   221bc:	0a000039 	beq	222a8 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x184>
   221c0:	e1a02005 	mov	r2, r5
   221c4:	e1a03008 	mov	r3, r8
   221c8:	e5941960 	ldr	r1, [r4, #2400]	; 0x960
   221cc:	e1a00009 	mov	r0, r9
   221d0:	ebfffdd5 	bl	2192c <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.1]>
   221d4:	e3500000 	cmp	r0, #0
   221d8:	0a000023 	beq	2226c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x148>
   221dc:	e0403009 	sub	r3, r0, r9
   221e0:	e3530003 	cmp	r3, #3
   221e4:	da000020 	ble	2226c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x148>
   221e8:	e2405004 	sub	r5, r0, #4
   221ec:	e306112c 	movw	r1, #24876	; 0x612c
   221f0:	e3401003 	movt	r1, #3
   221f4:	e1a00005 	mov	r0, r5
   221f8:	e3a02004 	mov	r2, #4
   221fc:	eb0024c2 	bl	2b50c <memcmp>
   22200:	e3500000 	cmp	r0, #0
   22204:	1a000018 	bne	2226c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x148>
   22208:	e0450009 	sub	r0, r5, r9
   2220c:	e3570000 	cmp	r7, #0
   22210:	0a00002a 	beq	222c0 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x19c>
   22214:	e5870000 	str	r0, [r7]
   22218:	e2882004 	add	r2, r8, #4
   2221c:	e5943960 	ldr	r3, [r4, #2400]	; 0x960
   22220:	e5945968 	ldr	r5, [r4, #2408]	; 0x968
   22224:	e0433000 	sub	r3, r3, r0
   22228:	e5843960 	str	r3, [r4, #2400]	; 0x960
   2222c:	e0850000 	add	r0, r5, r0
   22230:	e1530002 	cmp	r3, r2
   22234:	e5840968 	str	r0, [r4, #2408]	; 0x968
   22238:	3a000026 	bcc	222d8 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1b4>
   2223c:	e0433002 	sub	r3, r3, r2
   22240:	e0800002 	add	r0, r0, r2
   22244:	e1530008 	cmp	r3, r8
   22248:	e5843960 	str	r3, [r4, #2400]	; 0x960
   2224c:	e5840968 	str	r0, [r4, #2408]	; 0x968
   22250:	22433002 	subcs	r3, r3, #2
   22254:	22800002 	addcs	r0, r0, #2
   22258:	33a03000 	movcc	r3, #0
   2225c:	25843960 	strcs	r3, [r4, #2400]	; 0x960
   22260:	25840968 	strcs	r0, [r4, #2408]	; 0x968
   22264:	35843968 	strcc	r3, [r4, #2408]	; 0x968
   22268:	ea000000 	b	22270 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x14c>
   2226c:	e3a06000 	mov	r6, #0
   22270:	e1a00006 	mov	r0, r6
   22274:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22278:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   2227c:	e3401003 	movt	r1, #3
   22280:	e30600f4 	movw	r0, #24820	; 0x60f4
   22284:	e3400003 	movt	r0, #3
   22288:	e300224e 	movw	r2, #590	; 0x24e
   2228c:	eb000b38 	bl	24f74 <assertion_failed>
   22290:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   22294:	e3401003 	movt	r1, #3
   22298:	e306010c 	movw	r0, #24844	; 0x610c
   2229c:	e3400003 	movt	r0, #3
   222a0:	e300225b 	movw	r2, #603	; 0x25b
   222a4:	eb000b32 	bl	24f74 <assertion_failed>
   222a8:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   222ac:	e3401003 	movt	r1, #3
   222b0:	e3060118 	movw	r0, #24856	; 0x6118
   222b4:	e3400003 	movt	r0, #3
   222b8:	e3002263 	movw	r2, #611	; 0x263
   222bc:	eb000b2c 	bl	24f74 <assertion_failed>
   222c0:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   222c4:	e3401003 	movt	r1, #3
   222c8:	e3060134 	movw	r0, #24884	; 0x6134
   222cc:	e3400003 	movt	r0, #3
   222d0:	e3a02f9e 	mov	r2, #632	; 0x278
   222d4:	eb000b26 	bl	24f74 <assertion_failed>
   222d8:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   222dc:	e3401003 	movt	r1, #3
   222e0:	e3060144 	movw	r0, #24900	; 0x6144
   222e4:	e3400003 	movt	r0, #3
   222e8:	e3002281 	movw	r2, #641	; 0x281
   222ec:	eb000b20 	bl	24f74 <assertion_failed>

000222f0 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int)>:
   222f0:	e59dc000 	ldr	ip, [sp]
   222f4:	e1a00001 	mov	r0, r1
   222f8:	e1a01002 	mov	r1, r2
   222fc:	e1a02003 	mov	r2, r3
   22300:	e35c0000 	cmp	ip, #0
   22304:	012fff1e 	bxeq	lr
   22308:	e1a0300c 	mov	r3, ip
   2230c:	eafffd86 	b	2192c <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.1]>

00022310 <CHTTPDaemon::Worker()>:
   22310:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   22314:	e59030dc 	ldr	r3, [r0, #220]	; 0xdc
   22318:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   2231c:	e3530000 	cmp	r3, #0
   22320:	0a0000d7 	beq	22684 <CHTTPDaemon::Worker()+0x374>
   22324:	e1a04000 	mov	r4, r0
   22328:	ebfffea1 	bl	21db4 <CHTTPDaemon::ParseRequest()>
   2232c:	e1a05000 	mov	r5, r0
   22330:	e3500f82 	cmp	r0, #520	; 0x208
   22334:	0a000033 	beq	22408 <CHTTPDaemon::Worker()+0xf8>
   22338:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   2233c:	e306721c 	movw	r7, #25116	; 0x621c
   22340:	e3407003 	movt	r7, #3
   22344:	e58d701c 	str	r7, [sp, #28]
   22348:	e35000c8 	cmp	r0, #200	; 0xc8
   2234c:	e58d3018 	str	r3, [sp, #24]
   22350:	0a000036 	beq	22430 <CHTTPDaemon::Worker()+0x120>
   22354:	e300319e 	movw	r3, #414	; 0x19e
   22358:	e1550003 	cmp	r5, r3
   2235c:	0a0000eb 	beq	22710 <CHTTPDaemon::Worker()+0x400>
   22360:	9a0000bb 	bls	22654 <CHTTPDaemon::Worker()+0x344>
   22364:	e30031f5 	movw	r3, #501	; 0x1f5
   22368:	e1550003 	cmp	r5, r3
   2236c:	0a0000e4 	beq	22704 <CHTTPDaemon::Worker()+0x3f4>
   22370:	e30031f9 	movw	r3, #505	; 0x1f9
   22374:	e1550003 	cmp	r5, r3
   22378:	030681e8 	movweq	r8, #25064	; 0x61e8
   2237c:	03408003 	movteq	r8, #3
   22380:	0a000003 	beq	22394 <CHTTPDaemon::Worker()+0x84>
   22384:	e3550f7d 	cmp	r5, #500	; 0x1f4
   22388:	0a0000cd 	beq	226c4 <CHTTPDaemon::Worker()+0x3b4>
   2238c:	e3068200 	movw	r8, #25088	; 0x6200
   22390:	e3408003 	movt	r8, #3
   22394:	e28d6038 	add	r6, sp, #56	; 0x38
   22398:	e1a00006 	mov	r0, r6
   2239c:	eb001c92 	bl	295ec <CString::CString()>
   223a0:	e1a03008 	mov	r3, r8
   223a4:	e1a00006 	mov	r0, r6
   223a8:	e1a02005 	mov	r2, r5
   223ac:	e58d8000 	str	r8, [sp]
   223b0:	e3061278 	movw	r1, #25208	; 0x6278
   223b4:	e3401003 	movt	r1, #3
   223b8:	eb00205b 	bl	2a52c <CString::Format(char const*, ...)>
   223bc:	e1a00006 	mov	r0, r6
   223c0:	eb001cd0 	bl	29708 <CString::GetLength() const>
   223c4:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   223c8:	e59490ec 	ldr	r9, [r4, #236]	; 0xec
   223cc:	e1500003 	cmp	r0, r3
   223d0:	e58d0018 	str	r0, [sp, #24]
   223d4:	858d3018 	strhi	r3, [sp, #24]
   223d8:	e3590000 	cmp	r9, #0
   223dc:	0a0000ce 	beq	2271c <CHTTPDaemon::Worker()+0x40c>
   223e0:	e1a00006 	mov	r0, r6
   223e4:	eb001c97 	bl	29648 <CString::operator char const*() const>
   223e8:	e59d2018 	ldr	r2, [sp, #24]
   223ec:	e1a01000 	mov	r1, r0
   223f0:	e1a00009 	mov	r0, r9
   223f4:	eb0025b3 	bl	2bac8 <memcpy>
   223f8:	e1a00006 	mov	r0, r6
   223fc:	e58d701c 	str	r7, [sp, #28]
   22400:	eb001c46 	bl	29520 <CString::~CString()>
   22404:	ea00002e 	b	224c4 <CHTTPDaemon::Worker()+0x1b4>
   22408:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   2240c:	e3500000 	cmp	r0, #0
   22410:	0a000002 	beq	22420 <CHTTPDaemon::Worker()+0x110>
   22414:	e5903000 	ldr	r3, [r0]
   22418:	e5933004 	ldr	r3, [r3, #4]
   2241c:	e12fff33 	blx	r3
   22420:	e3a03000 	mov	r3, #0
   22424:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   22428:	e28dd04c 	add	sp, sp, #76	; 0x4c
   2242c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22430:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   22434:	e3530000 	cmp	r3, #0
   22438:	0a0000a4 	beq	226d0 <CHTTPDaemon::Worker()+0x3c0>
   2243c:	e5940000 	ldr	r0, [r4]
   22440:	e28d101c 	add	r1, sp, #28
   22444:	e58d3000 	str	r3, [sp]
   22448:	e28d2018 	add	r2, sp, #24
   2244c:	e58d1008 	str	r1, [sp, #8]
   22450:	e2843d43 	add	r3, r4, #4288	; 0x10c0
   22454:	e58d2004 	str	r2, [sp, #4]
   22458:	e2841e8f 	add	r1, r4, #2288	; 0x8f0
   2245c:	e2842e9f 	add	r2, r4, #2544	; 0x9f0
   22460:	e2833038 	add	r3, r3, #56	; 0x38
   22464:	e5905010 	ldr	r5, [r0, #16]
   22468:	e2822003 	add	r2, r2, #3
   2246c:	e2811002 	add	r1, r1, #2
   22470:	e1a00004 	mov	r0, r4
   22474:	e12fff35 	blx	r5
   22478:	e59420e0 	ldr	r2, [r4, #224]	; 0xe0
   2247c:	e59d3018 	ldr	r3, [sp, #24]
   22480:	e1a05000 	mov	r5, r0
   22484:	e1520003 	cmp	r2, r3
   22488:	3a0000a9 	bcc	22734 <CHTTPDaemon::Worker()+0x424>
   2248c:	e59d301c 	ldr	r3, [sp, #28]
   22490:	e3530000 	cmp	r3, #0
   22494:	0a0000ac 	beq	2274c <CHTTPDaemon::Worker()+0x43c>
   22498:	e2846a01 	add	r6, r4, #4096	; 0x1000
   2249c:	e5960964 	ldr	r0, [r6, #2404]	; 0x964
   224a0:	e3500000 	cmp	r0, #0
   224a4:	0a000000 	beq	224ac <CHTTPDaemon::Worker()+0x19c>
   224a8:	eb00269d 	bl	2bf24 <operator delete[](void*)>
   224ac:	e35500c8 	cmp	r5, #200	; 0xc8
   224b0:	e3a03000 	mov	r3, #0
   224b4:	e5863964 	str	r3, [r6, #2404]	; 0x964
   224b8:	03068210 	movweq	r8, #25104	; 0x6210
   224bc:	03408003 	movteq	r8, #3
   224c0:	1affffa3 	bne	22354 <CHTTPDaemon::Worker()+0x44>
   224c4:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   224c8:	e1a00003 	mov	r0, r3
   224cc:	e5933000 	ldr	r3, [r3]
   224d0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   224d4:	e12fff33 	blx	r3
   224d8:	e2501000 	subs	r1, r0, #0
   224dc:	0affffc9 	beq	22408 <CHTTPDaemon::Worker()+0xf8>
   224e0:	e28d0020 	add	r0, sp, #32
   224e4:	ebfff60c 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   224e8:	e28d0028 	add	r0, sp, #40	; 0x28
   224ec:	eb001c3e 	bl	295ec <CString::CString()>
   224f0:	e28d1028 	add	r1, sp, #40	; 0x28
   224f4:	e28d0020 	add	r0, sp, #32
   224f8:	ebfff66f 	bl	1febc <CIPAddress::Format(CString*) const>
   224fc:	e5d420f0 	ldrb	r2, [r4, #240]	; 0xf0
   22500:	e3520002 	cmp	r2, #2
   22504:	93053fc8 	movwls	r3, #24520	; 0x5fc8
   22508:	93403003 	movtls	r3, #3
   2250c:	90833102 	addls	r3, r3, r2, lsl #2
   22510:	83066214 	movwhi	r6, #25108	; 0x6214
   22514:	83406003 	movthi	r6, #3
   22518:	95936024 	ldrls	r6, [r3, #36]	; 0x24
   2251c:	eb001039 	bl	26608 <CLogger::Get()>
   22520:	e1a07000 	mov	r7, r0
   22524:	e28d0028 	add	r0, sp, #40	; 0x28
   22528:	eb001c46 	bl	29648 <CString::operator char const*() const>
   2252c:	e59d2018 	ldr	r2, [sp, #24]
   22530:	e58d0000 	str	r0, [sp]
   22534:	e28410f1 	add	r1, r4, #241	; 0xf1
   22538:	e1a00007 	mov	r0, r7
   2253c:	e58d500c 	str	r5, [sp, #12]
   22540:	e58d6004 	str	r6, [sp, #4]
   22544:	e30632d4 	movw	r3, #25300	; 0x62d4
   22548:	e3403003 	movt	r3, #3
   2254c:	e28d6038 	add	r6, sp, #56	; 0x38
   22550:	e58d2010 	str	r2, [sp, #16]
   22554:	e58d1008 	str	r1, [sp, #8]
   22558:	e3a02004 	mov	r2, #4
   2255c:	e59f1218 	ldr	r1, [pc, #536]	; 2277c <CHTTPDaemon::Worker()+0x46c>
   22560:	eb000f69 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22564:	e1a00006 	mov	r0, r6
   22568:	eb001c1f 	bl	295ec <CString::CString()>
   2256c:	e59dc01c 	ldr	ip, [sp, #28]
   22570:	e59d1018 	ldr	r1, [sp, #24]
   22574:	e1a02005 	mov	r2, r5
   22578:	e58dc000 	str	ip, [sp]
   2257c:	e1a03008 	mov	r3, r8
   22580:	e1a00006 	mov	r0, r6
   22584:	e58d1004 	str	r1, [sp, #4]
   22588:	e30612e8 	movw	r1, #25320	; 0x62e8
   2258c:	e3401003 	movt	r1, #3
   22590:	eb001fe5 	bl	2a52c <CString::Format(char const*, ...)>
   22594:	e59450dc 	ldr	r5, [r4, #220]	; 0xdc
   22598:	e1a00006 	mov	r0, r6
   2259c:	e5953000 	ldr	r3, [r5]
   225a0:	e593701c 	ldr	r7, [r3, #28]
   225a4:	eb001c27 	bl	29648 <CString::operator char const*() const>
   225a8:	e1a08000 	mov	r8, r0
   225ac:	e1a00006 	mov	r0, r6
   225b0:	eb001c54 	bl	29708 <CString::GetLength() const>
   225b4:	e1a01008 	mov	r1, r8
   225b8:	e1a02000 	mov	r2, r0
   225bc:	e3a03040 	mov	r3, #64	; 0x40
   225c0:	e1a00005 	mov	r0, r5
   225c4:	e12fff37 	blx	r7
   225c8:	e3500000 	cmp	r0, #0
   225cc:	ba000032 	blt	2269c <CHTTPDaemon::Worker()+0x38c>
   225d0:	e5d430f0 	ldrb	r3, [r4, #240]	; 0xf0
   225d4:	e3530001 	cmp	r3, #1
   225d8:	0a00000d 	beq	22614 <CHTTPDaemon::Worker()+0x304>
   225dc:	e59d2018 	ldr	r2, [sp, #24]
   225e0:	e3520000 	cmp	r2, #0
   225e4:	0a00000a 	beq	22614 <CHTTPDaemon::Worker()+0x304>
   225e8:	e59410ec 	ldr	r1, [r4, #236]	; 0xec
   225ec:	e3510000 	cmp	r1, #0
   225f0:	0a00005b 	beq	22764 <CHTTPDaemon::Worker()+0x454>
   225f4:	e594c0dc 	ldr	ip, [r4, #220]	; 0xdc
   225f8:	e3a03040 	mov	r3, #64	; 0x40
   225fc:	e1a0000c 	mov	r0, ip
   22600:	e59cc000 	ldr	ip, [ip]
   22604:	e59c501c 	ldr	r5, [ip, #28]
   22608:	e12fff35 	blx	r5
   2260c:	e3500000 	cmp	r0, #0
   22610:	ba000034 	blt	226e8 <CHTTPDaemon::Worker()+0x3d8>
   22614:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   22618:	e3500000 	cmp	r0, #0
   2261c:	0a000002 	beq	2262c <CHTTPDaemon::Worker()+0x31c>
   22620:	e5903000 	ldr	r3, [r0]
   22624:	e5933004 	ldr	r3, [r3, #4]
   22628:	e12fff33 	blx	r3
   2262c:	e3a03000 	mov	r3, #0
   22630:	e1a00006 	mov	r0, r6
   22634:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   22638:	eb001bb8 	bl	29520 <CString::~CString()>
   2263c:	e28d0028 	add	r0, sp, #40	; 0x28
   22640:	eb001bb6 	bl	29520 <CString::~CString()>
   22644:	e28d0020 	add	r0, sp, #32
   22648:	ebfff52f 	bl	1fb0c <CIPAddress::~CIPAddress()>
   2264c:	e28dd04c 	add	sp, sp, #76	; 0x4c
   22650:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22654:	e3550f65 	cmp	r5, #404	; 0x194
   22658:	0a000026 	beq	226f8 <CHTTPDaemon::Worker()+0x3e8>
   2265c:	e300319d 	movw	r3, #413	; 0x19d
   22660:	e1550003 	cmp	r5, r3
   22664:	03068184 	movweq	r8, #24964	; 0x6184
   22668:	03408003 	movteq	r8, #3
   2266c:	0affff48 	beq	22394 <CHTTPDaemon::Worker()+0x84>
   22670:	e3550e19 	cmp	r5, #400	; 0x190
   22674:	1affff44 	bne	2238c <CHTTPDaemon::Worker()+0x7c>
   22678:	e306816c 	movw	r8, #24940	; 0x616c
   2267c:	e3408003 	movt	r8, #3
   22680:	eaffff43 	b	22394 <CHTTPDaemon::Worker()+0x84>
   22684:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   22688:	e3401003 	movt	r1, #3
   2268c:	e30600bc 	movw	r0, #24764	; 0x60bc
   22690:	e3400003 	movt	r0, #3
   22694:	e3a0208b 	mov	r2, #139	; 0x8b
   22698:	eb000a35 	bl	24f74 <assertion_failed>
   2269c:	eb000fd9 	bl	26608 <CLogger::Get()>
   226a0:	e3063358 	movw	r3, #25432	; 0x6358
   226a4:	e3403003 	movt	r3, #3
   226a8:	e3a02001 	mov	r2, #1
   226ac:	e59f10c8 	ldr	r1, [pc, #200]	; 2277c <CHTTPDaemon::Worker()+0x46c>
   226b0:	eb000f15 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   226b4:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   226b8:	e3500000 	cmp	r0, #0
   226bc:	1affffd7 	bne	22620 <CHTTPDaemon::Worker()+0x310>
   226c0:	eaffffd9 	b	2262c <CHTTPDaemon::Worker()+0x31c>
   226c4:	e30681b8 	movw	r8, #25016	; 0x61b8
   226c8:	e3408003 	movt	r8, #3
   226cc:	eaffff30 	b	22394 <CHTTPDaemon::Worker()+0x84>
   226d0:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   226d4:	e3401003 	movt	r1, #3
   226d8:	e3060228 	movw	r0, #25128	; 0x6228
   226dc:	e3400003 	movt	r0, #3
   226e0:	e3a020a0 	mov	r2, #160	; 0xa0
   226e4:	eb000a22 	bl	24f74 <assertion_failed>
   226e8:	eb000fc6 	bl	26608 <CLogger::Get()>
   226ec:	e3063374 	movw	r3, #25460	; 0x6374
   226f0:	e3403003 	movt	r3, #3
   226f4:	eaffffeb 	b	226a8 <CHTTPDaemon::Worker()+0x398>
   226f8:	e3068178 	movw	r8, #24952	; 0x6178
   226fc:	e3408003 	movt	r8, #3
   22700:	eaffff23 	b	22394 <CHTTPDaemon::Worker()+0x84>
   22704:	e30681d0 	movw	r8, #25040	; 0x61d0
   22708:	e3408003 	movt	r8, #3
   2270c:	eaffff20 	b	22394 <CHTTPDaemon::Worker()+0x84>
   22710:	e30681a0 	movw	r8, #24992	; 0x61a0
   22714:	e3408003 	movt	r8, #3
   22718:	eaffff1d 	b	22394 <CHTTPDaemon::Worker()+0x84>
   2271c:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   22720:	e3401003 	movt	r1, #3
   22724:	e3060228 	movw	r0, #25128	; 0x6228
   22728:	e3400003 	movt	r0, #3
   2272c:	e3a020c5 	mov	r2, #197	; 0xc5
   22730:	eb000a0f 	bl	24f74 <assertion_failed>
   22734:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   22738:	e3401003 	movt	r1, #3
   2273c:	e3060240 	movw	r0, #25152	; 0x6240
   22740:	e3400003 	movt	r0, #3
   22744:	e3a020a3 	mov	r2, #163	; 0xa3
   22748:	eb000a09 	bl	24f74 <assertion_failed>
   2274c:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   22750:	e3401003 	movt	r1, #3
   22754:	e3060264 	movw	r0, #25188	; 0x6264
   22758:	e3400003 	movt	r0, #3
   2275c:	e3a020a4 	mov	r2, #164	; 0xa4
   22760:	eb000a03 	bl	24f74 <assertion_failed>
   22764:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   22768:	e3401003 	movt	r1, #3
   2276c:	e3060228 	movw	r0, #25128	; 0x6228
   22770:	e3400003 	movt	r0, #3
   22774:	e3a020fb 	mov	r2, #251	; 0xfb
   22778:	eb0009fd 	bl	24f74 <assertion_failed>
   2277c:	00035fe4 	.word	0x00035fe4

00022780 <CHTTPDaemon::Listener()>:
   22780:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   22784:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   22788:	e24dd01c 	sub	sp, sp, #28
   2278c:	e3530000 	cmp	r3, #0
   22790:	0a000056 	beq	228f0 <CHTTPDaemon::Listener()+0x170>
   22794:	e1a04000 	mov	r4, r0
   22798:	e3a000a0 	mov	r0, #160	; 0xa0
   2279c:	eb0025d3 	bl	2bef0 <operator new(unsigned int)>
   227a0:	e3a02006 	mov	r2, #6
   227a4:	e1a05000 	mov	r5, r0
   227a8:	e59410d8 	ldr	r1, [r4, #216]	; 0xd8
   227ac:	eb0004e6 	bl	23b4c <CSocket::CSocket(CNetSubSystem*, int)>
   227b0:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   227b4:	e1a00005 	mov	r0, r5
   227b8:	e1d41eb4 	ldrh	r1, [r4, #228]	; 0xe4
   227bc:	eb0003f1 	bl	23788 <CSocket::Bind(unsigned short)>
   227c0:	e3500000 	cmp	r0, #0
   227c4:	ba000037 	blt	228a8 <CHTTPDaemon::Listener()+0x128>
   227c8:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   227cc:	e3a0100a 	mov	r1, #10
   227d0:	e1a00003 	mov	r0, r3
   227d4:	e5933000 	ldr	r3, [r3]
   227d8:	e5933014 	ldr	r3, [r3, #20]
   227dc:	e12fff33 	blx	r3
   227e0:	e3500000 	cmp	r0, #0
   227e4:	ba000047 	blt	22908 <CHTTPDaemon::Listener()+0x188>
   227e8:	e59f7140 	ldr	r7, [pc, #320]	; 22930 <CHTTPDaemon::Listener()+0x1b0>
   227ec:	e3096410 	movw	r6, #37904	; 0x9410
   227f0:	e3406003 	movt	r6, #3
   227f4:	e30683e0 	movw	r8, #25568	; 0x63e0
   227f8:	e3408003 	movt	r8, #3
   227fc:	e30693c4 	movw	r9, #25540	; 0x63c4
   22800:	e3409003 	movt	r9, #3
   22804:	e28d0010 	add	r0, sp, #16
   22808:	ebfff4a9 	bl	1fab4 <CIPAddress::CIPAddress()>
   2280c:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   22810:	e28d200e 	add	r2, sp, #14
   22814:	e28d1010 	add	r1, sp, #16
   22818:	e1a00003 	mov	r0, r3
   2281c:	e5933000 	ldr	r3, [r3]
   22820:	e5933018 	ldr	r3, [r3, #24]
   22824:	e12fff33 	blx	r3
   22828:	e2505000 	subs	r5, r0, #0
   2282c:	0a000017 	beq	22890 <CHTTPDaemon::Listener()+0x110>
   22830:	e5963000 	ldr	r3, [r6]
   22834:	e353000a 	cmp	r3, #10
   22838:	8a000008 	bhi	22860 <CHTTPDaemon::Listener()+0xe0>
   2283c:	e5943000 	ldr	r3, [r4]
   22840:	e1a02005 	mov	r2, r5
   22844:	e59410d8 	ldr	r1, [r4, #216]	; 0xd8
   22848:	e1a00004 	mov	r0, r4
   2284c:	e593300c 	ldr	r3, [r3, #12]
   22850:	e12fff33 	blx	r3
   22854:	e28d0010 	add	r0, sp, #16
   22858:	ebfff4ab 	bl	1fb0c <CIPAddress::~CIPAddress()>
   2285c:	eaffffe8 	b	22804 <CHTTPDaemon::Listener()+0x84>
   22860:	eb000f68 	bl	26608 <CLogger::Get()>
   22864:	e1a03008 	mov	r3, r8
   22868:	e3a02002 	mov	r2, #2
   2286c:	e1a01007 	mov	r1, r7
   22870:	eb000ea5 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22874:	e5953000 	ldr	r3, [r5]
   22878:	e1a00005 	mov	r0, r5
   2287c:	e5933004 	ldr	r3, [r3, #4]
   22880:	e12fff33 	blx	r3
   22884:	e28d0010 	add	r0, sp, #16
   22888:	ebfff49f 	bl	1fb0c <CIPAddress::~CIPAddress()>
   2288c:	eaffffdc 	b	22804 <CHTTPDaemon::Listener()+0x84>
   22890:	eb000f5c 	bl	26608 <CLogger::Get()>
   22894:	e1a03009 	mov	r3, r9
   22898:	e3a02002 	mov	r2, #2
   2289c:	e1a01007 	mov	r1, r7
   228a0:	eb000e99 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228a4:	eafffff6 	b	22884 <CHTTPDaemon::Listener()+0x104>
   228a8:	eb000f56 	bl	26608 <CLogger::Get()>
   228ac:	e1d43eb4 	ldrh	r3, [r4, #228]	; 0xe4
   228b0:	e58d3000 	str	r3, [sp]
   228b4:	e3a02001 	mov	r2, #1
   228b8:	e306338c 	movw	r3, #25484	; 0x638c
   228bc:	e3403003 	movt	r3, #3
   228c0:	e59f1068 	ldr	r1, [pc, #104]	; 22930 <CHTTPDaemon::Listener()+0x1b0>
   228c4:	eb000e90 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228c8:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   228cc:	e3500000 	cmp	r0, #0
   228d0:	0a000002 	beq	228e0 <CHTTPDaemon::Listener()+0x160>
   228d4:	e5903000 	ldr	r3, [r0]
   228d8:	e5933004 	ldr	r3, [r3, #4]
   228dc:	e12fff33 	blx	r3
   228e0:	e3a03000 	mov	r3, #0
   228e4:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   228e8:	e28dd01c 	add	sp, sp, #28
   228ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   228f0:	e3051ff8 	movw	r1, #24568	; 0x5ff8
   228f4:	e3401003 	movt	r1, #3
   228f8:	e305002c 	movw	r0, #20524	; 0x502c
   228fc:	e3400003 	movt	r0, #3
   22900:	e3a02058 	mov	r2, #88	; 0x58
   22904:	eb00099a 	bl	24f74 <assertion_failed>
   22908:	eb000f3e 	bl	26608 <CLogger::Get()>
   2290c:	e30633ac 	movw	r3, #25516	; 0x63ac
   22910:	e3403003 	movt	r3, #3
   22914:	e3a02001 	mov	r2, #1
   22918:	e59f1010 	ldr	r1, [pc, #16]	; 22930 <CHTTPDaemon::Listener()+0x1b0>
   2291c:	eb000e7a 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22920:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   22924:	e3500000 	cmp	r0, #0
   22928:	1affffe9 	bne	228d4 <CHTTPDaemon::Listener()+0x154>
   2292c:	eaffffeb 	b	228e0 <CHTTPDaemon::Listener()+0x160>
   22930:	00035fe4 	.word	0x00035fe4

00022934 <CHTTPDaemon::Run()>:
   22934:	e59030dc 	ldr	r3, [r0, #220]	; 0xdc
   22938:	e3530000 	cmp	r3, #0
   2293c:	0a000000 	beq	22944 <CHTTPDaemon::Run()+0x10>
   22940:	eafffe72 	b	22310 <CHTTPDaemon::Worker()>
   22944:	eaffff8d 	b	22780 <CHTTPDaemon::Listener()>

00022948 <CTFTPDaemon::CTFTPDaemon(CNetSubSystem*)>:
   22948:	e92d4070 	push	{r4, r5, r6, lr}
   2294c:	e1a04000 	mov	r4, r0
   22950:	e1a05001 	mov	r5, r1
   22954:	e3a01902 	mov	r1, #32768	; 0x8000
   22958:	eb00078a 	bl	24788 <CTask::CTask(unsigned int)>
   2295c:	e59f2018 	ldr	r2, [pc, #24]	; 2297c <CTFTPDaemon::CTFTPDaemon(CNetSubSystem*)+0x34>
   22960:	e3a03000 	mov	r3, #0
   22964:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   22968:	e5842000 	str	r2, [r4]
   2296c:	e1a00004 	mov	r0, r4
   22970:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   22974:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   22978:	e8bd8070 	pop	{r4, r5, r6, pc}
   2297c:	000363fc 	.word	0x000363fc

00022980 <CTFTPDaemon::~CTFTPDaemon()>:
   22980:	e92d4010 	push	{r4, lr}
   22984:	e1a04000 	mov	r4, r0
   22988:	e59000e0 	ldr	r0, [r0, #224]	; 0xe0
   2298c:	e59f3050 	ldr	r3, [pc, #80]	; 229e4 <CTFTPDaemon::~CTFTPDaemon()+0x64>
   22990:	e5843000 	str	r3, [r4]
   22994:	e3500000 	cmp	r0, #0
   22998:	0a000002 	beq	229a8 <CTFTPDaemon::~CTFTPDaemon()+0x28>
   2299c:	e5903000 	ldr	r3, [r0]
   229a0:	e5933004 	ldr	r3, [r3, #4]
   229a4:	e12fff33 	blx	r3
   229a8:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   229ac:	e3a03000 	mov	r3, #0
   229b0:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   229b4:	e1500003 	cmp	r0, r3
   229b8:	0a000002 	beq	229c8 <CTFTPDaemon::~CTFTPDaemon()+0x48>
   229bc:	e5903000 	ldr	r3, [r0]
   229c0:	e5933004 	ldr	r3, [r3, #4]
   229c4:	e12fff33 	blx	r3
   229c8:	e3a03000 	mov	r3, #0
   229cc:	e1a00004 	mov	r0, r4
   229d0:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   229d4:	e58430d8 	str	r3, [r4, #216]	; 0xd8
   229d8:	eb00071a 	bl	24648 <CTask::~CTask()>
   229dc:	e1a00004 	mov	r0, r4
   229e0:	e8bd8010 	pop	{r4, pc}
   229e4:	000363fc 	.word	0x000363fc

000229e8 <CTFTPDaemon::~CTFTPDaemon()>:
   229e8:	e92d4010 	push	{r4, lr}
   229ec:	e1a04000 	mov	r4, r0
   229f0:	ebffffe2 	bl	22980 <CTFTPDaemon::~CTFTPDaemon()>
   229f4:	e1a00004 	mov	r0, r4
   229f8:	e3a010e4 	mov	r1, #228	; 0xe4
   229fc:	eb002549 	bl	2bf28 <operator delete(void*, unsigned int)>
   22a00:	e1a00004 	mov	r0, r4
   22a04:	e8bd8010 	pop	{r4, pc}

00022a08 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>:
   22a08:	e92d4070 	push	{r4, r5, r6, lr}
   22a0c:	e6bfcfb1 	rev16	ip, r1
   22a10:	e1a04003 	mov	r4, r3
   22a14:	e24dd090 	sub	sp, sp, #144	; 0x90
   22a18:	e1a06000 	mov	r6, r0
   22a1c:	e1a01002 	mov	r1, r2
   22a20:	e28d0010 	add	r0, sp, #16
   22a24:	e3a03c05 	mov	r3, #1280	; 0x500
   22a28:	e1cdc0be 	strh	ip, [sp, #14]
   22a2c:	e1cd30bc 	strh	r3, [sp, #12]
   22a30:	e1dd5ab0 	ldrh	r5, [sp, #160]	; 0xa0
   22a34:	eb002335 	bl	2b710 <strcpy>
   22a38:	e3540000 	cmp	r4, #0
   22a3c:	0a00000d 	beq	22a78 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0x70>
   22a40:	e59600dc 	ldr	r0, [r6, #220]	; 0xdc
   22a44:	e3500000 	cmp	r0, #0
   22a48:	0a000015 	beq	22aa4 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0x9c>
   22a4c:	e3550000 	cmp	r5, #0
   22a50:	0a000019 	beq	22abc <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xb4>
   22a54:	e590c000 	ldr	ip, [r0]
   22a58:	e28d100c 	add	r1, sp, #12
   22a5c:	e1cd40f0 	strd	r4, [sp]
   22a60:	e3a03040 	mov	r3, #64	; 0x40
   22a64:	e3a02084 	mov	r2, #132	; 0x84
   22a68:	e59c4024 	ldr	r4, [ip, #36]	; 0x24
   22a6c:	e12fff34 	blx	r4
   22a70:	e28dd090 	add	sp, sp, #144	; 0x90
   22a74:	e8bd8070 	pop	{r4, r5, r6, pc}
   22a78:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
   22a7c:	e3500000 	cmp	r0, #0
   22a80:	0a000013 	beq	22ad4 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xcc>
   22a84:	e590c000 	ldr	ip, [r0]
   22a88:	e28d100c 	add	r1, sp, #12
   22a8c:	e3a03040 	mov	r3, #64	; 0x40
   22a90:	e3a02084 	mov	r2, #132	; 0x84
   22a94:	e59c401c 	ldr	r4, [ip, #28]
   22a98:	e12fff34 	blx	r4
   22a9c:	e28dd090 	add	sp, sp, #144	; 0x90
   22aa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   22aa4:	e3061424 	movw	r1, #25636	; 0x6424
   22aa8:	e3401003 	movt	r1, #3
   22aac:	e3060434 	movw	r0, #25652	; 0x6434
   22ab0:	e3400003 	movt	r0, #3
   22ab4:	e3a02e1d 	mov	r2, #464	; 0x1d0
   22ab8:	eb00092d 	bl	24f74 <assertion_failed>
   22abc:	e3061424 	movw	r1, #25636	; 0x6424
   22ac0:	e3401003 	movt	r1, #3
   22ac4:	e306044c 	movw	r0, #25676	; 0x644c
   22ac8:	e3400003 	movt	r0, #3
   22acc:	e30021d1 	movw	r2, #465	; 0x1d1
   22ad0:	eb000927 	bl	24f74 <assertion_failed>
   22ad4:	e3061424 	movw	r1, #25636	; 0x6424
   22ad8:	e3401003 	movt	r1, #3
   22adc:	e3060458 	movw	r0, #25688	; 0x6458
   22ae0:	e3400003 	movt	r0, #3
   22ae4:	e30021d6 	movw	r2, #470	; 0x1d6
   22ae8:	eb000921 	bl	24f74 <assertion_failed>

00022aec <CTFTPDaemon::DoRead(char const*) [clone .part.0]>:
   22aec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22af0:	e1a06000 	mov	r6, r0
   22af4:	e3a03001 	mov	r3, #1
   22af8:	e24ddf91 	sub	sp, sp, #580	; 0x244
   22afc:	e3a07c01 	mov	r7, #256	; 0x100
   22b00:	e28d0014 	add	r0, sp, #20
   22b04:	e58d300c 	str	r3, [sp, #12]
   22b08:	ebfff1f4 	bl	1f2e0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   22b0c:	e28d0014 	add	r0, sp, #20
   22b10:	e3a01000 	mov	r1, #0
   22b14:	ebfff20b 	bl	1f348 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   22b18:	e5963000 	ldr	r3, [r6]
   22b1c:	e3a01c03 	mov	r1, #768	; 0x300
   22b20:	e1cd73be 	strh	r7, [sp, #62]	; 0x3e
   22b24:	e3a02c02 	mov	r2, #512	; 0x200
   22b28:	e1cd13bc 	strh	r1, [sp, #60]	; 0x3c
   22b2c:	e1a00006 	mov	r0, r6
   22b30:	e28d1040 	add	r1, sp, #64	; 0x40
   22b34:	e5933018 	ldr	r3, [r3, #24]
   22b38:	e12fff33 	blx	r3
   22b3c:	e2508000 	subs	r8, r0, #0
   22b40:	ba00006b 	blt	22cf4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x208>
   22b44:	eb00222b 	bl	2b3f8 <CTimer::Get()>
   22b48:	e288b004 	add	fp, r8, #4
   22b4c:	eb001f5e 	bl	2a8cc <CTimer::GetTicks() const>
   22b50:	e59d300c 	ldr	r3, [sp, #12]
   22b54:	e1a09000 	mov	r9, r0
   22b58:	e300a9c3 	movw	sl, #2499	; 0x9c3
   22b5c:	e2433001 	sub	r3, r3, #1
   22b60:	e1a03483 	lsl	r3, r3, #9
   22b64:	e58d3008 	str	r3, [sp, #8]
   22b68:	eb002222 	bl	2b3f8 <CTimer::Get()>
   22b6c:	eb001f56 	bl	2a8cc <CTimer::GetTicks() const>
   22b70:	e0400009 	sub	r0, r0, r9
   22b74:	e150000a 	cmp	r0, sl
   22b78:	8a000049 	bhi	22ca4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x1b8>
   22b7c:	e596c0e0 	ldr	ip, [r6, #224]	; 0xe0
   22b80:	e3a03040 	mov	r3, #64	; 0x40
   22b84:	e1a0200b 	mov	r2, fp
   22b88:	e28d103c 	add	r1, sp, #60	; 0x3c
   22b8c:	e1a0000c 	mov	r0, ip
   22b90:	e59cc000 	ldr	ip, [ip]
   22b94:	e59c401c 	ldr	r4, [ip, #28]
   22b98:	e12fff34 	blx	r4
   22b9c:	e3500000 	cmp	r0, #0
   22ba0:	ba00004e 	blt	22ce0 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x1f4>
   22ba4:	e1a02008 	mov	r2, r8
   22ba8:	e59d1008 	ldr	r1, [sp, #8]
   22bac:	e28d0014 	add	r0, sp, #20
   22bb0:	ebfff201 	bl	1f3bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   22bb4:	eb00220f 	bl	2b3f8 <CTimer::Get()>
   22bb8:	eb001f43 	bl	2a8cc <CTimer::GetTicks() const>
   22bbc:	e1a05000 	mov	r5, r0
   22bc0:	ea000013 	b	22c14 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x128>
   22bc4:	eb00089a 	bl	24e34 <CScheduler::Get()>
   22bc8:	eb000800 	bl	24bd0 <CScheduler::Yield()>
   22bcc:	e596c0e0 	ldr	ip, [r6, #224]	; 0xe0
   22bd0:	e3a03040 	mov	r3, #64	; 0x40
   22bd4:	e3a02004 	mov	r2, #4
   22bd8:	e1a0000c 	mov	r0, ip
   22bdc:	e28d1010 	add	r1, sp, #16
   22be0:	e59cc000 	ldr	ip, [ip]
   22be4:	e59c4020 	ldr	r4, [ip, #32]
   22be8:	e12fff34 	blx	r4
   22bec:	e3500000 	cmp	r0, #0
   22bf0:	ba000018 	blt	22c58 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x16c>
   22bf4:	e3500004 	cmp	r0, #4
   22bf8:	0a00000c 	beq	22c30 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x144>
   22bfc:	e1dd31b0 	ldrh	r3, [sp, #16]
   22c00:	e3530b01 	cmp	r3, #1024	; 0x400
   22c04:	0a000009 	beq	22c30 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x144>
   22c08:	e1dd31b2 	ldrh	r3, [sp, #18]
   22c0c:	e1530007 	cmp	r3, r7
   22c10:	0a000006 	beq	22c30 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x144>
   22c14:	eb0021f7 	bl	2b3f8 <CTimer::Get()>
   22c18:	eb001f2b 	bl	2a8cc <CTimer::GetTicks() const>
   22c1c:	e0404005 	sub	r4, r0, r5
   22c20:	e28d0014 	add	r0, sp, #20
   22c24:	ebfff1c5 	bl	1f340 <CRetransmissionTimeoutCalculator::GetRTO() const>
   22c28:	e1540000 	cmp	r4, r0
   22c2c:	3affffe4 	bcc	22bc4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0xd8>
   22c30:	eb0021f0 	bl	2b3f8 <CTimer::Get()>
   22c34:	eb001f24 	bl	2a8cc <CTimer::GetTicks() const>
   22c38:	e0405005 	sub	r5, r0, r5
   22c3c:	e28d0014 	add	r0, sp, #20
   22c40:	ebfff1be 	bl	1f340 <CRetransmissionTimeoutCalculator::GetRTO() const>
   22c44:	e1550000 	cmp	r5, r0
   22c48:	3a000012 	bcc	22c98 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x1ac>
   22c4c:	e28d0014 	add	r0, sp, #20
   22c50:	ebfff1fe 	bl	1f450 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   22c54:	eaffffc3 	b	22b68 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x7c>
   22c58:	eb000e6a 	bl	26608 <CLogger::Get()>
   22c5c:	e30634a4 	movw	r3, #25764	; 0x64a4
   22c60:	e3403003 	movt	r3, #3
   22c64:	e3a02001 	mov	r2, #1
   22c68:	e59f10f8 	ldr	r1, [pc, #248]	; 22d68 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x27c>
   22c6c:	eb000da6 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22c70:	e5963000 	ldr	r3, [r6]
   22c74:	e1a00006 	mov	r0, r6
   22c78:	e5933014 	ldr	r3, [r3, #20]
   22c7c:	e12fff33 	blx	r3
   22c80:	e3a04000 	mov	r4, #0
   22c84:	e28d0014 	add	r0, sp, #20
   22c88:	ebfff1ab 	bl	1f33c <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   22c8c:	e1a00004 	mov	r0, r4
   22c90:	e28ddf91 	add	sp, sp, #580	; 0x244
   22c94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c98:	e59d1008 	ldr	r1, [sp, #8]
   22c9c:	e28d0014 	add	r0, sp, #20
   22ca0:	ebfff227 	bl	1f544 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   22ca4:	eb0021d3 	bl	2b3f8 <CTimer::Get()>
   22ca8:	eb001f07 	bl	2a8cc <CTimer::GetTicks() const>
   22cac:	e0400009 	sub	r0, r0, r9
   22cb0:	e30039c3 	movw	r3, #2499	; 0x9c3
   22cb4:	e1500003 	cmp	r0, r3
   22cb8:	8a000025 	bhi	22d54 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x268>
   22cbc:	e59d300c 	ldr	r3, [sp, #12]
   22cc0:	e3580c02 	cmp	r8, #512	; 0x200
   22cc4:	e2833001 	add	r3, r3, #1
   22cc8:	e6ff3073 	uxth	r3, r3
   22ccc:	e58d300c 	str	r3, [sp, #12]
   22cd0:	1a000019 	bne	22d3c <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x250>
   22cd4:	e6bf7fb3 	rev16	r7, r3
   22cd8:	e6ff7077 	uxth	r7, r7
   22cdc:	eaffff8d 	b	22b18 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x2c>
   22ce0:	eb000e48 	bl	26608 <CLogger::Get()>
   22ce4:	e3063490 	movw	r3, #25744	; 0x6490
   22ce8:	e3403003 	movt	r3, #3
   22cec:	e3a02001 	mov	r2, #1
   22cf0:	eaffffdc 	b	22c68 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x17c>
   22cf4:	eb000e43 	bl	26608 <CLogger::Get()>
   22cf8:	e3a02001 	mov	r2, #1
   22cfc:	e59f1064 	ldr	r1, [pc, #100]	; 22d68 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x27c>
   22d00:	e3063470 	movw	r3, #25712	; 0x6470
   22d04:	e3403003 	movt	r3, #3
   22d08:	eb000d7f 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22d0c:	e3a03000 	mov	r3, #0
   22d10:	e1a01003 	mov	r1, r3
   22d14:	e58d3000 	str	r3, [sp]
   22d18:	e1a00006 	mov	r0, r6
   22d1c:	e306247c 	movw	r2, #25724	; 0x647c
   22d20:	e3402003 	movt	r2, #3
   22d24:	ebffff37 	bl	22a08 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   22d28:	e5963000 	ldr	r3, [r6]
   22d2c:	e1a00006 	mov	r0, r6
   22d30:	e5933014 	ldr	r3, [r3, #20]
   22d34:	e12fff33 	blx	r3
   22d38:	eaffffd0 	b	22c80 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x194>
   22d3c:	e5963000 	ldr	r3, [r6]
   22d40:	e1a00006 	mov	r0, r6
   22d44:	e3a04001 	mov	r4, #1
   22d48:	e5933014 	ldr	r3, [r3, #20]
   22d4c:	e12fff33 	blx	r3
   22d50:	eaffffcb 	b	22c84 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x198>
   22d54:	eb000e2b 	bl	26608 <CLogger::Get()>
   22d58:	e30634b8 	movw	r3, #25784	; 0x64b8
   22d5c:	e3403003 	movt	r3, #3
   22d60:	e3a02004 	mov	r2, #4
   22d64:	eaffffbf 	b	22c68 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x17c>
   22d68:	0003641c 	.word	0x0003641c

00022d6c <CTFTPDaemon::DoRead(char const*)>:
   22d6c:	e92d4030 	push	{r4, r5, lr}
   22d70:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   22d74:	e24dd00c 	sub	sp, sp, #12
   22d78:	e3530000 	cmp	r3, #0
   22d7c:	0a000015 	beq	22dd8 <CTFTPDaemon::DoRead(char const*)+0x6c>
   22d80:	e3510000 	cmp	r1, #0
   22d84:	0a000019 	beq	22df0 <CTFTPDaemon::DoRead(char const*)+0x84>
   22d88:	e5903000 	ldr	r3, [r0]
   22d8c:	e1a04000 	mov	r4, r0
   22d90:	e593300c 	ldr	r3, [r3, #12]
   22d94:	e12fff33 	blx	r3
   22d98:	e2505000 	subs	r5, r0, #0
   22d9c:	0a000003 	beq	22db0 <CTFTPDaemon::DoRead(char const*)+0x44>
   22da0:	e1a00004 	mov	r0, r4
   22da4:	e28dd00c 	add	sp, sp, #12
   22da8:	e8bd4030 	pop	{r4, r5, lr}
   22dac:	eaffff4e 	b	22aec <CTFTPDaemon::DoRead(char const*) [clone .part.0]>
   22db0:	e1a00004 	mov	r0, r4
   22db4:	e58d5000 	str	r5, [sp]
   22db8:	e1a03005 	mov	r3, r5
   22dbc:	e3a01001 	mov	r1, #1
   22dc0:	e30624cc 	movw	r2, #25804	; 0x64cc
   22dc4:	e3402003 	movt	r2, #3
   22dc8:	ebffff0e 	bl	22a08 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   22dcc:	e1a00005 	mov	r0, r5
   22dd0:	e28dd00c 	add	sp, sp, #12
   22dd4:	e8bd8030 	pop	{r4, r5, pc}
   22dd8:	e3061424 	movw	r1, #25636	; 0x6424
   22ddc:	e3401003 	movt	r1, #3
   22de0:	e3060458 	movw	r0, #25688	; 0x6458
   22de4:	e3400003 	movt	r0, #3
   22de8:	e3a020e8 	mov	r2, #232	; 0xe8
   22dec:	eb000860 	bl	24f74 <assertion_failed>
   22df0:	e3061424 	movw	r1, #25636	; 0x6424
   22df4:	e3401003 	movt	r1, #3
   22df8:	e3000714 	movw	r0, #1812	; 0x714
   22dfc:	e3400003 	movt	r0, #3
   22e00:	e3a020ea 	mov	r2, #234	; 0xea
   22e04:	eb00085a 	bl	24f74 <assertion_failed>

00022e08 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]>:
   22e08:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   22e0c:	e1a06000 	mov	r6, r0
   22e10:	e590c0e0 	ldr	ip, [r0, #224]	; 0xe0
   22e14:	e24ddf85 	sub	sp, sp, #532	; 0x214
   22e18:	e3a01b01 	mov	r1, #1024	; 0x400
   22e1c:	e28d5e21 	add	r5, sp, #528	; 0x210
   22e20:	e1a0000c 	mov	r0, ip
   22e24:	e3a03040 	mov	r3, #64	; 0x40
   22e28:	e3a02004 	mov	r2, #4
   22e2c:	e59cc000 	ldr	ip, [ip]
   22e30:	e5251204 	str	r1, [r5, #-516]!	; 0xfffffdfc
   22e34:	e1a01005 	mov	r1, r5
   22e38:	e59c401c 	ldr	r4, [ip, #28]
   22e3c:	e12fff34 	blx	r4
   22e40:	e3500000 	cmp	r0, #0
   22e44:	a3a09001 	movge	r9, #1
   22e48:	a3a08f7d 	movge	r8, #500	; 0x1f4
   22e4c:	ba000056 	blt	22fac <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x1a4>
   22e50:	eb002168 	bl	2b3f8 <CTimer::Get()>
   22e54:	eb001e9c 	bl	2a8cc <CTimer::GetTicks() const>
   22e58:	e1a07000 	mov	r7, r0
   22e5c:	ea00000c 	b	22e94 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x8c>
   22e60:	eb0007f3 	bl	24e34 <CScheduler::Get()>
   22e64:	eb000759 	bl	24bd0 <CScheduler::Yield()>
   22e68:	e596c0e0 	ldr	ip, [r6, #224]	; 0xe0
   22e6c:	e3a03040 	mov	r3, #64	; 0x40
   22e70:	e3a02f81 	mov	r2, #516	; 0x204
   22e74:	e1a0000c 	mov	r0, ip
   22e78:	e1a01005 	mov	r1, r5
   22e7c:	e59cc000 	ldr	ip, [ip]
   22e80:	e59c4020 	ldr	r4, [ip, #32]
   22e84:	e12fff34 	blx	r4
   22e88:	e3500000 	cmp	r0, #0
   22e8c:	ba000012 	blt	22edc <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xd4>
   22e90:	1a000016 	bne	22ef0 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xe8>
   22e94:	eb002157 	bl	2b3f8 <CTimer::Get()>
   22e98:	eb001e8b 	bl	2a8cc <CTimer::GetTicks() const>
   22e9c:	e0400007 	sub	r0, r0, r7
   22ea0:	e1500008 	cmp	r0, r8
   22ea4:	3affffed 	bcc	22e60 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x58>
   22ea8:	eb000dd6 	bl	26608 <CLogger::Get()>
   22eac:	e30634b8 	movw	r3, #25784	; 0x64b8
   22eb0:	e3403003 	movt	r3, #3
   22eb4:	e3a02004 	mov	r2, #4
   22eb8:	e59f118c 	ldr	r1, [pc, #396]	; 2304c <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x244>
   22ebc:	eb000d12 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22ec0:	e5963000 	ldr	r3, [r6]
   22ec4:	e1a00006 	mov	r0, r6
   22ec8:	e5933014 	ldr	r3, [r3, #20]
   22ecc:	e12fff33 	blx	r3
   22ed0:	e3a00000 	mov	r0, #0
   22ed4:	e28ddf85 	add	sp, sp, #532	; 0x214
   22ed8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22edc:	eb000dc9 	bl	26608 <CLogger::Get()>
   22ee0:	e30634ec 	movw	r3, #25836	; 0x64ec
   22ee4:	e3403003 	movt	r3, #3
   22ee8:	e3a02001 	mov	r2, #1
   22eec:	eafffff1 	b	22eb8 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xb0>
   22ef0:	e2504004 	subs	r4, r0, #4
   22ef4:	4affffd5 	bmi	22e50 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x48>
   22ef8:	e1d530b0 	ldrh	r3, [r5]
   22efc:	e3530c03 	cmp	r3, #768	; 0x300
   22f00:	1affffd2 	bne	22e50 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x48>
   22f04:	e1d520b2 	ldrh	r2, [r5, #2]
   22f08:	e6bf3fb2 	rev16	r3, r2
   22f0c:	e6ff3073 	uxth	r3, r3
   22f10:	e0493003 	sub	r3, r9, r3
   22f14:	e3530000 	cmp	r3, #0
   22f18:	ba00000d 	blt	22f54 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x14c>
   22f1c:	e59630e0 	ldr	r3, [r6, #224]	; 0xe0
   22f20:	e3a0eb01 	mov	lr, #1024	; 0x400
   22f24:	e1cd20ba 	strh	r2, [sp, #10]
   22f28:	e28d1008 	add	r1, sp, #8
   22f2c:	e1a00003 	mov	r0, r3
   22f30:	e3a02004 	mov	r2, #4
   22f34:	e593c000 	ldr	ip, [r3]
   22f38:	e3a03040 	mov	r3, #64	; 0x40
   22f3c:	e1cde0b8 	strh	lr, [sp, #8]
   22f40:	e59c701c 	ldr	r7, [ip, #28]
   22f44:	e12fff37 	blx	r7
   22f48:	e3500000 	cmp	r0, #0
   22f4c:	ba000023 	blt	22fe0 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x1d8>
   22f50:	e1d520b2 	ldrh	r2, [r5, #2]
   22f54:	e6bf3fb9 	rev16	r3, r9
   22f58:	e6ff3073 	uxth	r3, r3
   22f5c:	e1520003 	cmp	r2, r3
   22f60:	1affffba 	bne	22e50 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x48>
   22f64:	e3540000 	cmp	r4, #0
   22f68:	e5963000 	ldr	r3, [r6]
   22f6c:	0a000009 	beq	22f98 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x190>
   22f70:	e593301c 	ldr	r3, [r3, #28]
   22f74:	e1a02004 	mov	r2, r4
   22f78:	e28d1010 	add	r1, sp, #16
   22f7c:	e1a00006 	mov	r0, r6
   22f80:	e12fff33 	blx	r3
   22f84:	e1540000 	cmp	r4, r0
   22f88:	1a00001c 	bne	23000 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x1f8>
   22f8c:	e3540c02 	cmp	r4, #512	; 0x200
   22f90:	0a000016 	beq	22ff0 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x1e8>
   22f94:	e5963000 	ldr	r3, [r6]
   22f98:	e5933014 	ldr	r3, [r3, #20]
   22f9c:	e1a00006 	mov	r0, r6
   22fa0:	e12fff33 	blx	r3
   22fa4:	e3a00001 	mov	r0, #1
   22fa8:	eaffffc9 	b	22ed4 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xcc>
   22fac:	eb000d95 	bl	26608 <CLogger::Get()>
   22fb0:	e3a02001 	mov	r2, #1
   22fb4:	e59f1090 	ldr	r1, [pc, #144]	; 2304c <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x244>
   22fb8:	e30634dc 	movw	r3, #25820	; 0x64dc
   22fbc:	e3403003 	movt	r3, #3
   22fc0:	eb000cd1 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22fc4:	e5963000 	ldr	r3, [r6]
   22fc8:	e1a00006 	mov	r0, r6
   22fcc:	e5933014 	ldr	r3, [r3, #20]
   22fd0:	e12fff33 	blx	r3
   22fd4:	e3a00000 	mov	r0, #0
   22fd8:	e28ddf85 	add	sp, sp, #532	; 0x214
   22fdc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22fe0:	eb000d88 	bl	26608 <CLogger::Get()>
   22fe4:	e30634dc 	movw	r3, #25820	; 0x64dc
   22fe8:	e3403003 	movt	r3, #3
   22fec:	eaffffbd 	b	22ee8 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xe0>
   22ff0:	e2899001 	add	r9, r9, #1
   22ff4:	e30089c4 	movw	r8, #2500	; 0x9c4
   22ff8:	e6ff9079 	uxth	r9, r9
   22ffc:	eaffff93 	b	22e50 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x48>
   23000:	eb000d80 	bl	26608 <CLogger::Get()>
   23004:	e3a02001 	mov	r2, #1
   23008:	e59f103c 	ldr	r1, [pc, #60]	; 2304c <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x244>
   2300c:	e3063500 	movw	r3, #25856	; 0x6500
   23010:	e3403003 	movt	r3, #3
   23014:	eb000cbc 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23018:	e3a02000 	mov	r2, #0
   2301c:	e1a03002 	mov	r3, r2
   23020:	e58d2000 	str	r2, [sp]
   23024:	e1a00006 	mov	r0, r6
   23028:	e3a01003 	mov	r1, #3
   2302c:	e3062510 	movw	r2, #25872	; 0x6510
   23030:	e3402003 	movt	r2, #3
   23034:	ebfffe73 	bl	22a08 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   23038:	e5963000 	ldr	r3, [r6]
   2303c:	e1a00006 	mov	r0, r6
   23040:	e5933014 	ldr	r3, [r3, #20]
   23044:	e12fff33 	blx	r3
   23048:	eaffffa0 	b	22ed0 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xc8>
   2304c:	0003641c 	.word	0x0003641c

00023050 <CTFTPDaemon::DoWrite(char const*)>:
   23050:	e92d4030 	push	{r4, r5, lr}
   23054:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   23058:	e24dd00c 	sub	sp, sp, #12
   2305c:	e3530000 	cmp	r3, #0
   23060:	0a000015 	beq	230bc <CTFTPDaemon::DoWrite(char const*)+0x6c>
   23064:	e3510000 	cmp	r1, #0
   23068:	0a000019 	beq	230d4 <CTFTPDaemon::DoWrite(char const*)+0x84>
   2306c:	e5903000 	ldr	r3, [r0]
   23070:	e1a04000 	mov	r4, r0
   23074:	e5933010 	ldr	r3, [r3, #16]
   23078:	e12fff33 	blx	r3
   2307c:	e2505000 	subs	r5, r0, #0
   23080:	0a000003 	beq	23094 <CTFTPDaemon::DoWrite(char const*)+0x44>
   23084:	e1a00004 	mov	r0, r4
   23088:	e28dd00c 	add	sp, sp, #12
   2308c:	e8bd4030 	pop	{r4, r5, lr}
   23090:	eaffff5c 	b	22e08 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]>
   23094:	e1a00004 	mov	r0, r4
   23098:	e58d5000 	str	r5, [sp]
   2309c:	e1a03005 	mov	r3, r5
   230a0:	e3a01002 	mov	r1, #2
   230a4:	e306251c 	movw	r2, #25884	; 0x651c
   230a8:	e3402003 	movt	r2, #3
   230ac:	ebfffe55 	bl	22a08 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   230b0:	e1a00005 	mov	r0, r5
   230b4:	e28dd00c 	add	sp, sp, #12
   230b8:	e8bd8030 	pop	{r4, r5, pc}
   230bc:	e3061424 	movw	r1, #25636	; 0x6424
   230c0:	e3401003 	movt	r1, #3
   230c4:	e3060458 	movw	r0, #25688	; 0x6458
   230c8:	e3400003 	movt	r0, #3
   230cc:	e3002153 	movw	r2, #339	; 0x153
   230d0:	eb0007a7 	bl	24f74 <assertion_failed>
   230d4:	e3061424 	movw	r1, #25636	; 0x6424
   230d8:	e3401003 	movt	r1, #3
   230dc:	e3000714 	movw	r0, #1812	; 0x714
   230e0:	e3400003 	movt	r0, #3
   230e4:	e3002155 	movw	r2, #341	; 0x155
   230e8:	eb0007a1 	bl	24f74 <assertion_failed>

000230ec <CTFTPDaemon::Run()>:
   230ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230f0:	e59080dc 	ldr	r8, [r0, #220]	; 0xdc
   230f4:	e24dd0c4 	sub	sp, sp, #196	; 0xc4
   230f8:	e3580000 	cmp	r8, #0
   230fc:	1a0000e8 	bne	234a4 <CTFTPDaemon::Run()+0x3b8>
   23100:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   23104:	e1a06000 	mov	r6, r0
   23108:	e3530000 	cmp	r3, #0
   2310c:	0a0000ea 	beq	234bc <CTFTPDaemon::Run()+0x3d0>
   23110:	e3a000a0 	mov	r0, #160	; 0xa0
   23114:	eb002375 	bl	2bef0 <operator new(unsigned int)>
   23118:	e3a02011 	mov	r2, #17
   2311c:	e1a04000 	mov	r4, r0
   23120:	e59610d8 	ldr	r1, [r6, #216]	; 0xd8
   23124:	eb000288 	bl	23b4c <CSocket::CSocket(CNetSubSystem*, int)>
   23128:	e58640dc 	str	r4, [r6, #220]	; 0xdc
   2312c:	e1a00004 	mov	r0, r4
   23130:	e3a01045 	mov	r1, #69	; 0x45
   23134:	eb000193 	bl	23788 <CSocket::Bind(unsigned short)>
   23138:	e3500000 	cmp	r0, #0
   2313c:	ba0000ce 	blt	2347c <CTFTPDaemon::Run()+0x390>
   23140:	e30695a4 	movw	r9, #26020	; 0x65a4
   23144:	e3409003 	movt	r9, #3
   23148:	e306a530 	movw	sl, #25904	; 0x6530
   2314c:	e340a003 	movt	sl, #3
   23150:	e28d5014 	add	r5, sp, #20
   23154:	e28d7012 	add	r7, sp, #18
   23158:	e58d800c 	str	r8, [sp, #12]
   2315c:	e1a00005 	mov	r0, r5
   23160:	ebfff253 	bl	1fab4 <CIPAddress::CIPAddress()>
   23164:	e3a02094 	mov	r2, #148	; 0x94
   23168:	e3a01000 	mov	r1, #0
   2316c:	e28d002c 	add	r0, sp, #44	; 0x2c
   23170:	eb0020ac 	bl	2b428 <memset>
   23174:	e596c0dc 	ldr	ip, [r6, #220]	; 0xdc
   23178:	e3a03000 	mov	r3, #0
   2317c:	e3a02092 	mov	r2, #146	; 0x92
   23180:	e1a0000c 	mov	r0, ip
   23184:	e28d102c 	add	r1, sp, #44	; 0x2c
   23188:	e59cc000 	ldr	ip, [ip]
   2318c:	e88d00a0 	stm	sp, {r5, r7}
   23190:	e59c4028 	ldr	r4, [ip, #40]	; 0x28
   23194:	e12fff34 	blx	r4
   23198:	e3500000 	cmp	r0, #0
   2319c:	ba000069 	blt	23348 <CTFTPDaemon::Run()+0x25c>
   231a0:	e2400002 	sub	r0, r0, #2
   231a4:	e3500003 	cmp	r0, #3
   231a8:	da000055 	ble	23304 <CTFTPDaemon::Run()+0x218>
   231ac:	e1dd42bc 	ldrh	r4, [sp, #44]	; 0x2c
   231b0:	e6bf4fb4 	rev16	r4, r4
   231b4:	e6ff4074 	uxth	r4, r4
   231b8:	e2443001 	sub	r3, r4, #1
   231bc:	e3530001 	cmp	r3, #1
   231c0:	8a000052 	bhi	23310 <CTFTPDaemon::Run()+0x224>
   231c4:	e28d002e 	add	r0, sp, #46	; 0x2e
   231c8:	eb0020e6 	bl	2b568 <strlen>
   231cc:	e2403001 	sub	r3, r0, #1
   231d0:	e353007f 	cmp	r3, #127	; 0x7f
   231d4:	8a000042 	bhi	232e4 <CTFTPDaemon::Run()+0x1f8>
   231d8:	e2800001 	add	r0, r0, #1
   231dc:	e28d302e 	add	r3, sp, #46	; 0x2e
   231e0:	e083b000 	add	fp, r3, r0
   231e4:	e1a01009 	mov	r1, r9
   231e8:	e1a0000b 	mov	r0, fp
   231ec:	eb0020e7 	bl	2b590 <strcmp>
   231f0:	e3500000 	cmp	r0, #0
   231f4:	1a00005c 	bne	2336c <CTFTPDaemon::Run()+0x280>
   231f8:	e28d001c 	add	r0, sp, #28
   231fc:	eb0018fa 	bl	295ec <CString::CString()>
   23200:	e28d101c 	add	r1, sp, #28
   23204:	e1a00005 	mov	r0, r5
   23208:	ebfff32b 	bl	1febc <CIPAddress::Format(CString*) const>
   2320c:	eb000cfd 	bl	26608 <CLogger::Get()>
   23210:	e3540001 	cmp	r4, #1
   23214:	e1a08000 	mov	r8, r0
   23218:	e3063538 	movw	r3, #25912	; 0x6538
   2321c:	e3403003 	movt	r3, #3
   23220:	e28d001c 	add	r0, sp, #28
   23224:	11a0b003 	movne	fp, r3
   23228:	01a0b00a 	moveq	fp, sl
   2322c:	eb001905 	bl	29648 <CString::operator char const*() const>
   23230:	e58db000 	str	fp, [sp]
   23234:	e30635d8 	movw	r3, #26072	; 0x65d8
   23238:	e3403003 	movt	r3, #3
   2323c:	e58d0004 	str	r0, [sp, #4]
   23240:	e3a02004 	mov	r2, #4
   23244:	e1a00008 	mov	r0, r8
   23248:	e59f1284 	ldr	r1, [pc, #644]	; 234d4 <CTFTPDaemon::Run()+0x3e8>
   2324c:	eb000c2e 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23250:	e59630e0 	ldr	r3, [r6, #224]	; 0xe0
   23254:	e3530000 	cmp	r3, #0
   23258:	1a000081 	bne	23464 <CTFTPDaemon::Run()+0x378>
   2325c:	e3a000a0 	mov	r0, #160	; 0xa0
   23260:	eb002322 	bl	2bef0 <operator new(unsigned int)>
   23264:	e3a02011 	mov	r2, #17
   23268:	e1a0b000 	mov	fp, r0
   2326c:	e59610d8 	ldr	r1, [r6, #216]	; 0xd8
   23270:	eb000235 	bl	23b4c <CSocket::CSocket(CNetSubSystem*, int)>
   23274:	e586b0e0 	str	fp, [r6, #224]	; 0xe0
   23278:	e1a0000b 	mov	r0, fp
   2327c:	e1dd21b2 	ldrh	r2, [sp, #18]
   23280:	e1a01005 	mov	r1, r5
   23284:	eb000093 	bl	234d8 <CSocket::Connect(CIPAddress&, unsigned short)>
   23288:	e3500000 	cmp	r0, #0
   2328c:	ba00005a 	blt	233fc <CTFTPDaemon::Run()+0x310>
   23290:	e28d102e 	add	r1, sp, #46	; 0x2e
   23294:	e1a00006 	mov	r0, r6
   23298:	e3540002 	cmp	r4, #2
   2329c:	0a000026 	beq	2333c <CTFTPDaemon::Run()+0x250>
   232a0:	ebfffeb1 	bl	22d6c <CTFTPDaemon::DoRead(char const*)>
   232a4:	e1a0b000 	mov	fp, r0
   232a8:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
   232ac:	e3500000 	cmp	r0, #0
   232b0:	0a000002 	beq	232c0 <CTFTPDaemon::Run()+0x1d4>
   232b4:	e5903000 	ldr	r3, [r0]
   232b8:	e5933004 	ldr	r3, [r3, #4]
   232bc:	e12fff33 	blx	r3
   232c0:	e59d300c 	ldr	r3, [sp, #12]
   232c4:	e35b0000 	cmp	fp, #0
   232c8:	e58630e0 	str	r3, [r6, #224]	; 0xe0
   232cc:	1a000036 	bne	233ac <CTFTPDaemon::Run()+0x2c0>
   232d0:	e28d001c 	add	r0, sp, #28
   232d4:	eb001891 	bl	29520 <CString::~CString()>
   232d8:	e1a00005 	mov	r0, r5
   232dc:	ebfff20a 	bl	1fb0c <CIPAddress::~CIPAddress()>
   232e0:	eaffff9d 	b	2315c <CTFTPDaemon::Run()+0x70>
   232e4:	e1dd31b2 	ldrh	r3, [sp, #18]
   232e8:	e3062590 	movw	r2, #26000	; 0x6590
   232ec:	e3402003 	movt	r2, #3
   232f0:	e58d3000 	str	r3, [sp]
   232f4:	e3a01000 	mov	r1, #0
   232f8:	e1a03005 	mov	r3, r5
   232fc:	e1a00006 	mov	r0, r6
   23300:	ebfffdc0 	bl	22a08 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   23304:	e1a00005 	mov	r0, r5
   23308:	ebfff1ff 	bl	1fb0c <CIPAddress::~CIPAddress()>
   2330c:	eaffff92 	b	2315c <CTFTPDaemon::Run()+0x70>
   23310:	e1dd31b2 	ldrh	r3, [sp, #18]
   23314:	e1a00006 	mov	r0, r6
   23318:	e58d3000 	str	r3, [sp]
   2331c:	e3a01004 	mov	r1, #4
   23320:	e1a03005 	mov	r3, r5
   23324:	e306257c 	movw	r2, #25980	; 0x657c
   23328:	e3402003 	movt	r2, #3
   2332c:	ebfffdb5 	bl	22a08 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   23330:	e1a00005 	mov	r0, r5
   23334:	ebfff1f4 	bl	1fb0c <CIPAddress::~CIPAddress()>
   23338:	eaffff87 	b	2315c <CTFTPDaemon::Run()+0x70>
   2333c:	ebffff43 	bl	23050 <CTFTPDaemon::DoWrite(char const*)>
   23340:	e1a0b000 	mov	fp, r0
   23344:	eaffffd7 	b	232a8 <CTFTPDaemon::Run()+0x1bc>
   23348:	eb000cae 	bl	26608 <CLogger::Get()>
   2334c:	e3a02001 	mov	r2, #1
   23350:	e59f117c 	ldr	r1, [pc, #380]	; 234d4 <CTFTPDaemon::Run()+0x3e8>
   23354:	e3063564 	movw	r3, #25956	; 0x6564
   23358:	e3403003 	movt	r3, #3
   2335c:	eb000bea 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23360:	e1a00005 	mov	r0, r5
   23364:	ebfff1e8 	bl	1fb0c <CIPAddress::~CIPAddress()>
   23368:	eaffff7b 	b	2315c <CTFTPDaemon::Run()+0x70>
   2336c:	e30615ac 	movw	r1, #26028	; 0x65ac
   23370:	e3401003 	movt	r1, #3
   23374:	e1a0000b 	mov	r0, fp
   23378:	eb002084 	bl	2b590 <strcmp>
   2337c:	e3500000 	cmp	r0, #0
   23380:	0affff9c 	beq	231f8 <CTFTPDaemon::Run()+0x10c>
   23384:	e1a0000b 	mov	r0, fp
   23388:	e30615b4 	movw	r1, #26036	; 0x65b4
   2338c:	e3401003 	movt	r1, #3
   23390:	eb00207e 	bl	2b590 <strcmp>
   23394:	e3500000 	cmp	r0, #0
   23398:	0affff96 	beq	231f8 <CTFTPDaemon::Run()+0x10c>
   2339c:	e30625bc 	movw	r2, #26044	; 0x65bc
   233a0:	e3402003 	movt	r2, #3
   233a4:	e1dd31b2 	ldrh	r3, [sp, #18]
   233a8:	eaffffd0 	b	232f0 <CTFTPDaemon::Run()+0x204>
   233ac:	eb000c95 	bl	26608 <CLogger::Get()>
   233b0:	e3540001 	cmp	r4, #1
   233b4:	e1a0b000 	mov	fp, r0
   233b8:	e3063540 	movw	r3, #25920	; 0x6540
   233bc:	e3403003 	movt	r3, #3
   233c0:	e28d001c 	add	r0, sp, #28
   233c4:	e3062544 	movw	r2, #25924	; 0x6544
   233c8:	e3402003 	movt	r2, #3
   233cc:	01a04003 	moveq	r4, r3
   233d0:	11a04002 	movne	r4, r2
   233d4:	eb00189b 	bl	29648 <CString::operator char const*() const>
   233d8:	e58d4000 	str	r4, [sp]
   233dc:	e58d0004 	str	r0, [sp, #4]
   233e0:	e3063624 	movw	r3, #26148	; 0x6624
   233e4:	e3403003 	movt	r3, #3
   233e8:	e1a0000b 	mov	r0, fp
   233ec:	e3a02004 	mov	r2, #4
   233f0:	e59f10dc 	ldr	r1, [pc, #220]	; 234d4 <CTFTPDaemon::Run()+0x3e8>
   233f4:	eb000bc4 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   233f8:	eaffffb4 	b	232d0 <CTFTPDaemon::Run()+0x1e4>
   233fc:	eb000c81 	bl	26608 <CLogger::Get()>
   23400:	e1a04000 	mov	r4, r0
   23404:	e28d001c 	add	r0, sp, #28
   23408:	eb00188e 	bl	29648 <CString::operator char const*() const>
   2340c:	e1dd21b2 	ldrh	r2, [sp, #18]
   23410:	e58d0000 	str	r0, [sp]
   23414:	e306360c 	movw	r3, #26124	; 0x660c
   23418:	e3403003 	movt	r3, #3
   2341c:	e1a00004 	mov	r0, r4
   23420:	e58d2004 	str	r2, [sp, #4]
   23424:	e59f10a8 	ldr	r1, [pc, #168]	; 234d4 <CTFTPDaemon::Run()+0x3e8>
   23428:	e3a02001 	mov	r2, #1
   2342c:	eb000bb6 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23430:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
   23434:	e3500000 	cmp	r0, #0
   23438:	0a000002 	beq	23448 <CTFTPDaemon::Run()+0x35c>
   2343c:	e5903000 	ldr	r3, [r0]
   23440:	e5933004 	ldr	r3, [r3, #4]
   23444:	e12fff33 	blx	r3
   23448:	e59d300c 	ldr	r3, [sp, #12]
   2344c:	e28d001c 	add	r0, sp, #28
   23450:	e58630e0 	str	r3, [r6, #224]	; 0xe0
   23454:	eb001831 	bl	29520 <CString::~CString()>
   23458:	e1a00005 	mov	r0, r5
   2345c:	ebfff1aa 	bl	1fb0c <CIPAddress::~CIPAddress()>
   23460:	eaffff3d 	b	2315c <CTFTPDaemon::Run()+0x70>
   23464:	e3061424 	movw	r1, #25636	; 0x6424
   23468:	e3401003 	movt	r1, #3
   2346c:	e30605f4 	movw	r0, #26100	; 0x65f4
   23470:	e3400003 	movt	r0, #3
   23474:	e3a020ba 	mov	r2, #186	; 0xba
   23478:	eb0006bd 	bl	24f74 <assertion_failed>
   2347c:	eb000c61 	bl	26608 <CLogger::Get()>
   23480:	e3a02045 	mov	r2, #69	; 0x45
   23484:	e59f1048 	ldr	r1, [pc, #72]	; 234d4 <CTFTPDaemon::Run()+0x3e8>
   23488:	e3053fa0 	movw	r3, #24480	; 0x5fa0
   2348c:	e3403003 	movt	r3, #3
   23490:	e58d2000 	str	r2, [sp]
   23494:	e3a02001 	mov	r2, #1
   23498:	eb000b9b 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2349c:	e28dd0c4 	add	sp, sp, #196	; 0xc4
   234a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234a4:	e3061424 	movw	r1, #25636	; 0x6424
   234a8:	e3401003 	movt	r1, #3
   234ac:	e306054c 	movw	r0, #25932	; 0x654c
   234b0:	e3400003 	movt	r0, #3
   234b4:	e3a02073 	mov	r2, #115	; 0x73
   234b8:	eb0006ad 	bl	24f74 <assertion_failed>
   234bc:	e3061424 	movw	r1, #25636	; 0x6424
   234c0:	e3401003 	movt	r1, #3
   234c4:	e305002c 	movw	r0, #20524	; 0x502c
   234c8:	e3400003 	movt	r0, #3
   234cc:	e3a02074 	mov	r2, #116	; 0x74
   234d0:	eb0006a7 	bl	24f74 <assertion_failed>
   234d4:	0003641c 	.word	0x0003641c

000234d8 <CSocket::Connect(CIPAddress&, unsigned short)>:
   234d8:	e92d4070 	push	{r4, r5, r6, lr}
   234dc:	e2526000 	subs	r6, r2, #0
   234e0:	e24dd008 	sub	sp, sp, #8
   234e4:	0a000026 	beq	23584 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   234e8:	e1a04000 	mov	r4, r0
   234ec:	e590000c 	ldr	r0, [r0, #12]
   234f0:	e1a05001 	mov	r5, r1
   234f4:	e3500000 	cmp	r0, #0
   234f8:	0a000024 	beq	23590 <CSocket::Connect(CIPAddress&, unsigned short)+0xb8>
   234fc:	e5941018 	ldr	r1, [r4, #24]
   23500:	e3510000 	cmp	r1, #0
   23504:	ba000005 	blt	23520 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   23508:	e5943010 	ldr	r3, [r4, #16]
   2350c:	e3530011 	cmp	r3, #17
   23510:	1a00001b 	bne	23584 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   23514:	ebffd74f 	bl	19258 <CTransportLayer::Disconnect(int)>
   23518:	e3e03000 	mvn	r3, #0
   2351c:	e5843018 	str	r3, [r4, #24]
   23520:	e5940008 	ldr	r0, [r4, #8]
   23524:	e3500000 	cmp	r0, #0
   23528:	0a00001e 	beq	235a8 <CSocket::Connect(CIPAddress&, unsigned short)+0xd0>
   2352c:	ebfff104 	bl	1f944 <CNetConfig::GetIPAddress() const>
   23530:	ebfff242 	bl	1fe40 <CIPAddress::IsNull() const>
   23534:	e3500000 	cmp	r0, #0
   23538:	0a000006 	beq	23558 <CSocket::Connect(CIPAddress&, unsigned short)+0x80>
   2353c:	e5943010 	ldr	r3, [r4, #16]
   23540:	e3530011 	cmp	r3, #17
   23544:	1a00000e 	bne	23584 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   23548:	e1a00005 	mov	r0, r5
   2354c:	ebfff249 	bl	1fe78 <CIPAddress::IsBroadcast() const>
   23550:	e3500000 	cmp	r0, #0
   23554:	0a00000a 	beq	23584 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   23558:	e594c010 	ldr	ip, [r4, #16]
   2355c:	e1a02006 	mov	r2, r6
   23560:	e1d431b4 	ldrh	r3, [r4, #20]
   23564:	e1a01005 	mov	r1, r5
   23568:	e594000c 	ldr	r0, [r4, #12]
   2356c:	e58dc000 	str	ip, [sp]
   23570:	ebffd602 	bl	18d80 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   23574:	e5840018 	str	r0, [r4, #24]
   23578:	e0000fc0 	and	r0, r0, r0, asr #31
   2357c:	e28dd008 	add	sp, sp, #8
   23580:	e8bd8070 	pop	{r4, r5, r6, pc}
   23584:	e3e00000 	mvn	r0, #0
   23588:	e28dd008 	add	sp, sp, #8
   2358c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23590:	e306167c 	movw	r1, #26236	; 0x667c
   23594:	e3401003 	movt	r1, #3
   23598:	e3060688 	movw	r0, #26248	; 0x6688
   2359c:	e3400003 	movt	r0, #3
   235a0:	e3a02070 	mov	r2, #112	; 0x70
   235a4:	eb000672 	bl	24f74 <assertion_failed>
   235a8:	e306167c 	movw	r1, #26236	; 0x667c
   235ac:	e3401003 	movt	r1, #3
   235b0:	e3050058 	movw	r0, #20568	; 0x5058
   235b4:	e3400003 	movt	r0, #3
   235b8:	e3a0207d 	mov	r2, #125	; 0x7d
   235bc:	eb00066c 	bl	24f74 <assertion_failed>

000235c0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   235c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   235c4:	e16fcf12 	clz	ip, r2
   235c8:	e590e018 	ldr	lr, [r0, #24]
   235cc:	e24dd010 	sub	sp, sp, #16
   235d0:	e1a0c2ac 	lsr	ip, ip, #5
   235d4:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   235d8:	e1dd62bc 	ldrh	r6, [sp, #44]	; 0x2c
   235dc:	1a00002e 	bne	2369c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   235e0:	e1a04000 	mov	r4, r0
   235e4:	e5900008 	ldr	r0, [r0, #8]
   235e8:	e1a07002 	mov	r7, r2
   235ec:	e1a08003 	mov	r8, r3
   235f0:	e1a05001 	mov	r5, r1
   235f4:	e3500000 	cmp	r0, #0
   235f8:	0a000015 	beq	23654 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x94>
   235fc:	ebfff0d0 	bl	1f944 <CNetConfig::GetIPAddress() const>
   23600:	ebfff20e 	bl	1fe40 <CIPAddress::IsNull() const>
   23604:	e3560000 	cmp	r6, #0
   23608:	03800001 	orreq	r0, r0, #1
   2360c:	e31000ff 	tst	r0, #255	; 0xff
   23610:	1a000021 	bne	2369c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   23614:	e594000c 	ldr	r0, [r4, #12]
   23618:	e3500000 	cmp	r0, #0
   2361c:	0a000012 	beq	2366c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xac>
   23620:	e3550000 	cmp	r5, #0
   23624:	0a000016 	beq	23684 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc4>
   23628:	e5942018 	ldr	r2, [r4, #24]
   2362c:	e1a03008 	mov	r3, r8
   23630:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
   23634:	e1a01005 	mov	r1, r5
   23638:	e58d2008 	str	r2, [sp, #8]
   2363c:	e1a02007 	mov	r2, r7
   23640:	e58d6004 	str	r6, [sp, #4]
   23644:	e58dc000 	str	ip, [sp]
   23648:	ebffd783 	bl	1945c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   2364c:	e28dd010 	add	sp, sp, #16
   23650:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23654:	e306167c 	movw	r1, #26236	; 0x667c
   23658:	e3401003 	movt	r1, #3
   2365c:	e3050058 	movw	r0, #20568	; 0x5058
   23660:	e3400003 	movt	r0, #3
   23664:	e300211e 	movw	r2, #286	; 0x11e
   23668:	eb000641 	bl	24f74 <assertion_failed>
   2366c:	e306167c 	movw	r1, #26236	; 0x667c
   23670:	e3401003 	movt	r1, #3
   23674:	e3060688 	movw	r0, #26248	; 0x6688
   23678:	e3400003 	movt	r0, #3
   2367c:	e3002129 	movw	r2, #297	; 0x129
   23680:	eb00063b 	bl	24f74 <assertion_failed>
   23684:	e306167c 	movw	r1, #26236	; 0x667c
   23688:	e3401003 	movt	r1, #3
   2368c:	e3020270 	movw	r0, #8816	; 0x2270
   23690:	e3400003 	movt	r0, #3
   23694:	e300212a 	movw	r2, #298	; 0x12a
   23698:	eb000635 	bl	24f74 <assertion_failed>
   2369c:	e3e00000 	mvn	r0, #0
   236a0:	eaffffe9 	b	2364c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x8c>

000236a4 <CSocket::~CSocket()>:
   236a4:	e92d4070 	push	{r4, r5, r6, lr}
   236a8:	e1a04000 	mov	r4, r0
   236ac:	e590000c 	ldr	r0, [r0, #12]
   236b0:	e59f30ac 	ldr	r3, [pc, #172]	; 23764 <CSocket::~CSocket()+0xc0>
   236b4:	e5843000 	str	r3, [r4]
   236b8:	e3500000 	cmp	r0, #0
   236bc:	0a00001c 	beq	23734 <CSocket::~CSocket()+0x90>
   236c0:	e5941018 	ldr	r1, [r4, #24]
   236c4:	e594301c 	ldr	r3, [r4, #28]
   236c8:	e3510000 	cmp	r1, #0
   236cc:	ba00000b 	blt	23700 <CSocket::~CSocket()+0x5c>
   236d0:	e3530000 	cmp	r3, #0
   236d4:	1a00001c 	bne	2374c <CSocket::~CSocket()+0xa8>
   236d8:	ebffd6de 	bl	19258 <CTransportLayer::Disconnect(int)>
   236dc:	e3e03000 	mvn	r3, #0
   236e0:	e5843018 	str	r3, [r4, #24]
   236e4:	e3a03000 	mov	r3, #0
   236e8:	e1a00004 	mov	r0, r4
   236ec:	e584300c 	str	r3, [r4, #12]
   236f0:	e5843008 	str	r3, [r4, #8]
   236f4:	eb000241 	bl	24000 <CNetSocket::~CNetSocket()>
   236f8:	e1a00004 	mov	r0, r4
   236fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   23700:	e3530000 	cmp	r3, #0
   23704:	0afffff6 	beq	236e4 <CSocket::~CSocket()+0x40>
   23708:	e284601c 	add	r6, r4, #28
   2370c:	e3a05000 	mov	r5, #0
   23710:	ea000000 	b	23718 <CSocket::~CSocket()+0x74>
   23714:	e594000c 	ldr	r0, [r4, #12]
   23718:	e5b61004 	ldr	r1, [r6, #4]!
   2371c:	e2855001 	add	r5, r5, #1
   23720:	ebffd6cc 	bl	19258 <CTransportLayer::Disconnect(int)>
   23724:	e594301c 	ldr	r3, [r4, #28]
   23728:	e1530005 	cmp	r3, r5
   2372c:	8afffff8 	bhi	23714 <CSocket::~CSocket()+0x70>
   23730:	eaffffeb 	b	236e4 <CSocket::~CSocket()+0x40>
   23734:	e306167c 	movw	r1, #26236	; 0x667c
   23738:	e3401003 	movt	r1, #3
   2373c:	e3060688 	movw	r0, #26248	; 0x6688
   23740:	e3400003 	movt	r0, #3
   23744:	e3a02036 	mov	r2, #54	; 0x36
   23748:	eb000609 	bl	24f74 <assertion_failed>
   2374c:	e306167c 	movw	r1, #26236	; 0x667c
   23750:	e3401003 	movt	r1, #3
   23754:	e30606a0 	movw	r0, #26272	; 0x66a0
   23758:	e3400003 	movt	r0, #3
   2375c:	e3a0203a 	mov	r2, #58	; 0x3a
   23760:	eb000603 	bl	24f74 <assertion_failed>
   23764:	00036648 	.word	0x00036648

00023768 <CSocket::~CSocket()>:
   23768:	e92d4010 	push	{r4, lr}
   2376c:	e1a04000 	mov	r4, r0
   23770:	ebffffcb 	bl	236a4 <CSocket::~CSocket()>
   23774:	e1a00004 	mov	r0, r4
   23778:	e3a010a0 	mov	r1, #160	; 0xa0
   2377c:	eb0021e9 	bl	2bf28 <operator delete(void*, unsigned int)>
   23780:	e1a00004 	mov	r0, r4
   23784:	e8bd8010 	pop	{r4, pc}

00023788 <CSocket::Bind(unsigned short)>:
   23788:	e251c000 	subs	ip, r1, #0
   2378c:	0a000012 	beq	237dc <CSocket::Bind(unsigned short)+0x54>
   23790:	e1d031b4 	ldrh	r3, [r0, #20]
   23794:	e3530000 	cmp	r3, #0
   23798:	1a00000f 	bne	237dc <CSocket::Bind(unsigned short)+0x54>
   2379c:	e5902018 	ldr	r2, [r0, #24]
   237a0:	e3520000 	cmp	r2, #0
   237a4:	aa00000c 	bge	237dc <CSocket::Bind(unsigned short)+0x54>
   237a8:	e5902010 	ldr	r2, [r0, #16]
   237ac:	e1c0c1b4 	strh	ip, [r0, #20]
   237b0:	e3520011 	cmp	r2, #17
   237b4:	0a000001 	beq	237c0 <CSocket::Bind(unsigned short)+0x38>
   237b8:	e1a00003 	mov	r0, r3
   237bc:	e12fff1e 	bx	lr
   237c0:	e92d4010 	push	{r4, lr}
   237c4:	e1a04000 	mov	r4, r0
   237c8:	e590000c 	ldr	r0, [r0, #12]
   237cc:	ebffd50e 	bl	18c0c <CTransportLayer::Bind(unsigned short, int)>
   237d0:	e5840018 	str	r0, [r4, #24]
   237d4:	e0000fc0 	and	r0, r0, r0, asr #31
   237d8:	e8bd8010 	pop	{r4, pc}
   237dc:	e3e00000 	mvn	r0, #0
   237e0:	e12fff1e 	bx	lr

000237e4 <CSocket::Listen(unsigned int)>:
   237e4:	e5902010 	ldr	r2, [r0, #16]
   237e8:	e3520006 	cmp	r2, #6
   237ec:	1a000027 	bne	23890 <CSocket::Listen(unsigned int)+0xac>
   237f0:	e1a03001 	mov	r3, r1
   237f4:	e1d011b4 	ldrh	r1, [r0, #20]
   237f8:	e3510000 	cmp	r1, #0
   237fc:	0a000023 	beq	23890 <CSocket::Listen(unsigned int)+0xac>
   23800:	e590c018 	ldr	ip, [r0, #24]
   23804:	e35c0000 	cmp	ip, #0
   23808:	aa000020 	bge	23890 <CSocket::Listen(unsigned int)+0xac>
   2380c:	e243c001 	sub	ip, r3, #1
   23810:	e35c001f 	cmp	ip, #31
   23814:	8a00001d 	bhi	23890 <CSocket::Listen(unsigned int)+0xac>
   23818:	e92d4070 	push	{r4, r5, r6, lr}
   2381c:	e1a04000 	mov	r4, r0
   23820:	e590501c 	ldr	r5, [r0, #28]
   23824:	e3550000 	cmp	r5, #0
   23828:	1a00001a 	bne	23898 <CSocket::Listen(unsigned int)+0xb4>
   2382c:	e590000c 	ldr	r0, [r0, #12]
   23830:	e584301c 	str	r3, [r4, #28]
   23834:	e3500000 	cmp	r0, #0
   23838:	1a000007 	bne	2385c <CSocket::Listen(unsigned int)+0x78>
   2383c:	ea00001b 	b	238b0 <CSocket::Listen(unsigned int)+0xcc>
   23840:	e594301c 	ldr	r3, [r4, #28]
   23844:	e2855001 	add	r5, r5, #1
   23848:	e1530005 	cmp	r3, r5
   2384c:	9a00000d 	bls	23888 <CSocket::Listen(unsigned int)+0xa4>
   23850:	e594000c 	ldr	r0, [r4, #12]
   23854:	e1d411b4 	ldrh	r1, [r4, #20]
   23858:	e5942010 	ldr	r2, [r4, #16]
   2385c:	ebffd5ef 	bl	19020 <CTransportLayer::Listen(unsigned short, int)>
   23860:	e0843105 	add	r3, r4, r5, lsl #2
   23864:	e3500000 	cmp	r0, #0
   23868:	e5830020 	str	r0, [r3, #32]
   2386c:	aafffff3 	bge	23840 <CSocket::Listen(unsigned int)+0x5c>
   23870:	e306167c 	movw	r1, #26236	; 0x667c
   23874:	e3401003 	movt	r1, #3
   23878:	e30606b0 	movw	r0, #26288	; 0x66b0
   2387c:	e3400003 	movt	r0, #3
   23880:	e3a020a5 	mov	r2, #165	; 0xa5
   23884:	eb0005ba 	bl	24f74 <assertion_failed>
   23888:	e3a00000 	mov	r0, #0
   2388c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23890:	e3e00000 	mvn	r0, #0
   23894:	e12fff1e 	bx	lr
   23898:	e306167c 	movw	r1, #26236	; 0x667c
   2389c:	e3401003 	movt	r1, #3
   238a0:	e30606a0 	movw	r0, #26272	; 0x66a0
   238a4:	e3400003 	movt	r0, #3
   238a8:	e3a0209d 	mov	r2, #157	; 0x9d
   238ac:	eb0005b0 	bl	24f74 <assertion_failed>
   238b0:	e306167c 	movw	r1, #26236	; 0x667c
   238b4:	e3401003 	movt	r1, #3
   238b8:	e3060688 	movw	r0, #26248	; 0x6688
   238bc:	e3400003 	movt	r0, #3
   238c0:	e3a020a0 	mov	r2, #160	; 0xa0
   238c4:	eb0005aa 	bl	24f74 <assertion_failed>

000238c8 <CSocket::Send(void const*, unsigned int, int)>:
   238c8:	e92d4010 	push	{r4, lr}
   238cc:	e3520000 	cmp	r2, #0
   238d0:	e590e018 	ldr	lr, [r0, #24]
   238d4:	03a04001 	moveq	r4, #1
   238d8:	e24dd008 	sub	sp, sp, #8
   238dc:	11a04fae 	lsrne	r4, lr, #31
   238e0:	e3540000 	cmp	r4, #0
   238e4:	1a000014 	bne	2393c <CSocket::Send(void const*, unsigned int, int)+0x74>
   238e8:	e590000c 	ldr	r0, [r0, #12]
   238ec:	e3500000 	cmp	r0, #0
   238f0:	0a000005 	beq	2390c <CSocket::Send(void const*, unsigned int, int)+0x44>
   238f4:	e3510000 	cmp	r1, #0
   238f8:	0a000009 	beq	23924 <CSocket::Send(void const*, unsigned int, int)+0x5c>
   238fc:	e58de000 	str	lr, [sp]
   23900:	ebffd673 	bl	192d4 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   23904:	e28dd008 	add	sp, sp, #8
   23908:	e8bd8010 	pop	{r4, pc}
   2390c:	e306167c 	movw	r1, #26236	; 0x667c
   23910:	e3401003 	movt	r1, #3
   23914:	e3060688 	movw	r0, #26248	; 0x6688
   23918:	e3400003 	movt	r0, #3
   2391c:	e3a020ed 	mov	r2, #237	; 0xed
   23920:	eb000593 	bl	24f74 <assertion_failed>
   23924:	e306167c 	movw	r1, #26236	; 0x667c
   23928:	e3401003 	movt	r1, #3
   2392c:	e3020270 	movw	r0, #8816	; 0x2270
   23930:	e3400003 	movt	r0, #3
   23934:	e3a020ee 	mov	r2, #238	; 0xee
   23938:	eb00058d 	bl	24f74 <assertion_failed>
   2393c:	e3e00000 	mvn	r0, #0
   23940:	eaffffef 	b	23904 <CSocket::Send(void const*, unsigned int, int)+0x3c>

00023944 <CSocket::Receive(void*, unsigned int, int)>:
   23944:	e590c018 	ldr	ip, [r0, #24]
   23948:	e3520000 	cmp	r2, #0
   2394c:	e92d4070 	push	{r4, r5, r6, lr}
   23950:	03a0e001 	moveq	lr, #1
   23954:	11a0efac 	lsrne	lr, ip, #31
   23958:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   2395c:	e35e0000 	cmp	lr, #0
   23960:	1a000021 	bne	239ec <CSocket::Receive(void*, unsigned int, int)+0xa8>
   23964:	e590000c 	ldr	r0, [r0, #12]
   23968:	e1a06002 	mov	r6, r2
   2396c:	e1a05001 	mov	r5, r1
   23970:	e1a02003 	mov	r2, r3
   23974:	e3500000 	cmp	r0, #0
   23978:	0a00000f 	beq	239bc <CSocket::Receive(void*, unsigned int, int)+0x78>
   2397c:	e1a0300c 	mov	r3, ip
   23980:	e1a0100d 	mov	r1, sp
   23984:	ebffd689 	bl	193b0 <CTransportLayer::Receive(void*, int, int)>
   23988:	e2504000 	subs	r4, r0, #0
   2398c:	ba000007 	blt	239b0 <CSocket::Receive(void*, unsigned int, int)+0x6c>
   23990:	e1540006 	cmp	r4, r6
   23994:	21a04006 	movcs	r4, r6
   23998:	e3550000 	cmp	r5, #0
   2399c:	0a00000c 	beq	239d4 <CSocket::Receive(void*, unsigned int, int)+0x90>
   239a0:	e1a0100d 	mov	r1, sp
   239a4:	e1a00005 	mov	r0, r5
   239a8:	e1a02004 	mov	r2, r4
   239ac:	eb002045 	bl	2bac8 <memcpy>
   239b0:	e1a00004 	mov	r0, r4
   239b4:	e28ddd19 	add	sp, sp, #1600	; 0x640
   239b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   239bc:	e306167c 	movw	r1, #26236	; 0x667c
   239c0:	e3401003 	movt	r1, #3
   239c4:	e3060688 	movw	r0, #26248	; 0x6688
   239c8:	e3400003 	movt	r0, #3
   239cc:	e3a020fe 	mov	r2, #254	; 0xfe
   239d0:	eb000567 	bl	24f74 <assertion_failed>
   239d4:	e306167c 	movw	r1, #26236	; 0x667c
   239d8:	e3401003 	movt	r1, #3
   239dc:	e3020270 	movw	r0, #8816	; 0x2270
   239e0:	e3400003 	movt	r0, #3
   239e4:	e300210b 	movw	r2, #267	; 0x10b
   239e8:	eb000561 	bl	24f74 <assertion_failed>
   239ec:	e3e04000 	mvn	r4, #0
   239f0:	eaffffee 	b	239b0 <CSocket::Receive(void*, unsigned int, int)+0x6c>

000239f4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   239f4:	e590c018 	ldr	ip, [r0, #24]
   239f8:	e3520000 	cmp	r2, #0
   239fc:	e92d4070 	push	{r4, r5, r6, lr}
   23a00:	03a0e001 	moveq	lr, #1
   23a04:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   23a08:	11a0efac 	lsrne	lr, ip, #31
   23a0c:	e24dd008 	sub	sp, sp, #8
   23a10:	e35e0000 	cmp	lr, #0
   23a14:	1a000025 	bne	23ab0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   23a18:	e590000c 	ldr	r0, [r0, #12]
   23a1c:	e1a06002 	mov	r6, r2
   23a20:	e1a05001 	mov	r5, r1
   23a24:	e1a02003 	mov	r2, r3
   23a28:	e3500000 	cmp	r0, #0
   23a2c:	0a000013 	beq	23a80 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x8c>
   23a30:	e59d365c 	ldr	r3, [sp, #1628]	; 0x65c
   23a34:	e28d1008 	add	r1, sp, #8
   23a38:	e58d3000 	str	r3, [sp]
   23a3c:	e58dc004 	str	ip, [sp, #4]
   23a40:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   23a44:	ebffd6be 	bl	19544 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   23a48:	e2504000 	subs	r4, r0, #0
   23a4c:	ba000007 	blt	23a70 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   23a50:	e1540006 	cmp	r4, r6
   23a54:	21a04006 	movcs	r4, r6
   23a58:	e3550000 	cmp	r5, #0
   23a5c:	0a00000d 	beq	23a98 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa4>
   23a60:	e28d1008 	add	r1, sp, #8
   23a64:	e1a00005 	mov	r0, r5
   23a68:	e1a02004 	mov	r2, r4
   23a6c:	eb002015 	bl	2bac8 <memcpy>
   23a70:	e1a00004 	mov	r0, r4
   23a74:	e28ddd19 	add	sp, sp, #1600	; 0x640
   23a78:	e28dd008 	add	sp, sp, #8
   23a7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23a80:	e306167c 	movw	r1, #26236	; 0x667c
   23a84:	e3401003 	movt	r1, #3
   23a88:	e3060688 	movw	r0, #26248	; 0x6688
   23a8c:	e3400003 	movt	r0, #3
   23a90:	e300213b 	movw	r2, #315	; 0x13b
   23a94:	eb000536 	bl	24f74 <assertion_failed>
   23a98:	e306167c 	movw	r1, #26236	; 0x667c
   23a9c:	e3401003 	movt	r1, #3
   23aa0:	e3020270 	movw	r0, #8816	; 0x2270
   23aa4:	e3400003 	movt	r0, #3
   23aa8:	e3002149 	movw	r2, #329	; 0x149
   23aac:	eb000530 	bl	24f74 <assertion_failed>
   23ab0:	e3e04000 	mvn	r4, #0
   23ab4:	eaffffed 	b	23a70 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>

00023ab8 <CSocket::SetOptionBroadcast(bool)>:
   23ab8:	e5902018 	ldr	r2, [r0, #24]
   23abc:	e3520000 	cmp	r2, #0
   23ac0:	ba00000f 	blt	23b04 <CSocket::SetOptionBroadcast(bool)+0x4c>
   23ac4:	e5903010 	ldr	r3, [r0, #16]
   23ac8:	e3530011 	cmp	r3, #17
   23acc:	0a000001 	beq	23ad8 <CSocket::SetOptionBroadcast(bool)+0x20>
   23ad0:	e3a00000 	mov	r0, #0
   23ad4:	e12fff1e 	bx	lr
   23ad8:	e590000c 	ldr	r0, [r0, #12]
   23adc:	e3500000 	cmp	r0, #0
   23ae0:	0a000000 	beq	23ae8 <CSocket::SetOptionBroadcast(bool)+0x30>
   23ae4:	eaffd6c7 	b	19608 <CTransportLayer::SetOptionBroadcast(bool, int)>
   23ae8:	e306167c 	movw	r1, #26236	; 0x667c
   23aec:	e3401003 	movt	r1, #3
   23af0:	e3060688 	movw	r0, #26248	; 0x6688
   23af4:	e3400003 	movt	r0, #3
   23af8:	e92d4010 	push	{r4, lr}
   23afc:	e300215b 	movw	r2, #347	; 0x15b
   23b00:	eb00051b 	bl	24f74 <assertion_failed>
   23b04:	e3e00000 	mvn	r0, #0
   23b08:	e12fff1e 	bx	lr

00023b0c <CSocket::GetForeignIP() const>:
   23b0c:	e5901018 	ldr	r1, [r0, #24]
   23b10:	e3510000 	cmp	r1, #0
   23b14:	ba00000a 	blt	23b44 <CSocket::GetForeignIP() const+0x38>
   23b18:	e590000c 	ldr	r0, [r0, #12]
   23b1c:	e3500000 	cmp	r0, #0
   23b20:	0a000000 	beq	23b28 <CSocket::GetForeignIP() const+0x1c>
   23b24:	eaffd6f4 	b	196fc <CTransportLayer::GetForeignIP(int) const>
   23b28:	e306167c 	movw	r1, #26236	; 0x667c
   23b2c:	e3401003 	movt	r1, #3
   23b30:	e3060688 	movw	r0, #26248	; 0x6688
   23b34:	e3400003 	movt	r0, #3
   23b38:	e92d4010 	push	{r4, lr}
   23b3c:	e3002166 	movw	r2, #358	; 0x166
   23b40:	eb00050b 	bl	24f74 <assertion_failed>
   23b44:	e3a00000 	mov	r0, #0
   23b48:	e12fff1e 	bx	lr

00023b4c <CSocket::CSocket(CNetSubSystem*, int)>:
   23b4c:	e92d4070 	push	{r4, r5, r6, lr}
   23b50:	e1a04000 	mov	r4, r0
   23b54:	e1a05001 	mov	r5, r1
   23b58:	e1a06002 	mov	r6, r2
   23b5c:	eb00011a 	bl	23fcc <CNetSocket::CNetSocket(CNetSubSystem*)>
   23b60:	e59f307c 	ldr	r3, [pc, #124]	; 23be4 <CSocket::CSocket(CNetSubSystem*, int)+0x98>
   23b64:	e1a00005 	mov	r0, r5
   23b68:	e5843000 	str	r3, [r4]
   23b6c:	ebffd34c 	bl	188a4 <CNetSubSystem::GetConfig()>
   23b70:	e5840008 	str	r0, [r4, #8]
   23b74:	e1a00005 	mov	r0, r5
   23b78:	ebffd34d 	bl	188b4 <CNetSubSystem::GetTransportLayer()>
   23b7c:	e594c008 	ldr	ip, [r4, #8]
   23b80:	e3a03000 	mov	r3, #0
   23b84:	e3e01000 	mvn	r1, #0
   23b88:	e5846010 	str	r6, [r4, #16]
   23b8c:	e15c0003 	cmp	ip, r3
   23b90:	e584000c 	str	r0, [r4, #12]
   23b94:	e5841018 	str	r1, [r4, #24]
   23b98:	e1c431b4 	strh	r3, [r4, #20]
   23b9c:	e584301c 	str	r3, [r4, #28]
   23ba0:	0a000003 	beq	23bb4 <CSocket::CSocket(CNetSubSystem*, int)+0x68>
   23ba4:	e3500000 	cmp	r0, #0
   23ba8:	0a000007 	beq	23bcc <CSocket::CSocket(CNetSubSystem*, int)+0x80>
   23bac:	e1a00004 	mov	r0, r4
   23bb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   23bb4:	e306167c 	movw	r1, #26236	; 0x667c
   23bb8:	e3401003 	movt	r1, #3
   23bbc:	e3050058 	movw	r0, #20568	; 0x5058
   23bc0:	e3400003 	movt	r0, #3
   23bc4:	e3a02023 	mov	r2, #35	; 0x23
   23bc8:	eb0004e9 	bl	24f74 <assertion_failed>
   23bcc:	e306167c 	movw	r1, #26236	; 0x667c
   23bd0:	e3401003 	movt	r1, #3
   23bd4:	e3060688 	movw	r0, #26248	; 0x6688
   23bd8:	e3400003 	movt	r0, #3
   23bdc:	e3a02024 	mov	r2, #36	; 0x24
   23be0:	eb0004e3 	bl	24f74 <assertion_failed>
   23be4:	00036648 	.word	0x00036648

00023be8 <CSocket::CSocket(CSocket&, int)>:
   23be8:	e92d4070 	push	{r4, r5, r6, lr}
   23bec:	e1a05001 	mov	r5, r1
   23bf0:	e1a04000 	mov	r4, r0
   23bf4:	e1a00001 	mov	r0, r1
   23bf8:	e1a06002 	mov	r6, r2
   23bfc:	eb000106 	bl	2401c <CNetSocket::GetNetSubSystem()>
   23c00:	e1a01000 	mov	r1, r0
   23c04:	e1a00004 	mov	r0, r4
   23c08:	eb0000ef 	bl	23fcc <CNetSocket::CNetSocket(CNetSubSystem*)>
   23c0c:	e5953008 	ldr	r3, [r5, #8]
   23c10:	e59f2070 	ldr	r2, [pc, #112]	; 23c88 <CSocket::CSocket(CSocket&, int)+0xa0>
   23c14:	e3a00000 	mov	r0, #0
   23c18:	e595100c 	ldr	r1, [r5, #12]
   23c1c:	e1530000 	cmp	r3, r0
   23c20:	e5842000 	str	r2, [r4]
   23c24:	e5843008 	str	r3, [r4, #8]
   23c28:	e5952010 	ldr	r2, [r5, #16]
   23c2c:	e1d531b4 	ldrh	r3, [r5, #20]
   23c30:	e1c431b4 	strh	r3, [r4, #20]
   23c34:	e584100c 	str	r1, [r4, #12]
   23c38:	e5842010 	str	r2, [r4, #16]
   23c3c:	e5846018 	str	r6, [r4, #24]
   23c40:	e584001c 	str	r0, [r4, #28]
   23c44:	0a000003 	beq	23c58 <CSocket::CSocket(CSocket&, int)+0x70>
   23c48:	e3510000 	cmp	r1, #0
   23c4c:	0a000007 	beq	23c70 <CSocket::CSocket(CSocket&, int)+0x88>
   23c50:	e1a00004 	mov	r0, r4
   23c54:	e8bd8070 	pop	{r4, r5, r6, pc}
   23c58:	e306167c 	movw	r1, #26236	; 0x667c
   23c5c:	e3401003 	movt	r1, #3
   23c60:	e3050058 	movw	r0, #20568	; 0x5058
   23c64:	e3400003 	movt	r0, #3
   23c68:	e3a02030 	mov	r2, #48	; 0x30
   23c6c:	eb0004c0 	bl	24f74 <assertion_failed>
   23c70:	e306167c 	movw	r1, #26236	; 0x667c
   23c74:	e3401003 	movt	r1, #3
   23c78:	e3060688 	movw	r0, #26248	; 0x6688
   23c7c:	e3400003 	movt	r0, #3
   23c80:	e3a02031 	mov	r2, #49	; 0x31
   23c84:	eb0004ba 	bl	24f74 <assertion_failed>
   23c88:	00036648 	.word	0x00036648

00023c8c <CSocket::Accept(CIPAddress*, unsigned short*)>:
   23c8c:	e590301c 	ldr	r3, [r0, #28]
   23c90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23c94:	e3530000 	cmp	r3, #0
   23c98:	0a00004a 	beq	23dc8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x13c>
   23c9c:	e1d041b4 	ldrh	r4, [r0, #20]
   23ca0:	e3540000 	cmp	r4, #0
   23ca4:	0a00003f 	beq	23da8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x11c>
   23ca8:	e1a05000 	mov	r5, r0
   23cac:	e590000c 	ldr	r0, [r0, #12]
   23cb0:	e1a0a002 	mov	sl, r2
   23cb4:	e1a09001 	mov	r9, r1
   23cb8:	e3500000 	cmp	r0, #0
   23cbc:	0a000043 	beq	23dd0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x144>
   23cc0:	e3530020 	cmp	r3, #32
   23cc4:	8a000047 	bhi	23de8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x15c>
   23cc8:	e285701c 	add	r7, r5, #28
   23ccc:	e3a08020 	mov	r8, #32
   23cd0:	e3a04000 	mov	r4, #0
   23cd4:	e3e06102 	mvn	r6, #-2147483648	; 0x80000000
   23cd8:	ea000008 	b	23d00 <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   23cdc:	e5973000 	ldr	r3, [r7]
   23ce0:	e595201c 	ldr	r2, [r5, #28]
   23ce4:	e1530006 	cmp	r3, r6
   23ce8:	b1a08004 	movlt	r8, r4
   23cec:	e2844001 	add	r4, r4, #1
   23cf0:	b1a06003 	movlt	r6, r3
   23cf4:	e1520004 	cmp	r2, r4
   23cf8:	9a000007 	bls	23d1c <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   23cfc:	e595000c 	ldr	r0, [r5, #12]
   23d00:	e5b71004 	ldr	r1, [r7, #4]!
   23d04:	ebffd660 	bl	1968c <CTransportLayer::IsConnected(int) const>
   23d08:	e3500000 	cmp	r0, #0
   23d0c:	0afffff2 	beq	23cdc <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   23d10:	e2843008 	add	r3, r4, #8
   23d14:	e1a08004 	mov	r8, r4
   23d18:	e7956103 	ldr	r6, [r5, r3, lsl #2]
   23d1c:	e3760106 	cmn	r6, #-2147483647	; 0x80000001
   23d20:	e1e03006 	mvn	r3, r6
   23d24:	e1a03fa3 	lsr	r3, r3, #31
   23d28:	03a03000 	moveq	r3, #0
   23d2c:	e3530000 	cmp	r3, #0
   23d30:	0a000032 	beq	23e00 <CSocket::Accept(CIPAddress*, unsigned short*)+0x174>
   23d34:	e595301c 	ldr	r3, [r5, #28]
   23d38:	e1530008 	cmp	r3, r8
   23d3c:	9a000035 	bls	23e18 <CSocket::Accept(CIPAddress*, unsigned short*)+0x18c>
   23d40:	e3590000 	cmp	r9, #0
   23d44:	0a000019 	beq	23db0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x124>
   23d48:	e35a0000 	cmp	sl, #0
   23d4c:	0a00003d 	beq	23e48 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1bc>
   23d50:	e1a0200a 	mov	r2, sl
   23d54:	e1a01009 	mov	r1, r9
   23d58:	e1a03006 	mov	r3, r6
   23d5c:	e595000c 	ldr	r0, [r5, #12]
   23d60:	ebffd509 	bl	1918c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   23d64:	e3500000 	cmp	r0, #0
   23d68:	b3a04000 	movlt	r4, #0
   23d6c:	ba000005 	blt	23d88 <CSocket::Accept(CIPAddress*, unsigned short*)+0xfc>
   23d70:	e3a000a0 	mov	r0, #160	; 0xa0
   23d74:	eb00205d 	bl	2bef0 <operator new(unsigned int)>
   23d78:	e1a02006 	mov	r2, r6
   23d7c:	e1a01005 	mov	r1, r5
   23d80:	e1a04000 	mov	r4, r0
   23d84:	ebffff97 	bl	23be8 <CSocket::CSocket(CSocket&, int)>
   23d88:	e2888008 	add	r8, r8, #8
   23d8c:	e5952010 	ldr	r2, [r5, #16]
   23d90:	e1d511b4 	ldrh	r1, [r5, #20]
   23d94:	e595000c 	ldr	r0, [r5, #12]
   23d98:	ebffd4a0 	bl	19020 <CTransportLayer::Listen(unsigned short, int)>
   23d9c:	e3500000 	cmp	r0, #0
   23da0:	e7850108 	str	r0, [r5, r8, lsl #2]
   23da4:	ba000021 	blt	23e30 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   23da8:	e1a00004 	mov	r0, r4
   23dac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23db0:	e306167c 	movw	r1, #26236	; 0x667c
   23db4:	e3401003 	movt	r1, #3
   23db8:	e30500b0 	movw	r0, #20656	; 0x50b0
   23dbc:	e3400003 	movt	r0, #3
   23dc0:	e3a020d0 	mov	r2, #208	; 0xd0
   23dc4:	eb00046a 	bl	24f74 <assertion_failed>
   23dc8:	e1a04003 	mov	r4, r3
   23dcc:	eafffff5 	b	23da8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x11c>
   23dd0:	e306167c 	movw	r1, #26236	; 0x667c
   23dd4:	e3401003 	movt	r1, #3
   23dd8:	e3060688 	movw	r0, #26248	; 0x6688
   23ddc:	e3400003 	movt	r0, #3
   23de0:	e3a020b3 	mov	r2, #179	; 0xb3
   23de4:	eb000462 	bl	24f74 <assertion_failed>
   23de8:	e306167c 	movw	r1, #26236	; 0x667c
   23dec:	e3401003 	movt	r1, #3
   23df0:	e3060730 	movw	r0, #26416	; 0x6730
   23df4:	e3400003 	movt	r0, #3
   23df8:	e3a020b4 	mov	r2, #180	; 0xb4
   23dfc:	eb00045c 	bl	24f74 <assertion_failed>
   23e00:	e306167c 	movw	r1, #26236	; 0x667c
   23e04:	e3401003 	movt	r1, #3
   23e08:	e30606cc 	movw	r0, #26316	; 0x66cc
   23e0c:	e3400003 	movt	r0, #3
   23e10:	e3a020cb 	mov	r2, #203	; 0xcb
   23e14:	eb000456 	bl	24f74 <assertion_failed>
   23e18:	e306167c 	movw	r1, #26236	; 0x667c
   23e1c:	e3401003 	movt	r1, #3
   23e20:	e30606f8 	movw	r0, #26360	; 0x66f8
   23e24:	e3400003 	movt	r0, #3
   23e28:	e3a020cc 	mov	r2, #204	; 0xcc
   23e2c:	eb000450 	bl	24f74 <assertion_failed>
   23e30:	e306167c 	movw	r1, #26236	; 0x667c
   23e34:	e3401003 	movt	r1, #3
   23e38:	e306070c 	movw	r0, #26380	; 0x670c
   23e3c:	e3400003 	movt	r0, #3
   23e40:	e3a020dc 	mov	r2, #220	; 0xdc
   23e44:	eb00044a 	bl	24f74 <assertion_failed>
   23e48:	e306167c 	movw	r1, #26236	; 0x667c
   23e4c:	e3401003 	movt	r1, #3
   23e50:	e30500c0 	movw	r0, #20672	; 0x50c0
   23e54:	e3400003 	movt	r0, #3
   23e58:	e3a020d1 	mov	r2, #209	; 0xd1
   23e5c:	eb000444 	bl	24f74 <assertion_failed>

00023e60 <CNetSocket::Connect(char const*, char const*)>:
   23e60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23e64:	e2517000 	subs	r7, r1, #0
   23e68:	e24dd01c 	sub	sp, sp, #28
   23e6c:	0a00003a 	beq	23f5c <CNetSocket::Connect(char const*, char const*)+0xfc>
   23e70:	e1a05002 	mov	r5, r2
   23e74:	e3520000 	cmp	r2, #0
   23e78:	0a00003d 	beq	23f74 <CNetSocket::Connect(char const*, char const*)+0x114>
   23e7c:	e28d1018 	add	r1, sp, #24
   23e80:	e3a03000 	mov	r3, #0
   23e84:	e1a04000 	mov	r4, r0
   23e88:	e3a0200a 	mov	r2, #10
   23e8c:	e1a00005 	mov	r0, r5
   23e90:	e5213010 	str	r3, [r1, #-16]!
   23e94:	eb001eab 	bl	2b948 <strtoul>
   23e98:	e59d3008 	ldr	r3, [sp, #8]
   23e9c:	e1a06000 	mov	r6, r0
   23ea0:	e3530000 	cmp	r3, #0
   23ea4:	0a000002 	beq	23eb4 <CNetSocket::Connect(char const*, char const*)+0x54>
   23ea8:	e1d330d0 	ldrsb	r3, [r3]
   23eac:	e3530000 	cmp	r3, #0
   23eb0:	1a00003b 	bne	23fa4 <CNetSocket::Connect(char const*, char const*)+0x144>
   23eb4:	e2462001 	sub	r2, r6, #1
   23eb8:	e30f3ffe 	movw	r3, #65534	; 0xfffe
   23ebc:	e1520003 	cmp	r2, r3
   23ec0:	8a000037 	bhi	23fa4 <CNetSocket::Connect(char const*, char const*)+0x144>
   23ec4:	e5943004 	ldr	r3, [r4, #4]
   23ec8:	e3530000 	cmp	r3, #0
   23ecc:	0a00002e 	beq	23f8c <CNetSocket::Connect(char const*, char const*)+0x12c>
   23ed0:	e28d0010 	add	r0, sp, #16
   23ed4:	ebffeef6 	bl	1fab4 <CIPAddress::CIPAddress()>
   23ed8:	e5941004 	ldr	r1, [r4, #4]
   23edc:	e28d000c 	add	r0, sp, #12
   23ee0:	eb000063 	bl	24074 <CDNSClient::CDNSClient(CNetSubSystem*)>
   23ee4:	e28d2010 	add	r2, sp, #16
   23ee8:	e1a01007 	mov	r1, r7
   23eec:	e28d000c 	add	r0, sp, #12
   23ef0:	eb0000b0 	bl	241b8 <CDNSClient::Resolve(char const*, CIPAddress*)>
   23ef4:	e3500000 	cmp	r0, #0
   23ef8:	0a00000d 	beq	23f34 <CNetSocket::Connect(char const*, char const*)+0xd4>
   23efc:	e5943000 	ldr	r3, [r4]
   23f00:	e1a00004 	mov	r0, r4
   23f04:	e6ff2076 	uxth	r2, r6
   23f08:	e28d1010 	add	r1, sp, #16
   23f0c:	e593300c 	ldr	r3, [r3, #12]
   23f10:	e12fff33 	blx	r3
   23f14:	e1a04000 	mov	r4, r0
   23f18:	e28d000c 	add	r0, sp, #12
   23f1c:	eb00005e 	bl	2409c <CDNSClient::~CDNSClient()>
   23f20:	e28d0010 	add	r0, sp, #16
   23f24:	ebffeef8 	bl	1fb0c <CIPAddress::~CIPAddress()>
   23f28:	e1a00004 	mov	r0, r4
   23f2c:	e28dd01c 	add	sp, sp, #28
   23f30:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23f34:	eb0009b3 	bl	26608 <CLogger::Get()>
   23f38:	e58d7000 	str	r7, [sp]
   23f3c:	e30637d4 	movw	r3, #26580	; 0x67d4
   23f40:	e3403003 	movt	r3, #3
   23f44:	e3061758 	movw	r1, #26456	; 0x6758
   23f48:	e3401003 	movt	r1, #3
   23f4c:	e3a02004 	mov	r2, #4
   23f50:	e3e04000 	mvn	r4, #0
   23f54:	eb0008ec 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23f58:	eaffffee 	b	23f18 <CNetSocket::Connect(char const*, char const*)+0xb8>
   23f5c:	e30617a0 	movw	r1, #26528	; 0x67a0
   23f60:	e3401003 	movt	r1, #3
   23f64:	e3020280 	movw	r0, #8832	; 0x2280
   23f68:	e3400003 	movt	r0, #3
   23f6c:	e3a0202a 	mov	r2, #42	; 0x2a
   23f70:	eb0003ff 	bl	24f74 <assertion_failed>
   23f74:	e30617a0 	movw	r1, #26528	; 0x67a0
   23f78:	e3401003 	movt	r1, #3
   23f7c:	e30607b0 	movw	r0, #26544	; 0x67b0
   23f80:	e3400003 	movt	r0, #3
   23f84:	e3a0202b 	mov	r2, #43	; 0x2b
   23f88:	eb0003f9 	bl	24f74 <assertion_failed>
   23f8c:	e30617a0 	movw	r1, #26528	; 0x67a0
   23f90:	e3401003 	movt	r1, #3
   23f94:	e305002c 	movw	r0, #20524	; 0x502c
   23f98:	e3400003 	movt	r0, #3
   23f9c:	e3a02037 	mov	r2, #55	; 0x37
   23fa0:	eb0003f3 	bl	24f74 <assertion_failed>
   23fa4:	eb000997 	bl	26608 <CLogger::Get()>
   23fa8:	e58d5000 	str	r5, [sp]
   23fac:	e30637bc 	movw	r3, #26556	; 0x67bc
   23fb0:	e3403003 	movt	r3, #3
   23fb4:	e3061758 	movw	r1, #26456	; 0x6758
   23fb8:	e3401003 	movt	r1, #3
   23fbc:	e3a02004 	mov	r2, #4
   23fc0:	e3e04000 	mvn	r4, #0
   23fc4:	eb0008d0 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23fc8:	eaffffd6 	b	23f28 <CNetSocket::Connect(char const*, char const*)+0xc8>

00023fcc <CNetSocket::CNetSocket(CNetSubSystem*)>:
   23fcc:	e3510000 	cmp	r1, #0
   23fd0:	e59f2024 	ldr	r2, [pc, #36]	; 23ffc <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   23fd4:	e5801004 	str	r1, [r0, #4]
   23fd8:	e5802000 	str	r2, [r0]
   23fdc:	112fff1e 	bxne	lr
   23fe0:	e30617a0 	movw	r1, #26528	; 0x67a0
   23fe4:	e3401003 	movt	r1, #3
   23fe8:	e305002c 	movw	r0, #20524	; 0x502c
   23fec:	e3400003 	movt	r0, #3
   23ff0:	e92d4010 	push	{r4, lr}
   23ff4:	e3a02020 	mov	r2, #32
   23ff8:	eb0003dd 	bl	24f74 <assertion_failed>
   23ffc:	0003676c 	.word	0x0003676c

00024000 <CNetSocket::~CNetSocket()>:
   24000:	e12fff1e 	bx	lr

00024004 <CNetSocket::~CNetSocket()>:
   24004:	e92d4010 	push	{r4, lr}
   24008:	e3a01008 	mov	r1, #8
   2400c:	e1a04000 	mov	r4, r0
   24010:	eb001fc4 	bl	2bf28 <operator delete(void*, unsigned int)>
   24014:	e1a00004 	mov	r0, r4
   24018:	e8bd8010 	pop	{r4, pc}

0002401c <CNetSocket::GetNetSubSystem()>:
   2401c:	e5900004 	ldr	r0, [r0, #4]
   24020:	e3500000 	cmp	r0, #0
   24024:	112fff1e 	bxne	lr
   24028:	e30617a0 	movw	r1, #26528	; 0x67a0
   2402c:	e3401003 	movt	r1, #3
   24030:	e305002c 	movw	r0, #20524	; 0x502c
   24034:	e3400003 	movt	r0, #3
   24038:	e92d4010 	push	{r4, lr}
   2403c:	e3a02046 	mov	r2, #70	; 0x46
   24040:	eb0003cb 	bl	24f74 <assertion_failed>

00024044 <CNetSocket::Bind(unsigned short)>:
   24044:	e3e00000 	mvn	r0, #0
   24048:	e12fff1e 	bx	lr

0002404c <CNetSocket::Listen(unsigned int)>:
   2404c:	e3e00000 	mvn	r0, #0
   24050:	e12fff1e 	bx	lr

00024054 <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   24054:	e3a00000 	mov	r0, #0
   24058:	e12fff1e 	bx	lr

0002405c <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   2405c:	e3e00000 	mvn	r0, #0
   24060:	e12fff1e 	bx	lr

00024064 <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   24064:	e3e00000 	mvn	r0, #0
   24068:	e12fff1e 	bx	lr

0002406c <CNetSocket::SetOptionBroadcast(bool)>:
   2406c:	e3e00000 	mvn	r0, #0
   24070:	e12fff1e 	bx	lr

00024074 <CDNSClient::CDNSClient(CNetSubSystem*)>:
   24074:	e3510000 	cmp	r1, #0
   24078:	e5801000 	str	r1, [r0]
   2407c:	112fff1e 	bxne	lr
   24080:	e30617e8 	movw	r1, #26600	; 0x67e8
   24084:	e3401003 	movt	r1, #3
   24088:	e305002c 	movw	r0, #20524	; 0x502c
   2408c:	e3400003 	movt	r0, #3
   24090:	e92d4010 	push	{r4, lr}
   24094:	e3a02056 	mov	r2, #86	; 0x56
   24098:	eb0003b5 	bl	24f74 <assertion_failed>

0002409c <CDNSClient::~CDNSClient()>:
   2409c:	e12fff1e 	bx	lr

000240a0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   240a0:	e92d4070 	push	{r4, r5, r6, lr}
   240a4:	e1a00001 	mov	r0, r1
   240a8:	e3a04000 	mov	r4, #0
   240ac:	e24dd008 	sub	sp, sp, #8
   240b0:	e1a05004 	mov	r5, r4
   240b4:	e1a06002 	mov	r6, r2
   240b8:	e3500000 	cmp	r0, #0
   240bc:	e58d5004 	str	r5, [sp, #4]
   240c0:	0a000013 	beq	24114 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x74>
   240c4:	e3a0200a 	mov	r2, #10
   240c8:	e28d1004 	add	r1, sp, #4
   240cc:	eb001e1d 	bl	2b948 <strtoul>
   240d0:	e3540003 	cmp	r4, #3
   240d4:	e1a03000 	mov	r3, r0
   240d8:	0a000016 	beq	24138 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x98>
   240dc:	e59d0004 	ldr	r0, [sp, #4]
   240e0:	e3500000 	cmp	r0, #0
   240e4:	0a000010 	beq	2412c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x8c>
   240e8:	e1d020d0 	ldrsb	r2, [r0]
   240ec:	e352002e 	cmp	r2, #46	; 0x2e
   240f0:	1a00000d 	bne	2412c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x8c>
   240f4:	e35300ff 	cmp	r3, #255	; 0xff
   240f8:	8a00000b 	bhi	2412c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x8c>
   240fc:	e2800001 	add	r0, r0, #1
   24100:	e7cd3004 	strb	r3, [sp, r4]
   24104:	e58d5004 	str	r5, [sp, #4]
   24108:	e2844001 	add	r4, r4, #1
   2410c:	e3500000 	cmp	r0, #0
   24110:	1affffeb 	bne	240c4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x24>
   24114:	e30617e8 	movw	r1, #26600	; 0x67e8
   24118:	e3401003 	movt	r1, #3
   2411c:	e30607f8 	movw	r0, #26616	; 0x67f8
   24120:	e3400003 	movt	r0, #3
   24124:	e300211e 	movw	r2, #286	; 0x11e
   24128:	eb000391 	bl	24f74 <assertion_failed>
   2412c:	e3a00000 	mov	r0, #0
   24130:	e28dd008 	add	sp, sp, #8
   24134:	e8bd8070 	pop	{r4, r5, r6, pc}
   24138:	e59d2004 	ldr	r2, [sp, #4]
   2413c:	e3520000 	cmp	r2, #0
   24140:	0a000013 	beq	24194 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xf4>
   24144:	e1d220d0 	ldrsb	r2, [r2]
   24148:	e3520000 	cmp	r2, #0
   2414c:	1afffff6 	bne	2412c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x8c>
   24150:	e35000ff 	cmp	r0, #255	; 0xff
   24154:	8afffff4 	bhi	2412c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x8c>
   24158:	e5cd3003 	strb	r3, [sp, #3]
   2415c:	e3560000 	cmp	r6, #0
   24160:	0a000005 	beq	2417c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xdc>
   24164:	e1a00006 	mov	r0, r6
   24168:	e1a0100d 	mov	r1, sp
   2416c:	ebffeeda 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   24170:	e3a00001 	mov	r0, #1
   24174:	e28dd008 	add	sp, sp, #8
   24178:	e8bd8070 	pop	{r4, r5, r6, pc}
   2417c:	e30617e8 	movw	r1, #26600	; 0x67e8
   24180:	e3401003 	movt	r1, #3
   24184:	e3060808 	movw	r0, #26632	; 0x6808
   24188:	e3400003 	movt	r0, #3
   2418c:	e300213d 	movw	r2, #317	; 0x13d
   24190:	eb000377 	bl	24f74 <assertion_failed>
   24194:	e35000ff 	cmp	r0, #255	; 0xff
   24198:	8affffe3 	bhi	2412c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x8c>
   2419c:	e30617e8 	movw	r1, #26600	; 0x67e8
   241a0:	e3401003 	movt	r1, #3
   241a4:	e3060818 	movw	r0, #26648	; 0x6818
   241a8:	e3400003 	movt	r0, #3
   241ac:	e3002139 	movw	r2, #313	; 0x139
   241b0:	e5cd3003 	strb	r3, [sp, #3]
   241b4:	eb00036e 	bl	24f74 <assertion_failed>

000241b8 <CDNSClient::Resolve(char const*, CIPAddress*)>:
   241b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241bc:	e2517000 	subs	r7, r1, #0
   241c0:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   241c4:	e24dd00c 	sub	sp, sp, #12
   241c8:	e58d2000 	str	r2, [sp]
   241cc:	0a000065 	beq	24368 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1b0>
   241d0:	e5d73000 	ldrb	r3, [r7]
   241d4:	e1a04000 	mov	r4, r0
   241d8:	e2433031 	sub	r3, r3, #49	; 0x31
   241dc:	e3530008 	cmp	r3, #8
   241e0:	9a000059 	bls	2434c <CDNSClient::Resolve(char const*, CIPAddress*)+0x194>
   241e4:	e5940000 	ldr	r0, [r4]
   241e8:	e3500000 	cmp	r0, #0
   241ec:	0a000063 	beq	24380 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   241f0:	ebffd1ab 	bl	188a4 <CNetSubSystem::GetConfig()>
   241f4:	ebffedda 	bl	1f964 <CNetConfig::GetDNSServer() const>
   241f8:	ebffeeec 	bl	1fdb0 <CIPAddress::Get() const>
   241fc:	e1a01000 	mov	r1, r0
   24200:	e28d0010 	add	r0, sp, #16
   24204:	ebffeec4 	bl	1fd1c <CIPAddress::CIPAddress(unsigned char const*)>
   24208:	e28d0010 	add	r0, sp, #16
   2420c:	ebffef0b 	bl	1fe40 <CIPAddress::IsNull() const>
   24210:	e2506000 	subs	r6, r0, #0
   24214:	0a000006 	beq	24234 <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   24218:	e3a06000 	mov	r6, #0
   2421c:	e28d0010 	add	r0, sp, #16
   24220:	ebffee39 	bl	1fb0c <CIPAddress::~CIPAddress()>
   24224:	e1a00006 	mov	r0, r6
   24228:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   2422c:	e28dd00c 	add	sp, sp, #12
   24230:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24234:	e5941000 	ldr	r1, [r4]
   24238:	e3a02011 	mov	r2, #17
   2423c:	e28d0028 	add	r0, sp, #40	; 0x28
   24240:	ebfffe41 	bl	23b4c <CSocket::CSocket(CNetSubSystem*, int)>
   24244:	e28d0028 	add	r0, sp, #40	; 0x28
   24248:	e3a02035 	mov	r2, #53	; 0x35
   2424c:	e28d1010 	add	r1, sp, #16
   24250:	ebfffca0 	bl	234d8 <CSocket::Connect(CIPAddress&, unsigned short)>
   24254:	e3500000 	cmp	r0, #0
   24258:	1a000038 	bne	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   2425c:	e28d5f72 	add	r5, sp, #456	; 0x1c8
   24260:	e3a02c02 	mov	r2, #512	; 0x200
   24264:	e1a01006 	mov	r1, r6
   24268:	e1a00005 	mov	r0, r5
   2426c:	eb001c6d 	bl	2b428 <memset>
   24270:	e3093080 	movw	r3, #36992	; 0x9080
   24274:	e3403003 	movt	r3, #3
   24278:	e1a01007 	mov	r1, r7
   2427c:	e3a02001 	mov	r2, #1
   24280:	e3a0cc01 	mov	ip, #256	; 0x100
   24284:	e1c520b2 	strh	r2, [r5, #2]
   24288:	e1d380b0 	ldrh	r8, [r3]
   2428c:	e3a020ff 	mov	r2, #255	; 0xff
   24290:	e1c5c0b4 	strh	ip, [r5, #4]
   24294:	e28d00c8 	add	r0, sp, #200	; 0xc8
   24298:	e288c001 	add	ip, r8, #1
   2429c:	e6bf8fb8 	rev16	r8, r8
   242a0:	e1c580b0 	strh	r8, [r5]
   242a4:	e1c3c0b0 	strh	ip, [r3]
   242a8:	e6ff3078 	uxth	r3, r8
   242ac:	e58d3004 	str	r3, [sp, #4]
   242b0:	eb001d21 	bl	2b73c <strncpy>
   242b4:	e28d00c8 	add	r0, sp, #200	; 0xc8
   242b8:	e28d2008 	add	r2, sp, #8
   242bc:	e30f1c34 	movw	r1, #64564	; 0xfc34
   242c0:	e3401002 	movt	r1, #2
   242c4:	e5cd61c7 	strb	r6, [sp, #455]	; 0x1c7
   242c8:	eb001d68 	bl	2b870 <strtok_r>
   242cc:	e2508000 	subs	r8, r0, #0
   242d0:	0a000030 	beq	24398 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1e0>
   242d4:	e30f7c34 	movw	r7, #64564	; 0xfc34
   242d8:	e3407002 	movt	r7, #2
   242dc:	e28dbf75 	add	fp, sp, #468	; 0x1d4
   242e0:	ea000011 	b	2432c <CDNSClient::Resolve(char const*, CIPAddress*)+0x174>
   242e4:	e04b3005 	sub	r3, fp, r5
   242e8:	e2802002 	add	r2, r0, #2
   242ec:	e2633c02 	rsb	r3, r3, #512	; 0x200
   242f0:	e1a09005 	mov	r9, r5
   242f4:	e1520003 	cmp	r2, r3
   242f8:	aa000010 	bge	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   242fc:	e28ba001 	add	sl, fp, #1
   24300:	e5cb0000 	strb	r0, [fp]
   24304:	e1a01008 	mov	r1, r8
   24308:	e1a0000a 	mov	r0, sl
   2430c:	eb001cff 	bl	2b710 <strcpy>
   24310:	e28d2008 	add	r2, sp, #8
   24314:	e1a01007 	mov	r1, r7
   24318:	e3a00000 	mov	r0, #0
   2431c:	eb001d53 	bl	2b870 <strtok_r>
   24320:	e08ab004 	add	fp, sl, r4
   24324:	e2508000 	subs	r8, r0, #0
   24328:	0a00001c 	beq	243a0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1e8>
   2432c:	e1a00008 	mov	r0, r8
   24330:	eb001c8c 	bl	2b568 <strlen>
   24334:	e1a04000 	mov	r4, r0
   24338:	e35000ff 	cmp	r0, #255	; 0xff
   2433c:	9affffe8 	bls	242e4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x12c>
   24340:	e28d0028 	add	r0, sp, #40	; 0x28
   24344:	ebfffcd6 	bl	236a4 <CSocket::~CSocket()>
   24348:	eaffffb3 	b	2421c <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   2434c:	ebffff53 	bl	240a0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   24350:	e2506000 	subs	r6, r0, #0
   24354:	0affffa2 	beq	241e4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   24358:	e1a00006 	mov	r0, r6
   2435c:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   24360:	e28dd00c 	add	sp, sp, #12
   24364:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24368:	e30617e8 	movw	r1, #26600	; 0x67e8
   2436c:	e3401003 	movt	r1, #3
   24370:	e3060824 	movw	r0, #26660	; 0x6824
   24374:	e3400003 	movt	r0, #3
   24378:	e3a02060 	mov	r2, #96	; 0x60
   2437c:	eb0002fc 	bl	24f74 <assertion_failed>
   24380:	e30617e8 	movw	r1, #26600	; 0x67e8
   24384:	e3401003 	movt	r1, #3
   24388:	e305002c 	movw	r0, #20524	; 0x502c
   2438c:	e3400003 	movt	r0, #3
   24390:	e3a0206a 	mov	r2, #106	; 0x6a
   24394:	eb0002f6 	bl	24f74 <assertion_failed>
   24398:	e1a09005 	mov	r9, r5
   2439c:	e28dbf75 	add	fp, sp, #468	; 0x1d4
   243a0:	e28b0001 	add	r0, fp, #1
   243a4:	e3a03c01 	mov	r3, #256	; 0x100
   243a8:	e3403100 	movt	r3, #256	; 0x100
   243ac:	e58d300c 	str	r3, [sp, #12]
   243b0:	e0403009 	sub	r3, r0, r9
   243b4:	e3a02000 	mov	r2, #0
   243b8:	e2633c02 	rsb	r3, r3, #512	; 0x200
   243bc:	e5cb2000 	strb	r2, [fp]
   243c0:	e3530003 	cmp	r3, #3
   243c4:	daffffdd 	ble	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   243c8:	e28bb005 	add	fp, fp, #5
   243cc:	e3a02004 	mov	r2, #4
   243d0:	e28d100c 	add	r1, sp, #12
   243d4:	e04b9009 	sub	r9, fp, r9
   243d8:	eb001dba 	bl	2bac8 <memcpy>
   243dc:	e3590c02 	cmp	r9, #512	; 0x200
   243e0:	ca000020 	bgt	24468 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2b0>
   243e4:	e3a07003 	mov	r7, #3
   243e8:	e28dbff2 	add	fp, sp, #968	; 0x3c8
   243ec:	e3a03000 	mov	r3, #0
   243f0:	e1a02009 	mov	r2, r9
   243f4:	e1a01005 	mov	r1, r5
   243f8:	e28d0028 	add	r0, sp, #40	; 0x28
   243fc:	ebfffd31 	bl	238c8 <CSocket::Send(void const*, unsigned int, int)>
   24400:	e1500009 	cmp	r0, r9
   24404:	1affffcd 	bne	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   24408:	eb000289 	bl	24e34 <CScheduler::Get()>
   2440c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   24410:	eb000261 	bl	24d9c <CScheduler::MsSleep(unsigned int)>
   24414:	e3a03040 	mov	r3, #64	; 0x40
   24418:	e3a02c02 	mov	r2, #512	; 0x200
   2441c:	e1a0100b 	mov	r1, fp
   24420:	e28d0028 	add	r0, sp, #40	; 0x28
   24424:	ebfffd46 	bl	23944 <CSocket::Receive(void*, unsigned int, int)>
   24428:	e1a04000 	mov	r4, r0
   2442c:	e3500c02 	cmp	r0, #512	; 0x200
   24430:	aa000006 	bge	24450 <CDNSClient::Resolve(char const*, CIPAddress*)+0x298>
   24434:	e3500000 	cmp	r0, #0
   24438:	baffffc0 	blt	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   2443c:	e3500019 	cmp	r0, #25
   24440:	ca00000e 	bgt	24480 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c8>
   24444:	e2577001 	subs	r7, r7, #1
   24448:	1affffe7 	bne	243ec <CDNSClient::Resolve(char const*, CIPAddress*)+0x234>
   2444c:	eaffffbb 	b	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   24450:	e30617e8 	movw	r1, #26600	; 0x67e8
   24454:	e3401003 	movt	r1, #3
   24458:	e3060854 	movw	r0, #26708	; 0x6854
   2445c:	e3400003 	movt	r0, #3
   24460:	e3a020ba 	mov	r2, #186	; 0xba
   24464:	eb0002c2 	bl	24f74 <assertion_failed>
   24468:	e30617e8 	movw	r1, #26600	; 0x67e8
   2446c:	e3401003 	movt	r1, #3
   24470:	e3060834 	movw	r0, #26676	; 0x6834
   24474:	e3400003 	movt	r0, #3
   24478:	e3a020a9 	mov	r2, #169	; 0xa9
   2447c:	eb0002bc 	bl	24f74 <assertion_failed>
   24480:	e1db30b0 	ldrh	r3, [fp]
   24484:	e59d2004 	ldr	r2, [sp, #4]
   24488:	e1530002 	cmp	r3, r2
   2448c:	1affffab 	bne	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   24490:	e1db20b2 	ldrh	r2, [fp, #2]
   24494:	e3003ffa 	movw	r3, #4090	; 0xffa
   24498:	e0033002 	and	r3, r3, r2
   2449c:	e3530080 	cmp	r3, #128	; 0x80
   244a0:	1affffa6 	bne	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   244a4:	e1db30b4 	ldrh	r3, [fp, #4]
   244a8:	e3530c01 	cmp	r3, #256	; 0x100
   244ac:	1affffa3 	bne	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   244b0:	e1db30b6 	ldrh	r3, [fp, #6]
   244b4:	e3530000 	cmp	r3, #0
   244b8:	0affffa0 	beq	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   244bc:	e28d3ff5 	add	r3, sp, #980	; 0x3d4
   244c0:	ea000004 	b	244d8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x320>
   244c4:	e2822001 	add	r2, r2, #1
   244c8:	e0833002 	add	r3, r3, r2
   244cc:	e043200b 	sub	r2, r3, fp
   244d0:	e1520004 	cmp	r2, r4
   244d4:	aaffff99 	bge	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   244d8:	e5d32000 	ldrb	r2, [r3]
   244dc:	e3520000 	cmp	r2, #0
   244e0:	1afffff7 	bne	244c4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x30c>
   244e4:	e2833005 	add	r3, r3, #5
   244e8:	e043200b 	sub	r2, r3, fp
   244ec:	e1520004 	cmp	r2, r4
   244f0:	aaffff92 	bge	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   244f4:	e244700e 	sub	r7, r4, #14
   244f8:	e5d32000 	ldrb	r2, [r3]
   244fc:	e2835001 	add	r5, r3, #1
   24500:	e20220c0 	and	r2, r2, #192	; 0xc0
   24504:	e35200c0 	cmp	r2, #192	; 0xc0
   24508:	02835002 	addeq	r5, r3, #2
   2450c:	0a000007 	beq	24530 <CDNSClient::Resolve(char const*, CIPAddress*)+0x378>
   24510:	e045300b 	sub	r3, r5, fp
   24514:	e1530004 	cmp	r3, r4
   24518:	aaffff88 	bge	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   2451c:	e5d53000 	ldrb	r3, [r5]
   24520:	e2855001 	add	r5, r5, #1
   24524:	e3530000 	cmp	r3, #0
   24528:	10855003 	addne	r5, r5, r3
   2452c:	1afffff7 	bne	24510 <CDNSClient::Resolve(char const*, CIPAddress*)+0x358>
   24530:	e045300b 	sub	r3, r5, fp
   24534:	e1530007 	cmp	r3, r7
   24538:	caffff80 	bgt	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   2453c:	e3a0200e 	mov	r2, #14
   24540:	e1a01005 	mov	r1, r5
   24544:	e28d0018 	add	r0, sp, #24
   24548:	eb001d5e 	bl	2bac8 <memcpy>
   2454c:	e1dd31b8 	ldrh	r3, [sp, #24]
   24550:	e3530c01 	cmp	r3, #256	; 0x100
   24554:	0a000008 	beq	2457c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3c4>
   24558:	e1dd32b0 	ldrh	r3, [sp, #32]
   2455c:	e6bf3fb3 	rev16	r3, r3
   24560:	e6ff3073 	uxth	r3, r3
   24564:	e283300a 	add	r3, r3, #10
   24568:	e0853003 	add	r3, r5, r3
   2456c:	e043200b 	sub	r2, r3, fp
   24570:	e1520004 	cmp	r2, r4
   24574:	baffffdf 	blt	244f8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x340>
   24578:	eaffff70 	b	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   2457c:	e1dd21ba 	ldrh	r2, [sp, #26]
   24580:	e1dd32b0 	ldrh	r3, [sp, #32]
   24584:	e3520c01 	cmp	r2, #256	; 0x100
   24588:	1afffff2 	bne	24558 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3a0>
   2458c:	e3530b01 	cmp	r3, #1024	; 0x400
   24590:	1afffff0 	bne	24558 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3a0>
   24594:	e59d3000 	ldr	r3, [sp]
   24598:	e3530000 	cmp	r3, #0
   2459c:	0a000004 	beq	245b4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3fc>
   245a0:	e28d1022 	add	r1, sp, #34	; 0x22
   245a4:	e59d0000 	ldr	r0, [sp]
   245a8:	e3a06001 	mov	r6, #1
   245ac:	ebffedca 	bl	1fcdc <CIPAddress::Set(unsigned char const*)>
   245b0:	eaffff62 	b	24340 <CDNSClient::Resolve(char const*, CIPAddress*)+0x188>
   245b4:	e30617e8 	movw	r1, #26600	; 0x67e8
   245b8:	e3401003 	movt	r1, #3
   245bc:	e3060808 	movw	r0, #26632	; 0x6808
   245c0:	e3400003 	movt	r0, #3
   245c4:	e3002111 	movw	r2, #273	; 0x111
   245c8:	eb000269 	bl	24f74 <assertion_failed>

000245cc <CTask::Run()>:
   245cc:	e306188c 	movw	r1, #26764	; 0x688c
   245d0:	e3401003 	movt	r1, #3
   245d4:	e3010398 	movw	r0, #5016	; 0x1398
   245d8:	e3400003 	movt	r0, #3
   245dc:	e92d4010 	push	{r4, lr}
   245e0:	e3a0203b 	mov	r2, #59	; 0x3b
   245e4:	eb000262 	bl	24f74 <assertion_failed>

000245e8 <CTask::TaskEntry(void*)>:
   245e8:	e92d4010 	push	{r4, lr}
   245ec:	e2504000 	subs	r4, r0, #0
   245f0:	0a00000e 	beq	24630 <CTask::TaskEntry(void*)+0x48>
   245f4:	e5943000 	ldr	r3, [r4]
   245f8:	e5933008 	ldr	r3, [r3, #8]
   245fc:	e12fff33 	blx	r3
   24600:	e3a03003 	mov	r3, #3
   24604:	e28400d0 	add	r0, r4, #208	; 0xd0
   24608:	e5c43004 	strb	r3, [r4, #4]
   2460c:	eb000230 	bl	24ed4 <CSynchronizationEvent::Set()>
   24610:	eb000207 	bl	24e34 <CScheduler::Get()>
   24614:	eb00016d 	bl	24bd0 <CScheduler::Yield()>
   24618:	e306188c 	movw	r1, #26764	; 0x688c
   2461c:	e3401003 	movt	r1, #3
   24620:	e3010398 	movw	r0, #5016	; 0x1398
   24624:	e3400003 	movt	r0, #3
   24628:	e3a02088 	mov	r2, #136	; 0x88
   2462c:	eb000250 	bl	24f74 <assertion_failed>
   24630:	e306188c 	movw	r1, #26764	; 0x688c
   24634:	e3401003 	movt	r1, #3
   24638:	e30007a4 	movw	r0, #1956	; 0x7a4
   2463c:	e3400003 	movt	r0, #3
   24640:	e3a02080 	mov	r2, #128	; 0x80
   24644:	eb00024a 	bl	24f74 <assertion_failed>

00024648 <CTask::~CTask()>:
   24648:	e5d03004 	ldrb	r3, [r0, #4]
   2464c:	e59f2058 	ldr	r2, [pc, #88]	; 246ac <CTask::~CTask()+0x64>
   24650:	e92d4010 	push	{r4, lr}
   24654:	e3530003 	cmp	r3, #3
   24658:	e5802000 	str	r2, [r0]
   2465c:	1a00000c 	bne	24694 <CTask::~CTask()+0x4c>
   24660:	e1a04000 	mov	r4, r0
   24664:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   24668:	e3a03004 	mov	r3, #4
   2466c:	e3500000 	cmp	r0, #0
   24670:	e5c43004 	strb	r3, [r4, #4]
   24674:	0a000000 	beq	2467c <CTask::~CTask()+0x34>
   24678:	eb001e29 	bl	2bf24 <operator delete[](void*)>
   2467c:	e3a03000 	mov	r3, #0
   24680:	e28400d0 	add	r0, r4, #208	; 0xd0
   24684:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   24688:	eb000202 	bl	24e98 <CSynchronizationEvent::~CSynchronizationEvent()>
   2468c:	e1a00004 	mov	r0, r4
   24690:	e8bd8010 	pop	{r4, pc}
   24694:	e306188c 	movw	r1, #26764	; 0x688c
   24698:	e3401003 	movt	r1, #3
   2469c:	e3060898 	movw	r0, #26776	; 0x6898
   246a0:	e3400003 	movt	r0, #3
   246a4:	e3a02032 	mov	r2, #50	; 0x32
   246a8:	eb000231 	bl	24f74 <assertion_failed>
   246ac:	00036880 	.word	0x00036880

000246b0 <CTask::~CTask()>:
   246b0:	e92d4010 	push	{r4, lr}
   246b4:	e1a04000 	mov	r4, r0
   246b8:	ebffffe2 	bl	24648 <CTask::~CTask()>
   246bc:	e1a00004 	mov	r0, r4
   246c0:	e3a010d8 	mov	r1, #216	; 0xd8
   246c4:	eb001e17 	bl	2bf28 <operator delete(void*, unsigned int)>
   246c8:	e1a00004 	mov	r0, r4
   246cc:	e8bd8010 	pop	{r4, pc}

000246d0 <CTask::Terminate()>:
   246d0:	e1a03000 	mov	r3, r0
   246d4:	e3a02003 	mov	r2, #3
   246d8:	e92d4010 	push	{r4, lr}
   246dc:	e28000d0 	add	r0, r0, #208	; 0xd0
   246e0:	e5c32004 	strb	r2, [r3, #4]
   246e4:	eb0001fa 	bl	24ed4 <CSynchronizationEvent::Set()>
   246e8:	eb0001d1 	bl	24e34 <CScheduler::Get()>
   246ec:	eb000137 	bl	24bd0 <CScheduler::Yield()>
   246f0:	e306188c 	movw	r1, #26764	; 0x688c
   246f4:	e3401003 	movt	r1, #3
   246f8:	e3010398 	movw	r0, #5016	; 0x1398
   246fc:	e3400003 	movt	r0, #3
   24700:	e3a02044 	mov	r2, #68	; 0x44
   24704:	eb00021a 	bl	24f74 <assertion_failed>

00024708 <CTask::WaitForTermination()>:
   24708:	e28000d0 	add	r0, r0, #208	; 0xd0
   2470c:	ea0001fe 	b	24f0c <CSynchronizationEvent::Wait()>

00024710 <CTask::SetUserData(void*)>:
   24710:	e58010cc 	str	r1, [r0, #204]	; 0xcc
   24714:	e12fff1e 	bx	lr

00024718 <CTask::GetUserData()>:
   24718:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   2471c:	e12fff1e 	bx	lr

00024720 <CTask::InitializeRegs()>:
   24720:	e92d4010 	push	{r4, lr}
   24724:	e1a04000 	mov	r4, r0
   24728:	e3a020b8 	mov	r2, #184	; 0xb8
   2472c:	e280000c 	add	r0, r0, #12
   24730:	e3a01000 	mov	r1, #0
   24734:	eb001b3b 	bl	2b428 <memset>
   24738:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   2473c:	e584400c 	str	r4, [r4, #12]
   24740:	e3530000 	cmp	r3, #0
   24744:	0a000009 	beq	24770 <CTask::InitializeRegs()+0x50>
   24748:	e59410c4 	ldr	r1, [r4, #196]	; 0xc4
   2474c:	e30425e8 	movw	r2, #17896	; 0x45e8
   24750:	e3402002 	movt	r2, #2
   24754:	e5842040 	str	r2, [r4, #64]	; 0x40
   24758:	e0833001 	add	r3, r3, r1
   2475c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   24760:	e584303c 	str	r3, [r4, #60]	; 0x3c
   24764:	e3a03402 	mov	r3, #33554432	; 0x2000000
   24768:	e1c421f0 	strd	r2, [r4, #16]
   2476c:	e8bd8010 	pop	{r4, pc}
   24770:	e306188c 	movw	r1, #26764	; 0x688c
   24774:	e3401003 	movt	r1, #3
   24778:	e30608b8 	movw	r0, #26808	; 0x68b8
   2477c:	e3400003 	movt	r0, #3
   24780:	e3a0205e 	mov	r2, #94	; 0x5e
   24784:	eb0001fa 	bl	24f74 <assertion_failed>

00024788 <CTask::CTask(unsigned int)>:
   24788:	e92d4010 	push	{r4, lr}
   2478c:	e1a04000 	mov	r4, r0
   24790:	e3a03000 	mov	r3, #0
   24794:	e59f208c 	ldr	r2, [pc, #140]	; 24828 <CTask::CTask(unsigned int)+0xa0>
   24798:	e28000d0 	add	r0, r0, #208	; 0xd0
   2479c:	e58410c4 	str	r1, [r4, #196]	; 0xc4
   247a0:	e1a01003 	mov	r1, r3
   247a4:	e5842000 	str	r2, [r4]
   247a8:	e5c43004 	strb	r3, [r4, #4]
   247ac:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   247b0:	e58430cc 	str	r3, [r4, #204]	; 0xcc
   247b4:	eb0001b3 	bl	24e88 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   247b8:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   247bc:	e3500000 	cmp	r0, #0
   247c0:	0a000007 	beq	247e4 <CTask::CTask(unsigned int)+0x5c>
   247c4:	e3500b01 	cmp	r0, #1024	; 0x400
   247c8:	3a00000a 	bcc	247f8 <CTask::CTask(unsigned int)+0x70>
   247cc:	e3100003 	tst	r0, #3
   247d0:	1a00000e 	bne	24810 <CTask::CTask(unsigned int)+0x88>
   247d4:	eb001dcb 	bl	2bf08 <operator new[](unsigned int)>
   247d8:	e58400c8 	str	r0, [r4, #200]	; 0xc8
   247dc:	e1a00004 	mov	r0, r4
   247e0:	ebffffce 	bl	24720 <CTask::InitializeRegs()>
   247e4:	eb000192 	bl	24e34 <CScheduler::Get()>
   247e8:	e1a01004 	mov	r1, r4
   247ec:	eb000057 	bl	24950 <CScheduler::AddTask(CTask*)>
   247f0:	e1a00004 	mov	r0, r4
   247f4:	e8bd8010 	pop	{r4, pc}
   247f8:	e306188c 	movw	r1, #26764	; 0x688c
   247fc:	e3401003 	movt	r1, #3
   24800:	e30608c8 	movw	r0, #26824	; 0x68c8
   24804:	e3400003 	movt	r0, #3
   24808:	e3a02021 	mov	r2, #33	; 0x21
   2480c:	eb0001d8 	bl	24f74 <assertion_failed>
   24810:	e306188c 	movw	r1, #26764	; 0x688c
   24814:	e3401003 	movt	r1, #3
   24818:	e30608e0 	movw	r0, #26848	; 0x68e0
   2481c:	e3400003 	movt	r0, #3
   24820:	e3a02023 	mov	r2, #35	; 0x23
   24824:	eb0001d2 	bl	24f74 <assertion_failed>
   24828:	00036880 	.word	0x00036880

0002482c <CScheduler::CScheduler()>:
   2482c:	e3092414 	movw	r2, #37908	; 0x9414
   24830:	e3402003 	movt	r2, #3
   24834:	e92d4070 	push	{r4, r5, r6, lr}
   24838:	e3a03000 	mov	r3, #0
   2483c:	e5925000 	ldr	r5, [r2]
   24840:	e5803050 	str	r3, [r0, #80]	; 0x50
   24844:	e1550003 	cmp	r5, r3
   24848:	e5803054 	str	r3, [r0, #84]	; 0x54
   2484c:	e5803058 	str	r3, [r0, #88]	; 0x58
   24850:	e580305c 	str	r3, [r0, #92]	; 0x5c
   24854:	e5803060 	str	r3, [r0, #96]	; 0x60
   24858:	1a000009 	bne	24884 <CScheduler::CScheduler()+0x58>
   2485c:	e1a04000 	mov	r4, r0
   24860:	e3a000d8 	mov	r0, #216	; 0xd8
   24864:	e5824000 	str	r4, [r2]
   24868:	eb001da0 	bl	2bef0 <operator new(unsigned int)>
   2486c:	e1a01005 	mov	r1, r5
   24870:	e1a06000 	mov	r6, r0
   24874:	ebffffc3 	bl	24788 <CTask::CTask(unsigned int)>
   24878:	e5846054 	str	r6, [r4, #84]	; 0x54
   2487c:	e1a00004 	mov	r0, r4
   24880:	e8bd8070 	pop	{r4, r5, r6, pc}
   24884:	e3061900 	movw	r1, #26880	; 0x6900
   24888:	e3401003 	movt	r1, #3
   2488c:	e3040fc4 	movw	r0, #20420	; 0x4fc4
   24890:	e3400003 	movt	r0, #3
   24894:	e3a02024 	mov	r2, #36	; 0x24
   24898:	eb0001b5 	bl	24f74 <assertion_failed>

0002489c <CScheduler::~CScheduler()>:
   2489c:	e3093414 	movw	r3, #37908	; 0x9414
   248a0:	e3403003 	movt	r3, #3
   248a4:	e3a02000 	mov	r2, #0
   248a8:	e5832000 	str	r2, [r3]
   248ac:	e12fff1e 	bx	lr

000248b0 <CScheduler::GetCurrentTask()>:
   248b0:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   248b4:	e12fff1e 	bx	lr

000248b8 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   248b8:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   248bc:	e92d4010 	push	{r4, lr}
   248c0:	e3530000 	cmp	r3, #0
   248c4:	1a000008 	bne	248ec <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x34>
   248c8:	e3510000 	cmp	r1, #0
   248cc:	e580105c 	str	r1, [r0, #92]	; 0x5c
   248d0:	18bd8010 	popne	{r4, pc}
   248d4:	e3061900 	movw	r1, #26880	; 0x6900
   248d8:	e3401003 	movt	r1, #3
   248dc:	e306092c 	movw	r0, #26924	; 0x692c
   248e0:	e3400003 	movt	r0, #3
   248e4:	e3a02080 	mov	r2, #128	; 0x80
   248e8:	eb0001a1 	bl	24f74 <assertion_failed>
   248ec:	e3061900 	movw	r1, #26880	; 0x6900
   248f0:	e3401003 	movt	r1, #3
   248f4:	e3060910 	movw	r0, #26896	; 0x6910
   248f8:	e3400003 	movt	r0, #3
   248fc:	e3a0207e 	mov	r2, #126	; 0x7e
   24900:	eb00019b 	bl	24f74 <assertion_failed>

00024904 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   24904:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   24908:	e92d4010 	push	{r4, lr}
   2490c:	e3530000 	cmp	r3, #0
   24910:	1a000008 	bne	24938 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x34>
   24914:	e3510000 	cmp	r1, #0
   24918:	e5801060 	str	r1, [r0, #96]	; 0x60
   2491c:	18bd8010 	popne	{r4, pc}
   24920:	e3061900 	movw	r1, #26880	; 0x6900
   24924:	e3401003 	movt	r1, #3
   24928:	e3060968 	movw	r0, #26984	; 0x6968
   2492c:	e3400003 	movt	r0, #3
   24930:	e3a02087 	mov	r2, #135	; 0x87
   24934:	eb00018e 	bl	24f74 <assertion_failed>
   24938:	e3061900 	movw	r1, #26880	; 0x6900
   2493c:	e3401003 	movt	r1, #3
   24940:	e3060948 	movw	r0, #26952	; 0x6948
   24944:	e3400003 	movt	r0, #3
   24948:	e3a02085 	mov	r2, #133	; 0x85
   2494c:	eb000188 	bl	24f74 <assertion_failed>

00024950 <CScheduler::AddTask(CTask*)>:
   24950:	e92d4070 	push	{r4, r5, r6, lr}
   24954:	e2515000 	subs	r5, r1, #0
   24958:	0a00001d 	beq	249d4 <CScheduler::AddTask(CTask*)+0x84>
   2495c:	e1a04000 	mov	r4, r0
   24960:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   24964:	e3500000 	cmp	r0, #0
   24968:	0a00001f 	beq	249ec <CScheduler::AddTask(CTask*)+0x9c>
   2496c:	e5943000 	ldr	r3, [r4]
   24970:	e3530000 	cmp	r3, #0
   24974:	11a02004 	movne	r2, r4
   24978:	13a03000 	movne	r3, #0
   2497c:	1a000003 	bne	24990 <CScheduler::AddTask(CTask*)+0x40>
   24980:	ea000011 	b	249cc <CScheduler::AddTask(CTask*)+0x7c>
   24984:	e5b21004 	ldr	r1, [r2, #4]!
   24988:	e3510000 	cmp	r1, #0
   2498c:	0a00000e 	beq	249cc <CScheduler::AddTask(CTask*)+0x7c>
   24990:	e2833001 	add	r3, r3, #1
   24994:	e1500003 	cmp	r0, r3
   24998:	1afffff9 	bne	24984 <CScheduler::AddTask(CTask*)+0x34>
   2499c:	e3530014 	cmp	r3, #20
   249a0:	1a000007 	bne	249c4 <CScheduler::AddTask(CTask*)+0x74>
   249a4:	eb000717 	bl	26608 <CLogger::Get()>
   249a8:	e3063994 	movw	r3, #27028	; 0x6994
   249ac:	e3403003 	movt	r3, #3
   249b0:	e30618f8 	movw	r1, #26872	; 0x68f8
   249b4:	e3401003 	movt	r1, #3
   249b8:	e3a02000 	mov	r2, #0
   249bc:	eb000652 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   249c0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   249c4:	e2832001 	add	r2, r3, #1
   249c8:	e5842050 	str	r2, [r4, #80]	; 0x50
   249cc:	e7845103 	str	r5, [r4, r3, lsl #2]
   249d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   249d4:	e3061900 	movw	r1, #26880	; 0x6900
   249d8:	e3401003 	movt	r1, #3
   249dc:	e3060988 	movw	r0, #27016	; 0x6988
   249e0:	e3400003 	movt	r0, #3
   249e4:	e3a0208c 	mov	r2, #140	; 0x8c
   249e8:	eb000161 	bl	24f74 <assertion_failed>
   249ec:	e1a03000 	mov	r3, r0
   249f0:	eafffff3 	b	249c4 <CScheduler::AddTask(CTask*)+0x74>

000249f4 <CScheduler::RemoveTask(CTask*)>:
   249f4:	e92d4010 	push	{r4, lr}
   249f8:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   249fc:	e35e0000 	cmp	lr, #0
   24a00:	0a000012 	beq	24a50 <CScheduler::RemoveTask(CTask*)+0x5c>
   24a04:	e5903000 	ldr	r3, [r0]
   24a08:	e1510003 	cmp	r1, r3
   24a0c:	11a02000 	movne	r2, r0
   24a10:	13a03000 	movne	r3, #0
   24a14:	0a00000b 	beq	24a48 <CScheduler::RemoveTask(CTask*)+0x54>
   24a18:	e2833001 	add	r3, r3, #1
   24a1c:	e15e0003 	cmp	lr, r3
   24a20:	0a00000a 	beq	24a50 <CScheduler::RemoveTask(CTask*)+0x5c>
   24a24:	e5b2c004 	ldr	ip, [r2, #4]!
   24a28:	e15c0001 	cmp	ip, r1
   24a2c:	1afffff9 	bne	24a18 <CScheduler::RemoveTask(CTask*)+0x24>
   24a30:	e24ee001 	sub	lr, lr, #1
   24a34:	e3a02000 	mov	r2, #0
   24a38:	e15e0003 	cmp	lr, r3
   24a3c:	e7802103 	str	r2, [r0, r3, lsl #2]
   24a40:	05803050 	streq	r3, [r0, #80]	; 0x50
   24a44:	e8bd8010 	pop	{r4, pc}
   24a48:	e3a03000 	mov	r3, #0
   24a4c:	eafffff7 	b	24a30 <CScheduler::RemoveTask(CTask*)+0x3c>
   24a50:	e3061900 	movw	r1, #26880	; 0x6900
   24a54:	e3401003 	movt	r1, #3
   24a58:	e3010398 	movw	r0, #5016	; 0x1398
   24a5c:	e3400003 	movt	r0, #3
   24a60:	e3a020b2 	mov	r2, #178	; 0xb2
   24a64:	eb000142 	bl	24f74 <assertion_failed>

00024a68 <CScheduler::WakeTask(CTask**)>:
   24a68:	e92d4010 	push	{r4, lr}
   24a6c:	e3510000 	cmp	r1, #0
   24a70:	0a000009 	beq	24a9c <CScheduler::WakeTask(CTask**)+0x34>
   24a74:	e5913000 	ldr	r3, [r1]
   24a78:	e3a02000 	mov	r2, #0
   24a7c:	e5812000 	str	r2, [r1]
   24a80:	e1530002 	cmp	r3, r2
   24a84:	0a00000a 	beq	24ab4 <CScheduler::WakeTask(CTask**)+0x4c>
   24a88:	e5d31004 	ldrb	r1, [r3, #4]
   24a8c:	e3510001 	cmp	r1, #1
   24a90:	1a00000d 	bne	24acc <CScheduler::WakeTask(CTask**)+0x64>
   24a94:	e5c32004 	strb	r2, [r3, #4]
   24a98:	e8bd8010 	pop	{r4, pc}
   24a9c:	e3061900 	movw	r1, #26880	; 0x6900
   24aa0:	e3401003 	movt	r1, #3
   24aa4:	e30609b4 	movw	r0, #27060	; 0x69b4
   24aa8:	e3400003 	movt	r0, #3
   24aac:	e3a020c3 	mov	r2, #195	; 0xc3
   24ab0:	eb00012f 	bl	24f74 <assertion_failed>
   24ab4:	e3061900 	movw	r1, #26880	; 0x6900
   24ab8:	e3401003 	movt	r1, #3
   24abc:	e3060988 	movw	r0, #27016	; 0x6988
   24ac0:	e3400003 	movt	r0, #3
   24ac4:	e3a020cf 	mov	r2, #207	; 0xcf
   24ac8:	eb000129 	bl	24f74 <assertion_failed>
   24acc:	e3061900 	movw	r1, #26880	; 0x6900
   24ad0:	e3401003 	movt	r1, #3
   24ad4:	e30609c0 	movw	r0, #27072	; 0x69c0
   24ad8:	e3400003 	movt	r0, #3
   24adc:	e3a020d0 	mov	r2, #208	; 0xd0
   24ae0:	eb000123 	bl	24f74 <assertion_failed>

00024ae4 <CScheduler::GetNextTask()>:
   24ae4:	e92d4070 	push	{r4, r5, r6, lr}
   24ae8:	e1a06000 	mov	r6, r0
   24aec:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   24af0:	e3540014 	cmp	r4, #20
   24af4:	23a04000 	movcs	r4, #0
   24af8:	eb001a3e 	bl	2b3f8 <CTimer::Get()>
   24afc:	eb00176f 	bl	2a8c0 <CTimer::GetClockTicks()>
   24b00:	e5963050 	ldr	r3, [r6, #80]	; 0x50
   24b04:	e3530000 	cmp	r3, #0
   24b08:	0a000024 	beq	24ba0 <CScheduler::GetNextTask()+0xbc>
   24b0c:	e3a01001 	mov	r1, #1
   24b10:	e2844001 	add	r4, r4, #1
   24b14:	e1540003 	cmp	r4, r3
   24b18:	23a04000 	movcs	r4, #0
   24b1c:	e7965104 	ldr	r5, [r6, r4, lsl #2]
   24b20:	e3550000 	cmp	r5, #0
   24b24:	0a00001a 	beq	24b94 <CScheduler::GetNextTask()+0xb0>
   24b28:	e5d52004 	ldrb	r2, [r5, #4]
   24b2c:	e3520003 	cmp	r2, #3
   24b30:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   24b34:	ea00001f 	b	24bb8 <CScheduler::GetNextTask()+0xd4>
   24b38:	00024b7c 	.word	0x00024b7c
   24b3c:	00024b94 	.word	0x00024b94
   24b40:	00024b84 	.word	0x00024b84
   24b44:	00024b48 	.word	0x00024b48
   24b48:	e5963060 	ldr	r3, [r6, #96]	; 0x60
   24b4c:	e3530000 	cmp	r3, #0
   24b50:	0a000001 	beq	24b5c <CScheduler::GetNextTask()+0x78>
   24b54:	e1a00005 	mov	r0, r5
   24b58:	e12fff33 	blx	r3
   24b5c:	e1a00006 	mov	r0, r6
   24b60:	e1a01005 	mov	r1, r5
   24b64:	ebffffa2 	bl	249f4 <CScheduler::RemoveTask(CTask*)>
   24b68:	e5953000 	ldr	r3, [r5]
   24b6c:	e1a00005 	mov	r0, r5
   24b70:	e3a04014 	mov	r4, #20
   24b74:	e5933004 	ldr	r3, [r3, #4]
   24b78:	e12fff33 	blx	r3
   24b7c:	e1a00004 	mov	r0, r4
   24b80:	e8bd8070 	pop	{r4, r5, r6, pc}
   24b84:	e5952008 	ldr	r2, [r5, #8]
   24b88:	e0422000 	sub	r2, r2, r0
   24b8c:	e3520000 	cmp	r2, #0
   24b90:	da000004 	ble	24ba8 <CScheduler::GetNextTask()+0xc4>
   24b94:	e2811001 	add	r1, r1, #1
   24b98:	e1510003 	cmp	r1, r3
   24b9c:	9affffdb 	bls	24b10 <CScheduler::GetNextTask()+0x2c>
   24ba0:	e3a04014 	mov	r4, #20
   24ba4:	eafffff4 	b	24b7c <CScheduler::GetNextTask()+0x98>
   24ba8:	e3a03000 	mov	r3, #0
   24bac:	e1a00004 	mov	r0, r4
   24bb0:	e5c53004 	strb	r3, [r5, #4]
   24bb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   24bb8:	e3061900 	movw	r1, #26880	; 0x6900
   24bbc:	e3401003 	movt	r1, #3
   24bc0:	e3010398 	movw	r0, #5016	; 0x1398
   24bc4:	e3400003 	movt	r0, #3
   24bc8:	e3002103 	movw	r2, #259	; 0x103
   24bcc:	eb0000e8 	bl	24f74 <assertion_failed>

00024bd0 <CScheduler::Yield()>:
   24bd0:	e92d4070 	push	{r4, r5, r6, lr}
   24bd4:	e1a04000 	mov	r4, r0
   24bd8:	e1a00004 	mov	r0, r4
   24bdc:	ebffffc0 	bl	24ae4 <CScheduler::GetNextTask()>
   24be0:	e3500014 	cmp	r0, #20
   24be4:	e5840058 	str	r0, [r4, #88]	; 0x58
   24be8:	1a000008 	bne	24c10 <CScheduler::Yield()+0x40>
   24bec:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   24bf0:	e3530000 	cmp	r3, #0
   24bf4:	1afffff7 	bne	24bd8 <CScheduler::Yield()+0x8>
   24bf8:	e3061900 	movw	r1, #26880	; 0x6900
   24bfc:	e3401003 	movt	r1, #3
   24c00:	e30609e8 	movw	r0, #27112	; 0x69e8
   24c04:	e3400003 	movt	r0, #3
   24c08:	e3a02037 	mov	r2, #55	; 0x37
   24c0c:	eb0000d8 	bl	24f74 <assertion_failed>
   24c10:	e3500013 	cmp	r0, #19
   24c14:	8a000014 	bhi	24c6c <CScheduler::Yield()+0x9c>
   24c18:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   24c1c:	e3500000 	cmp	r0, #0
   24c20:	0a000017 	beq	24c84 <CScheduler::Yield()+0xb4>
   24c24:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   24c28:	e1530000 	cmp	r3, r0
   24c2c:	08bd8070 	popeq	{r4, r5, r6, pc}
   24c30:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   24c34:	e283500c 	add	r5, r3, #12
   24c38:	e5840054 	str	r0, [r4, #84]	; 0x54
   24c3c:	e280400c 	add	r4, r0, #12
   24c40:	e3520000 	cmp	r2, #0
   24c44:	0a000000 	beq	24c4c <CScheduler::Yield()+0x7c>
   24c48:	e12fff32 	blx	r2
   24c4c:	e3550000 	cmp	r5, #0
   24c50:	0a000011 	beq	24c9c <CScheduler::Yield()+0xcc>
   24c54:	e3540000 	cmp	r4, #0
   24c58:	0a000015 	beq	24cb4 <CScheduler::Yield()+0xe4>
   24c5c:	e1a01004 	mov	r1, r4
   24c60:	e1a00005 	mov	r0, r5
   24c64:	e8bd4070 	pop	{r4, r5, r6, lr}
   24c68:	ea00007d 	b	24e64 <TaskSwitch>
   24c6c:	e3061900 	movw	r1, #26880	; 0x6900
   24c70:	e3401003 	movt	r1, #3
   24c74:	e30609f8 	movw	r0, #27128	; 0x69f8
   24c78:	e3400003 	movt	r0, #3
   24c7c:	e3a0203a 	mov	r2, #58	; 0x3a
   24c80:	eb0000bb 	bl	24f74 <assertion_failed>
   24c84:	e3061900 	movw	r1, #26880	; 0x6900
   24c88:	e3401003 	movt	r1, #3
   24c8c:	e3060a10 	movw	r0, #27152	; 0x6a10
   24c90:	e3400003 	movt	r0, #3
   24c94:	e3a0203c 	mov	r2, #60	; 0x3c
   24c98:	eb0000b5 	bl	24f74 <assertion_failed>
   24c9c:	e3061900 	movw	r1, #26880	; 0x6900
   24ca0:	e3401003 	movt	r1, #3
   24ca4:	e3060a1c 	movw	r0, #27164	; 0x6a1c
   24ca8:	e3400003 	movt	r0, #3
   24cac:	e3a0204b 	mov	r2, #75	; 0x4b
   24cb0:	eb0000af 	bl	24f74 <assertion_failed>
   24cb4:	e3061900 	movw	r1, #26880	; 0x6900
   24cb8:	e3401003 	movt	r1, #3
   24cbc:	e3060a2c 	movw	r0, #27180	; 0x6a2c
   24cc0:	e3400003 	movt	r0, #3
   24cc4:	e3a0204c 	mov	r2, #76	; 0x4c
   24cc8:	eb0000a9 	bl	24f74 <assertion_failed>

00024ccc <CScheduler::usSleep(unsigned int)>:
   24ccc:	e92d4070 	push	{r4, r5, r6, lr}
   24cd0:	e2514000 	subs	r4, r1, #0
   24cd4:	08bd8070 	popeq	{r4, r5, r6, pc}
   24cd8:	e1a05000 	mov	r5, r0
   24cdc:	eb0019c5 	bl	2b3f8 <CTimer::Get()>
   24ce0:	eb0016f6 	bl	2a8c0 <CTimer::GetClockTicks()>
   24ce4:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   24ce8:	e3530000 	cmp	r3, #0
   24cec:	0a000009 	beq	24d18 <CScheduler::usSleep(unsigned int)+0x4c>
   24cf0:	e5d32004 	ldrb	r2, [r3, #4]
   24cf4:	e3520000 	cmp	r2, #0
   24cf8:	1a00000c 	bne	24d30 <CScheduler::usSleep(unsigned int)+0x64>
   24cfc:	e0841000 	add	r1, r4, r0
   24d00:	e3a02002 	mov	r2, #2
   24d04:	e1a00005 	mov	r0, r5
   24d08:	e5831008 	str	r1, [r3, #8]
   24d0c:	e5c32004 	strb	r2, [r3, #4]
   24d10:	e8bd4070 	pop	{r4, r5, r6, lr}
   24d14:	eaffffad 	b	24bd0 <CScheduler::Yield()>
   24d18:	e3061900 	movw	r1, #26880	; 0x6900
   24d1c:	e3401003 	movt	r1, #3
   24d20:	e3060a3c 	movw	r0, #27196	; 0x6a3c
   24d24:	e3400003 	movt	r0, #3
   24d28:	e3a0206e 	mov	r2, #110	; 0x6e
   24d2c:	eb000090 	bl	24f74 <assertion_failed>
   24d30:	e3061900 	movw	r1, #26880	; 0x6900
   24d34:	e3401003 	movt	r1, #3
   24d38:	e3060a4c 	movw	r0, #27212	; 0x6a4c
   24d3c:	e3400003 	movt	r0, #3
   24d40:	e3a0206f 	mov	r2, #111	; 0x6f
   24d44:	eb00008a 	bl	24f74 <assertion_failed>

00024d48 <CScheduler::Sleep(unsigned int)>:
   24d48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24d4c:	e3005708 	movw	r5, #1800	; 0x708
   24d50:	e1a04001 	mov	r4, r1
   24d54:	e1a06000 	mov	r6, r0
   24d58:	e1510005 	cmp	r1, r5
   24d5c:	9a000008 	bls	24d84 <CScheduler::Sleep(unsigned int)+0x3c>
   24d60:	e3a07cd2 	mov	r7, #53760	; 0xd200
   24d64:	e3467b49 	movt	r7, #27465	; 0x6b49
   24d68:	e2444c07 	sub	r4, r4, #1792	; 0x700
   24d6c:	e1a01007 	mov	r1, r7
   24d70:	e2444008 	sub	r4, r4, #8
   24d74:	e1a00006 	mov	r0, r6
   24d78:	ebffffd3 	bl	24ccc <CScheduler::usSleep(unsigned int)>
   24d7c:	e1540005 	cmp	r4, r5
   24d80:	8afffff8 	bhi	24d68 <CScheduler::Sleep(unsigned int)+0x20>
   24d84:	e3041240 	movw	r1, #16960	; 0x4240
   24d88:	e340100f 	movt	r1, #15
   24d8c:	e1a00006 	mov	r0, r6
   24d90:	e0010491 	mul	r1, r1, r4
   24d94:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24d98:	eaffffcb 	b	24ccc <CScheduler::usSleep(unsigned int)>

00024d9c <CScheduler::MsSleep(unsigned int)>:
   24d9c:	e3510000 	cmp	r1, #0
   24da0:	012fff1e 	bxeq	lr
   24da4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   24da8:	e0010193 	mul	r1, r3, r1
   24dac:	eaffffc6 	b	24ccc <CScheduler::usSleep(unsigned int)>

00024db0 <CScheduler::BlockTask(CTask**)>:
   24db0:	e92d4010 	push	{r4, lr}
   24db4:	e3510000 	cmp	r1, #0
   24db8:	0a00000b 	beq	24dec <CScheduler::BlockTask(CTask**)+0x3c>
   24dbc:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   24dc0:	e5812000 	str	r2, [r1]
   24dc4:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   24dc8:	e3530000 	cmp	r3, #0
   24dcc:	0a00000c 	beq	24e04 <CScheduler::BlockTask(CTask**)+0x54>
   24dd0:	e5d32004 	ldrb	r2, [r3, #4]
   24dd4:	e3520000 	cmp	r2, #0
   24dd8:	1a00000f 	bne	24e1c <CScheduler::BlockTask(CTask**)+0x6c>
   24ddc:	e3a02001 	mov	r2, #1
   24de0:	e5c32004 	strb	r2, [r3, #4]
   24de4:	e8bd4010 	pop	{r4, lr}
   24de8:	eaffff78 	b	24bd0 <CScheduler::Yield()>
   24dec:	e3061900 	movw	r1, #26880	; 0x6900
   24df0:	e3401003 	movt	r1, #3
   24df4:	e30609b4 	movw	r0, #27060	; 0x69b4
   24df8:	e3400003 	movt	r0, #3
   24dfc:	e3a020b7 	mov	r2, #183	; 0xb7
   24e00:	eb00005b 	bl	24f74 <assertion_failed>
   24e04:	e3061900 	movw	r1, #26880	; 0x6900
   24e08:	e3401003 	movt	r1, #3
   24e0c:	e3060a3c 	movw	r0, #27196	; 0x6a3c
   24e10:	e3400003 	movt	r0, #3
   24e14:	e3a020ba 	mov	r2, #186	; 0xba
   24e18:	eb000055 	bl	24f74 <assertion_failed>
   24e1c:	e3061900 	movw	r1, #26880	; 0x6900
   24e20:	e3401003 	movt	r1, #3
   24e24:	e3060a4c 	movw	r0, #27212	; 0x6a4c
   24e28:	e3400003 	movt	r0, #3
   24e2c:	e3a020bb 	mov	r2, #187	; 0xbb
   24e30:	eb00004f 	bl	24f74 <assertion_failed>

00024e34 <CScheduler::Get()>:
   24e34:	e3093414 	movw	r3, #37908	; 0x9414
   24e38:	e3403003 	movt	r3, #3
   24e3c:	e5930000 	ldr	r0, [r3]
   24e40:	e3500000 	cmp	r0, #0
   24e44:	112fff1e 	bxne	lr
   24e48:	e3061900 	movw	r1, #26880	; 0x6900
   24e4c:	e3401003 	movt	r1, #3
   24e50:	e3040ffc 	movw	r0, #20476	; 0x4ffc
   24e54:	e3400003 	movt	r0, #3
   24e58:	e92d4010 	push	{r4, lr}
   24e5c:	e300210d 	movw	r2, #269	; 0x10d
   24e60:	eb000043 	bl	24f74 <assertion_failed>

00024e64 <TaskSwitch>:
   24e64:	eef82a10 	vmrs	r2, fpexc
   24e68:	eef13a10 	vmrs	r3, fpscr
   24e6c:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   24e70:	ec800b20 	vstmia	r0, {d0-d15}
   24e74:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   24e78:	eee82a10 	vmsr	fpexc, r2
   24e7c:	eee13a10 	vmsr	fpscr, r3
   24e80:	ec910b20 	vldmia	r1, {d0-d15}
   24e84:	e12fff1e 	bx	lr

00024e88 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   24e88:	e3a02000 	mov	r2, #0
   24e8c:	e5c01000 	strb	r1, [r0]
   24e90:	e5802004 	str	r2, [r0, #4]
   24e94:	e12fff1e 	bx	lr

00024e98 <CSynchronizationEvent::~CSynchronizationEvent()>:
   24e98:	e5903004 	ldr	r3, [r0, #4]
   24e9c:	e3530000 	cmp	r3, #0
   24ea0:	012fff1e 	bxeq	lr
   24ea4:	e3061a78 	movw	r1, #27256	; 0x6a78
   24ea8:	e3401003 	movt	r1, #3
   24eac:	e3060a94 	movw	r0, #27284	; 0x6a94
   24eb0:	e3400003 	movt	r0, #3
   24eb4:	e92d4010 	push	{r4, lr}
   24eb8:	e3a02023 	mov	r2, #35	; 0x23
   24ebc:	eb00002c 	bl	24f74 <assertion_failed>

00024ec0 <CSynchronizationEvent::GetState()>:
   24ec0:	e5d00000 	ldrb	r0, [r0]
   24ec4:	e12fff1e 	bx	lr

00024ec8 <CSynchronizationEvent::Clear()>:
   24ec8:	e3a03000 	mov	r3, #0
   24ecc:	e5c03000 	strb	r3, [r0]
   24ed0:	e12fff1e 	bx	lr

00024ed4 <CSynchronizationEvent::Set()>:
   24ed4:	e5d03000 	ldrb	r3, [r0]
   24ed8:	e3530000 	cmp	r3, #0
   24edc:	112fff1e 	bxne	lr
   24ee0:	e5903004 	ldr	r3, [r0, #4]
   24ee4:	e3a02001 	mov	r2, #1
   24ee8:	e5c02000 	strb	r2, [r0]
   24eec:	e3530000 	cmp	r3, #0
   24ef0:	012fff1e 	bxeq	lr
   24ef4:	e92d4010 	push	{r4, lr}
   24ef8:	e1a04000 	mov	r4, r0
   24efc:	ebffffcc 	bl	24e34 <CScheduler::Get()>
   24f00:	e2841004 	add	r1, r4, #4
   24f04:	e8bd4010 	pop	{r4, lr}
   24f08:	eafffed6 	b	24a68 <CScheduler::WakeTask(CTask**)>

00024f0c <CSynchronizationEvent::Wait()>:
   24f0c:	e5d03000 	ldrb	r3, [r0]
   24f10:	e3530000 	cmp	r3, #0
   24f14:	112fff1e 	bxne	lr
   24f18:	e5903004 	ldr	r3, [r0, #4]
   24f1c:	e92d4010 	push	{r4, lr}
   24f20:	e1a04000 	mov	r4, r0
   24f24:	e3530000 	cmp	r3, #0
   24f28:	1a00000b 	bne	24f5c <CSynchronizationEvent::Wait()+0x50>
   24f2c:	ebffffc0 	bl	24e34 <CScheduler::Get()>
   24f30:	e2841004 	add	r1, r4, #4
   24f34:	ebffff9d 	bl	24db0 <CScheduler::BlockTask(CTask**)>
   24f38:	e5d43000 	ldrb	r3, [r4]
   24f3c:	e3530000 	cmp	r3, #0
   24f40:	18bd8010 	popne	{r4, pc}
   24f44:	e3061a78 	movw	r1, #27256	; 0x6a78
   24f48:	e3401003 	movt	r1, #3
   24f4c:	e3060aa8 	movw	r0, #27304	; 0x6aa8
   24f50:	e3400003 	movt	r0, #3
   24f54:	e3a0204c 	mov	r2, #76	; 0x4c
   24f58:	eb000005 	bl	24f74 <assertion_failed>
   24f5c:	e3061a78 	movw	r1, #27256	; 0x6a78
   24f60:	e3401003 	movt	r1, #3
   24f64:	e3060a94 	movw	r0, #27284	; 0x6a94
   24f68:	e3400003 	movt	r0, #3
   24f6c:	e3a02049 	mov	r2, #73	; 0x49
   24f70:	ebffffff 	bl	24f74 <assertion_failed>

00024f74 <assertion_failed>:
   24f74:	e92d4080 	push	{r7, lr}
   24f78:	e1a05000 	mov	r5, r0
   24f7c:	e1a06001 	mov	r6, r1
   24f80:	e24dd018 	sub	sp, sp, #24
   24f84:	e1a07002 	mov	r7, r2
   24f88:	e1a0400d 	mov	r4, sp
   24f8c:	eb00207b 	bl	2d180 <CInterruptSystem::DisableFIQ()>
   24f90:	f1080040 	cpsie	f
   24f94:	e28d0008 	add	r0, sp, #8
   24f98:	eb001193 	bl	295ec <CString::CString()>
   24f9c:	e1a03007 	mov	r3, r7
   24fa0:	e1a02006 	mov	r2, r6
   24fa4:	e28d0008 	add	r0, sp, #8
   24fa8:	e3061ab4 	movw	r1, #27316	; 0x6ab4
   24fac:	e3401003 	movt	r1, #3
   24fb0:	eb00155d 	bl	2a52c <CString::Format(char const*, ...)>
   24fb4:	e28d0008 	add	r0, sp, #8
   24fb8:	eb0011a2 	bl	29648 <CString::operator char const*() const>
   24fbc:	e1a01000 	mov	r1, r0
   24fc0:	e1a00004 	mov	r0, r4
   24fc4:	eb000179 	bl	255b0 <debug_stacktrace(unsigned int const*, char const*)>
   24fc8:	eb00058e 	bl	26608 <CLogger::Get()>
   24fcc:	e1a04000 	mov	r4, r0
   24fd0:	e28d0008 	add	r0, sp, #8
   24fd4:	eb00119b 	bl	29648 <CString::operator char const*() const>
   24fd8:	e3063abc 	movw	r3, #27324	; 0x6abc
   24fdc:	e3403003 	movt	r3, #3
   24fe0:	e1a01000 	mov	r1, r0
   24fe4:	e58d5000 	str	r5, [sp]
   24fe8:	e1a00004 	mov	r0, r4
   24fec:	e3a02000 	mov	r2, #0
   24ff0:	eb0004c5 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24ff4:	eafffffe 	b	24ff4 <assertion_failed+0x80>

00024ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   24ff8:	e92d4010 	push	{r4, lr}
   24ffc:	e1a02001 	mov	r2, r1
   25000:	e1a04000 	mov	r4, r0
   25004:	e3a01008 	mov	r1, #8
   25008:	eb00221f 	bl	2d88c <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   2500c:	e1a00004 	mov	r0, r4
   25010:	e8bd8010 	pop	{r4, pc}

00025014 <CBcmPropertyTags::~CBcmPropertyTags()>:
   25014:	e92d4010 	push	{r4, lr}
   25018:	e1a04000 	mov	r4, r0
   2501c:	eb00221d 	bl	2d898 <CBcmMailBox::~CBcmMailBox()>
   25020:	e1a00004 	mov	r0, r4
   25024:	e8bd8010 	pop	{r4, pc}

00025028 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   25028:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2502c:	e2519000 	subs	r9, r1, #0
   25030:	0a000027 	beq	250d4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xac>
   25034:	e1a06002 	mov	r6, r2
   25038:	e352000f 	cmp	r2, #15
   2503c:	9a00002a 	bls	250ec <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc4>
   25040:	e282700c 	add	r7, r2, #12
   25044:	e2175003 	ands	r5, r7, #3
   25048:	1a00002d 	bne	25104 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
   2504c:	e1a0a000 	mov	sl, r0
   25050:	e1a00005 	mov	r0, r5
   25054:	eb001ec2 	bl	2cb64 <CMemorySystem::GetCoherentPage(unsigned int)>
   25058:	e1a04000 	mov	r4, r0
   2505c:	e2808008 	add	r8, r0, #8
   25060:	e1a02006 	mov	r2, r6
   25064:	e1a00008 	mov	r0, r8
   25068:	e1a01009 	mov	r1, r9
   2506c:	e5847000 	str	r7, [r4]
   25070:	e5c45004 	strb	r5, [r4, #4]
   25074:	e5c45005 	strb	r5, [r4, #5]
   25078:	e5c45006 	strb	r5, [r4, #6]
   2507c:	e5c45007 	strb	r5, [r4, #7]
   25080:	eb001a90 	bl	2bac8 <memcpy>
   25084:	e7885006 	str	r5, [r8, r6]
   25088:	f57ff04f 	dsb	sy
   2508c:	e3845103 	orr	r5, r4, #-1073741824	; 0xc0000000
   25090:	e1a0000a 	mov	r0, sl
   25094:	e1a01005 	mov	r1, r5
   25098:	eb0021ff 	bl	2d89c <CBcmMailBox::WriteRead(unsigned int)>
   2509c:	e1500005 	cmp	r0, r5
   250a0:	0a000001 	beq	250ac <CBcmPropertyTags::GetTags(void*, unsigned int)+0x84>
   250a4:	e3a00000 	mov	r0, #0
   250a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   250ac:	f57ff05f 	dmb	sy
   250b0:	e5943004 	ldr	r3, [r4, #4]
   250b4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   250b8:	1afffff9 	bne	250a4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x7c>
   250bc:	e1a02006 	mov	r2, r6
   250c0:	e1a01008 	mov	r1, r8
   250c4:	e1a00009 	mov	r0, r9
   250c8:	eb001a7e 	bl	2bac8 <memcpy>
   250cc:	e3a00001 	mov	r0, #1
   250d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   250d4:	e3061ad4 	movw	r1, #27348	; 0x6ad4
   250d8:	e3401003 	movt	r1, #3
   250dc:	e3060ae8 	movw	r0, #27368	; 0x6ae8
   250e0:	e3400003 	movt	r0, #3
   250e4:	e3a0204b 	mov	r2, #75	; 0x4b
   250e8:	ebffffa1 	bl	24f74 <assertion_failed>
   250ec:	e3061ad4 	movw	r1, #27348	; 0x6ad4
   250f0:	e3401003 	movt	r1, #3
   250f4:	e3060af4 	movw	r0, #27380	; 0x6af4
   250f8:	e3400003 	movt	r0, #3
   250fc:	e3a0204c 	mov	r2, #76	; 0x4c
   25100:	ebffff9b 	bl	24f74 <assertion_failed>
   25104:	e3061ad4 	movw	r1, #27348	; 0x6ad4
   25108:	e3401003 	movt	r1, #3
   2510c:	e3060b20 	movw	r0, #27424	; 0x6b20
   25110:	e3400003 	movt	r0, #3
   25114:	e3a0204e 	mov	r2, #78	; 0x4e
   25118:	ebffff95 	bl	24f74 <assertion_failed>

0002511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   2511c:	e92d4010 	push	{r4, lr}
   25120:	e2524000 	subs	r4, r2, #0
   25124:	0a000012 	beq	25174 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x58>
   25128:	e353000f 	cmp	r3, #15
   2512c:	9a000016 	bls	2518c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x70>
   25130:	e5841000 	str	r1, [r4]
   25134:	e1a02003 	mov	r2, r3
   25138:	e243100c 	sub	r1, r3, #12
   2513c:	e59d3008 	ldr	r3, [sp, #8]
   25140:	e5841004 	str	r1, [r4, #4]
   25144:	e1a01004 	mov	r1, r4
   25148:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   2514c:	e5843008 	str	r3, [r4, #8]
   25150:	ebffffb4 	bl	25028 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   25154:	e3500000 	cmp	r0, #0
   25158:	08bd8010 	popeq	{r4, pc}
   2515c:	e5940008 	ldr	r0, [r4, #8]
   25160:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   25164:	e5840008 	str	r0, [r4, #8]
   25168:	e2900000 	adds	r0, r0, #0
   2516c:	13a00001 	movne	r0, #1
   25170:	e8bd8010 	pop	{r4, pc}
   25174:	e3061ad4 	movw	r1, #27348	; 0x6ad4
   25178:	e3401003 	movt	r1, #3
   2517c:	e3060b38 	movw	r0, #27448	; 0x6b38
   25180:	e3400003 	movt	r0, #3
   25184:	e3a02033 	mov	r2, #51	; 0x33
   25188:	ebffff79 	bl	24f74 <assertion_failed>
   2518c:	e3061ad4 	movw	r1, #27348	; 0x6ad4
   25190:	e3401003 	movt	r1, #3
   25194:	e3060b44 	movw	r0, #27460	; 0x6b44
   25198:	e3400003 	movt	r0, #3
   2519c:	e3a02034 	mov	r2, #52	; 0x34
   251a0:	ebffff73 	bl	24f74 <assertion_failed>

000251a4 <CClassAllocator::~CClassAllocator()>:
   251a4:	e92d4010 	push	{r4, lr}
   251a8:	e1a04000 	mov	r4, r0
   251ac:	e590000c 	ldr	r0, [r0, #12]
   251b0:	e3a03000 	mov	r3, #0
   251b4:	e1500003 	cmp	r0, r3
   251b8:	e5843010 	str	r3, [r4, #16]
   251bc:	0a000000 	beq	251c4 <CClassAllocator::~CClassAllocator()+0x20>
   251c0:	eb002061 	bl	2d34c <free>
   251c4:	e1a00004 	mov	r0, r4
   251c8:	e8bd8010 	pop	{r4, pc}

000251cc <CClassAllocator::Init(unsigned int, unsigned int)>:
   251cc:	e92d4010 	push	{r4, lr}
   251d0:	e1a04000 	mov	r4, r0
   251d4:	e3510000 	cmp	r1, #0
   251d8:	1281101f 	addne	r1, r1, #31
   251dc:	03a00020 	moveq	r0, #32
   251e0:	13c1000f 	bicne	r0, r1, #15
   251e4:	e3520000 	cmp	r2, #0
   251e8:	e5840000 	str	r0, [r4]
   251ec:	0a00001b 	beq	25260 <CClassAllocator::Init(unsigned int, unsigned int)+0x94>
   251f0:	e5842004 	str	r2, [r4, #4]
   251f4:	e0000092 	mul	r0, r2, r0
   251f8:	eb00204d 	bl	2d334 <malloc>
   251fc:	e3500000 	cmp	r0, #0
   25200:	e584000c 	str	r0, [r4, #12]
   25204:	0a000013 	beq	25258 <CClassAllocator::Init(unsigned int, unsigned int)+0x8c>
   25208:	e210200f 	ands	r2, r0, #15
   2520c:	1a000019 	bne	25278 <CClassAllocator::Init(unsigned int, unsigned int)+0xac>
   25210:	e5943004 	ldr	r3, [r4, #4]
   25214:	e3530000 	cmp	r3, #0
   25218:	08bd8010 	popeq	{r4, pc}
   2521c:	e305c350 	movw	ip, #21328	; 0x5350
   25220:	e344cf42 	movt	ip, #20290	; 0x4f42
   25224:	e5943000 	ldr	r3, [r4]
   25228:	e0030293 	mul	r3, r3, r2
   2522c:	e2822001 	add	r2, r2, #1
   25230:	e0801003 	add	r1, r0, r3
   25234:	e780c003 	str	ip, [r0, r3]
   25238:	e5943010 	ldr	r3, [r4, #16]
   2523c:	e581300c 	str	r3, [r1, #12]
   25240:	e5841010 	str	r1, [r4, #16]
   25244:	e5943004 	ldr	r3, [r4, #4]
   25248:	e1530002 	cmp	r3, r2
   2524c:	98bd8010 	popls	{r4, pc}
   25250:	e594000c 	ldr	r0, [r4, #12]
   25254:	eafffff2 	b	25224 <CClassAllocator::Init(unsigned int, unsigned int)+0x58>
   25258:	e5840004 	str	r0, [r4, #4]
   2525c:	e8bd8010 	pop	{r4, pc}
   25260:	e3061b6c 	movw	r1, #27500	; 0x6b6c
   25264:	e3401003 	movt	r1, #3
   25268:	e3060b80 	movw	r0, #27520	; 0x6b80
   2526c:	e3400003 	movt	r0, #3
   25270:	e3a02055 	mov	r2, #85	; 0x55
   25274:	ebffff3e 	bl	24f74 <assertion_failed>
   25278:	e3061b6c 	movw	r1, #27500	; 0x6b6c
   2527c:	e3401003 	movt	r1, #3
   25280:	e3060b98 	movw	r0, #27544	; 0x6b98
   25284:	e3400003 	movt	r0, #3
   25288:	e3a0205f 	mov	r2, #95	; 0x5f
   2528c:	ebffff38 	bl	24f74 <assertion_failed>

00025290 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   25290:	e92d4010 	push	{r4, lr}
   25294:	e3a0c000 	mov	ip, #0
   25298:	e1a04000 	mov	r4, r0
   2529c:	e3a0e001 	mov	lr, #1
   252a0:	e5803008 	str	r3, [r0, #8]
   252a4:	e580e018 	str	lr, [r0, #24]
   252a8:	e580c00c 	str	ip, [r0, #12]
   252ac:	e580c010 	str	ip, [r0, #16]
   252b0:	e5c0c014 	strb	ip, [r0, #20]
   252b4:	ebffffc4 	bl	251cc <CClassAllocator::Init(unsigned int, unsigned int)>
   252b8:	e1a00004 	mov	r0, r4
   252bc:	e8bd8010 	pop	{r4, pc}

000252c0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   252c0:	e92d4070 	push	{r4, r5, r6, lr}
   252c4:	e3a0c000 	mov	ip, #0
   252c8:	e59d5010 	ldr	r5, [sp, #16]
   252cc:	e1a04000 	mov	r4, r0
   252d0:	e3a0e001 	mov	lr, #1
   252d4:	e5803018 	str	r3, [r0, #24]
   252d8:	e5805008 	str	r5, [r0, #8]
   252dc:	e5c0e014 	strb	lr, [r0, #20]
   252e0:	e580c00c 	str	ip, [r0, #12]
   252e4:	e580c010 	str	ip, [r0, #16]
   252e8:	ebffffb7 	bl	251cc <CClassAllocator::Init(unsigned int, unsigned int)>
   252ec:	e1a00004 	mov	r0, r4
   252f0:	e8bd8070 	pop	{r4, r5, r6, pc}

000252f4 <CClassAllocator::Allocate()>:
   252f4:	e92d4030 	push	{r4, r5, lr}
   252f8:	e1a05000 	mov	r5, r0
   252fc:	e5d03014 	ldrb	r3, [r0, #20]
   25300:	e24dd00c 	sub	sp, sp, #12
   25304:	e3530000 	cmp	r3, #0
   25308:	0a000002 	beq	25318 <CClassAllocator::Allocate()+0x24>
   2530c:	e5900018 	ldr	r0, [r0, #24]
   25310:	e3500000 	cmp	r0, #0
   25314:	1a000016 	bne	25374 <CClassAllocator::Allocate()+0x80>
   25318:	e5954010 	ldr	r4, [r5, #16]
   2531c:	e3540000 	cmp	r4, #0
   25320:	0a00001e 	beq	253a0 <CClassAllocator::Allocate()+0xac>
   25324:	e5942000 	ldr	r2, [r4]
   25328:	e3053350 	movw	r3, #21328	; 0x5350
   2532c:	e3443f42 	movt	r3, #20290	; 0x4f42
   25330:	e1520003 	cmp	r2, r3
   25334:	1a000023 	bne	253c8 <CClassAllocator::Allocate()+0xd4>
   25338:	e594200c 	ldr	r2, [r4, #12]
   2533c:	e3a03000 	mov	r3, #0
   25340:	e5852010 	str	r2, [r5, #16]
   25344:	e584300c 	str	r3, [r4, #12]
   25348:	e5d53014 	ldrb	r3, [r5, #20]
   2534c:	e3530000 	cmp	r3, #0
   25350:	1a000002 	bne	25360 <CClassAllocator::Allocate()+0x6c>
   25354:	e2840010 	add	r0, r4, #16
   25358:	e28dd00c 	add	sp, sp, #12
   2535c:	e8bd8030 	pop	{r4, r5, pc}
   25360:	e5953018 	ldr	r3, [r5, #24]
   25364:	e3530000 	cmp	r3, #0
   25368:	0afffff9 	beq	25354 <CClassAllocator::Allocate()+0x60>
   2536c:	eb001e63 	bl	2cd00 <LeaveCritical>
   25370:	eafffff7 	b	25354 <CClassAllocator::Allocate()+0x60>
   25374:	eb001e34 	bl	2cc4c <EnterCritical>
   25378:	e5954010 	ldr	r4, [r5, #16]
   2537c:	e3540000 	cmp	r4, #0
   25380:	1affffe7 	bne	25324 <CClassAllocator::Allocate()+0x30>
   25384:	e5d53014 	ldrb	r3, [r5, #20]
   25388:	e3530000 	cmp	r3, #0
   2538c:	0a000003 	beq	253a0 <CClassAllocator::Allocate()+0xac>
   25390:	e5953018 	ldr	r3, [r5, #24]
   25394:	e3530000 	cmp	r3, #0
   25398:	0a000000 	beq	253a0 <CClassAllocator::Allocate()+0xac>
   2539c:	eb001e57 	bl	2cd00 <LeaveCritical>
   253a0:	eb000498 	bl	26608 <CLogger::Get()>
   253a4:	e5952004 	ldr	r2, [r5, #4]
   253a8:	e5951008 	ldr	r1, [r5, #8]
   253ac:	e3063bd4 	movw	r3, #27604	; 0x6bd4
   253b0:	e3403003 	movt	r3, #3
   253b4:	e58d2000 	str	r2, [sp]
   253b8:	e3a02000 	mov	r2, #0
   253bc:	eb0003d2 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   253c0:	e3a00000 	mov	r0, #0
   253c4:	eaffffe3 	b	25358 <CClassAllocator::Allocate()+0x64>
   253c8:	e3061b6c 	movw	r1, #27500	; 0x6b6c
   253cc:	e3401003 	movt	r1, #3
   253d0:	e3060c00 	movw	r0, #27648	; 0x6c00
   253d4:	e3400003 	movt	r0, #3
   253d8:	e3a02082 	mov	r2, #130	; 0x82
   253dc:	ebfffee4 	bl	24f74 <assertion_failed>

000253e0 <CClassAllocator::Free(void*)>:
   253e0:	e92d4070 	push	{r4, r5, r6, lr}
   253e4:	e2515000 	subs	r5, r1, #0
   253e8:	0a00001c 	beq	25460 <CClassAllocator::Free(void*)+0x80>
   253ec:	e5152010 	ldr	r2, [r5, #-16]
   253f0:	e3053350 	movw	r3, #21328	; 0x5350
   253f4:	e3443f42 	movt	r3, #20290	; 0x4f42
   253f8:	e1520003 	cmp	r2, r3
   253fc:	e2456010 	sub	r6, r5, #16
   25400:	1a00001c 	bne	25478 <CClassAllocator::Free(void*)+0x98>
   25404:	e5153004 	ldr	r3, [r5, #-4]
   25408:	e3530000 	cmp	r3, #0
   2540c:	1a00001f 	bne	25490 <CClassAllocator::Free(void*)+0xb0>
   25410:	e5d03014 	ldrb	r3, [r0, #20]
   25414:	e1a04000 	mov	r4, r0
   25418:	e3530000 	cmp	r3, #0
   2541c:	0a000002 	beq	2542c <CClassAllocator::Free(void*)+0x4c>
   25420:	e5900018 	ldr	r0, [r0, #24]
   25424:	e3500000 	cmp	r0, #0
   25428:	1a00000a 	bne	25458 <CClassAllocator::Free(void*)+0x78>
   2542c:	e5943010 	ldr	r3, [r4, #16]
   25430:	e5053004 	str	r3, [r5, #-4]
   25434:	e5846010 	str	r6, [r4, #16]
   25438:	e5d43014 	ldrb	r3, [r4, #20]
   2543c:	e3530000 	cmp	r3, #0
   25440:	08bd8070 	popeq	{r4, r5, r6, pc}
   25444:	e5943018 	ldr	r3, [r4, #24]
   25448:	e3530000 	cmp	r3, #0
   2544c:	08bd8070 	popeq	{r4, r5, r6, pc}
   25450:	e8bd4070 	pop	{r4, r5, r6, lr}
   25454:	ea001e29 	b	2cd00 <LeaveCritical>
   25458:	eb001dfb 	bl	2cc4c <EnterCritical>
   2545c:	eafffff2 	b	2542c <CClassAllocator::Free(void*)+0x4c>
   25460:	e3061b6c 	movw	r1, #27500	; 0x6b6c
   25464:	e3401003 	movt	r1, #3
   25468:	e3060c20 	movw	r0, #27680	; 0x6c20
   2546c:	e3400003 	movt	r0, #3
   25470:	e3a02090 	mov	r2, #144	; 0x90
   25474:	ebfffebe 	bl	24f74 <assertion_failed>
   25478:	e3061b6c 	movw	r1, #27500	; 0x6b6c
   2547c:	e3401003 	movt	r1, #3
   25480:	e3060c2c 	movw	r0, #27692	; 0x6c2c
   25484:	e3400003 	movt	r0, #3
   25488:	e3a02094 	mov	r2, #148	; 0x94
   2548c:	ebfffeb8 	bl	24f74 <assertion_failed>
   25490:	e3061b6c 	movw	r1, #27500	; 0x6b6c
   25494:	e3401003 	movt	r1, #3
   25498:	e3060c48 	movw	r0, #27720	; 0x6c48
   2549c:	e3400003 	movt	r0, #3
   254a0:	e3a02095 	mov	r2, #149	; 0x95
   254a4:	ebfffeb2 	bl	24f74 <assertion_failed>

000254a8 <debug_hexdump(void const*, unsigned int, char const*)>:
   254a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   254ac:	e3520000 	cmp	r2, #0
   254b0:	e3067c5c 	movw	r7, #27740	; 0x6c5c
   254b4:	e3407003 	movt	r7, #3
   254b8:	11a07002 	movne	r7, r2
   254bc:	e24dd048 	sub	sp, sp, #72	; 0x48
   254c0:	e1a05001 	mov	r5, r1
   254c4:	e1a04000 	mov	r4, r0
   254c8:	eb00044e 	bl	26608 <CLogger::Get()>
   254cc:	e1a01007 	mov	r1, r7
   254d0:	e3063c64 	movw	r3, #27748	; 0x6c64
   254d4:	e3403003 	movt	r3, #3
   254d8:	e58d4004 	str	r4, [sp, #4]
   254dc:	e3a02004 	mov	r2, #4
   254e0:	e58d5000 	str	r5, [sp]
   254e4:	eb000388 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   254e8:	e3550000 	cmp	r5, #0
   254ec:	0a00002d 	beq	255a8 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   254f0:	e3068c8c 	movw	r8, #27788	; 0x6c8c
   254f4:	e3408003 	movt	r8, #3
   254f8:	ea000001 	b	25504 <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   254fc:	e2555010 	subs	r5, r5, #16
   25500:	0a000028 	beq	255a8 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   25504:	eb00043f 	bl	26608 <CLogger::Get()>
   25508:	e5d4c00f 	ldrb	ip, [r4, #15]
   2550c:	e5d4900e 	ldrb	r9, [r4, #14]
   25510:	e1a03008 	mov	r3, r8
   25514:	e5d4600d 	ldrb	r6, [r4, #13]
   25518:	e3a02004 	mov	r2, #4
   2551c:	e5d4e00c 	ldrb	lr, [r4, #12]
   25520:	e1a01007 	mov	r1, r7
   25524:	e5d4a00b 	ldrb	sl, [r4, #11]
   25528:	e58dc040 	str	ip, [sp, #64]	; 0x40
   2552c:	e6ffc074 	uxth	ip, r4
   25530:	e58d903c 	str	r9, [sp, #60]	; 0x3c
   25534:	e2844010 	add	r4, r4, #16
   25538:	e5549006 	ldrb	r9, [r4, #-6]
   2553c:	e58d6038 	str	r6, [sp, #56]	; 0x38
   25540:	e5546007 	ldrb	r6, [r4, #-7]
   25544:	e58de034 	str	lr, [sp, #52]	; 0x34
   25548:	e554e008 	ldrb	lr, [r4, #-8]
   2554c:	e58da030 	str	sl, [sp, #48]	; 0x30
   25550:	e554a009 	ldrb	sl, [r4, #-9]
   25554:	e58d902c 	str	r9, [sp, #44]	; 0x2c
   25558:	e554900a 	ldrb	r9, [r4, #-10]
   2555c:	e58d6028 	str	r6, [sp, #40]	; 0x28
   25560:	e554600b 	ldrb	r6, [r4, #-11]
   25564:	e58de024 	str	lr, [sp, #36]	; 0x24
   25568:	e554e00c 	ldrb	lr, [r4, #-12]
   2556c:	e58da020 	str	sl, [sp, #32]
   25570:	e554a00d 	ldrb	sl, [r4, #-13]
   25574:	e58d901c 	str	r9, [sp, #28]
   25578:	e554900e 	ldrb	r9, [r4, #-14]
   2557c:	e58d6018 	str	r6, [sp, #24]
   25580:	e554600f 	ldrb	r6, [r4, #-15]
   25584:	e58de014 	str	lr, [sp, #20]
   25588:	e554e010 	ldrb	lr, [r4, #-16]
   2558c:	e58da010 	str	sl, [sp, #16]
   25590:	e58d900c 	str	r9, [sp, #12]
   25594:	e58d6008 	str	r6, [sp, #8]
   25598:	e88d5000 	stm	sp, {ip, lr}
   2559c:	eb00035a 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   255a0:	e355000f 	cmp	r5, #15
   255a4:	8affffd4 	bhi	254fc <debug_hexdump(void const*, unsigned int, char const*)+0x54>
   255a8:	e28dd048 	add	sp, sp, #72	; 0x48
   255ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000255b0 <debug_stacktrace(unsigned int const*, char const*)>:
   255b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   255b4:	e3510000 	cmp	r1, #0
   255b8:	e3067c5c 	movw	r7, #27740	; 0x6c5c
   255bc:	e3407003 	movt	r7, #3
   255c0:	11a07001 	movne	r7, r1
   255c4:	e30f6b70 	movw	r6, #64368	; 0xfb70
   255c8:	e3406002 	movt	r6, #2
   255cc:	e3068ce4 	movw	r8, #27876	; 0x6ce4
   255d0:	e3408003 	movt	r8, #3
   255d4:	e24dd008 	sub	sp, sp, #8
   255d8:	e2405004 	sub	r5, r0, #4
   255dc:	e3a04000 	mov	r4, #0
   255e0:	ea000002 	b	255f0 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   255e4:	e2844001 	add	r4, r4, #1
   255e8:	e3540040 	cmp	r4, #64	; 0x40
   255ec:	0a000011 	beq	25638 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   255f0:	e5b53004 	ldr	r3, [r5, #4]!
   255f4:	e3530902 	cmp	r3, #32768	; 0x8000
   255f8:	3afffff9 	bcc	255e4 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   255fc:	e1530006 	cmp	r3, r6
   25600:	2afffff7 	bcs	255e4 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   25604:	e3130003 	tst	r3, #3
   25608:	1afffff5 	bne	255e4 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   2560c:	eb0003fd 	bl	26608 <CLogger::Get()>
   25610:	e5951000 	ldr	r1, [r5]
   25614:	e58d1004 	str	r1, [sp, #4]
   25618:	e1a03008 	mov	r3, r8
   2561c:	e58d4000 	str	r4, [sp]
   25620:	e3a02004 	mov	r2, #4
   25624:	e1a01007 	mov	r1, r7
   25628:	e2844001 	add	r4, r4, #1
   2562c:	eb000336 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   25630:	e3540040 	cmp	r4, #64	; 0x40
   25634:	1affffed 	bne	255f0 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   25638:	e28dd008 	add	sp, sp, #8
   2563c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00025640 <CDevice::~CDevice()>:
   25640:	e12fff1e 	bx	lr

00025644 <CDevice::Read(void*, unsigned int)>:
   25644:	e3e00000 	mvn	r0, #0
   25648:	e12fff1e 	bx	lr

0002564c <CDevice::Seek(unsigned long long)>:
   2564c:	e3e00000 	mvn	r0, #0
   25650:	e3e01000 	mvn	r1, #0
   25654:	e12fff1e 	bx	lr

00025658 <CDevice::RemoveDevice()>:
   25658:	e3a00000 	mov	r0, #0
   2565c:	e12fff1e 	bx	lr

00025660 <CDevice::~CDevice()>:
   25660:	e92d4010 	push	{r4, lr}
   25664:	e3a01004 	mov	r1, #4
   25668:	e1a04000 	mov	r4, r0
   2566c:	eb001a2d 	bl	2bf28 <operator delete(void*, unsigned int)>
   25670:	e1a00004 	mov	r0, r4
   25674:	e8bd8010 	pop	{r4, pc}

00025678 <CDevice::CDevice()>:
   25678:	e59f3004 	ldr	r3, [pc, #4]	; 25684 <CDevice::CDevice()+0xc>
   2567c:	e5803000 	str	r3, [r0]
   25680:	e12fff1e 	bx	lr
   25684:	00036d00 	.word	0x00036d00

00025688 <CDeviceNameService::CDeviceNameService()>:
   25688:	e3093418 	movw	r3, #37912	; 0x9418
   2568c:	e3403003 	movt	r3, #3
   25690:	e3a01000 	mov	r1, #0
   25694:	e5801004 	str	r1, [r0, #4]
   25698:	e593c000 	ldr	ip, [r3]
   2569c:	e5801000 	str	r1, [r0]
   256a0:	e15c0001 	cmp	ip, r1
   256a4:	1a000001 	bne	256b0 <CDeviceNameService::CDeviceNameService()+0x28>
   256a8:	e5830000 	str	r0, [r3]
   256ac:	e12fff1e 	bx	lr
   256b0:	e3061d18 	movw	r1, #27928	; 0x6d18
   256b4:	e3401003 	movt	r1, #3
   256b8:	e3060d30 	movw	r0, #27952	; 0x6d30
   256bc:	e3400003 	movt	r0, #3
   256c0:	e92d4010 	push	{r4, lr}
   256c4:	e3a0201f 	mov	r2, #31
   256c8:	ebfffe29 	bl	24f74 <assertion_failed>

000256cc <CDeviceNameService::~CDeviceNameService()>:
   256cc:	e92d4070 	push	{r4, r5, r6, lr}
   256d0:	e1a05000 	mov	r5, r0
   256d4:	e5904000 	ldr	r4, [r0]
   256d8:	e3540000 	cmp	r4, #0
   256dc:	0a00000e 	beq	2571c <CDeviceNameService::~CDeviceNameService()+0x50>
   256e0:	e3a06000 	mov	r6, #0
   256e4:	e5943004 	ldr	r3, [r4, #4]
   256e8:	e5944000 	ldr	r4, [r4]
   256ec:	e2530000 	subs	r0, r3, #0
   256f0:	0a000000 	beq	256f8 <CDeviceNameService::~CDeviceNameService()+0x2c>
   256f4:	eb001a0a 	bl	2bf24 <operator delete[](void*)>
   256f8:	e5953000 	ldr	r3, [r5]
   256fc:	e3a01010 	mov	r1, #16
   25700:	e1a00003 	mov	r0, r3
   25704:	e5836004 	str	r6, [r3, #4]
   25708:	e5836008 	str	r6, [r3, #8]
   2570c:	eb001a05 	bl	2bf28 <operator delete(void*, unsigned int)>
   25710:	e5854000 	str	r4, [r5]
   25714:	e3540000 	cmp	r4, #0
   25718:	1afffff1 	bne	256e4 <CDeviceNameService::~CDeviceNameService()+0x18>
   2571c:	e3093418 	movw	r3, #37912	; 0x9418
   25720:	e3403003 	movt	r3, #3
   25724:	e3a02000 	mov	r2, #0
   25728:	e1a00005 	mov	r0, r5
   2572c:	e5832000 	str	r2, [r3]
   25730:	e8bd8070 	pop	{r4, r5, r6, pc}

00025734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   25734:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25738:	e1a05000 	mov	r5, r0
   2573c:	e5900004 	ldr	r0, [r0, #4]
   25740:	e1a06001 	mov	r6, r1
   25744:	e1a07002 	mov	r7, r2
   25748:	e1a08003 	mov	r8, r3
   2574c:	e3500000 	cmp	r0, #0
   25750:	1a000017 	bne	257b4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   25754:	e3a00010 	mov	r0, #16
   25758:	eb0019e4 	bl	2bef0 <operator new(unsigned int)>
   2575c:	e3560000 	cmp	r6, #0
   25760:	e1a04000 	mov	r4, r0
   25764:	0a000014 	beq	257bc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   25768:	e1a00006 	mov	r0, r6
   2576c:	eb00177d 	bl	2b568 <strlen>
   25770:	e2800001 	add	r0, r0, #1
   25774:	eb0019e3 	bl	2bf08 <operator new[](unsigned int)>
   25778:	e1a01006 	mov	r1, r6
   2577c:	e5840004 	str	r0, [r4, #4]
   25780:	eb0017e2 	bl	2b710 <strcpy>
   25784:	e3570000 	cmp	r7, #0
   25788:	0a000011 	beq	257d4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa0>
   2578c:	e5952004 	ldr	r2, [r5, #4]
   25790:	e5953000 	ldr	r3, [r5]
   25794:	e3520000 	cmp	r2, #0
   25798:	e5847008 	str	r7, [r4, #8]
   2579c:	e5c4800c 	strb	r8, [r4, #12]
   257a0:	e5843000 	str	r3, [r4]
   257a4:	e5854000 	str	r4, [r5]
   257a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   257ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   257b0:	ea001d52 	b	2cd00 <LeaveCritical>
   257b4:	eb001d24 	bl	2cc4c <EnterCritical>
   257b8:	eaffffe5 	b	25754 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   257bc:	e3061d18 	movw	r1, #27928	; 0x6d18
   257c0:	e3401003 	movt	r1, #3
   257c4:	e3010358 	movw	r0, #4952	; 0x1358
   257c8:	e3400003 	movt	r0, #3
   257cc:	e3a0203b 	mov	r2, #59	; 0x3b
   257d0:	ebfffde7 	bl	24f74 <assertion_failed>
   257d4:	e3061d18 	movw	r1, #27928	; 0x6d18
   257d8:	e3401003 	movt	r1, #3
   257dc:	e3060d3c 	movw	r0, #27964	; 0x6d3c
   257e0:	e3400003 	movt	r0, #3
   257e4:	e3a02040 	mov	r2, #64	; 0x40
   257e8:	ebfffde1 	bl	24f74 <assertion_failed>

000257ec <CDeviceNameService::RemoveDevice(char const*, bool)>:
   257ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   257f0:	e2515000 	subs	r5, r1, #0
   257f4:	0a000040 	beq	258fc <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   257f8:	e1a07000 	mov	r7, r0
   257fc:	e5900004 	ldr	r0, [r0, #4]
   25800:	e1a08002 	mov	r8, r2
   25804:	e3500000 	cmp	r0, #0
   25808:	1a00001c 	bne	25880 <CDeviceNameService::RemoveDevice(char const*, bool)+0x94>
   2580c:	e5974000 	ldr	r4, [r7]
   25810:	e3540000 	cmp	r4, #0
   25814:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25818:	e5941004 	ldr	r1, [r4, #4]
   2581c:	e3510000 	cmp	r1, #0
   25820:	13a06000 	movne	r6, #0
   25824:	1a000001 	bne	25830 <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
   25828:	ea00000e 	b	25868 <CDeviceNameService::RemoveDevice(char const*, bool)+0x7c>
   2582c:	e1a04003 	mov	r4, r3
   25830:	e1a00005 	mov	r0, r5
   25834:	eb001755 	bl	2b590 <strcmp>
   25838:	e3500000 	cmp	r0, #0
   2583c:	1a000002 	bne	2584c <CDeviceNameService::RemoveDevice(char const*, bool)+0x60>
   25840:	e5d4300c 	ldrb	r3, [r4, #12]
   25844:	e1530008 	cmp	r3, r8
   25848:	0a000015 	beq	258a4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   2584c:	e5943000 	ldr	r3, [r4]
   25850:	e3530000 	cmp	r3, #0
   25854:	0a00000d 	beq	25890 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
   25858:	e5931004 	ldr	r1, [r3, #4]
   2585c:	e1a06004 	mov	r6, r4
   25860:	e3510000 	cmp	r1, #0
   25864:	1afffff0 	bne	2582c <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   25868:	e3061d18 	movw	r1, #27928	; 0x6d18
   2586c:	e3401003 	movt	r1, #3
   25870:	e3060d4c 	movw	r0, #27980	; 0x6d4c
   25874:	e3400003 	movt	r0, #3
   25878:	e3a0205e 	mov	r2, #94	; 0x5e
   2587c:	ebfffdbc 	bl	24f74 <assertion_failed>
   25880:	eb001cf1 	bl	2cc4c <EnterCritical>
   25884:	e5974000 	ldr	r4, [r7]
   25888:	e3540000 	cmp	r4, #0
   2588c:	1affffe1 	bne	25818 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   25890:	e5973004 	ldr	r3, [r7, #4]
   25894:	e3530000 	cmp	r3, #0
   25898:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2589c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   258a0:	ea001d16 	b	2cd00 <LeaveCritical>
   258a4:	e5943000 	ldr	r3, [r4]
   258a8:	e3560000 	cmp	r6, #0
   258ac:	15863000 	strne	r3, [r6]
   258b0:	0a00000f 	beq	258f4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   258b4:	e5973004 	ldr	r3, [r7, #4]
   258b8:	e3530000 	cmp	r3, #0
   258bc:	1a00000a 	bne	258ec <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   258c0:	e5940004 	ldr	r0, [r4, #4]
   258c4:	e3500000 	cmp	r0, #0
   258c8:	0a000000 	beq	258d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe4>
   258cc:	eb001994 	bl	2bf24 <operator delete[](void*)>
   258d0:	e3a03000 	mov	r3, #0
   258d4:	e1a00004 	mov	r0, r4
   258d8:	e5843004 	str	r3, [r4, #4]
   258dc:	e3a01010 	mov	r1, #16
   258e0:	e5843008 	str	r3, [r4, #8]
   258e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   258e8:	ea00198e 	b	2bf28 <operator delete(void*, unsigned int)>
   258ec:	eb001d03 	bl	2cd00 <LeaveCritical>
   258f0:	eafffff2 	b	258c0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd4>
   258f4:	e5873000 	str	r3, [r7]
   258f8:	eaffffed 	b	258b4 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc8>
   258fc:	e3061d18 	movw	r1, #27928	; 0x6d18
   25900:	e3401003 	movt	r1, #3
   25904:	e3010358 	movw	r0, #4952	; 0x1358
   25908:	e3400003 	movt	r0, #3
   2590c:	e3a02056 	mov	r2, #86	; 0x56
   25910:	ebfffd97 	bl	24f74 <assertion_failed>

00025914 <CDeviceNameService::GetDevice(char const*, bool)>:
   25914:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25918:	e2515000 	subs	r5, r1, #0
   2591c:	e24dd00c 	sub	sp, sp, #12
   25920:	0a000033 	beq	259f4 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
   25924:	e1a07000 	mov	r7, r0
   25928:	e5900004 	ldr	r0, [r0, #4]
   2592c:	e1a06002 	mov	r6, r2
   25930:	e3500000 	cmp	r0, #0
   25934:	1a000016 	bne	25994 <CDeviceNameService::GetDevice(char const*, bool)+0x80>
   25938:	e5974000 	ldr	r4, [r7]
   2593c:	e3540000 	cmp	r4, #0
   25940:	1a00000a 	bne	25970 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   25944:	ea000019 	b	259b0 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   25948:	e1a00005 	mov	r0, r5
   2594c:	eb00170f 	bl	2b590 <strcmp>
   25950:	e3500000 	cmp	r0, #0
   25954:	1a000002 	bne	25964 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   25958:	e5d4300c 	ldrb	r3, [r4, #12]
   2595c:	e1530006 	cmp	r3, r6
   25960:	0a000017 	beq	259c4 <CDeviceNameService::GetDevice(char const*, bool)+0xb0>
   25964:	e5944000 	ldr	r4, [r4]
   25968:	e3540000 	cmp	r4, #0
   2596c:	0a00000c 	beq	259a4 <CDeviceNameService::GetDevice(char const*, bool)+0x90>
   25970:	e5941004 	ldr	r1, [r4, #4]
   25974:	e3510000 	cmp	r1, #0
   25978:	1afffff2 	bne	25948 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   2597c:	e3061d18 	movw	r1, #27928	; 0x6d18
   25980:	e3401003 	movt	r1, #3
   25984:	e3060d4c 	movw	r0, #27980	; 0x6d4c
   25988:	e3400003 	movt	r0, #3
   2598c:	e3a02092 	mov	r2, #146	; 0x92
   25990:	ebfffd77 	bl	24f74 <assertion_failed>
   25994:	eb001cac 	bl	2cc4c <EnterCritical>
   25998:	e5974000 	ldr	r4, [r7]
   2599c:	e3540000 	cmp	r4, #0
   259a0:	1afffff2 	bne	25970 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   259a4:	e5973004 	ldr	r3, [r7, #4]
   259a8:	e3530000 	cmp	r3, #0
   259ac:	1a000002 	bne	259bc <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
   259b0:	e3a00000 	mov	r0, #0
   259b4:	e28dd00c 	add	sp, sp, #12
   259b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   259bc:	eb001ccf 	bl	2cd00 <LeaveCritical>
   259c0:	eafffffa 	b	259b0 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   259c4:	e5973004 	ldr	r3, [r7, #4]
   259c8:	e5940008 	ldr	r0, [r4, #8]
   259cc:	e3530000 	cmp	r3, #0
   259d0:	1a00000d 	bne	25a0c <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   259d4:	e3500000 	cmp	r0, #0
   259d8:	1afffff5 	bne	259b4 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   259dc:	e3061d18 	movw	r1, #27928	; 0x6d18
   259e0:	e3401003 	movt	r1, #3
   259e4:	e3060d60 	movw	r0, #28000	; 0x6d60
   259e8:	e3400003 	movt	r0, #3
   259ec:	e3a0209a 	mov	r2, #154	; 0x9a
   259f0:	ebfffd5f 	bl	24f74 <assertion_failed>
   259f4:	e3061d18 	movw	r1, #27928	; 0x6d18
   259f8:	e3401003 	movt	r1, #3
   259fc:	e3010358 	movw	r0, #4952	; 0x1358
   25a00:	e3400003 	movt	r0, #3
   25a04:	e3a0208b 	mov	r2, #139	; 0x8b
   25a08:	ebfffd59 	bl	24f74 <assertion_failed>
   25a0c:	e58d0004 	str	r0, [sp, #4]
   25a10:	eb001cba 	bl	2cd00 <LeaveCritical>
   25a14:	e59d0004 	ldr	r0, [sp, #4]
   25a18:	eaffffed 	b	259d4 <CDeviceNameService::GetDevice(char const*, bool)+0xc0>

00025a1c <CDeviceNameService::Get()>:
   25a1c:	e3093418 	movw	r3, #37912	; 0x9418
   25a20:	e3403003 	movt	r3, #3
   25a24:	e5930000 	ldr	r0, [r3]
   25a28:	e3500000 	cmp	r0, #0
   25a2c:	112fff1e 	bxne	lr
   25a30:	e3061d18 	movw	r1, #27928	; 0x6d18
   25a34:	e3401003 	movt	r1, #3
   25a38:	e3060d70 	movw	r0, #28016	; 0x6d70
   25a3c:	e3400003 	movt	r0, #3
   25a40:	e92d4010 	push	{r4, lr}
   25a44:	e3a020cc 	mov	r2, #204	; 0xcc
   25a48:	ebfffd49 	bl	24f74 <assertion_failed>

00025a4c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   25a4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25a50:	e1a07001 	mov	r7, r1
   25a54:	e1a08002 	mov	r8, r2
   25a58:	e24dd010 	sub	sp, sp, #16
   25a5c:	e1a04000 	mov	r4, r0
   25a60:	e1a0000d 	mov	r0, sp
   25a64:	e1a05003 	mov	r5, r3
   25a68:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   25a6c:	eb000ede 	bl	295ec <CString::CString()>
   25a70:	e1a03008 	mov	r3, r8
   25a74:	e1a02007 	mov	r2, r7
   25a78:	e1a0000d 	mov	r0, sp
   25a7c:	e3061d7c 	movw	r1, #28028	; 0x6d7c
   25a80:	e3401003 	movt	r1, #3
   25a84:	eb0012a8 	bl	2a52c <CString::Format(char const*, ...)>
   25a88:	e1a0000d 	mov	r0, sp
   25a8c:	eb000eed 	bl	29648 <CString::operator char const*() const>
   25a90:	e1a03006 	mov	r3, r6
   25a94:	e1a01000 	mov	r1, r0
   25a98:	e1a02005 	mov	r2, r5
   25a9c:	e1a00004 	mov	r0, r4
   25aa0:	ebffff23 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   25aa4:	e1a0000d 	mov	r0, sp
   25aa8:	eb000e9c 	bl	29520 <CString::~CString()>
   25aac:	e28dd010 	add	sp, sp, #16
   25ab0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00025ab4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   25ab4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25ab8:	e1a06001 	mov	r6, r1
   25abc:	e1a07002 	mov	r7, r2
   25ac0:	e24dd014 	sub	sp, sp, #20
   25ac4:	e1a04000 	mov	r4, r0
   25ac8:	e1a0000d 	mov	r0, sp
   25acc:	e1a05003 	mov	r5, r3
   25ad0:	eb000ec5 	bl	295ec <CString::CString()>
   25ad4:	e1a03007 	mov	r3, r7
   25ad8:	e1a02006 	mov	r2, r6
   25adc:	e1a0000d 	mov	r0, sp
   25ae0:	e3061d7c 	movw	r1, #28028	; 0x6d7c
   25ae4:	e3401003 	movt	r1, #3
   25ae8:	eb00128f 	bl	2a52c <CString::Format(char const*, ...)>
   25aec:	e1a0000d 	mov	r0, sp
   25af0:	eb000ed4 	bl	29648 <CString::operator char const*() const>
   25af4:	e1a02005 	mov	r2, r5
   25af8:	e1a01000 	mov	r1, r0
   25afc:	e1a00004 	mov	r0, r4
   25b00:	ebffff39 	bl	257ec <CDeviceNameService::RemoveDevice(char const*, bool)>
   25b04:	e1a0000d 	mov	r0, sp
   25b08:	eb000e84 	bl	29520 <CString::~CString()>
   25b0c:	e28dd014 	add	sp, sp, #20
   25b10:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00025b14 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   25b14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25b18:	e1a06001 	mov	r6, r1
   25b1c:	e1a07002 	mov	r7, r2
   25b20:	e24dd014 	sub	sp, sp, #20
   25b24:	e1a04000 	mov	r4, r0
   25b28:	e1a0000d 	mov	r0, sp
   25b2c:	e1a05003 	mov	r5, r3
   25b30:	eb000ead 	bl	295ec <CString::CString()>
   25b34:	e1a03007 	mov	r3, r7
   25b38:	e1a02006 	mov	r2, r6
   25b3c:	e1a0000d 	mov	r0, sp
   25b40:	e3061d7c 	movw	r1, #28028	; 0x6d7c
   25b44:	e3401003 	movt	r1, #3
   25b48:	eb001277 	bl	2a52c <CString::Format(char const*, ...)>
   25b4c:	e1a0000d 	mov	r0, sp
   25b50:	eb000ebc 	bl	29648 <CString::operator char const*() const>
   25b54:	e1a02005 	mov	r2, r5
   25b58:	e1a01000 	mov	r1, r0
   25b5c:	e1a00004 	mov	r0, r4
   25b60:	ebffff6b 	bl	25914 <CDeviceNameService::GetDevice(char const*, bool)>
   25b64:	e1a04000 	mov	r4, r0
   25b68:	e1a0000d 	mov	r0, sp
   25b6c:	eb000e6b 	bl	29520 <CString::~CString()>
   25b70:	e1a00004 	mov	r0, r4
   25b74:	e28dd014 	add	sp, sp, #20
   25b78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00025b7c <CDeviceNameService::ListDevices(CDevice*)>:
   25b7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25b80:	e2516000 	subs	r6, r1, #0
   25b84:	e24dd018 	sub	sp, sp, #24
   25b88:	0a000038 	beq	25c70 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
   25b8c:	e5904000 	ldr	r4, [r0]
   25b90:	e3540000 	cmp	r4, #0
   25b94:	0a000033 	beq	25c68 <CDeviceNameService::ListDevices(CDevice*)+0xec>
   25b98:	e3069d94 	movw	r9, #28052	; 0x6d94
   25b9c:	e3409003 	movt	r9, #3
   25ba0:	e3a05000 	mov	r5, #0
   25ba4:	ea00001b 	b	25c18 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
   25ba8:	e5d4200c 	ldrb	r2, [r4, #12]
   25bac:	e2855001 	add	r5, r5, #1
   25bb0:	e1a01009 	mov	r1, r9
   25bb4:	e28d0008 	add	r0, sp, #8
   25bb8:	e3520000 	cmp	r2, #0
   25bbc:	03a02063 	moveq	r2, #99	; 0x63
   25bc0:	13a02062 	movne	r2, #98	; 0x62
   25bc4:	e215a003 	ands	sl, r5, #3
   25bc8:	13a0c020 	movne	ip, #32
   25bcc:	03a0c00a 	moveq	ip, #10
   25bd0:	e58dc000 	str	ip, [sp]
   25bd4:	eb001254 	bl	2a52c <CString::Format(char const*, ...)>
   25bd8:	e5963000 	ldr	r3, [r6]
   25bdc:	e28d0008 	add	r0, sp, #8
   25be0:	e593700c 	ldr	r7, [r3, #12]
   25be4:	eb000e97 	bl	29648 <CString::operator char const*() const>
   25be8:	e1a08000 	mov	r8, r0
   25bec:	e28d0008 	add	r0, sp, #8
   25bf0:	eb000ec4 	bl	29708 <CString::GetLength() const>
   25bf4:	e1a01008 	mov	r1, r8
   25bf8:	e1a02000 	mov	r2, r0
   25bfc:	e1a00006 	mov	r0, r6
   25c00:	e12fff37 	blx	r7
   25c04:	e5944000 	ldr	r4, [r4]
   25c08:	e28d0008 	add	r0, sp, #8
   25c0c:	eb000e43 	bl	29520 <CString::~CString()>
   25c10:	e3540000 	cmp	r4, #0
   25c14:	0a00000a 	beq	25c44 <CDeviceNameService::ListDevices(CDevice*)+0xc8>
   25c18:	e28d0008 	add	r0, sp, #8
   25c1c:	eb000e72 	bl	295ec <CString::CString()>
   25c20:	e5943004 	ldr	r3, [r4, #4]
   25c24:	e3530000 	cmp	r3, #0
   25c28:	1affffde 	bne	25ba8 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
   25c2c:	e3061d18 	movw	r1, #27928	; 0x6d18
   25c30:	e3401003 	movt	r1, #3
   25c34:	e3060d4c 	movw	r0, #27980	; 0x6d4c
   25c38:	e3400003 	movt	r0, #3
   25c3c:	e3a020b9 	mov	r2, #185	; 0xb9
   25c40:	ebfffccb 	bl	24f74 <assertion_failed>
   25c44:	e35a0000 	cmp	sl, #0
   25c48:	0a000006 	beq	25c68 <CDeviceNameService::ListDevices(CDevice*)+0xec>
   25c4c:	e5963000 	ldr	r3, [r6]
   25c50:	e304194c 	movw	r1, #18764	; 0x494c
   25c54:	e3401003 	movt	r1, #3
   25c58:	e1a00006 	mov	r0, r6
   25c5c:	e3a02001 	mov	r2, #1
   25c60:	e593300c 	ldr	r3, [r3, #12]
   25c64:	e12fff33 	blx	r3
   25c68:	e28dd018 	add	sp, sp, #24
   25c6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25c70:	e3061d18 	movw	r1, #27928	; 0x6d18
   25c74:	e3401003 	movt	r1, #3
   25c78:	e3060d84 	movw	r0, #28036	; 0x6d84
   25c7c:	e3400003 	movt	r0, #3
   25c80:	e3a020b0 	mov	r2, #176	; 0xb0
   25c84:	ebfffcba 	bl	24f74 <assertion_failed>

00025c88 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   25c88:	e3a01000 	mov	r1, #0
   25c8c:	e3a0c00a 	mov	ip, #10
   25c90:	ea00000a 	b	25cc0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x38>
   25c94:	e3520009 	cmp	r2, #9
   25c98:	8a00000f 	bhi	25cdc <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
   25c9c:	e023319c 	mla	r3, ip, r1, r3
   25ca0:	e3730001 	cmn	r3, #1
   25ca4:	13a02000 	movne	r2, #0
   25ca8:	03a02001 	moveq	r2, #1
   25cac:	e1510003 	cmp	r1, r3
   25cb0:	83822001 	orrhi	r2, r2, #1
   25cb4:	e1a01003 	mov	r1, r3
   25cb8:	e3520000 	cmp	r2, #0
   25cbc:	1a000006 	bne	25cdc <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
   25cc0:	e0d020d1 	ldrsb	r2, [r0], #1
   25cc4:	e2423030 	sub	r3, r2, #48	; 0x30
   25cc8:	e3520000 	cmp	r2, #0
   25ccc:	e6ef2073 	uxtb	r2, r3
   25cd0:	1affffef 	bne	25c94 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
   25cd4:	e1a00001 	mov	r0, r1
   25cd8:	e12fff1e 	bx	lr
   25cdc:	e3e01000 	mvn	r1, #0
   25ce0:	e1a00001 	mov	r0, r1
   25ce4:	e12fff1e 	bx	lr

00025ce8 <CKernelOptions::~CKernelOptions()>:
   25ce8:	e309341c 	movw	r3, #37916	; 0x941c
   25cec:	e3403003 	movt	r3, #3
   25cf0:	e3a02000 	mov	r2, #0
   25cf4:	e5832000 	str	r2, [r3]
   25cf8:	e12fff1e 	bx	lr

00025cfc <CKernelOptions::GetWidth() const>:
   25cfc:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   25d00:	e12fff1e 	bx	lr

00025d04 <CKernelOptions::GetHeight() const>:
   25d04:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   25d08:	e12fff1e 	bx	lr

00025d0c <CKernelOptions::GetLogDevice() const>:
   25d0c:	e2800e81 	add	r0, r0, #2064	; 0x810
   25d10:	e2800008 	add	r0, r0, #8
   25d14:	e12fff1e 	bx	lr

00025d18 <CKernelOptions::GetLogLevel() const>:
   25d18:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   25d1c:	e12fff1e 	bx	lr

00025d20 <CKernelOptions::GetKeyMap() const>:
   25d20:	e2800e83 	add	r0, r0, #2096	; 0x830
   25d24:	e12fff1e 	bx	lr

00025d28 <CKernelOptions::GetUSBPowerDelay() const>:
   25d28:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   25d2c:	e12fff1e 	bx	lr

00025d30 <CKernelOptions::GetSoundDevice() const>:
   25d30:	e2800e83 	add	r0, r0, #2096	; 0x830
   25d34:	e2800008 	add	r0, r0, #8
   25d38:	e12fff1e 	bx	lr

00025d3c <CKernelOptions::GetSoundOption() const>:
   25d3c:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
   25d40:	e12fff1e 	bx	lr

00025d44 <CKernelOptions::GetCPUSpeed() const>:
   25d44:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
   25d48:	e12fff1e 	bx	lr

00025d4c <CKernelOptions::GetSoCMaxTemp() const>:
   25d4c:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
   25d50:	e12fff1e 	bx	lr

00025d54 <CKernelOptions::Get()>:
   25d54:	e309341c 	movw	r3, #37916	; 0x941c
   25d58:	e3403003 	movt	r3, #3
   25d5c:	e5930000 	ldr	r0, [r3]
   25d60:	e12fff1e 	bx	lr

00025d64 <CKernelOptions::GetToken()>:
   25d64:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   25d68:	e1d320d0 	ldrsb	r2, [r3]
   25d6c:	e3520000 	cmp	r2, #0
   25d70:	1a000005 	bne	25d8c <CKernelOptions::GetToken()+0x28>
   25d74:	ea000016 	b	25dd4 <CKernelOptions::GetToken()+0x70>
   25d78:	e2833001 	add	r3, r3, #1
   25d7c:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   25d80:	e1d320d0 	ldrsb	r2, [r3]
   25d84:	e3520000 	cmp	r2, #0
   25d88:	0a000011 	beq	25dd4 <CKernelOptions::GetToken()+0x70>
   25d8c:	e3520020 	cmp	r2, #32
   25d90:	0afffff8 	beq	25d78 <CKernelOptions::GetToken()+0x14>
   25d94:	e1a02003 	mov	r2, r3
   25d98:	ea000000 	b	25da0 <CKernelOptions::GetToken()+0x3c>
   25d9c:	e1a02001 	mov	r2, r1
   25da0:	e2821001 	add	r1, r2, #1
   25da4:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   25da8:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   25dac:	e35c0000 	cmp	ip, #0
   25db0:	0a000008 	beq	25dd8 <CKernelOptions::GetToken()+0x74>
   25db4:	e35c0020 	cmp	ip, #32
   25db8:	1afffff7 	bne	25d9c <CKernelOptions::GetToken()+0x38>
   25dbc:	e2822002 	add	r2, r2, #2
   25dc0:	e3a0c000 	mov	ip, #0
   25dc4:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   25dc8:	e1a00003 	mov	r0, r3
   25dcc:	e5c1c000 	strb	ip, [r1]
   25dd0:	e12fff1e 	bx	lr
   25dd4:	e3a03000 	mov	r3, #0
   25dd8:	e1a00003 	mov	r0, r3
   25ddc:	e12fff1e 	bx	lr

00025de0 <CKernelOptions::CKernelOptions()>:
   25de0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25de4:	e1a05000 	mov	r5, r0
   25de8:	e2806e81 	add	r6, r0, #2064	; 0x810
   25dec:	e2866008 	add	r6, r6, #8
   25df0:	e3a04000 	mov	r4, #0
   25df4:	e24dd01c 	sub	sp, sp, #28
   25df8:	e3a02004 	mov	r2, #4
   25dfc:	e3a0303c 	mov	r3, #60	; 0x3c
   25e00:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   25e04:	e3061da0 	movw	r1, #28064	; 0x6da0
   25e08:	e3401003 	movt	r1, #3
   25e0c:	e5853854 	str	r3, [r5, #2132]	; 0x854
   25e10:	e1a00006 	mov	r0, r6
   25e14:	e5854810 	str	r4, [r5, #2064]	; 0x810
   25e18:	e2858e83 	add	r8, r5, #2096	; 0x830
   25e1c:	e5854814 	str	r4, [r5, #2068]	; 0x814
   25e20:	e5854834 	str	r4, [r5, #2100]	; 0x834
   25e24:	e585484c 	str	r4, [r5, #2124]	; 0x84c
   25e28:	e5c54850 	strb	r4, [r5, #2128]	; 0x850
   25e2c:	eb001637 	bl	2b710 <strcpy>
   25e30:	e1a00008 	mov	r0, r8
   25e34:	e3041918 	movw	r1, #18712	; 0x4918
   25e38:	e3401003 	movt	r1, #3
   25e3c:	eb001633 	bl	2b710 <strcpy>
   25e40:	e309341c 	movw	r3, #37916	; 0x941c
   25e44:	e3403003 	movt	r3, #3
   25e48:	e1a01004 	mov	r1, r4
   25e4c:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
   25e50:	e28d0010 	add	r0, sp, #16
   25e54:	e5835000 	str	r5, [r3]
   25e58:	ebfffc66 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   25e5c:	e58d4000 	str	r4, [sp]
   25e60:	e1a02005 	mov	r2, r5
   25e64:	e28d0010 	add	r0, sp, #16
   25e68:	e3a01001 	mov	r1, #1
   25e6c:	e3401005 	movt	r1, #5
   25e70:	e300380c 	movw	r3, #2060	; 0x80c
   25e74:	ebfffca8 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   25e78:	e1500004 	cmp	r0, r4
   25e7c:	0a00003d 	beq	25f78 <CKernelOptions::CKernelOptions()+0x198>
   25e80:	e5953008 	ldr	r3, [r5, #8]
   25e84:	e3530b02 	cmp	r3, #2048	; 0x800
   25e88:	2a00003a 	bcs	25f78 <CKernelOptions::CKernelOptions()+0x198>
   25e8c:	e0853003 	add	r3, r5, r3
   25e90:	e3067e10 	movw	r7, #28176	; 0x6e10
   25e94:	e3407003 	movt	r7, #3
   25e98:	e3069da8 	movw	r9, #28072	; 0x6da8
   25e9c:	e3409003 	movt	r9, #3
   25ea0:	e5c3400c 	strb	r4, [r3, #12]
   25ea4:	e3062db0 	movw	r2, #28080	; 0x6db0
   25ea8:	e3402003 	movt	r2, #3
   25eac:	e58d200c 	str	r2, [sp, #12]
   25eb0:	e285300c 	add	r3, r5, #12
   25eb4:	e585380c 	str	r3, [r5, #2060]	; 0x80c
   25eb8:	e1a00005 	mov	r0, r5
   25ebc:	ebffffa8 	bl	25d64 <CKernelOptions::GetToken()>
   25ec0:	e250b000 	subs	fp, r0, #0
   25ec4:	0a00002b 	beq	25f78 <CKernelOptions::CKernelOptions()+0x198>
   25ec8:	e1db30d0 	ldrsb	r3, [fp]
   25ecc:	e3530000 	cmp	r3, #0
   25ed0:	0a000008 	beq	25ef8 <CKernelOptions::CKernelOptions()+0x118>
   25ed4:	e1a0400b 	mov	r4, fp
   25ed8:	e353003d 	cmp	r3, #61	; 0x3d
   25edc:	1a000002 	bne	25eec <CKernelOptions::CKernelOptions()+0x10c>
   25ee0:	ea000029 	b	25f8c <CKernelOptions::CKernelOptions()+0x1ac>
   25ee4:	e353003d 	cmp	r3, #61	; 0x3d
   25ee8:	0a000027 	beq	25f8c <CKernelOptions::CKernelOptions()+0x1ac>
   25eec:	e1f430d1 	ldrsb	r3, [r4, #1]!
   25ef0:	e3530000 	cmp	r3, #0
   25ef4:	1afffffa 	bne	25ee4 <CKernelOptions::CKernelOptions()+0x104>
   25ef8:	e1a01007 	mov	r1, r7
   25efc:	e1a0000b 	mov	r0, fp
   25f00:	eb0015a2 	bl	2b590 <strcmp>
   25f04:	e3500000 	cmp	r0, #0
   25f08:	0affffea 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25f0c:	e1a01009 	mov	r1, r9
   25f10:	e1a0000b 	mov	r0, fp
   25f14:	eb00159d 	bl	2b590 <strcmp>
   25f18:	e3500000 	cmp	r0, #0
   25f1c:	13a0a000 	movne	sl, #0
   25f20:	0affffe4 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25f24:	e59d100c 	ldr	r1, [sp, #12]
   25f28:	e1a0000b 	mov	r0, fp
   25f2c:	eb001597 	bl	2b590 <strcmp>
   25f30:	e2504000 	subs	r4, r0, #0
   25f34:	0a000038 	beq	2601c <CKernelOptions::CKernelOptions()+0x23c>
   25f38:	e3061db8 	movw	r1, #28088	; 0x6db8
   25f3c:	e3401003 	movt	r1, #3
   25f40:	e1a0000b 	mov	r0, fp
   25f44:	eb001591 	bl	2b590 <strcmp>
   25f48:	e3500000 	cmp	r0, #0
   25f4c:	1a000038 	bne	26034 <CKernelOptions::CKernelOptions()+0x254>
   25f50:	e35a0000 	cmp	sl, #0
   25f54:	0affffd7 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25f58:	e1da20d0 	ldrsb	r2, [sl]
   25f5c:	e3520000 	cmp	r2, #0
   25f60:	0affffd4 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25f64:	e1a0000a 	mov	r0, sl
   25f68:	ebffff46 	bl	25c88 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25f6c:	e3500004 	cmp	r0, #4
   25f70:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
   25f74:	eaffffcf 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25f78:	e28d0010 	add	r0, sp, #16
   25f7c:	ebfffc24 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   25f80:	e1a00005 	mov	r0, r5
   25f84:	e28dd01c 	add	sp, sp, #28
   25f88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f8c:	e3a03000 	mov	r3, #0
   25f90:	e1a01007 	mov	r1, r7
   25f94:	e5c43000 	strb	r3, [r4]
   25f98:	e1a0000b 	mov	r0, fp
   25f9c:	eb00157b 	bl	2b590 <strcmp>
   25fa0:	e284a001 	add	sl, r4, #1
   25fa4:	e3500000 	cmp	r0, #0
   25fa8:	1a00000b 	bne	25fdc <CKernelOptions::CKernelOptions()+0x1fc>
   25fac:	e35a0000 	cmp	sl, #0
   25fb0:	0affffc0 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25fb4:	e1d420d1 	ldrsb	r2, [r4, #1]
   25fb8:	e3520000 	cmp	r2, #0
   25fbc:	0affffbd 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25fc0:	e1a0000a 	mov	r0, sl
   25fc4:	ebffff2f 	bl	25c88 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25fc8:	e2402d0a 	sub	r2, r0, #640	; 0x280
   25fcc:	e300353c 	movw	r3, #1340	; 0x53c
   25fd0:	e1520003 	cmp	r2, r3
   25fd4:	95850810 	strls	r0, [r5, #2064]	; 0x810
   25fd8:	eaffffb6 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25fdc:	e1a01009 	mov	r1, r9
   25fe0:	e1a0000b 	mov	r0, fp
   25fe4:	eb001569 	bl	2b590 <strcmp>
   25fe8:	e3500000 	cmp	r0, #0
   25fec:	1affffcc 	bne	25f24 <CKernelOptions::CKernelOptions()+0x144>
   25ff0:	e35a0000 	cmp	sl, #0
   25ff4:	0affffaf 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   25ff8:	e1d420d1 	ldrsb	r2, [r4, #1]
   25ffc:	e3520000 	cmp	r2, #0
   26000:	0affffac 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26004:	e1a0000a 	mov	r0, sl
   26008:	ebffff1e 	bl	25c88 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   2600c:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   26010:	e3530f96 	cmp	r3, #600	; 0x258
   26014:	95850814 	strls	r0, [r5, #2068]	; 0x814
   26018:	eaffffa6 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   2601c:	e1a0100a 	mov	r1, sl
   26020:	e3a02013 	mov	r2, #19
   26024:	e1a00006 	mov	r0, r6
   26028:	eb0015c3 	bl	2b73c <strncpy>
   2602c:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
   26030:	eaffffa0 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26034:	e3061dc4 	movw	r1, #28100	; 0x6dc4
   26038:	e3401003 	movt	r1, #3
   2603c:	e1a0000b 	mov	r0, fp
   26040:	eb001552 	bl	2b590 <strcmp>
   26044:	e2504000 	subs	r4, r0, #0
   26048:	1a000005 	bne	26064 <CKernelOptions::CKernelOptions()+0x284>
   2604c:	e1a0100a 	mov	r1, sl
   26050:	e3a02002 	mov	r2, #2
   26054:	e1a00008 	mov	r0, r8
   26058:	eb0015b7 	bl	2b73c <strncpy>
   2605c:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
   26060:	eaffff94 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26064:	e3061dcc 	movw	r1, #28108	; 0x6dcc
   26068:	e3401003 	movt	r1, #3
   2606c:	e1a0000b 	mov	r0, fp
   26070:	eb001546 	bl	2b590 <strcmp>
   26074:	e3500000 	cmp	r0, #0
   26078:	1a00000b 	bne	260ac <CKernelOptions::CKernelOptions()+0x2cc>
   2607c:	e35a0000 	cmp	sl, #0
   26080:	0affff8c 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26084:	e1da20d0 	ldrsb	r2, [sl]
   26088:	e3520000 	cmp	r2, #0
   2608c:	0affff89 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26090:	e1a0000a 	mov	r0, sl
   26094:	ebfffefb 	bl	25c88 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26098:	e24020c8 	sub	r2, r0, #200	; 0xc8
   2609c:	e3013e78 	movw	r3, #7800	; 0x1e78
   260a0:	e1520003 	cmp	r2, r3
   260a4:	95850834 	strls	r0, [r5, #2100]	; 0x834
   260a8:	eaffff82 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   260ac:	e3061ddc 	movw	r1, #28124	; 0x6ddc
   260b0:	e3401003 	movt	r1, #3
   260b4:	e1a0000b 	mov	r0, fp
   260b8:	eb001534 	bl	2b590 <strcmp>
   260bc:	e2504000 	subs	r4, r0, #0
   260c0:	1a000006 	bne	260e0 <CKernelOptions::CKernelOptions()+0x300>
   260c4:	e2850e83 	add	r0, r5, #2096	; 0x830
   260c8:	e1a0100a 	mov	r1, sl
   260cc:	e2800008 	add	r0, r0, #8
   260d0:	e3a02013 	mov	r2, #19
   260d4:	eb001598 	bl	2b73c <strncpy>
   260d8:	e5c5484b 	strb	r4, [r5, #2123]	; 0x84b
   260dc:	eaffff75 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   260e0:	e3061de8 	movw	r1, #28136	; 0x6de8
   260e4:	e3401003 	movt	r1, #3
   260e8:	e1a0000b 	mov	r0, fp
   260ec:	eb001527 	bl	2b590 <strcmp>
   260f0:	e3500000 	cmp	r0, #0
   260f4:	1a000009 	bne	26120 <CKernelOptions::CKernelOptions()+0x340>
   260f8:	e35a0000 	cmp	sl, #0
   260fc:	0affff6d 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26100:	e1da20d0 	ldrsb	r2, [sl]
   26104:	e3520000 	cmp	r2, #0
   26108:	0affff6a 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   2610c:	e1a0000a 	mov	r0, sl
   26110:	ebfffedc 	bl	25c88 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26114:	e3500002 	cmp	r0, #2
   26118:	9585084c 	strls	r0, [r5, #2124]	; 0x84c
   2611c:	eaffff65 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26120:	e3061df4 	movw	r1, #28148	; 0x6df4
   26124:	e3401003 	movt	r1, #3
   26128:	e1a0000b 	mov	r0, fp
   2612c:	eb001517 	bl	2b590 <strcmp>
   26130:	e3500000 	cmp	r0, #0
   26134:	1a000007 	bne	26158 <CKernelOptions::CKernelOptions()+0x378>
   26138:	e1a0000a 	mov	r0, sl
   2613c:	e3061dfc 	movw	r1, #28156	; 0x6dfc
   26140:	e3401003 	movt	r1, #3
   26144:	eb001511 	bl	2b590 <strcmp>
   26148:	e3500000 	cmp	r0, #0
   2614c:	03a03001 	moveq	r3, #1
   26150:	05c53850 	strbeq	r3, [r5, #2128]	; 0x850
   26154:	eaffff57 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26158:	e1a0000b 	mov	r0, fp
   2615c:	e3061e04 	movw	r1, #28164	; 0x6e04
   26160:	e3401003 	movt	r1, #3
   26164:	eb001509 	bl	2b590 <strcmp>
   26168:	e16f2f1a 	clz	r2, sl
   2616c:	e3500000 	cmp	r0, #0
   26170:	e1a022a2 	lsr	r2, r2, #5
   26174:	13a02001 	movne	r2, #1
   26178:	e3520000 	cmp	r2, #0
   2617c:	1affff4d 	bne	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   26180:	e1da20d0 	ldrsb	r2, [sl]
   26184:	e3520000 	cmp	r2, #0
   26188:	0affff4a 	beq	25eb8 <CKernelOptions::CKernelOptions()+0xd8>
   2618c:	e1a0000a 	mov	r0, sl
   26190:	ebfffebc 	bl	25c88 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26194:	e2403028 	sub	r3, r0, #40	; 0x28
   26198:	e3530026 	cmp	r3, #38	; 0x26
   2619c:	95850854 	strls	r0, [r5, #2132]	; 0x854
   261a0:	eaffff44 	b	25eb8 <CKernelOptions::CKernelOptions()+0xd8>

000261a4 <CKernelOptions::GetOptionValue(char*)>:
   261a4:	e1d030d0 	ldrsb	r3, [r0]
   261a8:	e3530000 	cmp	r3, #0
   261ac:	1a000003 	bne	261c0 <CKernelOptions::GetOptionValue(char*)+0x1c>
   261b0:	ea000007 	b	261d4 <CKernelOptions::GetOptionValue(char*)+0x30>
   261b4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   261b8:	e3530000 	cmp	r3, #0
   261bc:	0a000004 	beq	261d4 <CKernelOptions::GetOptionValue(char*)+0x30>
   261c0:	e353003d 	cmp	r3, #61	; 0x3d
   261c4:	1afffffa 	bne	261b4 <CKernelOptions::GetOptionValue(char*)+0x10>
   261c8:	e2803001 	add	r3, r0, #1
   261cc:	e3a02000 	mov	r2, #0
   261d0:	e5c02000 	strb	r2, [r0]
   261d4:	e1a00003 	mov	r0, r3
   261d8:	e12fff1e 	bx	lr

000261dc <CKernelOptions::GetDecimal(char*)>:
   261dc:	e2503000 	subs	r3, r0, #0
   261e0:	0a000003 	beq	261f4 <CKernelOptions::GetDecimal(char*)+0x18>
   261e4:	e1d330d0 	ldrsb	r3, [r3]
   261e8:	e3530000 	cmp	r3, #0
   261ec:	0a000000 	beq	261f4 <CKernelOptions::GetDecimal(char*)+0x18>
   261f0:	eafffea4 	b	25c88 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   261f4:	e3e00000 	mvn	r0, #0
   261f8:	e12fff1e 	bx	lr

000261fc <CLogger::CLogger(unsigned int, CTimer*)>:
   261fc:	e92d4010 	push	{r4, lr}
   26200:	e1a04000 	mov	r4, r0
   26204:	e3a03000 	mov	r3, #0
   26208:	e3a0c001 	mov	ip, #1
   2620c:	e3a00901 	mov	r0, #16384	; 0x4000
   26210:	e884000e 	stm	r4, {r1, r2, r3}
   26214:	e584300c 	str	r3, [r4, #12]
   26218:	e5843010 	str	r3, [r4, #16]
   2621c:	e5843014 	str	r3, [r4, #20]
   26220:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   26224:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26228:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   2622c:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   26230:	e584c018 	str	ip, [r4, #24]
   26234:	e584c0ec 	str	ip, [r4, #236]	; 0xec
   26238:	eb001732 	bl	2bf08 <operator new[](unsigned int)>
   2623c:	e3093420 	movw	r3, #37920	; 0x9420
   26240:	e3403003 	movt	r3, #3
   26244:	e584000c 	str	r0, [r4, #12]
   26248:	e1a00004 	mov	r0, r4
   2624c:	e5834000 	str	r4, [r3]
   26250:	e8bd8010 	pop	{r4, pc}

00026254 <CLogger::~CLogger()>:
   26254:	e3092420 	movw	r2, #37920	; 0x9420
   26258:	e3402003 	movt	r2, #3
   2625c:	e3a01000 	mov	r1, #0
   26260:	e92d4070 	push	{r4, r5, r6, lr}
   26264:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   26268:	e1a04000 	mov	r4, r0
   2626c:	e1a05001 	mov	r5, r1
   26270:	e5821000 	str	r1, [r2]
   26274:	ea000007 	b	26298 <CLogger::~CLogger()+0x44>
   26278:	e590001c 	ldr	r0, [r0, #28]
   2627c:	eb001729 	bl	2bf28 <operator delete(void*, unsigned int)>
   26280:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26284:	e2833001 	add	r3, r3, #1
   26288:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   2628c:	e3530032 	cmp	r3, #50	; 0x32
   26290:	058450e8 	streq	r5, [r4, #232]	; 0xe8
   26294:	03a03000 	moveq	r3, #0
   26298:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   2629c:	e0840103 	add	r0, r4, r3, lsl #2
   262a0:	e3a01f42 	mov	r1, #264	; 0x108
   262a4:	e1520003 	cmp	r2, r3
   262a8:	1afffff2 	bne	26278 <CLogger::~CLogger()+0x24>
   262ac:	e594000c 	ldr	r0, [r4, #12]
   262b0:	e3500000 	cmp	r0, #0
   262b4:	0a000000 	beq	262bc <CLogger::~CLogger()+0x68>
   262b8:	eb001719 	bl	2bf24 <operator delete[](void*)>
   262bc:	e1a00004 	mov	r0, r4
   262c0:	e8bd8070 	pop	{r4, r5, r6, pc}

000262c4 <CLogger::Initialize(CDevice*)>:
   262c4:	e92d4010 	push	{r4, lr}
   262c8:	e1a04000 	mov	r4, r0
   262cc:	e24dd008 	sub	sp, sp, #8
   262d0:	e5801008 	str	r1, [r0, #8]
   262d4:	eb0003b8 	bl	271bc <CMachineInfo::Get()>
   262d8:	eb0002d7 	bl	26e3c <CMachineInfo::GetMachineName() const>
   262dc:	e3063e18 	movw	r3, #28184	; 0x6e18
   262e0:	e3403003 	movt	r3, #3
   262e4:	e58d0000 	str	r0, [sp]
   262e8:	e283101c 	add	r1, r3, #28
   262ec:	e1a00004 	mov	r0, r4
   262f0:	e3a02003 	mov	r2, #3
   262f4:	eb000004 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   262f8:	e3a00001 	mov	r0, #1
   262fc:	e28dd008 	add	sp, sp, #8
   26300:	e8bd8010 	pop	{r4, pc}

00026304 <CLogger::SetNewTarget(CDevice*)>:
   26304:	e5801008 	str	r1, [r0, #8]
   26308:	e12fff1e 	bx	lr

0002630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   2630c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   26310:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   26314:	e24dd010 	sub	sp, sp, #16
   26318:	e28dc018 	add	ip, sp, #24
   2631c:	e59d3014 	ldr	r3, [sp, #20]
   26320:	e58dc000 	str	ip, [sp]
   26324:	e58dc00c 	str	ip, [sp, #12]
   26328:	eb000003 	bl	2633c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   2632c:	e28dd010 	add	sp, sp, #16
   26330:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   26334:	e28dd004 	add	sp, sp, #4
   26338:	e12fff1e 	bx	lr

0002633c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   2633c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   26340:	e1a07003 	mov	r7, r3
   26344:	e1a04000 	mov	r4, r0
   26348:	e24dd024 	sub	sp, sp, #36	; 0x24
   2634c:	e1a05002 	mov	r5, r2
   26350:	e1a0000d 	mov	r0, sp
   26354:	e1a06001 	mov	r6, r1
   26358:	eb000ca3 	bl	295ec <CString::CString()>
   2635c:	e1a01007 	mov	r1, r7
   26360:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   26364:	e1a0000d 	mov	r0, sp
   26368:	eb000e52 	bl	29cb8 <CString::FormatV(char const*, std::__va_list)>
   2636c:	e1a0000d 	mov	r0, sp
   26370:	eb000cb4 	bl	29648 <CString::operator char const*() const>
   26374:	e1a02005 	mov	r2, r5
   26378:	e1a03000 	mov	r3, r0
   2637c:	e1a01006 	mov	r1, r6
   26380:	e1a00004 	mov	r0, r4
   26384:	eb0000ff 	bl	26788 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   26388:	e5943000 	ldr	r3, [r4]
   2638c:	e1550003 	cmp	r5, r3
   26390:	8a00001b 	bhi	26404 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xc8>
   26394:	e28d0010 	add	r0, sp, #16
   26398:	eb000c93 	bl	295ec <CString::CString()>
   2639c:	e3550000 	cmp	r5, #0
   263a0:	0a00001b 	beq	26414 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd8>
   263a4:	e5940004 	ldr	r0, [r4, #4]
   263a8:	e3500000 	cmp	r0, #0
   263ac:	1a000049 	bne	264d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   263b0:	e1a01006 	mov	r1, r6
   263b4:	e28d0010 	add	r0, sp, #16
   263b8:	eb000cd6 	bl	29718 <CString::Append(char const*)>
   263bc:	e59f1150 	ldr	r1, [pc, #336]	; 26514 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   263c0:	e28d0010 	add	r0, sp, #16
   263c4:	eb000cd3 	bl	29718 <CString::Append(char const*)>
   263c8:	e1a0000d 	mov	r0, sp
   263cc:	eb000c9d 	bl	29648 <CString::operator char const*() const>
   263d0:	e1a01000 	mov	r1, r0
   263d4:	e28d0010 	add	r0, sp, #16
   263d8:	eb000cce 	bl	29718 <CString::Append(char const*)>
   263dc:	e59f1134 	ldr	r1, [pc, #308]	; 26518 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   263e0:	e28d0010 	add	r0, sp, #16
   263e4:	eb000ccb 	bl	29718 <CString::Append(char const*)>
   263e8:	e28d0010 	add	r0, sp, #16
   263ec:	eb000c95 	bl	29648 <CString::operator char const*() const>
   263f0:	e1a01000 	mov	r1, r0
   263f4:	e1a00004 	mov	r0, r4
   263f8:	eb000086 	bl	26618 <CLogger::Write(char const*)>
   263fc:	e28d0010 	add	r0, sp, #16
   26400:	eb000c46 	bl	29520 <CString::~CString()>
   26404:	e1a0000d 	mov	r0, sp
   26408:	eb000c44 	bl	29520 <CString::~CString()>
   2640c:	e28dd024 	add	sp, sp, #36	; 0x24
   26410:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   26414:	e59f1100 	ldr	r1, [pc, #256]	; 2651c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
   26418:	e28d0010 	add	r0, sp, #16
   2641c:	eb000c8f 	bl	29660 <CString::operator=(char const*)>
   26420:	e5940004 	ldr	r0, [r4, #4]
   26424:	e3500000 	cmp	r0, #0
   26428:	0a00000d 	beq	26464 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x128>
   2642c:	eb001197 	bl	2aa90 <CTimer::GetTimeString()>
   26430:	e2505000 	subs	r5, r0, #0
   26434:	0a00000a 	beq	26464 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x128>
   26438:	eb000c82 	bl	29648 <CString::operator char const*() const>
   2643c:	e1a01000 	mov	r1, r0
   26440:	e28d0010 	add	r0, sp, #16
   26444:	eb000cb3 	bl	29718 <CString::Append(char const*)>
   26448:	e28d0010 	add	r0, sp, #16
   2644c:	e59f10cc 	ldr	r1, [pc, #204]	; 26520 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   26450:	eb000cb0 	bl	29718 <CString::Append(char const*)>
   26454:	e5953000 	ldr	r3, [r5]
   26458:	e1a00005 	mov	r0, r5
   2645c:	e5933004 	ldr	r3, [r3, #4]
   26460:	e12fff33 	blx	r3
   26464:	e1a01006 	mov	r1, r6
   26468:	e28d0010 	add	r0, sp, #16
   2646c:	eb000ca9 	bl	29718 <CString::Append(char const*)>
   26470:	e59f109c 	ldr	r1, [pc, #156]	; 26514 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   26474:	e28d0010 	add	r0, sp, #16
   26478:	eb000ca6 	bl	29718 <CString::Append(char const*)>
   2647c:	e1a0000d 	mov	r0, sp
   26480:	eb000c70 	bl	29648 <CString::operator char const*() const>
   26484:	e1a01000 	mov	r1, r0
   26488:	e28d0010 	add	r0, sp, #16
   2648c:	eb000ca1 	bl	29718 <CString::Append(char const*)>
   26490:	e59f108c 	ldr	r1, [pc, #140]	; 26524 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   26494:	e28d0010 	add	r0, sp, #16
   26498:	eb000c9e 	bl	29718 <CString::Append(char const*)>
   2649c:	e59f1074 	ldr	r1, [pc, #116]	; 26518 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   264a0:	e28d0010 	add	r0, sp, #16
   264a4:	eb000c9b 	bl	29718 <CString::Append(char const*)>
   264a8:	e28d0010 	add	r0, sp, #16
   264ac:	eb000c65 	bl	29648 <CString::operator char const*() const>
   264b0:	e1a01000 	mov	r1, r0
   264b4:	e1a00004 	mov	r0, r4
   264b8:	eb000056 	bl	26618 <CLogger::Write(char const*)>
   264bc:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   264c0:	e3530000 	cmp	r3, #0
   264c4:	0a000000 	beq	264cc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x190>
   264c8:	e12fff33 	blx	r3
   264cc:	e3a000ff 	mov	r0, #255	; 0xff
   264d0:	eb001025 	bl	2a56c <set_qemu_exit_status>
   264d4:	eb001028 	bl	2a57c <halt>
   264d8:	eb00116c 	bl	2aa90 <CTimer::GetTimeString()>
   264dc:	e2505000 	subs	r5, r0, #0
   264e0:	0affffb2 	beq	263b0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   264e4:	eb000c57 	bl	29648 <CString::operator char const*() const>
   264e8:	e1a01000 	mov	r1, r0
   264ec:	e28d0010 	add	r0, sp, #16
   264f0:	eb000c88 	bl	29718 <CString::Append(char const*)>
   264f4:	e28d0010 	add	r0, sp, #16
   264f8:	e59f1020 	ldr	r1, [pc, #32]	; 26520 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   264fc:	eb000c85 	bl	29718 <CString::Append(char const*)>
   26500:	e5953000 	ldr	r3, [r5]
   26504:	e1a00005 	mov	r0, r5
   26508:	e5933004 	ldr	r3, [r3, #4]
   2650c:	e12fff33 	blx	r3
   26510:	eaffffa6 	b	263b0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   26514:	00036e50 	.word	0x00036e50
   26518:	00036e4c 	.word	0x00036e4c
   2651c:	00036e3c 	.word	0x00036e3c
   26520:	00036e54 	.word	0x00036e54
   26524:	00036e44 	.word	0x00036e44

00026528 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   26528:	e92d4070 	push	{r4, r5, r6, lr}
   2652c:	e590e000 	ldr	lr, [r0]
   26530:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   26534:	e152000e 	cmp	r2, lr
   26538:	8a000013 	bhi	2658c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   2653c:	e1a05003 	mov	r5, r3
   26540:	e1a04000 	mov	r4, r0
   26544:	e3a03000 	mov	r3, #0
   26548:	e3520000 	cmp	r2, #0
   2654c:	e5cd3000 	strb	r3, [sp]
   26550:	0a00000f 	beq	26594 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   26554:	e1a0000d 	mov	r0, sp
   26558:	eb001489 	bl	2b784 <strcat>
   2655c:	e59f1094 	ldr	r1, [pc, #148]	; 265f8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26560:	e1a0000d 	mov	r0, sp
   26564:	eb001486 	bl	2b784 <strcat>
   26568:	e1a01005 	mov	r1, r5
   2656c:	e1a0000d 	mov	r0, sp
   26570:	eb001483 	bl	2b784 <strcat>
   26574:	e59f1080 	ldr	r1, [pc, #128]	; 265fc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26578:	e1a0000d 	mov	r0, sp
   2657c:	eb001480 	bl	2b784 <strcat>
   26580:	e1a0100d 	mov	r1, sp
   26584:	e1a00004 	mov	r0, r4
   26588:	eb000022 	bl	26618 <CLogger::Write(char const*)>
   2658c:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   26590:	e8bd8070 	pop	{r4, r5, r6, pc}
   26594:	e1a06001 	mov	r6, r1
   26598:	e1a0000d 	mov	r0, sp
   2659c:	e59f105c 	ldr	r1, [pc, #92]	; 26600 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   265a0:	eb00145a 	bl	2b710 <strcpy>
   265a4:	e1a01006 	mov	r1, r6
   265a8:	e1a0000d 	mov	r0, sp
   265ac:	eb001474 	bl	2b784 <strcat>
   265b0:	e59f1040 	ldr	r1, [pc, #64]	; 265f8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   265b4:	e1a0000d 	mov	r0, sp
   265b8:	eb001471 	bl	2b784 <strcat>
   265bc:	e1a01005 	mov	r1, r5
   265c0:	e1a0000d 	mov	r0, sp
   265c4:	eb00146e 	bl	2b784 <strcat>
   265c8:	e59f1034 	ldr	r1, [pc, #52]	; 26604 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   265cc:	e1a0000d 	mov	r0, sp
   265d0:	eb00146b 	bl	2b784 <strcat>
   265d4:	e59f1020 	ldr	r1, [pc, #32]	; 265fc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   265d8:	e1a0000d 	mov	r0, sp
   265dc:	eb001468 	bl	2b784 <strcat>
   265e0:	e1a0100d 	mov	r1, sp
   265e4:	e1a00004 	mov	r0, r4
   265e8:	eb00000a 	bl	26618 <CLogger::Write(char const*)>
   265ec:	e3a000ff 	mov	r0, #255	; 0xff
   265f0:	eb000fdd 	bl	2a56c <set_qemu_exit_status>
   265f4:	eb000fe0 	bl	2a57c <halt>
   265f8:	00036e50 	.word	0x00036e50
   265fc:	00036e4c 	.word	0x00036e4c
   26600:	00036e3c 	.word	0x00036e3c
   26604:	00036e44 	.word	0x00036e44

00026608 <CLogger::Get()>:
   26608:	e3093420 	movw	r3, #37920	; 0x9420
   2660c:	e3403003 	movt	r3, #3
   26610:	e5930000 	ldr	r0, [r3]
   26614:	e12fff1e 	bx	lr

00026618 <CLogger::Write(char const*)>:
   26618:	e92d4070 	push	{r4, r5, r6, lr}
   2661c:	e1a04000 	mov	r4, r0
   26620:	e1a00001 	mov	r0, r1
   26624:	e1a05001 	mov	r5, r1
   26628:	eb0013ce 	bl	2b568 <strlen>
   2662c:	e5943008 	ldr	r3, [r4, #8]
   26630:	e1a02000 	mov	r2, r0
   26634:	e1a06000 	mov	r6, r0
   26638:	e1a01005 	mov	r1, r5
   2663c:	e1a00003 	mov	r0, r3
   26640:	e5933000 	ldr	r3, [r3]
   26644:	e593300c 	ldr	r3, [r3, #12]
   26648:	e12fff33 	blx	r3
   2664c:	e5940018 	ldr	r0, [r4, #24]
   26650:	e3500000 	cmp	r0, #0
   26654:	1a000017 	bne	266b8 <CLogger::Write(char const*)+0xa0>
   26658:	e0850006 	add	r0, r5, r6
   2665c:	e1500005 	cmp	r0, r5
   26660:	0a00000f 	beq	266a4 <CLogger::Write(char const*)+0x8c>
   26664:	e0d530d1 	ldrsb	r3, [r5], #1
   26668:	e353000d 	cmp	r3, #13
   2666c:	0afffffa 	beq	2665c <CLogger::Write(char const*)+0x44>
   26670:	e5942010 	ldr	r2, [r4, #16]
   26674:	e594100c 	ldr	r1, [r4, #12]
   26678:	e7c13002 	strb	r3, [r1, r2]
   2667c:	e5943010 	ldr	r3, [r4, #16]
   26680:	e5942014 	ldr	r2, [r4, #20]
   26684:	e2833001 	add	r3, r3, #1
   26688:	e7ed3053 	ubfx	r3, r3, #0, #14
   2668c:	e5843010 	str	r3, [r4, #16]
   26690:	e1530002 	cmp	r3, r2
   26694:	1afffff0 	bne	2665c <CLogger::Write(char const*)+0x44>
   26698:	e2433001 	sub	r3, r3, #1
   2669c:	e7ed3053 	ubfx	r3, r3, #0, #14
   266a0:	e5843010 	str	r3, [r4, #16]
   266a4:	e5943018 	ldr	r3, [r4, #24]
   266a8:	e3530000 	cmp	r3, #0
   266ac:	08bd8070 	popeq	{r4, r5, r6, pc}
   266b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   266b4:	ea001991 	b	2cd00 <LeaveCritical>
   266b8:	eb001963 	bl	2cc4c <EnterCritical>
   266bc:	eaffffe5 	b	26658 <CLogger::Write(char const*)+0x40>

000266c0 <CLogger::Read(void*, unsigned int)>:
   266c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   266c4:	e1a04000 	mov	r4, r0
   266c8:	e5900018 	ldr	r0, [r0, #24]
   266cc:	e1a05001 	mov	r5, r1
   266d0:	e1a06002 	mov	r6, r2
   266d4:	e3500000 	cmp	r0, #0
   266d8:	1a00001a 	bne	26748 <CLogger::Read(void*, unsigned int)+0x88>
   266dc:	e1c421d0 	ldrd	r2, [r4, #16]
   266e0:	e1520003 	cmp	r2, r3
   266e4:	0a00001f 	beq	26768 <CLogger::Read(void*, unsigned int)+0xa8>
   266e8:	e1a07006 	mov	r7, r6
   266ec:	e3a0c000 	mov	ip, #0
   266f0:	ea00000a 	b	26720 <CLogger::Read(void*, unsigned int)+0x60>
   266f4:	e594100c 	ldr	r1, [r4, #12]
   266f8:	e28cc001 	add	ip, ip, #1
   266fc:	e19130d3 	ldrsb	r3, [r1, r3]
   26700:	e4c53001 	strb	r3, [r5], #1
   26704:	e5943014 	ldr	r3, [r4, #20]
   26708:	e5941010 	ldr	r1, [r4, #16]
   2670c:	e2833001 	add	r3, r3, #1
   26710:	e7ed3053 	ubfx	r3, r3, #0, #14
   26714:	e5843014 	str	r3, [r4, #20]
   26718:	e1530001 	cmp	r3, r1
   2671c:	0a000014 	beq	26774 <CLogger::Read(void*, unsigned int)+0xb4>
   26720:	e15c0006 	cmp	ip, r6
   26724:	1afffff2 	bne	266f4 <CLogger::Read(void*, unsigned int)+0x34>
   26728:	e5943018 	ldr	r3, [r4, #24]
   2672c:	e3530000 	cmp	r3, #0
   26730:	1a000001 	bne	2673c <CLogger::Read(void*, unsigned int)+0x7c>
   26734:	e1a00007 	mov	r0, r7
   26738:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2673c:	eb00196f 	bl	2cd00 <LeaveCritical>
   26740:	e1a00007 	mov	r0, r7
   26744:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26748:	eb00193f 	bl	2cc4c <EnterCritical>
   2674c:	e1c421d0 	ldrd	r2, [r4, #16]
   26750:	e1520003 	cmp	r2, r3
   26754:	1affffe3 	bne	266e8 <CLogger::Read(void*, unsigned int)+0x28>
   26758:	e5943018 	ldr	r3, [r4, #24]
   2675c:	e3530000 	cmp	r3, #0
   26760:	0a000000 	beq	26768 <CLogger::Read(void*, unsigned int)+0xa8>
   26764:	eb001965 	bl	2cd00 <LeaveCritical>
   26768:	e3e07000 	mvn	r7, #0
   2676c:	e1a00007 	mov	r0, r7
   26770:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26774:	e5943018 	ldr	r3, [r4, #24]
   26778:	e1a0700c 	mov	r7, ip
   2677c:	e3530000 	cmp	r3, #0
   26780:	0affffeb 	beq	26734 <CLogger::Read(void*, unsigned int)+0x74>
   26784:	eaffffec 	b	2673c <CLogger::Read(void*, unsigned int)+0x7c>

00026788 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   26788:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2678c:	e1a04000 	mov	r4, r0
   26790:	e3a00f42 	mov	r0, #264	; 0x108
   26794:	e24dd008 	sub	sp, sp, #8
   26798:	e1a07003 	mov	r7, r3
   2679c:	e1a06001 	mov	r6, r1
   267a0:	e1a08002 	mov	r8, r2
   267a4:	eb0015d1 	bl	2bef0 <operator new(unsigned int)>
   267a8:	e1a05000 	mov	r5, r0
   267ac:	e1a01006 	mov	r1, r6
   267b0:	e3a02032 	mov	r2, #50	; 0x32
   267b4:	e4c08001 	strb	r8, [r0], #1
   267b8:	e3a06000 	mov	r6, #0
   267bc:	eb0013de 	bl	2b73c <strncpy>
   267c0:	e1a01007 	mov	r1, r7
   267c4:	e2850033 	add	r0, r5, #51	; 0x33
   267c8:	e3a020c8 	mov	r2, #200	; 0xc8
   267cc:	e5c56032 	strb	r6, [r5, #50]	; 0x32
   267d0:	eb0013d9 	bl	2b73c <strncpy>
   267d4:	e5940004 	ldr	r0, [r4, #4]
   267d8:	e5c560fa 	strb	r6, [r5, #250]	; 0xfa
   267dc:	e1500006 	cmp	r0, r6
   267e0:	0a000004 	beq	267f8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   267e4:	e28d2004 	add	r2, sp, #4
   267e8:	e1a0100d 	mov	r1, sp
   267ec:	eb00103c 	bl	2a8e4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   267f0:	e1500006 	cmp	r0, r6
   267f4:	1a00002b 	bne	268a8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x120>
   267f8:	e3a03000 	mov	r3, #0
   267fc:	e58530fc 	str	r3, [r5, #252]	; 0xfc
   26800:	e5853100 	str	r3, [r5, #256]	; 0x100
   26804:	e5853104 	str	r3, [r5, #260]	; 0x104
   26808:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   2680c:	e3500000 	cmp	r0, #0
   26810:	1a000021 	bne	2689c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
   26814:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   26818:	e2823001 	add	r3, r2, #1
   2681c:	e0842102 	add	r2, r4, r2, lsl #2
   26820:	e3530032 	cmp	r3, #50	; 0x32
   26824:	03a03000 	moveq	r3, #0
   26828:	e582501c 	str	r5, [r2, #28]
   2682c:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   26830:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   26834:	e1520003 	cmp	r2, r3
   26838:	0a000009 	beq	26864 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xdc>
   2683c:	e3500000 	cmp	r0, #0
   26840:	1a000005 	bne	2685c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
   26844:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   26848:	e3530000 	cmp	r3, #0
   2684c:	0a000000 	beq	26854 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   26850:	e12fff33 	blx	r3
   26854:	e28dd008 	add	sp, sp, #8
   26858:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2685c:	eb001927 	bl	2cd00 <LeaveCritical>
   26860:	eafffff7 	b	26844 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   26864:	e0842103 	add	r2, r4, r3, lsl #2
   26868:	e2833001 	add	r3, r3, #1
   2686c:	e3530032 	cmp	r3, #50	; 0x32
   26870:	03a03000 	moveq	r3, #0
   26874:	e3500000 	cmp	r0, #0
   26878:	e592501c 	ldr	r5, [r2, #28]
   2687c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26880:	1a000014 	bne	268d8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x150>
   26884:	e3550000 	cmp	r5, #0
   26888:	0affffed 	beq	26844 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   2688c:	e1a00005 	mov	r0, r5
   26890:	e3a01f42 	mov	r1, #264	; 0x108
   26894:	eb0015a3 	bl	2bf28 <operator delete(void*, unsigned int)>
   26898:	eaffffe9 	b	26844 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   2689c:	eb0018ea 	bl	2cc4c <EnterCritical>
   268a0:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   268a4:	eaffffda 	b	26814 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   268a8:	e59d3004 	ldr	r3, [sp, #4]
   268ac:	e3012759 	movw	r2, #5977	; 0x1759
   268b0:	e34d21b7 	movt	r2, #53687	; 0xd1b7
   268b4:	e59d1000 	ldr	r1, [sp]
   268b8:	e58510fc 	str	r1, [r5, #252]	; 0xfc
   268bc:	e0832392 	umull	r2, r3, r2, r3
   268c0:	e5940004 	ldr	r0, [r4, #4]
   268c4:	e1a036a3 	lsr	r3, r3, #13
   268c8:	e5853100 	str	r3, [r5, #256]	; 0x100
   268cc:	eb000fd9 	bl	2a838 <CTimer::GetTimeZone() const>
   268d0:	e5850104 	str	r0, [r5, #260]	; 0x104
   268d4:	eaffffcb 	b	26808 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
   268d8:	eb001908 	bl	2cd00 <LeaveCritical>
   268dc:	eaffffe8 	b	26884 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xfc>

000268e0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   268e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   268e4:	e1a04000 	mov	r4, r0
   268e8:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   268ec:	e1a06001 	mov	r6, r1
   268f0:	e1a08002 	mov	r8, r2
   268f4:	e1a07003 	mov	r7, r3
   268f8:	e3500000 	cmp	r0, #0
   268fc:	1a000020 	bne	26984 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa4>
   26900:	e1c42ed4 	ldrd	r2, [r4, #228]	; 0xe4
   26904:	e1530002 	cmp	r3, r2
   26908:	0a000026 	beq	269a8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc8>
   2690c:	e0842103 	add	r2, r4, r3, lsl #2
   26910:	e2833001 	add	r3, r3, #1
   26914:	e3530032 	cmp	r3, #50	; 0x32
   26918:	03a03000 	moveq	r3, #0
   2691c:	e3500000 	cmp	r0, #0
   26920:	e592501c 	ldr	r5, [r2, #28]
   26924:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26928:	1a000020 	bne	269b0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd0>
   2692c:	e1a01005 	mov	r1, r5
   26930:	e1a00008 	mov	r0, r8
   26934:	e4d12001 	ldrb	r2, [r1], #1
   26938:	e5c62000 	strb	r2, [r6]
   2693c:	eb001373 	bl	2b710 <strcpy>
   26940:	e2851033 	add	r1, r5, #51	; 0x33
   26944:	e1a00007 	mov	r0, r7
   26948:	eb001370 	bl	2b710 <strcpy>
   2694c:	e59d2018 	ldr	r2, [sp, #24]
   26950:	e59530fc 	ldr	r3, [r5, #252]	; 0xfc
   26954:	e1a00005 	mov	r0, r5
   26958:	e3a01f42 	mov	r1, #264	; 0x108
   2695c:	e5823000 	str	r3, [r2]
   26960:	e59d201c 	ldr	r2, [sp, #28]
   26964:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   26968:	e5823000 	str	r3, [r2]
   2696c:	e59d2020 	ldr	r2, [sp, #32]
   26970:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   26974:	e5823000 	str	r3, [r2]
   26978:	eb00156a 	bl	2bf28 <operator delete(void*, unsigned int)>
   2697c:	e3a00001 	mov	r0, #1
   26980:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26984:	eb0018b0 	bl	2cc4c <EnterCritical>
   26988:	e1c42ed4 	ldrd	r2, [r4, #228]	; 0xe4
   2698c:	e1520003 	cmp	r2, r3
   26990:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   26994:	1affffdc 	bne	2690c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x2c>
   26998:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   2699c:	e3530000 	cmp	r3, #0
   269a0:	0a000000 	beq	269a8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc8>
   269a4:	eb0018d5 	bl	2cd00 <LeaveCritical>
   269a8:	e3a00000 	mov	r0, #0
   269ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   269b0:	eb0018d2 	bl	2cd00 <LeaveCritical>
   269b4:	eaffffdc 	b	2692c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x4c>

000269b8 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   269b8:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   269bc:	e12fff1e 	bx	lr

000269c0 <CLogger::RegisterPanicHandler(void (*)())>:
   269c0:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   269c4:	e12fff1e 	bx	lr

000269c8 <CMachineInfo::CMachineInfo()>:
   269c8:	e92d4810 	push	{r4, fp, lr}
   269cc:	e28db008 	add	fp, sp, #8
   269d0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   269d4:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   269d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   269dc:	e3a02000 	mov	r2, #0
   269e0:	e5832000 	str	r2, [r3]
   269e4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   269e8:	e3a02010 	mov	r2, #16
   269ec:	e5c32004 	strb	r2, [r3, #4]
   269f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   269f4:	e3a02000 	mov	r2, #0
   269f8:	e5832008 	str	r2, [r3, #8]
   269fc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a00:	e3a02000 	mov	r2, #0
   26a04:	e583200c 	str	r2, [r3, #12]
   26a08:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a0c:	e3a02004 	mov	r2, #4
   26a10:	e5c32010 	strb	r2, [r3, #16]
   26a14:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a18:	e3a02000 	mov	r2, #0
   26a1c:	e5832014 	str	r2, [r3, #20]
   26a20:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a24:	e3012f35 	movw	r2, #7989	; 0x1f35
   26a28:	e1c321b8 	strh	r2, [r3, #24]
   26a2c:	e3093424 	movw	r3, #37924	; 0x9424
   26a30:	e3403003 	movt	r3, #3
   26a34:	e5933000 	ldr	r3, [r3]
   26a38:	e3530000 	cmp	r3, #0
   26a3c:	0a000024 	beq	26ad4 <CMachineInfo::CMachineInfo()+0x10c>
   26a40:	e3093424 	movw	r3, #37924	; 0x9424
   26a44:	e3403003 	movt	r3, #3
   26a48:	e5933000 	ldr	r3, [r3]
   26a4c:	e5932000 	ldr	r2, [r3]
   26a50:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a54:	e5832000 	str	r2, [r3]
   26a58:	e3093424 	movw	r3, #37924	; 0x9424
   26a5c:	e3403003 	movt	r3, #3
   26a60:	e5933000 	ldr	r3, [r3]
   26a64:	e5d32004 	ldrb	r2, [r3, #4]
   26a68:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a6c:	e5c32004 	strb	r2, [r3, #4]
   26a70:	e3093424 	movw	r3, #37924	; 0x9424
   26a74:	e3403003 	movt	r3, #3
   26a78:	e5933000 	ldr	r3, [r3]
   26a7c:	e5932008 	ldr	r2, [r3, #8]
   26a80:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a84:	e5832008 	str	r2, [r3, #8]
   26a88:	e3093424 	movw	r3, #37924	; 0x9424
   26a8c:	e3403003 	movt	r3, #3
   26a90:	e5933000 	ldr	r3, [r3]
   26a94:	e593200c 	ldr	r2, [r3, #12]
   26a98:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26a9c:	e583200c 	str	r2, [r3, #12]
   26aa0:	e3093424 	movw	r3, #37924	; 0x9424
   26aa4:	e3403003 	movt	r3, #3
   26aa8:	e5933000 	ldr	r3, [r3]
   26aac:	e5d32010 	ldrb	r2, [r3, #16]
   26ab0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26ab4:	e5c32010 	strb	r2, [r3, #16]
   26ab8:	e3093424 	movw	r3, #37924	; 0x9424
   26abc:	e3403003 	movt	r3, #3
   26ac0:	e5933000 	ldr	r3, [r3]
   26ac4:	e5932014 	ldr	r2, [r3, #20]
   26ac8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26acc:	e5832014 	str	r2, [r3, #20]
   26ad0:	ea0000ca 	b	26e00 <CMachineInfo::CMachineInfo()+0x438>
   26ad4:	e3093424 	movw	r3, #37924	; 0x9424
   26ad8:	e3403003 	movt	r3, #3
   26adc:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
   26ae0:	e5832000 	str	r2, [r3]
   26ae4:	e24b3020 	sub	r3, fp, #32
   26ae8:	e3a01001 	mov	r1, #1
   26aec:	e1a00003 	mov	r0, r3
   26af0:	ebfff940 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   26af4:	e24b2030 	sub	r2, fp, #48	; 0x30
   26af8:	e24b0020 	sub	r0, fp, #32
   26afc:	e3a03000 	mov	r3, #0
   26b00:	e58d3000 	str	r3, [sp]
   26b04:	e3a03010 	mov	r3, #16
   26b08:	e3a01001 	mov	r1, #1
   26b0c:	e3401006 	movt	r1, #6
   26b10:	ebfff981 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26b14:	e1a03000 	mov	r3, r0
   26b18:	e3530000 	cmp	r3, #0
   26b1c:	0a000003 	beq	26b30 <CMachineInfo::CMachineInfo()+0x168>
   26b20:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26b24:	e6ff2073 	uxth	r2, r3
   26b28:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b2c:	e1c321b8 	strh	r2, [r3, #24]
   26b30:	e24b2040 	sub	r2, fp, #64	; 0x40
   26b34:	e24b0020 	sub	r0, fp, #32
   26b38:	e3a03000 	mov	r3, #0
   26b3c:	e58d3000 	str	r3, [sp]
   26b40:	e3a03010 	mov	r3, #16
   26b44:	e3a01002 	mov	r1, #2
   26b48:	e3401001 	movt	r1, #1
   26b4c:	ebfff972 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26b50:	e1a03000 	mov	r3, r0
   26b54:	e2233001 	eor	r3, r3, #1
   26b58:	e6ef3073 	uxtb	r3, r3
   26b5c:	e3530000 	cmp	r3, #0
   26b60:	0a000001 	beq	26b6c <CMachineInfo::CMachineInfo()+0x1a4>
   26b64:	e3a04000 	mov	r4, #0
   26b68:	ea00009f 	b	26dec <CMachineInfo::CMachineInfo()+0x424>
   26b6c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   26b70:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b74:	e5832000 	str	r2, [r3]
   26b78:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b7c:	e5933000 	ldr	r3, [r3]
   26b80:	e2033502 	and	r3, r3, #8388608	; 0x800000
   26b84:	e3530000 	cmp	r3, #0
   26b88:	0a000061 	beq	26d14 <CMachineInfo::CMachineInfo()+0x34c>
   26b8c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26b90:	e5933000 	ldr	r3, [r3]
   26b94:	e1a03223 	lsr	r3, r3, #4
   26b98:	e6ef3073 	uxtb	r3, r3
   26b9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   26ba0:	e3a03000 	mov	r3, #0
   26ba4:	e50b3010 	str	r3, [fp, #-16]
   26ba8:	e51b3010 	ldr	r3, [fp, #-16]
   26bac:	e353000d 	cmp	r3, #13
   26bb0:	8a00000e 	bhi	26bf0 <CMachineInfo::CMachineInfo()+0x228>
   26bb4:	e3093194 	movw	r3, #37268	; 0x9194
   26bb8:	e3403003 	movt	r3, #3
   26bbc:	e51b2010 	ldr	r2, [fp, #-16]
   26bc0:	e3a0100c 	mov	r1, #12
   26bc4:	e0020291 	mul	r2, r1, r2
   26bc8:	e0833002 	add	r3, r3, r2
   26bcc:	e5933000 	ldr	r3, [r3]
   26bd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   26bd4:	e1520003 	cmp	r2, r3
   26bd8:	0a000003 	beq	26bec <CMachineInfo::CMachineInfo()+0x224>
   26bdc:	e51b3010 	ldr	r3, [fp, #-16]
   26be0:	e2833001 	add	r3, r3, #1
   26be4:	e50b3010 	str	r3, [fp, #-16]
   26be8:	eaffffee 	b	26ba8 <CMachineInfo::CMachineInfo()+0x1e0>
   26bec:	e320f000 	nop	{0}
   26bf0:	e51b3010 	ldr	r3, [fp, #-16]
   26bf4:	e353000d 	cmp	r3, #13
   26bf8:	9a000001 	bls	26c04 <CMachineInfo::CMachineInfo()+0x23c>
   26bfc:	e3a04000 	mov	r4, #0
   26c00:	ea000079 	b	26dec <CMachineInfo::CMachineInfo()+0x424>
   26c04:	e3093194 	movw	r3, #37268	; 0x9194
   26c08:	e3403003 	movt	r3, #3
   26c0c:	e51b2010 	ldr	r2, [fp, #-16]
   26c10:	e3a0100c 	mov	r1, #12
   26c14:	e0020291 	mul	r2, r1, r2
   26c18:	e0833002 	add	r3, r3, r2
   26c1c:	e2833004 	add	r3, r3, #4
   26c20:	e5d32000 	ldrb	r2, [r3]
   26c24:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c28:	e5c32004 	strb	r2, [r3, #4]
   26c2c:	e3093194 	movw	r3, #37268	; 0x9194
   26c30:	e3403003 	movt	r3, #3
   26c34:	e51b2010 	ldr	r2, [fp, #-16]
   26c38:	e3a0100c 	mov	r1, #12
   26c3c:	e0020291 	mul	r2, r1, r2
   26c40:	e0833002 	add	r3, r3, r2
   26c44:	e2833008 	add	r3, r3, #8
   26c48:	e5932000 	ldr	r2, [r3]
   26c4c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c50:	e5832008 	str	r2, [r3, #8]
   26c54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c58:	e5933000 	ldr	r3, [r3]
   26c5c:	e203300f 	and	r3, r3, #15
   26c60:	e2832001 	add	r2, r3, #1
   26c64:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c68:	e583200c 	str	r2, [r3, #12]
   26c6c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c70:	e5933000 	ldr	r3, [r3]
   26c74:	e1a03623 	lsr	r3, r3, #12
   26c78:	e6ef3073 	uxtb	r3, r3
   26c7c:	e203300f 	and	r3, r3, #15
   26c80:	e6ef2073 	uxtb	r2, r3
   26c84:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c88:	e5c32010 	strb	r2, [r3, #16]
   26c8c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26c90:	e5933000 	ldr	r3, [r3]
   26c94:	e1a03a23 	lsr	r3, r3, #20
   26c98:	e2033007 	and	r3, r3, #7
   26c9c:	e3a02c01 	mov	r2, #256	; 0x100
   26ca0:	e1a03312 	lsl	r3, r2, r3
   26ca4:	e1a02003 	mov	r2, r3
   26ca8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26cac:	e5832014 	str	r2, [r3, #20]
   26cb0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26cb4:	e5d33010 	ldrb	r3, [r3, #16]
   26cb8:	e3530003 	cmp	r3, #3
   26cbc:	9a000002 	bls	26ccc <CMachineInfo::CMachineInfo()+0x304>
   26cc0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26cc4:	e3a02004 	mov	r2, #4
   26cc8:	e5c32010 	strb	r2, [r3, #16]
   26ccc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26cd0:	e5d33004 	ldrb	r3, [r3, #4]
   26cd4:	e3530003 	cmp	r3, #3
   26cd8:	1a000042 	bne	26de8 <CMachineInfo::CMachineInfo()+0x420>
   26cdc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26ce0:	e5933014 	ldr	r3, [r3, #20]
   26ce4:	e3530c01 	cmp	r3, #256	; 0x100
   26ce8:	1a00003e 	bne	26de8 <CMachineInfo::CMachineInfo()+0x420>
   26cec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26cf0:	e593300c 	ldr	r3, [r3, #12]
   26cf4:	e3530001 	cmp	r3, #1
   26cf8:	1a000001 	bne	26d04 <CMachineInfo::CMachineInfo()+0x33c>
   26cfc:	e3a02001 	mov	r2, #1
   26d00:	ea000000 	b	26d08 <CMachineInfo::CMachineInfo()+0x340>
   26d04:	e3a02002 	mov	r2, #2
   26d08:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26d0c:	e5c32004 	strb	r2, [r3, #4]
   26d10:	ea000034 	b	26de8 <CMachineInfo::CMachineInfo()+0x420>
   26d14:	e3a03000 	mov	r3, #0
   26d18:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   26d1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26d20:	e3530010 	cmp	r3, #16
   26d24:	8a00000c 	bhi	26d5c <CMachineInfo::CMachineInfo()+0x394>
   26d28:	e3093084 	movw	r3, #36996	; 0x9084
   26d2c:	e3403003 	movt	r3, #3
   26d30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26d34:	e7932202 	ldr	r2, [r3, r2, lsl #4]
   26d38:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26d3c:	e5933000 	ldr	r3, [r3]
   26d40:	e1520003 	cmp	r2, r3
   26d44:	0a000003 	beq	26d58 <CMachineInfo::CMachineInfo()+0x390>
   26d48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26d4c:	e2833001 	add	r3, r3, #1
   26d50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   26d54:	eafffff0 	b	26d1c <CMachineInfo::CMachineInfo()+0x354>
   26d58:	e320f000 	nop	{0}
   26d5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26d60:	e3530010 	cmp	r3, #16
   26d64:	9a000001 	bls	26d70 <CMachineInfo::CMachineInfo()+0x3a8>
   26d68:	e3a04000 	mov	r4, #0
   26d6c:	ea00001e 	b	26dec <CMachineInfo::CMachineInfo()+0x424>
   26d70:	e3092084 	movw	r2, #36996	; 0x9084
   26d74:	e3402003 	movt	r2, #3
   26d78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26d7c:	e1a03203 	lsl	r3, r3, #4
   26d80:	e0823003 	add	r3, r2, r3
   26d84:	e5d32004 	ldrb	r2, [r3, #4]
   26d88:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26d8c:	e5c32004 	strb	r2, [r3, #4]
   26d90:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26d94:	e3a02001 	mov	r2, #1
   26d98:	e5832008 	str	r2, [r3, #8]
   26d9c:	e3092084 	movw	r2, #36996	; 0x9084
   26da0:	e3402003 	movt	r2, #3
   26da4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26da8:	e1a03203 	lsl	r3, r3, #4
   26dac:	e0823003 	add	r3, r2, r3
   26db0:	e5932008 	ldr	r2, [r3, #8]
   26db4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26db8:	e583200c 	str	r2, [r3, #12]
   26dbc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26dc0:	e3a02000 	mov	r2, #0
   26dc4:	e5c32010 	strb	r2, [r3, #16]
   26dc8:	e3092084 	movw	r2, #36996	; 0x9084
   26dcc:	e3402003 	movt	r2, #3
   26dd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26dd4:	e1a03203 	lsl	r3, r3, #4
   26dd8:	e0823003 	add	r3, r2, r3
   26ddc:	e593200c 	ldr	r2, [r3, #12]
   26de0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26de4:	e5832014 	str	r2, [r3, #20]
   26de8:	e3a04001 	mov	r4, #1
   26dec:	e24b3020 	sub	r3, fp, #32
   26df0:	e1a00003 	mov	r0, r3
   26df4:	ebfff886 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   26df8:	e3540001 	cmp	r4, #1
   26dfc:	e320f000 	nop	{0}
   26e00:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26e04:	e1a00003 	mov	r0, r3
   26e08:	e24bd008 	sub	sp, fp, #8
   26e0c:	e8bd8810 	pop	{r4, fp, pc}

00026e10 <CMachineInfo::~CMachineInfo()>:
   26e10:	e3093424 	movw	r3, #37924	; 0x9424
   26e14:	e3403003 	movt	r3, #3
   26e18:	e3a01010 	mov	r1, #16
   26e1c:	e5c01004 	strb	r1, [r0, #4]
   26e20:	e5932000 	ldr	r2, [r3]
   26e24:	e1520000 	cmp	r2, r0
   26e28:	03a02000 	moveq	r2, #0
   26e2c:	05832000 	streq	r2, [r3]
   26e30:	e12fff1e 	bx	lr

00026e34 <CMachineInfo::GetMachineModel() const>:
   26e34:	e5d00004 	ldrb	r0, [r0, #4]
   26e38:	e12fff1e 	bx	lr

00026e3c <CMachineInfo::GetMachineName() const>:
   26e3c:	e5d02004 	ldrb	r2, [r0, #4]
   26e40:	e3093084 	movw	r3, #36996	; 0x9084
   26e44:	e3403003 	movt	r3, #3
   26e48:	e0833102 	add	r3, r3, r2, lsl #2
   26e4c:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
   26e50:	e12fff1e 	bx	lr

00026e54 <CMachineInfo::GetModelMajor() const>:
   26e54:	e5900008 	ldr	r0, [r0, #8]
   26e58:	e12fff1e 	bx	lr

00026e5c <CMachineInfo::GetModelRevision() const>:
   26e5c:	e590000c 	ldr	r0, [r0, #12]
   26e60:	e12fff1e 	bx	lr

00026e64 <CMachineInfo::GetSoCType() const>:
   26e64:	e5d00010 	ldrb	r0, [r0, #16]
   26e68:	e12fff1e 	bx	lr

00026e6c <CMachineInfo::GetRAMSize() const>:
   26e6c:	e5900014 	ldr	r0, [r0, #20]
   26e70:	e12fff1e 	bx	lr

00026e74 <CMachineInfo::GetSoCName() const>:
   26e74:	e5d02010 	ldrb	r2, [r0, #16]
   26e78:	e3093084 	movw	r3, #36996	; 0x9084
   26e7c:	e3403003 	movt	r3, #3
   26e80:	e0833102 	add	r3, r3, r2, lsl #2
   26e84:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   26e88:	e12fff1e 	bx	lr

00026e8c <CMachineInfo::GetRevisionRaw() const>:
   26e8c:	e5900000 	ldr	r0, [r0]
   26e90:	e12fff1e 	bx	lr

00026e94 <CMachineInfo::GetActLEDInfo() const>:
   26e94:	e5d02004 	ldrb	r2, [r0, #4]
   26e98:	e3093084 	movw	r3, #36996	; 0x9084
   26e9c:	e3403003 	movt	r3, #3
   26ea0:	e0833102 	add	r3, r3, r2, lsl #2
   26ea4:	e5930210 	ldr	r0, [r3, #528]	; 0x210
   26ea8:	e12fff1e 	bx	lr

00026eac <CMachineInfo::GetClockRate(unsigned int) const>:
   26eac:	e92d4030 	push	{r4, r5, lr}
   26eb0:	e1a04001 	mov	r4, r1
   26eb4:	e1a05000 	mov	r5, r0
   26eb8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   26ebc:	e3a01000 	mov	r1, #0
   26ec0:	e28d000c 	add	r0, sp, #12
   26ec4:	ebfff84b 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   26ec8:	e3a03004 	mov	r3, #4
   26ecc:	e58d3000 	str	r3, [sp]
   26ed0:	e3a03014 	mov	r3, #20
   26ed4:	e28d000c 	add	r0, sp, #12
   26ed8:	e3a01002 	mov	r1, #2
   26edc:	e3401003 	movt	r1, #3
   26ee0:	e08d2003 	add	r2, sp, r3
   26ee4:	e58d4020 	str	r4, [sp, #32]
   26ee8:	ebfff88b 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26eec:	e3500000 	cmp	r0, #0
   26ef0:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   26ef4:	1a00000b 	bne	26f28 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
   26ef8:	e3540002 	cmp	r4, #2
   26efc:	0a000007 	beq	26f20 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   26f00:	e3540004 	cmp	r4, #4
   26f04:	0a00000c 	beq	26f3c <CMachineInfo::GetClockRate(unsigned int) const+0x90>
   26f08:	e3540001 	cmp	r4, #1
   26f0c:	0a000012 	beq	26f5c <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   26f10:	e59f1050 	ldr	r1, [pc, #80]	; 26f68 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   26f14:	e3002141 	movw	r2, #321	; 0x141
   26f18:	e2810010 	add	r0, r1, #16
   26f1c:	ebfff814 	bl	24f74 <assertion_failed>
   26f20:	e3a04b1b 	mov	r4, #27648	; 0x6c00
   26f24:	e34042dc 	movt	r4, #732	; 0x2dc
   26f28:	e28d000c 	add	r0, sp, #12
   26f2c:	ebfff838 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   26f30:	e1a00004 	mov	r0, r4
   26f34:	e28dd02c 	add	sp, sp, #44	; 0x2c
   26f38:	e8bd8030 	pop	{r4, r5, pc}
   26f3c:	e5952008 	ldr	r2, [r5, #8]
   26f40:	e3a03ca3 	mov	r3, #41728	; 0xa300
   26f44:	e34131e1 	movt	r3, #4577	; 0x11e1
   26f48:	e3520002 	cmp	r2, #2
   26f4c:	e30b4280 	movw	r4, #45696	; 0xb280
   26f50:	e3404ee6 	movt	r4, #3814	; 0xee6
   26f54:	81a04003 	movhi	r4, r3
   26f58:	eafffff2 	b	26f28 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
   26f5c:	e3a04ce1 	mov	r4, #57600	; 0xe100
   26f60:	e34045f5 	movt	r4, #1525	; 0x5f5
   26f64:	eaffffef 	b	26f28 <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
   26f68:	00036fd0 	.word	0x00036fd0

00026f6c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   26f6c:	e3510036 	cmp	r1, #54	; 0x36
   26f70:	0a000006 	beq	26f90 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   26f74:	e3510037 	cmp	r1, #55	; 0x37
   26f78:	1a00000e 	bne	26fb8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
   26f7c:	e5d03004 	ldrb	r3, [r0, #4]
   26f80:	e3530003 	cmp	r3, #3
   26f84:	83a00028 	movhi	r0, #40	; 0x28
   26f88:	93a0002d 	movls	r0, #45	; 0x2d
   26f8c:	e12fff1e 	bx	lr
   26f90:	e5d03004 	ldrb	r3, [r0, #4]
   26f94:	e3530003 	cmp	r3, #3
   26f98:	9a000004 	bls	26fb0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
   26f9c:	e5903008 	ldr	r3, [r0, #8]
   26fa0:	e3530003 	cmp	r3, #3
   26fa4:	33a0002d 	movcc	r0, #45	; 0x2d
   26fa8:	23a00029 	movcs	r0, #41	; 0x29
   26fac:	e12fff1e 	bx	lr
   26fb0:	e3a00028 	mov	r0, #40	; 0x28
   26fb4:	e12fff1e 	bx	lr
   26fb8:	e59f100c 	ldr	r1, [pc, #12]	; 26fcc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   26fbc:	e300217a 	movw	r2, #378	; 0x17a
   26fc0:	e92d4010 	push	{r4, lr}
   26fc4:	e2810010 	add	r0, r1, #16
   26fc8:	ebfff7e9 	bl	24f74 <assertion_failed>
   26fcc:	00036fd0 	.word	0x00036fd0

00026fd0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   26fd0:	e5903008 	ldr	r3, [r0, #8]
   26fd4:	e3530003 	cmp	r3, #3
   26fd8:	8a000006 	bhi	26ff8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
   26fdc:	e3510001 	cmp	r1, #1
   26fe0:	0a00000e 	beq	27020 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   26fe4:	e3510006 	cmp	r1, #6
   26fe8:	e3a00c65 	mov	r0, #25856	; 0x6500
   26fec:	e3410dcd 	movt	r0, #7629	; 0x1dcd
   26ff0:	13a00000 	movne	r0, #0
   26ff4:	e12fff1e 	bx	lr
   26ff8:	e3510001 	cmp	r1, #1
   26ffc:	0a000004 	beq	27014 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   27000:	e3510006 	cmp	r1, #6
   27004:	e3a00d5e 	mov	r0, #6016	; 0x1780
   27008:	e3420cb4 	movt	r0, #11444	; 0x2cb4
   2700c:	13a00000 	movne	r0, #0
   27010:	e12fff1e 	bx	lr
   27014:	e30f0980 	movw	r0, #63872	; 0xf980
   27018:	e3400337 	movt	r0, #823	; 0x337
   2701c:	e12fff1e 	bx	lr
   27020:	e3a00b3e 	mov	r0, #63488	; 0xf800
   27024:	e3400124 	movt	r0, #292	; 0x124
   27028:	e12fff1e 	bx	lr

0002702c <CMachineInfo::GetDevice(TDeviceId) const>:
   2702c:	e3510000 	cmp	r1, #0
   27030:	1a000003 	bne	27044 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   27034:	e5d00004 	ldrb	r0, [r0, #4]
   27038:	e2500001 	subs	r0, r0, #1
   2703c:	13a00001 	movne	r0, #1
   27040:	e12fff1e 	bx	lr
   27044:	e59f100c 	ldr	r1, [pc, #12]	; 27058 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   27048:	e30021b5 	movw	r2, #437	; 0x1b5
   2704c:	e92d4010 	push	{r4, lr}
   27050:	e2810010 	add	r0, r1, #16
   27054:	ebfff7c6 	bl	24f74 <assertion_failed>
   27058:	00036fd0 	.word	0x00036fd0

0002705c <CMachineInfo::ArePWMChannelsSwapped() const>:
   2705c:	e5d03004 	ldrb	r3, [r0, #4]
   27060:	e2430006 	sub	r0, r3, #6
   27064:	e3500001 	cmp	r0, #1
   27068:	83530003 	cmphi	r3, #3
   2706c:	83a00001 	movhi	r0, #1
   27070:	93a00000 	movls	r0, #0
   27074:	e12fff1e 	bx	lr

00027078 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   27078:	e3093424 	movw	r3, #37924	; 0x9424
   2707c:	e3403003 	movt	r3, #3
   27080:	e92d4010 	push	{r4, lr}
   27084:	e5933000 	ldr	r3, [r3]
   27088:	ea000002 	b	27098 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
   2708c:	e1530000 	cmp	r3, r0
   27090:	0a000006 	beq	270b0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x38>
   27094:	e1a00003 	mov	r0, r3
   27098:	e3530000 	cmp	r3, #0
   2709c:	1afffffa 	bne	2708c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x14>
   270a0:	e59f108c 	ldr	r1, [pc, #140]	; 27134 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   270a4:	e30021c5 	movw	r2, #453	; 0x1c5
   270a8:	e2810014 	add	r0, r1, #20
   270ac:	ebfff7b0 	bl	24f74 <assertion_failed>
   270b0:	e3d1200f 	bics	r2, r1, #15
   270b4:	1a00000a 	bne	270e4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x6c>
   270b8:	e351000c 	cmp	r1, #12
   270bc:	8a000018 	bhi	27124 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   270c0:	e1d321b8 	ldrh	r2, [r3, #24]
   270c4:	e1a00152 	asr	r0, r2, r1
   270c8:	e3100001 	tst	r0, #1
   270cc:	0a00000d 	beq	27108 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x90>
   270d0:	e3a0c001 	mov	ip, #1
   270d4:	e1a00001 	mov	r0, r1
   270d8:	e1c2111c 	bic	r1, r2, ip, lsl r1
   270dc:	e1c311b8 	strh	r1, [r3, #24]
   270e0:	e8bd8010 	pop	{r4, pc}
   270e4:	e3510081 	cmp	r1, #129	; 0x81
   270e8:	e1d3c1b8 	ldrh	ip, [r3, #24]
   270ec:	03a02006 	moveq	r2, #6
   270f0:	13a0200c 	movne	r2, #12
   270f4:	e1a0125c 	asr	r1, ip, r2
   270f8:	e3110001 	tst	r1, #1
   270fc:	1a000003 	bne	27110 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x98>
   27100:	e2522001 	subs	r2, r2, #1
   27104:	2afffffa 	bcs	270f4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x7c>
   27108:	e3a00080 	mov	r0, #128	; 0x80
   2710c:	e8bd8010 	pop	{r4, pc}
   27110:	e3a01001 	mov	r1, #1
   27114:	e1a00002 	mov	r0, r2
   27118:	e1cc2211 	bic	r2, ip, r1, lsl r2
   2711c:	e1c321b8 	strh	r2, [r3, #24]
   27120:	e8bd8010 	pop	{r4, pc}
   27124:	e59f1008 	ldr	r1, [pc, #8]	; 27134 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   27128:	e30021ce 	movw	r2, #462	; 0x1ce
   2712c:	e2810024 	add	r0, r1, #36	; 0x24
   27130:	ebfff78f 	bl	24f74 <assertion_failed>
   27134:	00036fd0 	.word	0x00036fd0

00027138 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   27138:	e3093424 	movw	r3, #37924	; 0x9424
   2713c:	e3403003 	movt	r3, #3
   27140:	e92d4010 	push	{r4, lr}
   27144:	e5933000 	ldr	r3, [r3]
   27148:	ea000002 	b	27158 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
   2714c:	e1530000 	cmp	r3, r0
   27150:	0a000006 	beq	27170 <CMachineInfo::FreeDMAChannel(unsigned int)+0x38>
   27154:	e1a00003 	mov	r0, r3
   27158:	e3530000 	cmp	r3, #0
   2715c:	1afffffa 	bne	2714c <CMachineInfo::FreeDMAChannel(unsigned int)+0x14>
   27160:	e59f1050 	ldr	r1, [pc, #80]	; 271b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27164:	e30021ea 	movw	r2, #490	; 0x1ea
   27168:	e2810014 	add	r0, r1, #20
   2716c:	ebfff780 	bl	24f74 <assertion_failed>
   27170:	e351000c 	cmp	r1, #12
   27174:	8a000007 	bhi	27198 <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
   27178:	e1d321b8 	ldrh	r2, [r3, #24]
   2717c:	e1a00152 	asr	r0, r2, r1
   27180:	e3100001 	tst	r0, #1
   27184:	1a000007 	bne	271a8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
   27188:	e3a00001 	mov	r0, #1
   2718c:	e1821110 	orr	r1, r2, r0, lsl r1
   27190:	e1c311b8 	strh	r1, [r3, #24]
   27194:	e8bd8010 	pop	{r4, pc}
   27198:	e59f1018 	ldr	r1, [pc, #24]	; 271b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   2719c:	e30021f2 	movw	r2, #498	; 0x1f2
   271a0:	e2810024 	add	r0, r1, #36	; 0x24
   271a4:	ebfff772 	bl	24f74 <assertion_failed>
   271a8:	e59f1008 	ldr	r1, [pc, #8]	; 271b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   271ac:	e30021f3 	movw	r2, #499	; 0x1f3
   271b0:	e2810040 	add	r0, r1, #64	; 0x40
   271b4:	ebfff76e 	bl	24f74 <assertion_failed>
   271b8:	00036fd0 	.word	0x00036fd0

000271bc <CMachineInfo::Get()>:
   271bc:	e3093424 	movw	r3, #37924	; 0x9424
   271c0:	e3403003 	movt	r3, #3
   271c4:	e5930000 	ldr	r0, [r3]
   271c8:	e3500000 	cmp	r0, #0
   271cc:	112fff1e 	bxne	lr
   271d0:	e59f100c 	ldr	r1, [pc, #12]	; 271e4 <CMachineInfo::Get()+0x28>
   271d4:	e30021f9 	movw	r2, #505	; 0x1f9
   271d8:	e92d4010 	push	{r4, lr}
   271dc:	e2810014 	add	r0, r1, #20
   271e0:	ebfff763 	bl	24f74 <assertion_failed>
   271e4:	00036fd0 	.word	0x00036fd0

000271e8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   271e8:	e92d4010 	push	{r4, lr}
   271ec:	e3a03000 	mov	r3, #0
   271f0:	e3510000 	cmp	r1, #0
   271f4:	e880000e 	stm	r0, {r1, r2, r3}
   271f8:	e580300c 	str	r3, [r0, #12]
   271fc:	0a000009 	beq	27228 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x40>
   27200:	e3520000 	cmp	r2, #0
   27204:	0a00000d 	beq	27240 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x58>
   27208:	e1a04000 	mov	r4, r0
   2720c:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   27210:	91a00101 	lslls	r0, r1, #2
   27214:	83e00000 	mvnhi	r0, #0
   27218:	eb00133a 	bl	2bf08 <operator new[](unsigned int)>
   2721c:	e584000c 	str	r0, [r4, #12]
   27220:	e1a00004 	mov	r0, r4
   27224:	e8bd8010 	pop	{r4, pc}
   27228:	e3071038 	movw	r1, #28728	; 0x7038
   2722c:	e3401003 	movt	r1, #3
   27230:	e3070048 	movw	r0, #28744	; 0x7048
   27234:	e3400003 	movt	r0, #3
   27238:	e3a0201e 	mov	r2, #30
   2723c:	ebfff74c 	bl	24f74 <assertion_failed>
   27240:	e3071038 	movw	r1, #28728	; 0x7038
   27244:	e3401003 	movt	r1, #3
   27248:	e307005c 	movw	r0, #28764	; 0x705c
   2724c:	e3400003 	movt	r0, #3
   27250:	e3a0201f 	mov	r2, #31
   27254:	ebfff746 	bl	24f74 <assertion_failed>

00027258 <CPtrArray::~CPtrArray()>:
   27258:	e92d4010 	push	{r4, lr}
   2725c:	e1a04000 	mov	r4, r0
   27260:	e590000c 	ldr	r0, [r0, #12]
   27264:	e3a03000 	mov	r3, #0
   27268:	e1500003 	cmp	r0, r3
   2726c:	e5843000 	str	r3, [r4]
   27270:	e5843004 	str	r3, [r4, #4]
   27274:	0a000000 	beq	2727c <CPtrArray::~CPtrArray()+0x24>
   27278:	eb001329 	bl	2bf24 <operator delete[](void*)>
   2727c:	e1a00004 	mov	r0, r4
   27280:	e8bd8010 	pop	{r4, pc}

00027284 <CPtrArray::GetCount() const>:
   27284:	e5900008 	ldr	r0, [r0, #8]
   27288:	e12fff1e 	bx	lr

0002728c <CPtrArray::operator[](unsigned int)>:
   2728c:	e5903008 	ldr	r3, [r0, #8]
   27290:	e92d4010 	push	{r4, lr}
   27294:	e1530001 	cmp	r3, r1
   27298:	9a000007 	bls	272bc <CPtrArray::operator[](unsigned int)+0x30>
   2729c:	e5902000 	ldr	r2, [r0]
   272a0:	e1530002 	cmp	r3, r2
   272a4:	8a00000a 	bhi	272d4 <CPtrArray::operator[](unsigned int)+0x48>
   272a8:	e590000c 	ldr	r0, [r0, #12]
   272ac:	e3500000 	cmp	r0, #0
   272b0:	0a00000d 	beq	272ec <CPtrArray::operator[](unsigned int)+0x60>
   272b4:	e0800101 	add	r0, r0, r1, lsl #2
   272b8:	e8bd8010 	pop	{r4, pc}
   272bc:	e3071038 	movw	r1, #28728	; 0x7038
   272c0:	e3401003 	movt	r1, #3
   272c4:	e3070074 	movw	r0, #28788	; 0x7074
   272c8:	e3400003 	movt	r0, #3
   272cc:	e3a02035 	mov	r2, #53	; 0x35
   272d0:	ebfff727 	bl	24f74 <assertion_failed>
   272d4:	e3071038 	movw	r1, #28728	; 0x7038
   272d8:	e3401003 	movt	r1, #3
   272dc:	e307008c 	movw	r0, #28812	; 0x708c
   272e0:	e3400003 	movt	r0, #3
   272e4:	e3a02036 	mov	r2, #54	; 0x36
   272e8:	ebfff721 	bl	24f74 <assertion_failed>
   272ec:	e3071038 	movw	r1, #28728	; 0x7038
   272f0:	e3401003 	movt	r1, #3
   272f4:	e30700ac 	movw	r0, #28844	; 0x70ac
   272f8:	e3400003 	movt	r0, #3
   272fc:	e3a02037 	mov	r2, #55	; 0x37
   27300:	ebfff71b 	bl	24f74 <assertion_failed>

00027304 <CPtrArray::operator[](unsigned int) const>:
   27304:	e5903008 	ldr	r3, [r0, #8]
   27308:	e92d4010 	push	{r4, lr}
   2730c:	e1530001 	cmp	r3, r1
   27310:	9a000007 	bls	27334 <CPtrArray::operator[](unsigned int) const+0x30>
   27314:	e5902000 	ldr	r2, [r0]
   27318:	e1530002 	cmp	r3, r2
   2731c:	8a00000a 	bhi	2734c <CPtrArray::operator[](unsigned int) const+0x48>
   27320:	e590300c 	ldr	r3, [r0, #12]
   27324:	e3530000 	cmp	r3, #0
   27328:	0a00000d 	beq	27364 <CPtrArray::operator[](unsigned int) const+0x60>
   2732c:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   27330:	e8bd8010 	pop	{r4, pc}
   27334:	e3071038 	movw	r1, #28728	; 0x7038
   27338:	e3401003 	movt	r1, #3
   2733c:	e3070074 	movw	r0, #28788	; 0x7074
   27340:	e3400003 	movt	r0, #3
   27344:	e3a0203e 	mov	r2, #62	; 0x3e
   27348:	ebfff709 	bl	24f74 <assertion_failed>
   2734c:	e3071038 	movw	r1, #28728	; 0x7038
   27350:	e3401003 	movt	r1, #3
   27354:	e307008c 	movw	r0, #28812	; 0x708c
   27358:	e3400003 	movt	r0, #3
   2735c:	e3a0203f 	mov	r2, #63	; 0x3f
   27360:	ebfff703 	bl	24f74 <assertion_failed>
   27364:	e3071038 	movw	r1, #28728	; 0x7038
   27368:	e3401003 	movt	r1, #3
   2736c:	e30700ac 	movw	r0, #28844	; 0x70ac
   27370:	e3400003 	movt	r0, #3
   27374:	e3a02040 	mov	r2, #64	; 0x40
   27378:	ebfff6fd 	bl	24f74 <assertion_failed>

0002737c <CPtrArray::Append(void*)>:
   2737c:	e5903000 	ldr	r3, [r0]
   27380:	e92d4070 	push	{r4, r5, r6, lr}
   27384:	e3530000 	cmp	r3, #0
   27388:	0a000024 	beq	27420 <CPtrArray::Append(void*)+0xa4>
   2738c:	e590500c 	ldr	r5, [r0, #12]
   27390:	e1a04000 	mov	r4, r0
   27394:	e3550000 	cmp	r5, #0
   27398:	0a000026 	beq	27438 <CPtrArray::Append(void*)+0xbc>
   2739c:	e5900008 	ldr	r0, [r0, #8]
   273a0:	e1530000 	cmp	r3, r0
   273a4:	3a000029 	bcc	27450 <CPtrArray::Append(void*)+0xd4>
   273a8:	e1a06001 	mov	r6, r1
   273ac:	0a000003 	beq	273c0 <CPtrArray::Append(void*)+0x44>
   273b0:	e7856100 	str	r6, [r5, r0, lsl #2]
   273b4:	e2803001 	add	r3, r0, #1
   273b8:	e5843008 	str	r3, [r4, #8]
   273bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   273c0:	e5940004 	ldr	r0, [r4, #4]
   273c4:	e3500000 	cmp	r0, #0
   273c8:	0a000026 	beq	27468 <CPtrArray::Append(void*)+0xec>
   273cc:	e0833000 	add	r3, r3, r0
   273d0:	e373022e 	cmn	r3, #-536870910	; 0xe0000002
   273d4:	91a00103 	lslls	r0, r3, #2
   273d8:	83e00000 	mvnhi	r0, #0
   273dc:	eb0012c9 	bl	2bf08 <operator new[](unsigned int)>
   273e0:	e5942000 	ldr	r2, [r4]
   273e4:	e594100c 	ldr	r1, [r4, #12]
   273e8:	e1a05000 	mov	r5, r0
   273ec:	e1a02102 	lsl	r2, r2, #2
   273f0:	eb0011b4 	bl	2bac8 <memcpy>
   273f4:	e594000c 	ldr	r0, [r4, #12]
   273f8:	e3500000 	cmp	r0, #0
   273fc:	0a000000 	beq	27404 <CPtrArray::Append(void*)+0x88>
   27400:	eb0012c7 	bl	2bf24 <operator delete[](void*)>
   27404:	e5943000 	ldr	r3, [r4]
   27408:	e5942004 	ldr	r2, [r4, #4]
   2740c:	e5940008 	ldr	r0, [r4, #8]
   27410:	e0833002 	add	r3, r3, r2
   27414:	e584500c 	str	r5, [r4, #12]
   27418:	e5843000 	str	r3, [r4]
   2741c:	eaffffe3 	b	273b0 <CPtrArray::Append(void*)+0x34>
   27420:	e3071038 	movw	r1, #28728	; 0x7038
   27424:	e3401003 	movt	r1, #3
   27428:	e3070048 	movw	r0, #28744	; 0x7048
   2742c:	e3400003 	movt	r0, #3
   27430:	e3a02047 	mov	r2, #71	; 0x47
   27434:	ebfff6ce 	bl	24f74 <assertion_failed>
   27438:	e3071038 	movw	r1, #28728	; 0x7038
   2743c:	e3401003 	movt	r1, #3
   27440:	e30700ac 	movw	r0, #28844	; 0x70ac
   27444:	e3400003 	movt	r0, #3
   27448:	e3a02048 	mov	r2, #72	; 0x48
   2744c:	ebfff6c8 	bl	24f74 <assertion_failed>
   27450:	e3071038 	movw	r1, #28728	; 0x7038
   27454:	e3401003 	movt	r1, #3
   27458:	e307008c 	movw	r0, #28812	; 0x708c
   2745c:	e3400003 	movt	r0, #3
   27460:	e3a0204a 	mov	r2, #74	; 0x4a
   27464:	ebfff6c2 	bl	24f74 <assertion_failed>
   27468:	e3071038 	movw	r1, #28728	; 0x7038
   2746c:	e3401003 	movt	r1, #3
   27470:	e307005c 	movw	r0, #28764	; 0x705c
   27474:	e3400003 	movt	r0, #3
   27478:	e3a0204d 	mov	r2, #77	; 0x4d
   2747c:	ebfff6bc 	bl	24f74 <assertion_failed>

00027480 <CPtrArray::RemoveLast()>:
   27480:	e5903008 	ldr	r3, [r0, #8]
   27484:	e3530000 	cmp	r3, #0
   27488:	0a000002 	beq	27498 <CPtrArray::RemoveLast()+0x18>
   2748c:	e2433001 	sub	r3, r3, #1
   27490:	e5803008 	str	r3, [r0, #8]
   27494:	e12fff1e 	bx	lr
   27498:	e3071038 	movw	r1, #28728	; 0x7038
   2749c:	e3401003 	movt	r1, #3
   274a0:	e30700bc 	movw	r0, #28860	; 0x70bc
   274a4:	e3400003 	movt	r0, #3
   274a8:	e92d4010 	push	{r4, lr}
   274ac:	e3a02060 	mov	r2, #96	; 0x60
   274b0:	ebfff6af 	bl	24f74 <assertion_failed>

000274b4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
   274b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   274b8:	e1a04000 	mov	r4, r0
   274bc:	e1a05001 	mov	r5, r1
   274c0:	e1a07002 	mov	r7, r2
   274c4:	e1a06003 	mov	r6, r3
   274c8:	ebfff86a 	bl	25678 <CDevice::CDevice()>
   274cc:	e59fc064 	ldr	ip, [pc, #100]	; 27538 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x84>
   274d0:	e5845004 	str	r5, [r4, #4]
   274d4:	e2840014 	add	r0, r4, #20
   274d8:	e3a05000 	mov	r5, #0
   274dc:	e5c4600c 	strb	r6, [r4, #12]
   274e0:	e584c000 	str	ip, [r4]
   274e4:	e3a06001 	mov	r6, #1
   274e8:	e5847008 	str	r7, [r4, #8]
   274ec:	e5845010 	str	r5, [r4, #16]
   274f0:	eb00195c 	bl	2da68 <CCharGenerator::CCharGenerator()>
   274f4:	e3e03020 	mvn	r3, #32
   274f8:	e5845018 	str	r5, [r4, #24]
   274fc:	e1a02005 	mov	r2, r5
   27500:	e5845030 	str	r5, [r4, #48]	; 0x30
   27504:	e2840058 	add	r0, r4, #88	; 0x58
   27508:	e5845034 	str	r5, [r4, #52]	; 0x34
   2750c:	e3a01081 	mov	r1, #129	; 0x81
   27510:	e584503c 	str	r5, [r4, #60]	; 0x3c
   27514:	e5845040 	str	r5, [r4, #64]	; 0x40
   27518:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   2751c:	e5c45054 	strb	r5, [r4, #84]	; 0x54
   27520:	e1c434b6 	strh	r3, [r4, #70]	; 0x46
   27524:	e5c46044 	strb	r6, [r4, #68]	; 0x44
   27528:	eb001979 	bl	2db14 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   2752c:	e5846080 	str	r6, [r4, #128]	; 0x80
   27530:	e1a00004 	mov	r0, r4
   27534:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   27538:	000370d8 	.word	0x000370d8

0002753c <CScreenDevice::~CScreenDevice()>:
   2753c:	e5d0300c 	ldrb	r3, [r0, #12]
   27540:	e59f2070 	ldr	r2, [pc, #112]	; 275b8 <CScreenDevice::~CScreenDevice()+0x7c>
   27544:	e92d4070 	push	{r4, r5, r6, lr}
   27548:	e3530000 	cmp	r3, #0
   2754c:	e1a04000 	mov	r4, r0
   27550:	e5802000 	str	r2, [r0]
   27554:	0a000003 	beq	27568 <CScreenDevice::~CScreenDevice()+0x2c>
   27558:	e5900018 	ldr	r0, [r0, #24]
   2755c:	e3500000 	cmp	r0, #0
   27560:	0a000000 	beq	27568 <CScreenDevice::~CScreenDevice()+0x2c>
   27564:	eb00126e 	bl	2bf24 <operator delete[](void*)>
   27568:	e5945010 	ldr	r5, [r4, #16]
   2756c:	e3a03000 	mov	r3, #0
   27570:	e5843018 	str	r3, [r4, #24]
   27574:	e1550003 	cmp	r5, r3
   27578:	0a000004 	beq	27590 <CScreenDevice::~CScreenDevice()+0x54>
   2757c:	e1a00005 	mov	r0, r5
   27580:	eb001818 	bl	2d5e8 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   27584:	e1a00005 	mov	r0, r5
   27588:	e3a01094 	mov	r1, #148	; 0x94
   2758c:	eb001265 	bl	2bf28 <operator delete(void*, unsigned int)>
   27590:	e3a03000 	mov	r3, #0
   27594:	e2840058 	add	r0, r4, #88	; 0x58
   27598:	e5843010 	str	r3, [r4, #16]
   2759c:	eb00199a 	bl	2dc0c <CDMAChannel::~CDMAChannel()>
   275a0:	e2840014 	add	r0, r4, #20
   275a4:	eb001932 	bl	2da74 <CCharGenerator::~CCharGenerator()>
   275a8:	e1a00004 	mov	r0, r4
   275ac:	ebfff823 	bl	25640 <CDevice::~CDevice()>
   275b0:	e1a00004 	mov	r0, r4
   275b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   275b8:	000370d8 	.word	0x000370d8

000275bc <CScreenDevice::~CScreenDevice()>:
   275bc:	e92d4010 	push	{r4, lr}
   275c0:	e1a04000 	mov	r4, r0
   275c4:	ebffffdc 	bl	2753c <CScreenDevice::~CScreenDevice()>
   275c8:	e1a00004 	mov	r0, r4
   275cc:	e3a01084 	mov	r1, #132	; 0x84
   275d0:	eb001254 	bl	2bf28 <operator delete(void*, unsigned int)>
   275d4:	e1a00004 	mov	r0, r4
   275d8:	e8bd8010 	pop	{r4, pc}

000275dc <CScreenDevice::Initialize()>:
   275dc:	e92d4070 	push	{r4, r5, r6, lr}
   275e0:	e1a04000 	mov	r4, r0
   275e4:	e5d0600c 	ldrb	r6, [r0, #12]
   275e8:	e24dd008 	sub	sp, sp, #8
   275ec:	e3560000 	cmp	r6, #0
   275f0:	0a00002b 	beq	276a4 <CScreenDevice::Initialize()+0xc8>
   275f4:	e5903004 	ldr	r3, [r0, #4]
   275f8:	e5900008 	ldr	r0, [r0, #8]
   275fc:	e5840028 	str	r0, [r4, #40]	; 0x28
   27600:	e5843024 	str	r3, [r4, #36]	; 0x24
   27604:	e5843020 	str	r3, [r4, #32]
   27608:	e0000390 	mul	r0, r0, r3
   2760c:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   27610:	e1a00080 	lsl	r0, r0, #1
   27614:	e584001c 	str	r0, [r4, #28]
   27618:	23e00000 	mvncs	r0, #0
   2761c:	eb001239 	bl	2bf08 <operator new[](unsigned int)>
   27620:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   27624:	e5840018 	str	r0, [r4, #24]
   27628:	e2846014 	add	r6, r4, #20
   2762c:	e1a00006 	mov	r0, r6
   27630:	eb001912 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   27634:	e735f015 	udiv	r5, r5, r0
   27638:	e1a00006 	mov	r0, r6
   2763c:	eb00190f 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   27640:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   27644:	e5843040 	str	r3, [r4, #64]	; 0x40
   27648:	e3a03000 	mov	r3, #0
   2764c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   27650:	e0050590 	mul	r5, r0, r5
   27654:	e1a00004 	mov	r0, r4
   27658:	e584502c 	str	r5, [r4, #44]	; 0x2c
   2765c:	e5845038 	str	r5, [r4, #56]	; 0x38
   27660:	eb000212 	bl	27eb0 <CScreenDevice::ClearDisplayEnd()>
   27664:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
   27668:	e3530000 	cmp	r3, #0
   2766c:	1a000009 	bne	27698 <CScreenDevice::Initialize()+0xbc>
   27670:	ebfff8e9 	bl	25a1c <CDeviceNameService::Get()>
   27674:	e3061da0 	movw	r1, #28064	; 0x6da0
   27678:	e3401003 	movt	r1, #3
   2767c:	e1a02004 	mov	r2, r4
   27680:	e3a03000 	mov	r3, #0
   27684:	e3a06001 	mov	r6, #1
   27688:	ebfff829 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2768c:	e1a00006 	mov	r0, r6
   27690:	e28dd008 	add	sp, sp, #8
   27694:	e8bd8070 	pop	{r4, r5, r6, pc}
   27698:	e1a00004 	mov	r0, r4
   2769c:	eb0003df 	bl	28620 <CScreenDevice::InvertCursor() [clone .part.6]>
   276a0:	eafffff2 	b	27670 <CScreenDevice::Initialize()+0x94>
   276a4:	e3a00094 	mov	r0, #148	; 0x94
   276a8:	eb001210 	bl	2bef0 <operator new(unsigned int)>
   276ac:	e5942008 	ldr	r2, [r4, #8]
   276b0:	e5941004 	ldr	r1, [r4, #4]
   276b4:	e1a05000 	mov	r5, r0
   276b8:	e3a03010 	mov	r3, #16
   276bc:	e58d6004 	str	r6, [sp, #4]
   276c0:	e58d6000 	str	r6, [sp]
   276c4:	eb001776 	bl	2d4a4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   276c8:	e5845010 	str	r5, [r4, #16]
   276cc:	e1a00005 	mov	r0, r5
   276d0:	eb0017e0 	bl	2d658 <CBcmFrameBuffer::Initialize()>
   276d4:	e3500000 	cmp	r0, #0
   276d8:	0affffeb 	beq	2768c <CScreenDevice::Initialize()+0xb0>
   276dc:	e5940010 	ldr	r0, [r4, #16]
   276e0:	eb001816 	bl	2d740 <CBcmFrameBuffer::GetDepth() const>
   276e4:	e3500010 	cmp	r0, #16
   276e8:	1affffe7 	bne	2768c <CScreenDevice::Initialize()+0xb0>
   276ec:	e5940010 	ldr	r0, [r4, #16]
   276f0:	eb001814 	bl	2d748 <CBcmFrameBuffer::GetBuffer() const>
   276f4:	e5840018 	str	r0, [r4, #24]
   276f8:	e5940010 	ldr	r0, [r4, #16]
   276fc:	eb001813 	bl	2d750 <CBcmFrameBuffer::GetSize() const>
   27700:	e584001c 	str	r0, [r4, #28]
   27704:	e5940010 	ldr	r0, [r4, #16]
   27708:	eb00180a 	bl	2d738 <CBcmFrameBuffer::GetPitch() const>
   2770c:	e5840020 	str	r0, [r4, #32]
   27710:	e5940010 	ldr	r0, [r4, #16]
   27714:	eb0017ff 	bl	2d718 <CBcmFrameBuffer::GetWidth() const>
   27718:	e5840024 	str	r0, [r4, #36]	; 0x24
   2771c:	e5940010 	ldr	r0, [r4, #16]
   27720:	eb0017fe 	bl	2d720 <CBcmFrameBuffer::GetHeight() const>
   27724:	e5943020 	ldr	r3, [r4, #32]
   27728:	e1a05000 	mov	r5, r0
   2772c:	e5840028 	str	r0, [r4, #40]	; 0x28
   27730:	e3130003 	tst	r3, #3
   27734:	01a030a3 	lsreq	r3, r3, #1
   27738:	05843020 	streq	r3, [r4, #32]
   2773c:	0affffb9 	beq	27628 <CScreenDevice::Initialize()+0x4c>
   27740:	eaffffd1 	b	2768c <CScreenDevice::Initialize()+0xb0>

00027744 <CScreenDevice::GetWidth() const>:
   27744:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   27748:	e12fff1e 	bx	lr

0002774c <CScreenDevice::GetHeight() const>:
   2774c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   27750:	e12fff1e 	bx	lr

00027754 <CScreenDevice::GetColumns() const>:
   27754:	e1a03000 	mov	r3, r0
   27758:	e92d4010 	push	{r4, lr}
   2775c:	e2800014 	add	r0, r0, #20
   27760:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   27764:	eb0018c3 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   27768:	e730f014 	udiv	r0, r4, r0
   2776c:	e8bd8010 	pop	{r4, pc}

00027770 <CScreenDevice::GetRows() const>:
   27770:	e1a03000 	mov	r3, r0
   27774:	e92d4010 	push	{r4, lr}
   27778:	e2800014 	add	r0, r0, #20
   2777c:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
   27780:	eb0018be 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   27784:	e730f014 	udiv	r0, r4, r0
   27788:	e8bd8010 	pop	{r4, pc}

0002778c <CScreenDevice::GetFrameBuffer()>:
   2778c:	e5900010 	ldr	r0, [r0, #16]
   27790:	e12fff1e 	bx	lr

00027794 <CScreenDevice::GetStatus()>:
   27794:	e92d4010 	push	{r4, lr}
   27798:	e591c01c 	ldr	ip, [r1, #28]
   2779c:	e591e018 	ldr	lr, [r1, #24]
   277a0:	e5912030 	ldr	r2, [r1, #48]	; 0x30
   277a4:	e580e000 	str	lr, [r0]
   277a8:	e580c004 	str	ip, [r0, #4]
   277ac:	e591e034 	ldr	lr, [r1, #52]	; 0x34
   277b0:	e591c038 	ldr	ip, [r1, #56]	; 0x38
   277b4:	e5802008 	str	r2, [r0, #8]
   277b8:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
   277bc:	e580e00c 	str	lr, [r0, #12]
   277c0:	e580c010 	str	ip, [r0, #16]
   277c4:	e591e040 	ldr	lr, [r1, #64]	; 0x40
   277c8:	e5d1c044 	ldrb	ip, [r1, #68]	; 0x44
   277cc:	e5802014 	str	r2, [r0, #20]
   277d0:	e1d124b6 	ldrh	r2, [r1, #70]	; 0x46
   277d4:	e580e018 	str	lr, [r0, #24]
   277d8:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
   277dc:	e5c0c01c 	strb	ip, [r0, #28]
   277e0:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
   277e4:	e1c021be 	strh	r2, [r0, #30]
   277e8:	e591c050 	ldr	ip, [r1, #80]	; 0x50
   277ec:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
   277f0:	e5c04020 	strb	r4, [r0, #32]
   277f4:	e580e024 	str	lr, [r0, #36]	; 0x24
   277f8:	e580c028 	str	ip, [r0, #40]	; 0x28
   277fc:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
   27800:	e8bd8010 	pop	{r4, pc}

00027804 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   27804:	e590201c 	ldr	r2, [r0, #28]
   27808:	e5913004 	ldr	r3, [r1, #4]
   2780c:	e1520003 	cmp	r2, r3
   27810:	0a000001 	beq	2781c <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
   27814:	e3a00000 	mov	r0, #0
   27818:	e12fff1e 	bx	lr
   2781c:	e590c020 	ldr	ip, [r0, #32]
   27820:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   27824:	e15c0003 	cmp	ip, r3
   27828:	1afffff9 	bne	27814 <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
   2782c:	e92d4070 	push	{r4, r5, r6, lr}
   27830:	e1a04000 	mov	r4, r0
   27834:	e5900080 	ldr	r0, [r0, #128]	; 0x80
   27838:	e1a05001 	mov	r5, r1
   2783c:	e3500000 	cmp	r0, #0
   27840:	1a000020 	bne	278c8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xc4>
   27844:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   27848:	e3530000 	cmp	r3, #0
   2784c:	1a000029 	bne	278f8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf4>
   27850:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   27854:	e3530000 	cmp	r3, #0
   27858:	1a000026 	bne	278f8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf4>
   2785c:	e5951000 	ldr	r1, [r5]
   27860:	e5940018 	ldr	r0, [r4, #24]
   27864:	eb001097 	bl	2bac8 <memcpy>
   27868:	e5942080 	ldr	r2, [r4, #128]	; 0x80
   2786c:	e5953008 	ldr	r3, [r5, #8]
   27870:	e595000c 	ldr	r0, [r5, #12]
   27874:	e3520000 	cmp	r2, #0
   27878:	e5951010 	ldr	r1, [r5, #16]
   2787c:	e5952014 	ldr	r2, [r5, #20]
   27880:	e5843030 	str	r3, [r4, #48]	; 0x30
   27884:	e5953018 	ldr	r3, [r5, #24]
   27888:	e5d5c01c 	ldrb	ip, [r5, #28]
   2788c:	e5840034 	str	r0, [r4, #52]	; 0x34
   27890:	e5841038 	str	r1, [r4, #56]	; 0x38
   27894:	e1d501be 	ldrh	r0, [r5, #30]
   27898:	e5d51020 	ldrb	r1, [r5, #32]
   2789c:	e584203c 	str	r2, [r4, #60]	; 0x3c
   278a0:	e5843040 	str	r3, [r4, #64]	; 0x40
   278a4:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
   278a8:	e1c424fc 	strd	r2, [r4, #76]	; 0x4c
   278ac:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
   278b0:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
   278b4:	e5c41048 	strb	r1, [r4, #72]	; 0x48
   278b8:	1a000010 	bne	27900 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
   278bc:	f57ff05f 	dmb	sy
   278c0:	e3a00001 	mov	r0, #1
   278c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   278c8:	eb0014df 	bl	2cc4c <EnterCritical>
   278cc:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   278d0:	e3530000 	cmp	r3, #0
   278d4:	1a000003 	bne	278e8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xe4>
   278d8:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   278dc:	e3530000 	cmp	r3, #0
   278e0:	0594201c 	ldreq	r2, [r4, #28]
   278e4:	0affffdc 	beq	2785c <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   278e8:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   278ec:	e3530000 	cmp	r3, #0
   278f0:	0a000000 	beq	278f8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf4>
   278f4:	eb001501 	bl	2cd00 <LeaveCritical>
   278f8:	e3a00000 	mov	r0, #0
   278fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   27900:	eb0014fe 	bl	2cd00 <LeaveCritical>
   27904:	eaffffec 	b	278bc <CScreenDevice::SetStatus(TScreenStatus const&)+0xb8>

00027908 <CScreenDevice::Write(void const*, unsigned int)>:
   27908:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2790c:	e1a05000 	mov	r5, r0
   27910:	e5900080 	ldr	r0, [r0, #128]	; 0x80
   27914:	e1a04001 	mov	r4, r1
   27918:	e1a07002 	mov	r7, r2
   2791c:	e3500000 	cmp	r0, #0
   27920:	1a00001f 	bne	279a4 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
   27924:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   27928:	e3a02001 	mov	r2, #1
   2792c:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   27930:	e3530000 	cmp	r3, #0
   27934:	1a000015 	bne	27990 <CScreenDevice::Write(void const*, unsigned int)+0x88>
   27938:	e3570000 	cmp	r7, #0
   2793c:	0a00000a 	beq	2796c <CScreenDevice::Write(void const*, unsigned int)+0x64>
   27940:	e0846007 	add	r6, r4, r7
   27944:	e0d410d1 	ldrsb	r1, [r4], #1
   27948:	e1a00005 	mov	r0, r5
   2794c:	eb000016 	bl	279ac <CScreenDevice::Write(char)>
   27950:	e1540006 	cmp	r4, r6
   27954:	1afffffa 	bne	27944 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
   27958:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   2795c:	e3530000 	cmp	r3, #0
   27960:	0a000001 	beq	2796c <CScreenDevice::Write(void const*, unsigned int)+0x64>
   27964:	e1a00005 	mov	r0, r5
   27968:	eb00032c 	bl	28620 <CScreenDevice::InvertCursor() [clone .part.6]>
   2796c:	e5953080 	ldr	r3, [r5, #128]	; 0x80
   27970:	e3a02000 	mov	r2, #0
   27974:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   27978:	e1530002 	cmp	r3, r2
   2797c:	0a000000 	beq	27984 <CScreenDevice::Write(void const*, unsigned int)+0x7c>
   27980:	eb0014de 	bl	2cd00 <LeaveCritical>
   27984:	f57ff05f 	dmb	sy
   27988:	e1a00007 	mov	r0, r7
   2798c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   27990:	e1a00005 	mov	r0, r5
   27994:	eb000321 	bl	28620 <CScreenDevice::InvertCursor() [clone .part.6]>
   27998:	e3570000 	cmp	r7, #0
   2799c:	1affffe7 	bne	27940 <CScreenDevice::Write(void const*, unsigned int)+0x38>
   279a0:	eaffffec 	b	27958 <CScreenDevice::Write(void const*, unsigned int)+0x50>
   279a4:	eb0014a8 	bl	2cc4c <EnterCritical>
   279a8:	eaffffdd 	b	27924 <CScreenDevice::Write(void const*, unsigned int)+0x1c>

000279ac <CScreenDevice::Write(char)>:
   279ac:	e92d4010 	push	{r4, lr}
   279b0:	e1a04000 	mov	r4, r0
   279b4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   279b8:	e24dd008 	sub	sp, sp, #8
   279bc:	e3530007 	cmp	r3, #7
   279c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   279c4:	ea000010 	b	27a0c <CScreenDevice::Write(char)+0x60>
   279c8:	00027a58 	.word	0x00027a58
   279cc:	00027ab8 	.word	0x00027ab8
   279d0:	00027acc 	.word	0x00027acc
   279d4:	00027b24 	.word	0x00027b24
   279d8:	00027c00 	.word	0x00027c00
   279dc:	00027c20 	.word	0x00027c20
   279e0:	00027c40 	.word	0x00027c40
   279e4:	00027a1c 	.word	0x00027a1c
   279e8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   279ec:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   279f0:	e1520003 	cmp	r2, r3
   279f4:	9a000004 	bls	27a0c <CScreenDevice::Write(char)+0x60>
   279f8:	e2800014 	add	r0, r0, #20
   279fc:	eb00181f 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   27a00:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   27a04:	e0433000 	sub	r3, r3, r0
   27a08:	e5843040 	str	r3, [r4, #64]	; 0x40
   27a0c:	e3a03000 	mov	r3, #0
   27a10:	e5843030 	str	r3, [r4, #48]	; 0x30
   27a14:	e28dd008 	add	sp, sp, #8
   27a18:	e8bd8010 	pop	{r4, pc}
   27a1c:	e3510068 	cmp	r1, #104	; 0x68
   27a20:	0a000095 	beq	27c7c <CScreenDevice::Write(char)+0x2d0>
   27a24:	e351006c 	cmp	r1, #108	; 0x6c
   27a28:	0a000093 	beq	27c7c <CScreenDevice::Write(char)+0x2d0>
   27a2c:	e2411030 	sub	r1, r1, #48	; 0x30
   27a30:	e6ef3071 	uxtb	r3, r1
   27a34:	e3530009 	cmp	r3, #9
   27a38:	8afffff3 	bhi	27a0c <CScreenDevice::Write(char)+0x60>
   27a3c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   27a40:	e3a0200a 	mov	r2, #10
   27a44:	e0211392 	mla	r1, r2, r3, r1
   27a48:	e584104c 	str	r1, [r4, #76]	; 0x4c
   27a4c:	e3510063 	cmp	r1, #99	; 0x63
   27a50:	8affffed 	bhi	27a0c <CScreenDevice::Write(char)+0x60>
   27a54:	eaffffee 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27a58:	e2413008 	sub	r3, r1, #8
   27a5c:	e3530013 	cmp	r3, #19
   27a60:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27a64:	ea0000cf 	b	27da8 <CScreenDevice::Write(char)+0x3fc>
   27a68:	00027ce0 	.word	0x00027ce0
   27a6c:	00027cd4 	.word	0x00027cd4
   27a70:	00027cc0 	.word	0x00027cc0
   27a74:	00027da8 	.word	0x00027da8
   27a78:	00027da8 	.word	0x00027da8
   27a7c:	00027cb4 	.word	0x00027cb4
   27a80:	00027da8 	.word	0x00027da8
   27a84:	00027da8 	.word	0x00027da8
   27a88:	00027da8 	.word	0x00027da8
   27a8c:	00027da8 	.word	0x00027da8
   27a90:	00027da8 	.word	0x00027da8
   27a94:	00027da8 	.word	0x00027da8
   27a98:	00027da8 	.word	0x00027da8
   27a9c:	00027da8 	.word	0x00027da8
   27aa0:	00027da8 	.word	0x00027da8
   27aa4:	00027da8 	.word	0x00027da8
   27aa8:	00027da8 	.word	0x00027da8
   27aac:	00027da8 	.word	0x00027da8
   27ab0:	00027da8 	.word	0x00027da8
   27ab4:	00027ca8 	.word	0x00027ca8
   27ab8:	e351005b 	cmp	r1, #91	; 0x5b
   27abc:	03a03002 	moveq	r3, #2
   27ac0:	05803030 	streq	r3, [r0, #48]	; 0x30
   27ac4:	0affffd2 	beq	27a14 <CScreenDevice::Write(char)+0x68>
   27ac8:	eaffffcf 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27acc:	e241303f 	sub	r3, r1, #63	; 0x3f
   27ad0:	e3530011 	cmp	r3, #17
   27ad4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27ad8:	ea0000da 	b	27e48 <CScreenDevice::Write(char)+0x49c>
   27adc:	00027dfc 	.word	0x00027dfc
   27ae0:	00027e48 	.word	0x00027e48
   27ae4:	000279e8 	.word	0x000279e8
   27ae8:	00027e28 	.word	0x00027e28
   27aec:	00027e18 	.word	0x00027e18
   27af0:	00027e08 	.word	0x00027e08
   27af4:	00027e48 	.word	0x00027e48
   27af8:	00027e48 	.word	0x00027e48
   27afc:	00027e48 	.word	0x00027e48
   27b00:	00027de4 	.word	0x00027de4
   27b04:	00027e48 	.word	0x00027e48
   27b08:	00027dd4 	.word	0x00027dd4
   27b0c:	00027e38 	.word	0x00027e38
   27b10:	00027a0c 	.word	0x00027a0c
   27b14:	00027a0c 	.word	0x00027a0c
   27b18:	00027e48 	.word	0x00027e48
   27b1c:	00027e48 	.word	0x00027e48
   27b20:	00027a0c 	.word	0x00027a0c
   27b24:	e241303b 	sub	r3, r1, #59	; 0x3b
   27b28:	e3530032 	cmp	r3, #50	; 0x32
   27b2c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27b30:	eaffffbd 	b	27a2c <CScreenDevice::Write(char)+0x80>
   27b34:	00027d9c 	.word	0x00027d9c
   27b38:	00027a2c 	.word	0x00027a2c
   27b3c:	00027a2c 	.word	0x00027a2c
   27b40:	00027a2c 	.word	0x00027a2c
   27b44:	00027a2c 	.word	0x00027a2c
   27b48:	00027a2c 	.word	0x00027a2c
   27b4c:	00027a2c 	.word	0x00027a2c
   27b50:	00027a2c 	.word	0x00027a2c
   27b54:	00027a2c 	.word	0x00027a2c
   27b58:	00027a2c 	.word	0x00027a2c
   27b5c:	00027a2c 	.word	0x00027a2c
   27b60:	00027a2c 	.word	0x00027a2c
   27b64:	00027a2c 	.word	0x00027a2c
   27b68:	00027a2c 	.word	0x00027a2c
   27b6c:	00027a2c 	.word	0x00027a2c
   27b70:	00027a2c 	.word	0x00027a2c
   27b74:	00027a2c 	.word	0x00027a2c
   27b78:	00027a0c 	.word	0x00027a0c
   27b7c:	00027a0c 	.word	0x00027a0c
   27b80:	00027a2c 	.word	0x00027a2c
   27b84:	00027a2c 	.word	0x00027a2c
   27b88:	00027a0c 	.word	0x00027a0c
   27b8c:	00027a2c 	.word	0x00027a2c
   27b90:	00027a2c 	.word	0x00027a2c
   27b94:	00027a2c 	.word	0x00027a2c
   27b98:	00027a2c 	.word	0x00027a2c
   27b9c:	00027a2c 	.word	0x00027a2c
   27ba0:	00027a2c 	.word	0x00027a2c
   27ba4:	00027a2c 	.word	0x00027a2c
   27ba8:	00027cec 	.word	0x00027cec
   27bac:	00027a2c 	.word	0x00027a2c
   27bb0:	00027a2c 	.word	0x00027a2c
   27bb4:	00027a2c 	.word	0x00027a2c
   27bb8:	00027a2c 	.word	0x00027a2c
   27bbc:	00027a2c 	.word	0x00027a2c
   27bc0:	00027a2c 	.word	0x00027a2c
   27bc4:	00027a2c 	.word	0x00027a2c
   27bc8:	00027a2c 	.word	0x00027a2c
   27bcc:	00027a2c 	.word	0x00027a2c
   27bd0:	00027a2c 	.word	0x00027a2c
   27bd4:	00027a2c 	.word	0x00027a2c
   27bd8:	00027a2c 	.word	0x00027a2c
   27bdc:	00027a2c 	.word	0x00027a2c
   27be0:	00027a2c 	.word	0x00027a2c
   27be4:	00027a2c 	.word	0x00027a2c
   27be8:	00027d00 	.word	0x00027d00
   27bec:	00027a2c 	.word	0x00027a2c
   27bf0:	00027a2c 	.word	0x00027a2c
   27bf4:	00027a2c 	.word	0x00027a2c
   27bf8:	00027d00 	.word	0x00027d00
   27bfc:	00027d1c 	.word	0x00027d1c
   27c00:	e2411030 	sub	r1, r1, #48	; 0x30
   27c04:	e6ef3071 	uxtb	r3, r1
   27c08:	e3530009 	cmp	r3, #9
   27c0c:	8affff7e 	bhi	27a0c <CScreenDevice::Write(char)+0x60>
   27c10:	e3a03007 	mov	r3, #7
   27c14:	e580104c 	str	r1, [r0, #76]	; 0x4c
   27c18:	e5803030 	str	r3, [r0, #48]	; 0x30
   27c1c:	eaffff7c 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27c20:	e2411030 	sub	r1, r1, #48	; 0x30
   27c24:	e6ef3071 	uxtb	r3, r1
   27c28:	e3530009 	cmp	r3, #9
   27c2c:	8affff76 	bhi	27a0c <CScreenDevice::Write(char)+0x60>
   27c30:	e3a03006 	mov	r3, #6
   27c34:	e5801050 	str	r1, [r0, #80]	; 0x50
   27c38:	e5803030 	str	r3, [r0, #48]	; 0x30
   27c3c:	eaffff74 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27c40:	e3510048 	cmp	r1, #72	; 0x48
   27c44:	0a000090 	beq	27e8c <CScreenDevice::Write(char)+0x4e0>
   27c48:	e3510072 	cmp	r1, #114	; 0x72
   27c4c:	0a000011 	beq	27c98 <CScreenDevice::Write(char)+0x2ec>
   27c50:	e2411030 	sub	r1, r1, #48	; 0x30
   27c54:	e6ef3071 	uxtb	r3, r1
   27c58:	e3530009 	cmp	r3, #9
   27c5c:	8affff6a 	bhi	27a0c <CScreenDevice::Write(char)+0x60>
   27c60:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   27c64:	e3a0200a 	mov	r2, #10
   27c68:	e0211392 	mla	r1, r2, r3, r1
   27c6c:	e5801050 	str	r1, [r0, #80]	; 0x50
   27c70:	e35100c7 	cmp	r1, #199	; 0xc7
   27c74:	8affff64 	bhi	27a0c <CScreenDevice::Write(char)+0x60>
   27c78:	eaffff65 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27c7c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   27c80:	e3530019 	cmp	r3, #25
   27c84:	02411068 	subeq	r1, r1, #104	; 0x68
   27c88:	016f1f11 	clzeq	r1, r1
   27c8c:	01a012a1 	lsreq	r1, r1, #5
   27c90:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
   27c94:	eaffff5c 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27c98:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   27c9c:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   27ca0:	eb000135 	bl	2817c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   27ca4:	eaffff58 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27ca8:	e3a03001 	mov	r3, #1
   27cac:	e5803030 	str	r3, [r0, #48]	; 0x30
   27cb0:	eaffff57 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27cb4:	e3a03000 	mov	r3, #0
   27cb8:	e580303c 	str	r3, [r0, #60]	; 0x3c
   27cbc:	eaffff54 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27cc0:	e3a03000 	mov	r3, #0
   27cc4:	e580303c 	str	r3, [r0, #60]	; 0x3c
   27cc8:	e28dd008 	add	sp, sp, #8
   27ccc:	e8bd4010 	pop	{r4, lr}
   27cd0:	ea0000a8 	b	27f78 <CScreenDevice::CursorDown()>
   27cd4:	e28dd008 	add	sp, sp, #8
   27cd8:	e8bd4010 	pop	{r4, lr}
   27cdc:	ea00016e 	b	2829c <CScreenDevice::Tabulator()>
   27ce0:	e28dd008 	add	sp, sp, #8
   27ce4:	e8bd4010 	pop	{r4, lr}
   27ce8:	ea0000b9 	b	27fd4 <CScreenDevice::CursorLeft()>
   27cec:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   27cf0:	e3510000 	cmp	r1, #0
   27cf4:	0affff44 	beq	27a0c <CScreenDevice::Write(char)+0x60>
   27cf8:	eb000230 	bl	285c0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   27cfc:	eaffff42 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27d00:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   27d04:	e3530004 	cmp	r3, #4
   27d08:	02411068 	subeq	r1, r1, #104	; 0x68
   27d0c:	016f1f11 	clzeq	r1, r1
   27d10:	01a012a1 	lsreq	r1, r1, #5
   27d14:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
   27d18:	eaffff3b 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27d1c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   27d20:	e353001b 	cmp	r3, #27
   27d24:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27d28:	eaffff37 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27d2c:	00027e80 	.word	0x00027e80
   27d30:	00027e74 	.word	0x00027e74
   27d34:	00027e68 	.word	0x00027e68
   27d38:	00027a0c 	.word	0x00027a0c
   27d3c:	00027a0c 	.word	0x00027a0c
   27d40:	00027a0c 	.word	0x00027a0c
   27d44:	00027a0c 	.word	0x00027a0c
   27d48:	00027a0c 	.word	0x00027a0c
   27d4c:	00027a0c 	.word	0x00027a0c
   27d50:	00027a0c 	.word	0x00027a0c
   27d54:	00027a0c 	.word	0x00027a0c
   27d58:	00027a0c 	.word	0x00027a0c
   27d5c:	00027a0c 	.word	0x00027a0c
   27d60:	00027a0c 	.word	0x00027a0c
   27d64:	00027a0c 	.word	0x00027a0c
   27d68:	00027a0c 	.word	0x00027a0c
   27d6c:	00027a0c 	.word	0x00027a0c
   27d70:	00027a0c 	.word	0x00027a0c
   27d74:	00027a0c 	.word	0x00027a0c
   27d78:	00027a0c 	.word	0x00027a0c
   27d7c:	00027a0c 	.word	0x00027a0c
   27d80:	00027a0c 	.word	0x00027a0c
   27d84:	00027a0c 	.word	0x00027a0c
   27d88:	00027a0c 	.word	0x00027a0c
   27d8c:	00027a0c 	.word	0x00027a0c
   27d90:	00027a0c 	.word	0x00027a0c
   27d94:	00027a0c 	.word	0x00027a0c
   27d98:	00027e80 	.word	0x00027e80
   27d9c:	e3a03005 	mov	r3, #5
   27da0:	e5803030 	str	r3, [r0, #48]	; 0x30
   27da4:	eaffff1a 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27da8:	e6ef3071 	uxtb	r3, r1
   27dac:	e353001f 	cmp	r3, #31
   27db0:	9affff17 	bls	27a14 <CScreenDevice::Write(char)+0x68>
   27db4:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
   27db8:	e1c023dc 	ldrd	r2, [r0, #60]	; 0x3c
   27dbc:	e58dc000 	str	ip, [sp]
   27dc0:	eb000178 	bl	283a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   27dc4:	e1a00004 	mov	r0, r4
   27dc8:	e28dd008 	add	sp, sp, #8
   27dcc:	e8bd4010 	pop	{r4, lr}
   27dd0:	ea0000b2 	b	280a0 <CScreenDevice::CursorRight()>
   27dd4:	eb000035 	bl	27eb0 <CScreenDevice::ClearDisplayEnd()>
   27dd8:	e3a03000 	mov	r3, #0
   27ddc:	e5843030 	str	r3, [r4, #48]	; 0x30
   27de0:	eaffff0b 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27de4:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   27de8:	e3a03000 	mov	r3, #0
   27dec:	e5802040 	str	r2, [r0, #64]	; 0x40
   27df0:	e580303c 	str	r3, [r0, #60]	; 0x3c
   27df4:	e5803030 	str	r3, [r0, #48]	; 0x30
   27df8:	eaffff05 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27dfc:	e3a03004 	mov	r3, #4
   27e00:	e5803030 	str	r3, [r0, #48]	; 0x30
   27e04:	eaffff02 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27e08:	eb000071 	bl	27fd4 <CScreenDevice::CursorLeft()>
   27e0c:	e3a03000 	mov	r3, #0
   27e10:	e5843030 	str	r3, [r4, #48]	; 0x30
   27e14:	eafffefe 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27e18:	eb0000a0 	bl	280a0 <CScreenDevice::CursorRight()>
   27e1c:	e3a03000 	mov	r3, #0
   27e20:	e5843030 	str	r3, [r4, #48]	; 0x30
   27e24:	eafffefa 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27e28:	eb000052 	bl	27f78 <CScreenDevice::CursorDown()>
   27e2c:	e3a03000 	mov	r3, #0
   27e30:	e5843030 	str	r3, [r4, #48]	; 0x30
   27e34:	eafffef6 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27e38:	eb00003c 	bl	27f30 <CScreenDevice::ClearLineEnd()>
   27e3c:	e3a03000 	mov	r3, #0
   27e40:	e5843030 	str	r3, [r4, #48]	; 0x30
   27e44:	eafffef2 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27e48:	e2411030 	sub	r1, r1, #48	; 0x30
   27e4c:	e6ef3071 	uxtb	r3, r1
   27e50:	e3530009 	cmp	r3, #9
   27e54:	8afffeec 	bhi	27a0c <CScreenDevice::Write(char)+0x60>
   27e58:	e3a03003 	mov	r3, #3
   27e5c:	e580104c 	str	r1, [r0, #76]	; 0x4c
   27e60:	e5803030 	str	r3, [r0, #48]	; 0x30
   27e64:	eafffeea 	b	27a14 <CScreenDevice::Write(char)+0x68>
   27e68:	e3a0301f 	mov	r3, #31
   27e6c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   27e70:	eafffee5 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27e74:	e3a03b3e 	mov	r3, #63488	; 0xf800
   27e78:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   27e7c:	eafffee2 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27e80:	e3e03020 	mvn	r3, #32
   27e84:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   27e88:	eafffedf 	b	27a0c <CScreenDevice::Write(char)+0x60>
   27e8c:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   27e90:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   27e94:	eb000069 	bl	28040 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   27e98:	e3a03000 	mov	r3, #0
   27e9c:	e5843030 	str	r3, [r4, #48]	; 0x30
   27ea0:	eafffedb 	b	27a14 <CScreenDevice::Write(char)+0x68>

00027ea4 <CScreenDevice::CarriageReturn()>:
   27ea4:	e3a03000 	mov	r3, #0
   27ea8:	e580303c 	str	r3, [r0, #60]	; 0x3c
   27eac:	e12fff1e 	bx	lr

00027eb0 <CScreenDevice::ClearDisplayEnd()>:
   27eb0:	e92d4070 	push	{r4, r5, r6, lr}
   27eb4:	e1a04000 	mov	r4, r0
   27eb8:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
   27ebc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   27ec0:	e2806014 	add	r6, r0, #20
   27ec4:	e1550003 	cmp	r5, r3
   27ec8:	2a000009 	bcs	27ef4 <CScreenDevice::ClearDisplayEnd()+0x44>
   27ecc:	e1a01005 	mov	r1, r5
   27ed0:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   27ed4:	e1a00004 	mov	r0, r4
   27ed8:	eb000163 	bl	2846c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   27edc:	e1a00006 	mov	r0, r6
   27ee0:	eb0016e4 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   27ee4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   27ee8:	e0855000 	add	r5, r5, r0
   27eec:	e1530005 	cmp	r3, r5
   27ef0:	8afffff5 	bhi	27ecc <CScreenDevice::ClearDisplayEnd()+0x1c>
   27ef4:	e5945040 	ldr	r5, [r4, #64]	; 0x40
   27ef8:	e1a00006 	mov	r0, r6
   27efc:	eb0016df 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   27f00:	e5943020 	ldr	r3, [r4, #32]
   27f04:	e0850000 	add	r0, r5, r0
   27f08:	e594201c 	ldr	r2, [r4, #28]
   27f0c:	e5941018 	ldr	r1, [r4, #24]
   27f10:	e0000093 	mul	r0, r3, r0
   27f14:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   27f18:	08bd8070 	popeq	{r4, r5, r6, pc}
   27f1c:	e0810080 	add	r0, r1, r0, lsl #1
   27f20:	e1a02082 	lsl	r2, r2, #1
   27f24:	e3a01000 	mov	r1, #0
   27f28:	e8bd4070 	pop	{r4, r5, r6, lr}
   27f2c:	ea000d3d 	b	2b428 <memset>

00027f30 <CScreenDevice::ClearLineEnd()>:
   27f30:	e92d4070 	push	{r4, r5, r6, lr}
   27f34:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   27f38:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   27f3c:	e1540003 	cmp	r4, r3
   27f40:	28bd8070 	popcs	{r4, r5, r6, pc}
   27f44:	e1a05000 	mov	r5, r0
   27f48:	e2806014 	add	r6, r0, #20
   27f4c:	e1a01004 	mov	r1, r4
   27f50:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   27f54:	e1a00005 	mov	r0, r5
   27f58:	eb000143 	bl	2846c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   27f5c:	e1a00006 	mov	r0, r6
   27f60:	eb0016c4 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   27f64:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   27f68:	e0844000 	add	r4, r4, r0
   27f6c:	e1530004 	cmp	r3, r4
   27f70:	8afffff5 	bhi	27f4c <CScreenDevice::ClearLineEnd()+0x1c>
   27f74:	e8bd8070 	pop	{r4, r5, r6, pc}

00027f78 <CScreenDevice::CursorDown()>:
   27f78:	e92d4070 	push	{r4, r5, r6, lr}
   27f7c:	e1a04000 	mov	r4, r0
   27f80:	e2805014 	add	r5, r0, #20
   27f84:	e1a00005 	mov	r0, r5
   27f88:	eb0016bc 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   27f8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   27f90:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   27f94:	e0800003 	add	r0, r0, r3
   27f98:	e5840040 	str	r0, [r4, #64]	; 0x40
   27f9c:	e1500002 	cmp	r0, r2
   27fa0:	38bd8070 	popcc	{r4, r5, r6, pc}
   27fa4:	e1a00004 	mov	r0, r4
   27fa8:	eb0000cd 	bl	282e4 <CScreenDevice::Scroll()>
   27fac:	e1a00005 	mov	r0, r5
   27fb0:	eb0016b2 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   27fb4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   27fb8:	e0430000 	sub	r0, r3, r0
   27fbc:	e5840040 	str	r0, [r4, #64]	; 0x40
   27fc0:	e8bd8070 	pop	{r4, r5, r6, pc}

00027fc4 <CScreenDevice::CursorHome()>:
   27fc4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   27fc8:	e3a02000 	mov	r2, #0
   27fcc:	e1c023fc 	strd	r2, [r0, #60]	; 0x3c
   27fd0:	e12fff1e 	bx	lr

00027fd4 <CScreenDevice::CursorLeft()>:
   27fd4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   27fd8:	e92d4070 	push	{r4, r5, r6, lr}
   27fdc:	e1a04000 	mov	r4, r0
   27fe0:	e3530000 	cmp	r3, #0
   27fe4:	1a00000f 	bne	28028 <CScreenDevice::CursorLeft()+0x54>
   27fe8:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   27fec:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   27ff0:	e1520003 	cmp	r2, r3
   27ff4:	98bd8070 	popls	{r4, r5, r6, pc}
   27ff8:	e5905024 	ldr	r5, [r0, #36]	; 0x24
   27ffc:	e2806014 	add	r6, r0, #20
   28000:	e1a00006 	mov	r0, r6
   28004:	eb00169b 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   28008:	e0455000 	sub	r5, r5, r0
   2800c:	e1a00006 	mov	r0, r6
   28010:	e584503c 	str	r5, [r4, #60]	; 0x3c
   28014:	eb001699 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   28018:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   2801c:	e0430000 	sub	r0, r3, r0
   28020:	e5840040 	str	r0, [r4, #64]	; 0x40
   28024:	e8bd8070 	pop	{r4, r5, r6, pc}
   28028:	e2800014 	add	r0, r0, #20
   2802c:	eb001691 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   28030:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   28034:	e0430000 	sub	r0, r3, r0
   28038:	e584003c 	str	r0, [r4, #60]	; 0x3c
   2803c:	e8bd8070 	pop	{r4, r5, r6, pc}

00028040 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   28040:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28044:	e1a04002 	mov	r4, r2
   28048:	e2444001 	sub	r4, r4, #1
   2804c:	e1a05000 	mov	r5, r0
   28050:	e2806014 	add	r6, r0, #20
   28054:	e1a00006 	mov	r0, r6
   28058:	e1a07001 	mov	r7, r1
   2805c:	eb001685 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   28060:	e0040490 	mul	r4, r0, r4
   28064:	e1a00006 	mov	r0, r6
   28068:	eb001684 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   2806c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   28070:	e1530004 	cmp	r3, r4
   28074:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   28078:	e2477001 	sub	r7, r7, #1
   2807c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   28080:	e0000790 	mul	r0, r0, r7
   28084:	e1530000 	cmp	r3, r0
   28088:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   2808c:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   28090:	e1530000 	cmp	r3, r0
   28094:	8585403c 	strhi	r4, [r5, #60]	; 0x3c
   28098:	85850040 	strhi	r0, [r5, #64]	; 0x40
   2809c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000280a0 <CScreenDevice::CursorRight()>:
   280a0:	e92d4010 	push	{r4, lr}
   280a4:	e1a04000 	mov	r4, r0
   280a8:	e2800014 	add	r0, r0, #20
   280ac:	eb001671 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   280b0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   280b4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   280b8:	e0800003 	add	r0, r0, r3
   280bc:	e584003c 	str	r0, [r4, #60]	; 0x3c
   280c0:	e1500002 	cmp	r0, r2
   280c4:	38bd8010 	popcc	{r4, pc}
   280c8:	e3a03000 	mov	r3, #0
   280cc:	e1a00004 	mov	r0, r4
   280d0:	e584303c 	str	r3, [r4, #60]	; 0x3c
   280d4:	e8bd4010 	pop	{r4, lr}
   280d8:	eaffffa6 	b	27f78 <CScreenDevice::CursorDown()>

000280dc <CScreenDevice::CursorUp()>:
   280dc:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   280e0:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   280e4:	e1520003 	cmp	r2, r3
   280e8:	912fff1e 	bxls	lr
   280ec:	e92d4010 	push	{r4, lr}
   280f0:	e1a04000 	mov	r4, r0
   280f4:	e2800014 	add	r0, r0, #20
   280f8:	eb001660 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   280fc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   28100:	e0430000 	sub	r0, r3, r0
   28104:	e5840040 	str	r0, [r4, #64]	; 0x40
   28108:	e8bd8010 	pop	{r4, pc}

0002810c <CScreenDevice::DeleteChars(unsigned int)>:
   2810c:	e12fff1e 	bx	lr

00028110 <CScreenDevice::DeleteLines(unsigned int)>:
   28110:	e12fff1e 	bx	lr

00028114 <CScreenDevice::DisplayChar(char)>:
   28114:	e6ef3071 	uxtb	r3, r1
   28118:	e353001f 	cmp	r3, #31
   2811c:	912fff1e 	bxls	lr
   28120:	e92d4010 	push	{r4, lr}
   28124:	e1a04000 	mov	r4, r0
   28128:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
   2812c:	e24dd008 	sub	sp, sp, #8
   28130:	e1c023dc 	ldrd	r2, [r0, #60]	; 0x3c
   28134:	e58dc000 	str	ip, [sp]
   28138:	eb00009a 	bl	283a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   2813c:	e1a00004 	mov	r0, r4
   28140:	e28dd008 	add	sp, sp, #8
   28144:	e8bd4010 	pop	{r4, lr}
   28148:	eaffffd4 	b	280a0 <CScreenDevice::CursorRight()>

0002814c <CScreenDevice::EraseChars(unsigned int)>:
   2814c:	e3510000 	cmp	r1, #0
   28150:	012fff1e 	bxeq	lr
   28154:	ea000119 	b	285c0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

00028158 <CScreenDevice::InsertLines(unsigned int)>:
   28158:	e12fff1e 	bx	lr

0002815c <CScreenDevice::InsertMode(bool)>:
   2815c:	e5c01048 	strb	r1, [r0, #72]	; 0x48
   28160:	e12fff1e 	bx	lr

00028164 <CScreenDevice::NewLine()>:
   28164:	e3a02000 	mov	r2, #0
   28168:	e580203c 	str	r2, [r0, #60]	; 0x3c
   2816c:	eaffff81 	b	27f78 <CScreenDevice::CursorDown()>

00028170 <CScreenDevice::ReverseScroll()>:
   28170:	e12fff1e 	bx	lr

00028174 <CScreenDevice::SetCursorMode(bool)>:
   28174:	e5c01044 	strb	r1, [r0, #68]	; 0x44
   28178:	e12fff1e 	bx	lr

0002817c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   2817c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28180:	e1a04001 	mov	r4, r1
   28184:	e2444001 	sub	r4, r4, #1
   28188:	e1a05000 	mov	r5, r0
   2818c:	e2807014 	add	r7, r0, #20
   28190:	e1a06002 	mov	r6, r2
   28194:	e1a00007 	mov	r0, r7
   28198:	eb001638 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   2819c:	e0040490 	mul	r4, r0, r4
   281a0:	e1a00007 	mov	r0, r7
   281a4:	eb001635 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   281a8:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   281ac:	e0000096 	mul	r0, r6, r0
   281b0:	e1520004 	cmp	r2, r4
   281b4:	93a03000 	movls	r3, #0
   281b8:	83a03001 	movhi	r3, #1
   281bc:	e3500000 	cmp	r0, #0
   281c0:	03a03000 	moveq	r3, #0
   281c4:	e1520000 	cmp	r2, r0
   281c8:	33a03000 	movcc	r3, #0
   281cc:	22033001 	andcs	r3, r3, #1
   281d0:	e1540000 	cmp	r4, r0
   281d4:	23a03000 	movcs	r3, #0
   281d8:	32033001 	andcc	r3, r3, #1
   281dc:	e3530000 	cmp	r3, #0
   281e0:	e3a03000 	mov	r3, #0
   281e4:	15854034 	strne	r4, [r5, #52]	; 0x34
   281e8:	15850038 	strne	r0, [r5, #56]	; 0x38
   281ec:	05954034 	ldreq	r4, [r5, #52]	; 0x34
   281f0:	e5854040 	str	r4, [r5, #64]	; 0x40
   281f4:	e585303c 	str	r3, [r5, #60]	; 0x3c
   281f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000281fc <CScreenDevice::SetStandoutMode(unsigned int)>:
   281fc:	e351001b 	cmp	r1, #27
   28200:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   28204:	ea00001d 	b	28280 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
   28208:	00028290 	.word	0x00028290
   2820c:	00028284 	.word	0x00028284
   28210:	00028278 	.word	0x00028278
   28214:	00028280 	.word	0x00028280
   28218:	00028280 	.word	0x00028280
   2821c:	00028280 	.word	0x00028280
   28220:	00028280 	.word	0x00028280
   28224:	00028280 	.word	0x00028280
   28228:	00028280 	.word	0x00028280
   2822c:	00028280 	.word	0x00028280
   28230:	00028280 	.word	0x00028280
   28234:	00028280 	.word	0x00028280
   28238:	00028280 	.word	0x00028280
   2823c:	00028280 	.word	0x00028280
   28240:	00028280 	.word	0x00028280
   28244:	00028280 	.word	0x00028280
   28248:	00028280 	.word	0x00028280
   2824c:	00028280 	.word	0x00028280
   28250:	00028280 	.word	0x00028280
   28254:	00028280 	.word	0x00028280
   28258:	00028280 	.word	0x00028280
   2825c:	00028280 	.word	0x00028280
   28260:	00028280 	.word	0x00028280
   28264:	00028280 	.word	0x00028280
   28268:	00028280 	.word	0x00028280
   2826c:	00028280 	.word	0x00028280
   28270:	00028280 	.word	0x00028280
   28274:	00028290 	.word	0x00028290
   28278:	e3a0301f 	mov	r3, #31
   2827c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   28280:	e12fff1e 	bx	lr
   28284:	e3a03b3e 	mov	r3, #63488	; 0xf800
   28288:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   2828c:	e12fff1e 	bx	lr
   28290:	e3e03020 	mvn	r3, #32
   28294:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   28298:	e12fff1e 	bx	lr

0002829c <CScreenDevice::Tabulator()>:
   2829c:	e92d4010 	push	{r4, lr}
   282a0:	e1a04000 	mov	r4, r0
   282a4:	e2800014 	add	r0, r0, #20
   282a8:	eb0015f2 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   282ac:	e1a00180 	lsl	r0, r0, #3
   282b0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   282b4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   282b8:	e0803003 	add	r3, r0, r3
   282bc:	e733f013 	udiv	r3, r3, r0
   282c0:	e0000390 	mul	r0, r0, r3
   282c4:	e584003c 	str	r0, [r4, #60]	; 0x3c
   282c8:	e1500002 	cmp	r0, r2
   282cc:	38bd8010 	popcc	{r4, pc}
   282d0:	e3a03000 	mov	r3, #0
   282d4:	e1a00004 	mov	r0, r4
   282d8:	e584303c 	str	r3, [r4, #60]	; 0x3c
   282dc:	e8bd4010 	pop	{r4, lr}
   282e0:	eaffff24 	b	27f78 <CScreenDevice::CursorDown()>

000282e4 <CScreenDevice::Scroll()>:
   282e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   282e8:	e1a05000 	mov	r5, r0
   282ec:	e2800014 	add	r0, r0, #20
   282f0:	e24dd008 	sub	sp, sp, #8
   282f4:	eb0015e1 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   282f8:	e5951034 	ldr	r1, [r5, #52]	; 0x34
   282fc:	e1a06000 	mov	r6, r0
   28300:	e5954038 	ldr	r4, [r5, #56]	; 0x38
   28304:	e5950020 	ldr	r0, [r5, #32]
   28308:	e0444001 	sub	r4, r4, r1
   2830c:	e5952018 	ldr	r2, [r5, #24]
   28310:	e0444006 	sub	r4, r4, r6
   28314:	e1a03080 	lsl	r3, r0, #1
   28318:	e0000190 	mul	r0, r0, r1
   2831c:	e0040493 	mul	r4, r3, r4
   28320:	e0827080 	add	r7, r2, r0, lsl #1
   28324:	e3540000 	cmp	r4, #0
   28328:	1a00000a 	bne	28358 <CScreenDevice::Scroll()+0x74>
   2832c:	e0030693 	mul	r3, r3, r6
   28330:	e1b03123 	lsrs	r3, r3, #2
   28334:	0a000005 	beq	28350 <CScreenDevice::Scroll()+0x6c>
   28338:	e1a02103 	lsl	r2, r3, #2
   2833c:	e1a00007 	mov	r0, r7
   28340:	e3a01000 	mov	r1, #0
   28344:	e28dd008 	add	sp, sp, #8
   28348:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2834c:	ea000c35 	b	2b428 <memset>
   28350:	e28dd008 	add	sp, sp, #8
   28354:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28358:	e0811006 	add	r1, r1, r6
   2835c:	e2858058 	add	r8, r5, #88	; 0x58
   28360:	e1a00008 	mov	r0, r8
   28364:	e3a0c000 	mov	ip, #0
   28368:	e58dc004 	str	ip, [sp, #4]
   2836c:	e3a0c002 	mov	ip, #2
   28370:	e0222193 	mla	r2, r3, r1, r2
   28374:	e58dc000 	str	ip, [sp]
   28378:	e1a03004 	mov	r3, r4
   2837c:	e1a01007 	mov	r1, r7
   28380:	eb00165c 	bl	2dcf8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
   28384:	e1a00008 	mov	r0, r8
   28388:	eb0017e6 	bl	2e328 <CDMAChannel::Start()>
   2838c:	e1a00008 	mov	r0, r8
   28390:	eb00182e 	bl	2e450 <CDMAChannel::Wait()>
   28394:	e5953020 	ldr	r3, [r5, #32]
   28398:	e3c44003 	bic	r4, r4, #3
   2839c:	e0877004 	add	r7, r7, r4
   283a0:	e1a03083 	lsl	r3, r3, #1
   283a4:	eaffffe0 	b	2832c <CScreenDevice::Scroll()+0x48>

000283a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   283a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283ac:	e1a07000 	mov	r7, r0
   283b0:	e2876014 	add	r6, r7, #20
   283b4:	e24dd00c 	sub	sp, sp, #12
   283b8:	e3a08000 	mov	r8, #0
   283bc:	e1a0a001 	mov	sl, r1
   283c0:	e1a09002 	mov	r9, r2
   283c4:	e1a0b003 	mov	fp, r3
   283c8:	e1dd03b0 	ldrh	r0, [sp, #48]	; 0x30
   283cc:	e58d0004 	str	r0, [sp, #4]
   283d0:	e1a00006 	mov	r0, r6
   283d4:	eb0015a9 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   283d8:	e1500008 	cmp	r0, r8
   283dc:	9a000020 	bls	28464 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xbc>
   283e0:	e3a04000 	mov	r4, #0
   283e4:	e1a00006 	mov	r0, r6
   283e8:	e0845009 	add	r5, r4, r9
   283ec:	eb0015a1 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   283f0:	e1a02004 	mov	r2, r4
   283f4:	e1500004 	cmp	r0, r4
   283f8:	e1a03008 	mov	r3, r8
   283fc:	e1a0100a 	mov	r1, sl
   28400:	e1a00006 	mov	r0, r6
   28404:	9a000010 	bls	2844c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xa4>
   28408:	eb0015a0 	bl	2da90 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   2840c:	e5973024 	ldr	r3, [r7, #36]	; 0x24
   28410:	e3500000 	cmp	r0, #0
   28414:	e59d2004 	ldr	r2, [sp, #4]
   28418:	e2844001 	add	r4, r4, #1
   2841c:	03a02000 	moveq	r2, #0
   28420:	e1550003 	cmp	r5, r3
   28424:	2affffee 	bcs	283e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
   28428:	e5973028 	ldr	r3, [r7, #40]	; 0x28
   2842c:	e153000b 	cmp	r3, fp
   28430:	9affffeb 	bls	283e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
   28434:	e5973020 	ldr	r3, [r7, #32]
   28438:	e5971018 	ldr	r1, [r7, #24]
   2843c:	e0255b93 	mla	r5, r3, fp, r5
   28440:	e1a05085 	lsl	r5, r5, #1
   28444:	e18120b5 	strh	r2, [r1, r5]
   28448:	eaffffe5 	b	283e4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
   2844c:	e2888001 	add	r8, r8, #1
   28450:	e1a00006 	mov	r0, r6
   28454:	eb001589 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   28458:	e28bb001 	add	fp, fp, #1
   2845c:	e1500008 	cmp	r0, r8
   28460:	8affffde 	bhi	283e0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x38>
   28464:	e28dd00c 	add	sp, sp, #12
   28468:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002846c <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   2846c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28470:	e3a08000 	mov	r8, #0
   28474:	e1a0a000 	mov	sl, r0
   28478:	e1a06001 	mov	r6, r1
   2847c:	e1a07002 	mov	r7, r2
   28480:	e2805014 	add	r5, r0, #20
   28484:	e1a09008 	mov	r9, r8
   28488:	e1a00005 	mov	r0, r5
   2848c:	eb00157b 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   28490:	e1500008 	cmp	r0, r8
   28494:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   28498:	e3a04000 	mov	r4, #0
   2849c:	e1a00005 	mov	r0, r5
   284a0:	eb001574 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   284a4:	e0843006 	add	r3, r4, r6
   284a8:	e1500004 	cmp	r0, r4
   284ac:	9a00000c 	bls	284e4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x78>
   284b0:	e59a2024 	ldr	r2, [sl, #36]	; 0x24
   284b4:	e2844001 	add	r4, r4, #1
   284b8:	e1530002 	cmp	r3, r2
   284bc:	2afffff6 	bcs	2849c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   284c0:	e59a2028 	ldr	r2, [sl, #40]	; 0x28
   284c4:	e1520007 	cmp	r2, r7
   284c8:	9afffff3 	bls	2849c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   284cc:	e59a2020 	ldr	r2, [sl, #32]
   284d0:	e59a1018 	ldr	r1, [sl, #24]
   284d4:	e0233792 	mla	r3, r2, r7, r3
   284d8:	e1a03083 	lsl	r3, r3, #1
   284dc:	e18190b3 	strh	r9, [r1, r3]
   284e0:	eaffffed 	b	2849c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   284e4:	e2888001 	add	r8, r8, #1
   284e8:	e2877001 	add	r7, r7, #1
   284ec:	eaffffe5 	b	28488 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

000284f0 <CScreenDevice::InvertCursor()>:
   284f0:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
   284f4:	e3530000 	cmp	r3, #0
   284f8:	012fff1e 	bxeq	lr
   284fc:	ea000047 	b	28620 <CScreenDevice::InvertCursor() [clone .part.6]>

00028500 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   28500:	e590c024 	ldr	ip, [r0, #36]	; 0x24
   28504:	e15c0001 	cmp	ip, r1
   28508:	912fff1e 	bxls	lr
   2850c:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   28510:	e15c0002 	cmp	ip, r2
   28514:	8590c020 	ldrhi	ip, [r0, #32]
   28518:	85900018 	ldrhi	r0, [r0, #24]
   2851c:	8022129c 	mlahi	r2, ip, r2, r1
   28520:	81a02082 	lslhi	r2, r2, #1
   28524:	818030b2 	strhhi	r3, [r0, r2]
   28528:	e12fff1e 	bx	lr

0002852c <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   2852c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   28530:	e1530001 	cmp	r3, r1
   28534:	9a000008 	bls	2855c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   28538:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   2853c:	e1530002 	cmp	r3, r2
   28540:	9a000005 	bls	2855c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   28544:	e590c020 	ldr	ip, [r0, #32]
   28548:	e5903018 	ldr	r3, [r0, #24]
   2854c:	e022129c 	mla	r2, ip, r2, r1
   28550:	e1a02082 	lsl	r2, r2, #1
   28554:	e19300b2 	ldrh	r0, [r3, r2]
   28558:	e12fff1e 	bx	lr
   2855c:	e3a00000 	mov	r0, #0
   28560:	e12fff1e 	bx	lr

00028564 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   28564:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   28568:	e1a05000 	mov	r5, r0
   2856c:	e1a04001 	mov	r4, r1
   28570:	e24dd00c 	sub	sp, sp, #12
   28574:	e1a06002 	mov	r6, r2
   28578:	e2800014 	add	r0, r0, #20
   2857c:	e2044003 	and	r4, r4, #3
   28580:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   28584:	eb00153b 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   28588:	e2061003 	and	r1, r6, #3
   2858c:	e30730d0 	movw	r3, #28880	; 0x70d0
   28590:	e3403003 	movt	r3, #3
   28594:	e0831001 	add	r1, r3, r1
   28598:	e0240094 	mla	r4, r4, r0, r0
   2859c:	e3a03b3e 	mov	r3, #63488	; 0xf800
   285a0:	e1a00005 	mov	r0, r5
   285a4:	e58d3000 	str	r3, [sp]
   285a8:	e0472004 	sub	r2, r7, r4
   285ac:	e3a03000 	mov	r3, #0
   285b0:	e1d112d0 	ldrsb	r1, [r1, #32]
   285b4:	ebffff7b 	bl	283a8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   285b8:	e28dd00c 	add	sp, sp, #12
   285bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000285c0 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
   285c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   285c4:	e1a05000 	mov	r5, r0
   285c8:	e1a06001 	mov	r6, r1
   285cc:	e2807014 	add	r7, r0, #20
   285d0:	e595803c 	ldr	r8, [r5, #60]	; 0x3c
   285d4:	e1a00007 	mov	r0, r7
   285d8:	eb001526 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   285dc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   285e0:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   285e4:	e0268096 	mla	r6, r6, r0, r8
   285e8:	e1560003 	cmp	r6, r3
   285ec:	21a06003 	movcs	r6, r3
   285f0:	e1540006 	cmp	r4, r6
   285f4:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   285f8:	e1a01004 	mov	r1, r4
   285fc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   28600:	e1a00005 	mov	r0, r5
   28604:	ebffff98 	bl	2846c <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   28608:	e1a00007 	mov	r0, r7
   2860c:	eb001519 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   28610:	e0844000 	add	r4, r4, r0
   28614:	e1540006 	cmp	r4, r6
   28618:	3afffff6 	bcc	285f8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
   2861c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00028620 <CScreenDevice::InvertCursor() [clone .part.6]>:
   28620:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28624:	e2806014 	add	r6, r0, #20
   28628:	e1a05000 	mov	r5, r0
   2862c:	e1a00006 	mov	r0, r6
   28630:	e3a08000 	mov	r8, #0
   28634:	eb001513 	bl	2da88 <CCharGenerator::GetUnderline() const>
   28638:	e1a07000 	mov	r7, r0
   2863c:	e1a00006 	mov	r0, r6
   28640:	eb00150e 	bl	2da80 <CCharGenerator::GetCharHeight() const>
   28644:	e1500007 	cmp	r0, r7
   28648:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   2864c:	e3a04000 	mov	r4, #0
   28650:	ea000013 	b	286a4 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
   28654:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   28658:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   2865c:	e0843003 	add	r3, r4, r3
   28660:	e1530002 	cmp	r3, r2
   28664:	2a00000d 	bcs	286a0 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   28668:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   2866c:	e5951028 	ldr	r1, [r5, #40]	; 0x28
   28670:	e0872002 	add	r2, r7, r2
   28674:	e1520001 	cmp	r2, r1
   28678:	2a000008 	bcs	286a0 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   2867c:	e5950020 	ldr	r0, [r5, #32]
   28680:	e5951018 	ldr	r1, [r5, #24]
   28684:	e0233290 	mla	r3, r0, r2, r3
   28688:	e1a03083 	lsl	r3, r3, #1
   2868c:	e19120b3 	ldrh	r2, [r1, r3]
   28690:	e3520000 	cmp	r2, #0
   28694:	118180b3 	strhne	r8, [r1, r3]
   28698:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
   2869c:	018120b3 	strheq	r2, [r1, r3]
   286a0:	e2844001 	add	r4, r4, #1
   286a4:	e1a00006 	mov	r0, r6
   286a8:	eb0014f2 	bl	2da78 <CCharGenerator::GetCharWidth() const>
   286ac:	e1500004 	cmp	r0, r4
   286b0:	8affffe7 	bhi	28654 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
   286b4:	e2877001 	add	r7, r7, #1
   286b8:	eaffffdf 	b	2863c <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

000286bc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   286bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286c0:	e1a04000 	mov	r4, r0
   286c4:	e1a07001 	mov	r7, r1
   286c8:	e24dd00c 	sub	sp, sp, #12
   286cc:	e1a06002 	mov	r6, r2
   286d0:	e1a05003 	mov	r5, r3
   286d4:	e280a018 	add	sl, r0, #24
   286d8:	ebfff3e6 	bl	25678 <CDevice::CDevice()>
   286dc:	e59f21b4 	ldr	r2, [pc, #436]	; 28898 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
   286e0:	e3a09000 	mov	r9, #0
   286e4:	e5842000 	str	r2, [r4]
   286e8:	e5847004 	str	r7, [r4, #4]
   286ec:	e1a0000a 	mov	r0, sl
   286f0:	e5c46008 	strb	r6, [r4, #8]
   286f4:	e2843040 	add	r3, r4, #64	; 0x40
   286f8:	e584500c 	str	r5, [r4, #12]
   286fc:	e2848068 	add	r8, r4, #104	; 0x68
   28700:	e5849010 	str	r9, [r4, #16]
   28704:	e2847090 	add	r7, r4, #144	; 0x90
   28708:	e5c49014 	strb	r9, [r4, #20]
   2870c:	e3a0b001 	mov	fp, #1
   28710:	e58d3004 	str	r3, [sp, #4]
   28714:	eb0017d3 	bl	2e668 <CGPIOPin::CGPIOPin()>
   28718:	e2840040 	add	r0, r4, #64	; 0x40
   2871c:	eb0017d1 	bl	2e668 <CGPIOPin::CGPIOPin()>
   28720:	e1a00008 	mov	r0, r8
   28724:	eb0017cf 	bl	2e668 <CGPIOPin::CGPIOPin()>
   28728:	e1a00007 	mov	r0, r7
   2872c:	eb0017cd 	bl	2e668 <CGPIOPin::CGPIOPin()>
   28730:	e2841a01 	add	r1, r4, #4096	; 0x1000
   28734:	e1560009 	cmp	r6, r9
   28738:	e58498b8 	str	r9, [r4, #2232]	; 0x8b8
   2873c:	13a00002 	movne	r0, #2
   28740:	e58498bc 	str	r9, [r4, #2236]	; 0x8bc
   28744:	01a0000b 	moveq	r0, fp
   28748:	e58498c0 	str	r9, [r4, #2240]	; 0x8c0
   2874c:	e58190c4 	str	r9, [r1, #196]	; 0xc4
   28750:	e58100dc 	str	r0, [r1, #220]	; 0xdc
   28754:	e58190d0 	str	r9, [r1, #208]	; 0xd0
   28758:	e58190c8 	str	r9, [r1, #200]	; 0xc8
   2875c:	e581b0cc 	str	fp, [r1, #204]	; 0xcc
   28760:	e581b0e0 	str	fp, [r1, #224]	; 0xe0
   28764:	e594200c 	ldr	r2, [r4, #12]
   28768:	e1520009 	cmp	r2, r9
   2876c:	1a00002a 	bne	2881c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>
   28770:	e30962d8 	movw	r6, #37592	; 0x92d8
   28774:	e3406003 	movt	r6, #3
   28778:	e1a03205 	lsl	r3, r5, #4
   2877c:	e0862003 	add	r2, r6, r3
   28780:	e5922004 	ldr	r2, [r2, #4]
   28784:	e3520035 	cmp	r2, #53	; 0x35
   28788:	8a000023 	bhi	2881c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>
   2878c:	e3092428 	movw	r2, #37928	; 0x9428
   28790:	e3402003 	movt	r2, #3
   28794:	e5921010 	ldr	r1, [r2, #16]
   28798:	e1510009 	cmp	r1, r9
   2879c:	1a000033 	bne	28870 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b4>
   287a0:	e7961105 	ldr	r1, [r6, r5, lsl #2]
   287a4:	e5824010 	str	r4, [r2, #16]
   287a8:	e5841010 	str	r1, [r4, #16]
   287ac:	e3510000 	cmp	r1, #0
   287b0:	0a000033 	beq	28884 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1c8>
   287b4:	e3550000 	cmp	r5, #0
   287b8:	0a00001a 	beq	28828 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x16c>
   287bc:	e0866003 	add	r6, r6, r3
   287c0:	e1a00008 	mov	r0, r8
   287c4:	e5961004 	ldr	r1, [r6, #4]
   287c8:	eb0017d3 	bl	2e71c <CGPIOPin::AssignPin(unsigned int)>
   287cc:	e5961008 	ldr	r1, [r6, #8]
   287d0:	e3a02001 	mov	r2, #1
   287d4:	e1a00008 	mov	r0, r8
   287d8:	e2811004 	add	r1, r1, #4
   287dc:	e6ef1071 	uxtb	r1, r1
   287e0:	eb0017ee 	bl	2e7a0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   287e4:	e596100c 	ldr	r1, [r6, #12]
   287e8:	e1a00007 	mov	r0, r7
   287ec:	eb0017ca 	bl	2e71c <CGPIOPin::AssignPin(unsigned int)>
   287f0:	e5961010 	ldr	r1, [r6, #16]
   287f4:	e3a02001 	mov	r2, #1
   287f8:	e1a00007 	mov	r0, r7
   287fc:	e2811004 	add	r1, r1, #4
   28800:	e6ef1071 	uxtb	r1, r1
   28804:	eb0017e5 	bl	2e7a0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   28808:	e1a00007 	mov	r0, r7
   2880c:	e3a01002 	mov	r1, #2
   28810:	eb0019e3 	bl	2efa4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   28814:	e3a03001 	mov	r3, #1
   28818:	e5c43014 	strb	r3, [r4, #20]
   2881c:	e1a00004 	mov	r0, r4
   28820:	e28dd00c 	add	sp, sp, #12
   28824:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28828:	e3a01020 	mov	r1, #32
   2882c:	e1a0000a 	mov	r0, sl
   28830:	e58d3004 	str	r3, [sp, #4]
   28834:	e2849040 	add	r9, r4, #64	; 0x40
   28838:	eb0017b7 	bl	2e71c <CGPIOPin::AssignPin(unsigned int)>
   2883c:	e1a0200b 	mov	r2, fp
   28840:	e1a01005 	mov	r1, r5
   28844:	e1a0000a 	mov	r0, sl
   28848:	eb0017d4 	bl	2e7a0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2884c:	e3a01021 	mov	r1, #33	; 0x21
   28850:	e1a00009 	mov	r0, r9
   28854:	eb0017b0 	bl	2e71c <CGPIOPin::AssignPin(unsigned int)>
   28858:	e1a0200b 	mov	r2, fp
   2885c:	e1a01005 	mov	r1, r5
   28860:	e1a00009 	mov	r0, r9
   28864:	eb0017cd 	bl	2e7a0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   28868:	e59d3004 	ldr	r3, [sp, #4]
   2886c:	eaffffd2 	b	287bc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x100>
   28870:	e59f3020 	ldr	r3, [pc, #32]	; 28898 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
   28874:	e3a020b0 	mov	r2, #176	; 0xb0
   28878:	e2831018 	add	r1, r3, #24
   2887c:	e2830024 	add	r0, r3, #36	; 0x24
   28880:	ebfff1bb 	bl	24f74 <assertion_failed>
   28884:	e59f300c 	ldr	r3, [pc, #12]	; 28898 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
   28888:	e3a020b4 	mov	r2, #180	; 0xb4
   2888c:	e2831018 	add	r1, r3, #24
   28890:	e283003c 	add	r0, r3, #60	; 0x3c
   28894:	ebfff1b6 	bl	24f74 <assertion_failed>
   28898:	00037100 	.word	0x00037100

0002889c <CSerialDevice::~CSerialDevice()>:
   2889c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   288a0:	e1a04000 	mov	r4, r0
   288a4:	e59fc120 	ldr	ip, [pc, #288]	; 289cc <CSerialDevice::~CSerialDevice()+0x130>
   288a8:	e5d03014 	ldrb	r3, [r0, #20]
   288ac:	e580c000 	str	ip, [r0]
   288b0:	e3530000 	cmp	r3, #0
   288b4:	0a000039 	beq	289a0 <CSerialDevice::~CSerialDevice()+0x104>
   288b8:	e3095428 	movw	r5, #37928	; 0x9428
   288bc:	e3405003 	movt	r5, #3
   288c0:	e590200c 	ldr	r2, [r0, #12]
   288c4:	e3a01001 	mov	r1, #1
   288c8:	e595300c 	ldr	r3, [r5, #12]
   288cc:	e1c33211 	bic	r3, r3, r1, lsl r2
   288d0:	e585300c 	str	r3, [r5, #12]
   288d4:	f57ff04f 	dsb	sy
   288d8:	e5902010 	ldr	r2, [r0, #16]
   288dc:	e3a03000 	mov	r3, #0
   288e0:	e5823038 	str	r3, [r2, #56]	; 0x38
   288e4:	e5902010 	ldr	r2, [r0, #16]
   288e8:	e5823030 	str	r3, [r2, #48]	; 0x30
   288ec:	e5903004 	ldr	r3, [r0, #4]
   288f0:	e3530000 	cmp	r3, #0
   288f4:	0a00000e 	beq	28934 <CSerialDevice::~CSerialDevice()+0x98>
   288f8:	e5953000 	ldr	r3, [r5]
   288fc:	e2433001 	sub	r3, r3, #1
   28900:	e5853000 	str	r3, [r5]
   28904:	e3530000 	cmp	r3, #0
   28908:	1a000009 	bne	28934 <CSerialDevice::~CSerialDevice()+0x98>
   2890c:	e5950004 	ldr	r0, [r5, #4]
   28910:	e3500000 	cmp	r0, #0
   28914:	0a000028 	beq	289bc <CSerialDevice::~CSerialDevice()+0x120>
   28918:	e5d53008 	ldrb	r3, [r5, #8]
   2891c:	e3530000 	cmp	r3, #0
   28920:	0a000022 	beq	289b0 <CSerialDevice::~CSerialDevice()+0x114>
   28924:	eb00116d 	bl	2cee0 <CInterruptSystem::DisconnectFIQ()>
   28928:	e3a03000 	mov	r3, #0
   2892c:	e5853004 	str	r3, [r5, #4]
   28930:	e5c53008 	strb	r3, [r5, #8]
   28934:	e2846068 	add	r6, r4, #104	; 0x68
   28938:	e3a02001 	mov	r2, #1
   2893c:	e1a00006 	mov	r0, r6
   28940:	e3a01000 	mov	r1, #0
   28944:	e2847090 	add	r7, r4, #144	; 0x90
   28948:	eb001794 	bl	2e7a0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2894c:	e1a00007 	mov	r0, r7
   28950:	e3a02001 	mov	r2, #1
   28954:	e3a01000 	mov	r1, #0
   28958:	eb001790 	bl	2e7a0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2895c:	e594200c 	ldr	r2, [r4, #12]
   28960:	e3a03000 	mov	r3, #0
   28964:	e1a00007 	mov	r0, r7
   28968:	e5c43014 	strb	r3, [r4, #20]
   2896c:	e0855102 	add	r5, r5, r2, lsl #2
   28970:	e5853010 	str	r3, [r5, #16]
   28974:	eb001761 	bl	2e700 <CGPIOPin::~CGPIOPin()>
   28978:	e1a00006 	mov	r0, r6
   2897c:	eb00175f 	bl	2e700 <CGPIOPin::~CGPIOPin()>
   28980:	e2840040 	add	r0, r4, #64	; 0x40
   28984:	eb00175d 	bl	2e700 <CGPIOPin::~CGPIOPin()>
   28988:	e2840018 	add	r0, r4, #24
   2898c:	eb00175b 	bl	2e700 <CGPIOPin::~CGPIOPin()>
   28990:	e1a00004 	mov	r0, r4
   28994:	ebfff329 	bl	25640 <CDevice::~CDevice()>
   28998:	e1a00004 	mov	r0, r4
   2899c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   289a0:	e2800090 	add	r0, r0, #144	; 0x90
   289a4:	eb001755 	bl	2e700 <CGPIOPin::~CGPIOPin()>
   289a8:	e2840068 	add	r0, r4, #104	; 0x68
   289ac:	eafffff2 	b	2897c <CSerialDevice::~CSerialDevice()+0xe0>
   289b0:	e3a01039 	mov	r1, #57	; 0x39
   289b4:	eb0011c8 	bl	2d0dc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   289b8:	eaffffda 	b	28928 <CSerialDevice::~CSerialDevice()+0x8c>
   289bc:	e3a020e0 	mov	r2, #224	; 0xe0
   289c0:	e28c1018 	add	r1, ip, #24
   289c4:	e28c0050 	add	r0, ip, #80	; 0x50
   289c8:	ebfff169 	bl	24f74 <assertion_failed>
   289cc:	00037100 	.word	0x00037100

000289d0 <CSerialDevice::~CSerialDevice()>:
   289d0:	e92d4010 	push	{r4, lr}
   289d4:	e1a04000 	mov	r4, r0
   289d8:	ebffffaf 	bl	2889c <CSerialDevice::~CSerialDevice()>
   289dc:	e1a00004 	mov	r0, r4
   289e0:	e30110e4 	movw	r1, #4324	; 0x10e4
   289e4:	eb000d4f 	bl	2bf28 <operator delete(void*, unsigned int)>
   289e8:	e1a00004 	mov	r0, r4
   289ec:	e8bd8010 	pop	{r4, pc}

000289f0 <CSerialDevice::Initialize(unsigned int)>:
   289f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   289f4:	e5d05014 	ldrb	r5, [r0, #20]
   289f8:	e3550000 	cmp	r5, #0
   289fc:	1a000001 	bne	28a08 <CSerialDevice::Initialize(unsigned int)+0x18>
   28a00:	e1a00005 	mov	r0, r5
   28a04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28a08:	e1a06001 	mov	r6, r1
   28a0c:	e1a04000 	mov	r4, r0
   28a10:	ebfff9e9 	bl	271bc <CMachineInfo::Get()>
   28a14:	e3a01002 	mov	r1, #2
   28a18:	ebfff923 	bl	26eac <CMachineInfo::GetClockRate(unsigned int) const>
   28a1c:	e3500000 	cmp	r0, #0
   28a20:	0a000063 	beq	28bb4 <CSerialDevice::Initialize(unsigned int)+0x1c4>
   28a24:	e30027d4 	movw	r2, #2004	; 0x7d4
   28a28:	e340203d 	movt	r2, #61	; 0x3d
   28a2c:	e2463f4b 	sub	r3, r6, #300	; 0x12c
   28a30:	e1530002 	cmp	r3, r2
   28a34:	8a000062 	bhi	28bc4 <CSerialDevice::Initialize(unsigned int)+0x1d4>
   28a38:	e1a03206 	lsl	r3, r6, #4
   28a3c:	e30f2ffe 	movw	r2, #65534	; 0xfffe
   28a40:	e737f310 	udiv	r7, r0, r3
   28a44:	e2471001 	sub	r1, r7, #1
   28a48:	e1510002 	cmp	r1, r2
   28a4c:	8a000060 	bhi	28bd4 <CSerialDevice::Initialize(unsigned int)+0x1e4>
   28a50:	e0630793 	mls	r3, r3, r7, r0
   28a54:	e1a03183 	lsl	r3, r3, #3
   28a58:	e733f613 	udiv	r3, r3, r6
   28a5c:	e2036001 	and	r6, r3, #1
   28a60:	e08660a3 	add	r6, r6, r3, lsr #1
   28a64:	e356003f 	cmp	r6, #63	; 0x3f
   28a68:	8a000065 	bhi	28c04 <CSerialDevice::Initialize(unsigned int)+0x214>
   28a6c:	e5940004 	ldr	r0, [r4, #4]
   28a70:	e3500000 	cmp	r0, #0
   28a74:	0a00001c 	beq	28aec <CSerialDevice::Initialize(unsigned int)+0xfc>
   28a78:	e3098428 	movw	r8, #37928	; 0x9428
   28a7c:	e3408003 	movt	r8, #3
   28a80:	e5983000 	ldr	r3, [r8]
   28a84:	e3530000 	cmp	r3, #0
   28a88:	0a000009 	beq	28ab4 <CSerialDevice::Initialize(unsigned int)+0xc4>
   28a8c:	e5983004 	ldr	r3, [r8, #4]
   28a90:	e1500003 	cmp	r0, r3
   28a94:	0a000052 	beq	28be4 <CSerialDevice::Initialize(unsigned int)+0x1f4>
   28a98:	e594300c 	ldr	r3, [r4, #12]
   28a9c:	e3a02000 	mov	r2, #0
   28aa0:	e1a05002 	mov	r5, r2
   28aa4:	e5c42014 	strb	r2, [r4, #20]
   28aa8:	e0888103 	add	r8, r8, r3, lsl #2
   28aac:	e5882010 	str	r2, [r8, #16]
   28ab0:	eaffffd2 	b	28a00 <CSerialDevice::Initialize(unsigned int)+0x10>
   28ab4:	e5d42008 	ldrb	r2, [r4, #8]
   28ab8:	e5880004 	str	r0, [r8, #4]
   28abc:	e5c82008 	strb	r2, [r8, #8]
   28ac0:	e3520000 	cmp	r2, #0
   28ac4:	0a000030 	beq	28b8c <CSerialDevice::Initialize(unsigned int)+0x19c>
   28ac8:	e30924e0 	movw	r2, #38112	; 0x94e0
   28acc:	e3402002 	movt	r2, #2
   28ad0:	e3a01039 	mov	r1, #57	; 0x39
   28ad4:	eb0010de 	bl	2ce54 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   28ad8:	e5983000 	ldr	r3, [r8]
   28adc:	e3530000 	cmp	r3, #0
   28ae0:	1a000043 	bne	28bf4 <CSerialDevice::Initialize(unsigned int)+0x204>
   28ae4:	e3a03001 	mov	r3, #1
   28ae8:	e5883000 	str	r3, [r8]
   28aec:	e5943010 	ldr	r3, [r4, #16]
   28af0:	e3a01000 	mov	r1, #0
   28af4:	e30027ff 	movw	r2, #2047	; 0x7ff
   28af8:	e5831038 	str	r1, [r3, #56]	; 0x38
   28afc:	e5943010 	ldr	r3, [r4, #16]
   28b00:	e5832044 	str	r2, [r3, #68]	; 0x44
   28b04:	e5943010 	ldr	r3, [r4, #16]
   28b08:	e5837024 	str	r7, [r3, #36]	; 0x24
   28b0c:	e5943010 	ldr	r3, [r4, #16]
   28b10:	e5836028 	str	r6, [r3, #40]	; 0x28
   28b14:	e5943004 	ldr	r3, [r4, #4]
   28b18:	e1530001 	cmp	r3, r1
   28b1c:	0a000020 	beq	28ba4 <CSerialDevice::Initialize(unsigned int)+0x1b4>
   28b20:	e5942010 	ldr	r2, [r4, #16]
   28b24:	e3a00009 	mov	r0, #9
   28b28:	e3a0c070 	mov	ip, #112	; 0x70
   28b2c:	e3093428 	movw	r3, #37928	; 0x9428
   28b30:	e3403003 	movt	r3, #3
   28b34:	e3a01e45 	mov	r1, #1104	; 0x450
   28b38:	e5820034 	str	r0, [r2, #52]	; 0x34
   28b3c:	e3a00001 	mov	r0, #1
   28b40:	e5942010 	ldr	r2, [r4, #16]
   28b44:	e582c02c 	str	ip, [r2, #44]	; 0x2c
   28b48:	e5942010 	ldr	r2, [r4, #16]
   28b4c:	e5821038 	str	r1, [r2, #56]	; 0x38
   28b50:	e593200c 	ldr	r2, [r3, #12]
   28b54:	e594100c 	ldr	r1, [r4, #12]
   28b58:	e1822110 	orr	r2, r2, r0, lsl r1
   28b5c:	e583200c 	str	r2, [r3, #12]
   28b60:	f57ff04f 	dsb	sy
   28b64:	e5943010 	ldr	r3, [r4, #16]
   28b68:	e3002301 	movw	r2, #769	; 0x301
   28b6c:	e5832030 	str	r2, [r3, #48]	; 0x30
   28b70:	ebfff3a9 	bl	25a1c <CDeviceNameService::Get()>
   28b74:	e1a02004 	mov	r2, r4
   28b78:	e3a03000 	mov	r3, #0
   28b7c:	e59f1090 	ldr	r1, [pc, #144]	; 28c14 <CSerialDevice::Initialize(unsigned int)+0x224>
   28b80:	ebfff2eb 	bl	25734 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   28b84:	e1a00005 	mov	r0, r5
   28b88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28b8c:	e1a03002 	mov	r3, r2
   28b90:	e3a01039 	mov	r1, #57	; 0x39
   28b94:	e30924e0 	movw	r2, #38112	; 0x94e0
   28b98:	e3402002 	movt	r2, #2
   28b9c:	eb00110f 	bl	2cfe0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   28ba0:	eaffffcc 	b	28ad8 <CSerialDevice::Initialize(unsigned int)+0xe8>
   28ba4:	e5943010 	ldr	r3, [r4, #16]
   28ba8:	e3a02060 	mov	r2, #96	; 0x60
   28bac:	e583202c 	str	r2, [r3, #44]	; 0x2c
   28bb0:	eaffffeb 	b	28b64 <CSerialDevice::Initialize(unsigned int)+0x174>
   28bb4:	e59f105c 	ldr	r1, [pc, #92]	; 28c18 <CSerialDevice::Initialize(unsigned int)+0x228>
   28bb8:	e3a020fd 	mov	r2, #253	; 0xfd
   28bbc:	e2810050 	add	r0, r1, #80	; 0x50
   28bc0:	ebfff0eb 	bl	24f74 <assertion_failed>
   28bc4:	e59f104c 	ldr	r1, [pc, #76]	; 28c18 <CSerialDevice::Initialize(unsigned int)+0x228>
   28bc8:	e3a020ff 	mov	r2, #255	; 0xff
   28bcc:	e2810060 	add	r0, r1, #96	; 0x60
   28bd0:	ebfff0e7 	bl	24f74 <assertion_failed>
   28bd4:	e59f103c 	ldr	r1, [pc, #60]	; 28c18 <CSerialDevice::Initialize(unsigned int)+0x228>
   28bd8:	e3002102 	movw	r2, #258	; 0x102
   28bdc:	e281008c 	add	r0, r1, #140	; 0x8c
   28be0:	ebfff0e3 	bl	24f74 <assertion_failed>
   28be4:	e5d42008 	ldrb	r2, [r4, #8]
   28be8:	e5d83008 	ldrb	r3, [r8, #8]
   28bec:	e1520003 	cmp	r2, r3
   28bf0:	1affffa8 	bne	28a98 <CSerialDevice::Initialize(unsigned int)+0xa8>
   28bf4:	e59f101c 	ldr	r1, [pc, #28]	; 28c18 <CSerialDevice::Initialize(unsigned int)+0x228>
   28bf8:	e3002127 	movw	r2, #295	; 0x127
   28bfc:	e28100c4 	add	r0, r1, #196	; 0xc4
   28c00:	ebfff0db 	bl	24f74 <assertion_failed>
   28c04:	e59f100c 	ldr	r1, [pc, #12]	; 28c18 <CSerialDevice::Initialize(unsigned int)+0x228>
   28c08:	e3002105 	movw	r2, #261	; 0x105
   28c0c:	e28100b0 	add	r0, r1, #176	; 0xb0
   28c10:	ebfff0d7 	bl	24f74 <assertion_failed>
   28c14:	00037204 	.word	0x00037204
   28c18:	00037118 	.word	0x00037118

00028c1c <CSerialDevice::Write(void const*, unsigned int)>:
   28c1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28c20:	e5d03014 	ldrb	r3, [r0, #20]
   28c24:	e3530000 	cmp	r3, #0
   28c28:	0a000056 	beq	28d88 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
   28c2c:	e2806a01 	add	r6, r0, #4096	; 0x1000
   28c30:	e1a07000 	mov	r7, r0
   28c34:	e1a04001 	mov	r4, r1
   28c38:	e1a08002 	mov	r8, r2
   28c3c:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
   28c40:	e3500000 	cmp	r0, #0
   28c44:	1a000045 	bne	28d60 <CSerialDevice::Write(void const*, unsigned int)+0x144>
   28c48:	e3540000 	cmp	r4, #0
   28c4c:	0a000051 	beq	28d98 <CSerialDevice::Write(void const*, unsigned int)+0x17c>
   28c50:	e3580000 	cmp	r8, #0
   28c54:	0a000053 	beq	28da8 <CSerialDevice::Write(void const*, unsigned int)+0x18c>
   28c58:	e2444001 	sub	r4, r4, #1
   28c5c:	e3a05000 	mov	r5, #0
   28c60:	ea000002 	b	28c70 <CSerialDevice::Write(void const*, unsigned int)+0x54>
   28c64:	e2855001 	add	r5, r5, #1
   28c68:	e1550008 	cmp	r5, r8
   28c6c:	0a00000f 	beq	28cb0 <CSerialDevice::Write(void const*, unsigned int)+0x94>
   28c70:	e5f41001 	ldrb	r1, [r4, #1]!
   28c74:	e1a00007 	mov	r0, r7
   28c78:	eb00016f 	bl	2923c <CSerialDevice::Write(unsigned char)>
   28c7c:	e3500000 	cmp	r0, #0
   28c80:	0a00000a 	beq	28cb0 <CSerialDevice::Write(void const*, unsigned int)+0x94>
   28c84:	e5d43000 	ldrb	r3, [r4]
   28c88:	e353000a 	cmp	r3, #10
   28c8c:	1afffff4 	bne	28c64 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   28c90:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
   28c94:	e3130001 	tst	r3, #1
   28c98:	0afffff1 	beq	28c64 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   28c9c:	e3a0100d 	mov	r1, #13
   28ca0:	e1a00007 	mov	r0, r7
   28ca4:	eb000164 	bl	2923c <CSerialDevice::Write(unsigned char)>
   28ca8:	e3500000 	cmp	r0, #0
   28cac:	1affffec 	bne	28c64 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   28cb0:	e59630e0 	ldr	r3, [r6, #224]	; 0xe0
   28cb4:	e3530000 	cmp	r3, #0
   28cb8:	1a00002a 	bne	28d68 <CSerialDevice::Write(void const*, unsigned int)+0x14c>
   28cbc:	e5973004 	ldr	r3, [r7, #4]
   28cc0:	e3530000 	cmp	r3, #0
   28cc4:	0a000023 	beq	28d58 <CSerialDevice::Write(void const*, unsigned int)+0x13c>
   28cc8:	e59600dc 	ldr	r0, [r6, #220]	; 0xdc
   28ccc:	e3500000 	cmp	r0, #0
   28cd0:	1a000026 	bne	28d70 <CSerialDevice::Write(void const*, unsigned int)+0x154>
   28cd4:	e59630c4 	ldr	r3, [r6, #196]	; 0xc4
   28cd8:	e59620c8 	ldr	r2, [r6, #200]	; 0xc8
   28cdc:	e1520003 	cmp	r2, r3
   28ce0:	0a00001c 	beq	28d58 <CSerialDevice::Write(void const*, unsigned int)+0x13c>
   28ce4:	e59630c4 	ldr	r3, [r6, #196]	; 0xc4
   28ce8:	e59620c8 	ldr	r2, [r6, #200]	; 0xc8
   28cec:	e1520003 	cmp	r2, r3
   28cf0:	1a00000d 	bne	28d2c <CSerialDevice::Write(void const*, unsigned int)+0x110>
   28cf4:	ea000013 	b	28d48 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   28cf8:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   28cfc:	e0871003 	add	r1, r7, r3
   28d00:	e2833001 	add	r3, r3, #1
   28d04:	e58630c8 	str	r3, [r6, #200]	; 0xc8
   28d08:	e5d138c4 	ldrb	r3, [r1, #2244]	; 0x8c4
   28d0c:	e5823000 	str	r3, [r2]
   28d10:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   28d14:	e7ea3053 	ubfx	r3, r3, #0, #11
   28d18:	e58630c8 	str	r3, [r6, #200]	; 0xc8
   28d1c:	e59620c4 	ldr	r2, [r6, #196]	; 0xc4
   28d20:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   28d24:	e1520003 	cmp	r2, r3
   28d28:	0a000006 	beq	28d48 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   28d2c:	e5972010 	ldr	r2, [r7, #16]
   28d30:	e5923018 	ldr	r3, [r2, #24]
   28d34:	e3130020 	tst	r3, #32
   28d38:	0affffee 	beq	28cf8 <CSerialDevice::Write(void const*, unsigned int)+0xdc>
   28d3c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   28d40:	e3833020 	orr	r3, r3, #32
   28d44:	e5823038 	str	r3, [r2, #56]	; 0x38
   28d48:	e59630dc 	ldr	r3, [r6, #220]	; 0xdc
   28d4c:	e3530000 	cmp	r3, #0
   28d50:	0a000000 	beq	28d58 <CSerialDevice::Write(void const*, unsigned int)+0x13c>
   28d54:	eb000fe9 	bl	2cd00 <LeaveCritical>
   28d58:	e1a00005 	mov	r0, r5
   28d5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28d60:	eb000fb9 	bl	2cc4c <EnterCritical>
   28d64:	eaffffb7 	b	28c48 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
   28d68:	eb000fe4 	bl	2cd00 <LeaveCritical>
   28d6c:	eaffffd2 	b	28cbc <CSerialDevice::Write(void const*, unsigned int)+0xa0>
   28d70:	eb000fb5 	bl	2cc4c <EnterCritical>
   28d74:	e59620c4 	ldr	r2, [r6, #196]	; 0xc4
   28d78:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
   28d7c:	e1520003 	cmp	r2, r3
   28d80:	1affffd7 	bne	28ce4 <CSerialDevice::Write(void const*, unsigned int)+0xc8>
   28d84:	eaffffef 	b	28d48 <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   28d88:	e59f1020 	ldr	r1, [pc, #32]	; 28db0 <CSerialDevice::Write(void const*, unsigned int)+0x194>
   28d8c:	e300214d 	movw	r2, #333	; 0x14d
   28d90:	e28100f4 	add	r0, r1, #244	; 0xf4
   28d94:	ebfff076 	bl	24f74 <assertion_failed>
   28d98:	e59f1010 	ldr	r1, [pc, #16]	; 28db0 <CSerialDevice::Write(void const*, unsigned int)+0x194>
   28d9c:	e3002152 	movw	r2, #338	; 0x152
   28da0:	e2810c01 	add	r0, r1, #256	; 0x100
   28da4:	ebfff072 	bl	24f74 <assertion_failed>
   28da8:	e1a05008 	mov	r5, r8
   28dac:	eaffffbf 	b	28cb0 <CSerialDevice::Write(void const*, unsigned int)+0x94>
   28db0:	00037118 	.word	0x00037118

00028db4 <CSerialDevice::Read(void*, unsigned int)>:
   28db4:	e92d4070 	push	{r4, r5, r6, lr}
   28db8:	e5d03014 	ldrb	r3, [r0, #20]
   28dbc:	e24dd008 	sub	sp, sp, #8
   28dc0:	e3530000 	cmp	r3, #0
   28dc4:	0a00005d 	beq	28f40 <CSerialDevice::Read(void*, unsigned int)+0x18c>
   28dc8:	e3510000 	cmp	r1, #0
   28dcc:	0a00005f 	beq	28f50 <CSerialDevice::Read(void*, unsigned int)+0x19c>
   28dd0:	e5905004 	ldr	r5, [r0, #4]
   28dd4:	e1a04000 	mov	r4, r0
   28dd8:	e3550000 	cmp	r5, #0
   28ddc:	0a00002f 	beq	28ea0 <CSerialDevice::Read(void*, unsigned int)+0xec>
   28de0:	e2806a01 	add	r6, r0, #4096	; 0x1000
   28de4:	e59600dc 	ldr	r0, [r6, #220]	; 0xdc
   28de8:	e3500000 	cmp	r0, #0
   28dec:	1a00004c 	bne	28f24 <CSerialDevice::Read(void*, unsigned int)+0x170>
   28df0:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   28df4:	e3530000 	cmp	r3, #0
   28df8:	ba00001f 	blt	28e7c <CSerialDevice::Read(void*, unsigned int)+0xc8>
   28dfc:	e3520000 	cmp	r2, #0
   28e00:	0a000056 	beq	28f60 <CSerialDevice::Read(void*, unsigned int)+0x1ac>
   28e04:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   28e08:	e59408bc 	ldr	r0, [r4, #2236]	; 0x8bc
   28e0c:	e1500003 	cmp	r0, r3
   28e10:	0a000052 	beq	28f60 <CSerialDevice::Read(void*, unsigned int)+0x1ac>
   28e14:	e0812002 	add	r2, r1, r2
   28e18:	e1a0c001 	mov	ip, r1
   28e1c:	ea000003 	b	28e30 <CSerialDevice::Read(void*, unsigned int)+0x7c>
   28e20:	e59408b8 	ldr	r0, [r4, #2232]	; 0x8b8
   28e24:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   28e28:	e1500003 	cmp	r0, r3
   28e2c:	0a000015 	beq	28e88 <CSerialDevice::Read(void*, unsigned int)+0xd4>
   28e30:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   28e34:	e0840003 	add	r0, r4, r3
   28e38:	e2833001 	add	r3, r3, #1
   28e3c:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
   28e40:	e5d030b8 	ldrb	r3, [r0, #184]	; 0xb8
   28e44:	e4cc3001 	strb	r3, [ip], #1
   28e48:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   28e4c:	e152000c 	cmp	r2, ip
   28e50:	e04c5001 	sub	r5, ip, r1
   28e54:	e7ea3053 	ubfx	r3, r3, #0, #11
   28e58:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
   28e5c:	1affffef 	bne	28e20 <CSerialDevice::Read(void*, unsigned int)+0x6c>
   28e60:	e59630dc 	ldr	r3, [r6, #220]	; 0xdc
   28e64:	e3530000 	cmp	r3, #0
   28e68:	0a000009 	beq	28e94 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   28e6c:	eb000fa3 	bl	2cd00 <LeaveCritical>
   28e70:	e1a00005 	mov	r0, r5
   28e74:	e28dd008 	add	sp, sp, #8
   28e78:	e8bd8070 	pop	{r4, r5, r6, pc}
   28e7c:	e59458c0 	ldr	r5, [r4, #2240]	; 0x8c0
   28e80:	e3a03000 	mov	r3, #0
   28e84:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
   28e88:	e59630dc 	ldr	r3, [r6, #220]	; 0xdc
   28e8c:	e3530000 	cmp	r3, #0
   28e90:	1afffff5 	bne	28e6c <CSerialDevice::Read(void*, unsigned int)+0xb8>
   28e94:	e1a00005 	mov	r0, r5
   28e98:	e28dd008 	add	sp, sp, #8
   28e9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   28ea0:	e3520000 	cmp	r2, #0
   28ea4:	0a000033 	beq	28f78 <CSerialDevice::Read(void*, unsigned int)+0x1c4>
   28ea8:	e5903010 	ldr	r3, [r0, #16]
   28eac:	e5930018 	ldr	r0, [r3, #24]
   28eb0:	e3100010 	tst	r0, #16
   28eb4:	1afffff6 	bne	28e94 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   28eb8:	e5933000 	ldr	r3, [r3]
   28ebc:	e3130b01 	tst	r3, #1024	; 0x400
   28ec0:	1a000015 	bne	28f1c <CSerialDevice::Read(void*, unsigned int)+0x168>
   28ec4:	e3130b02 	tst	r3, #2048	; 0x800
   28ec8:	1a000026 	bne	28f68 <CSerialDevice::Read(void*, unsigned int)+0x1b4>
   28ecc:	e3130c01 	tst	r3, #256	; 0x100
   28ed0:	00812002 	addeq	r2, r1, r2
   28ed4:	01a00001 	moveq	r0, r1
   28ed8:	0a000004 	beq	28ef0 <CSerialDevice::Read(void*, unsigned int)+0x13c>
   28edc:	ea000023 	b	28f70 <CSerialDevice::Read(void*, unsigned int)+0x1bc>
   28ee0:	e3130b02 	tst	r3, #2048	; 0x800
   28ee4:	1a00001f 	bne	28f68 <CSerialDevice::Read(void*, unsigned int)+0x1b4>
   28ee8:	e3130c01 	tst	r3, #256	; 0x100
   28eec:	1a00001f 	bne	28f70 <CSerialDevice::Read(void*, unsigned int)+0x1bc>
   28ef0:	e4c03001 	strb	r3, [r0], #1
   28ef4:	e1500002 	cmp	r0, r2
   28ef8:	e0405001 	sub	r5, r0, r1
   28efc:	0affffe4 	beq	28e94 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   28f00:	e5943010 	ldr	r3, [r4, #16]
   28f04:	e593c018 	ldr	ip, [r3, #24]
   28f08:	e31c0010 	tst	ip, #16
   28f0c:	1affffe0 	bne	28e94 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   28f10:	e5933000 	ldr	r3, [r3]
   28f14:	e3130b01 	tst	r3, #1024	; 0x400
   28f18:	0afffff0 	beq	28ee0 <CSerialDevice::Read(void*, unsigned int)+0x12c>
   28f1c:	e3e05000 	mvn	r5, #0
   28f20:	eaffffdb 	b	28e94 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   28f24:	e88d0006 	stm	sp, {r1, r2}
   28f28:	eb000f47 	bl	2cc4c <EnterCritical>
   28f2c:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   28f30:	e89d0006 	ldm	sp, {r1, r2}
   28f34:	e3530000 	cmp	r3, #0
   28f38:	aaffffaf 	bge	28dfc <CSerialDevice::Read(void*, unsigned int)+0x48>
   28f3c:	eaffffce 	b	28e7c <CSerialDevice::Read(void*, unsigned int)+0xc8>
   28f40:	e59f1038 	ldr	r1, [pc, #56]	; 28f80 <CSerialDevice::Read(void*, unsigned int)+0x1cc>
   28f44:	e300218f 	movw	r2, #399	; 0x18f
   28f48:	e28100f4 	add	r0, r1, #244	; 0xf4
   28f4c:	ebfff008 	bl	24f74 <assertion_failed>
   28f50:	e59f1028 	ldr	r1, [pc, #40]	; 28f80 <CSerialDevice::Read(void*, unsigned int)+0x1cc>
   28f54:	e3002192 	movw	r2, #402	; 0x192
   28f58:	e2810c01 	add	r0, r1, #256	; 0x100
   28f5c:	ebfff004 	bl	24f74 <assertion_failed>
   28f60:	e3a05000 	mov	r5, #0
   28f64:	eaffffc7 	b	28e88 <CSerialDevice::Read(void*, unsigned int)+0xd4>
   28f68:	e3e05001 	mvn	r5, #1
   28f6c:	eaffffc8 	b	28e94 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   28f70:	e3e05002 	mvn	r5, #2
   28f74:	eaffffc6 	b	28e94 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   28f78:	e1a05002 	mov	r5, r2
   28f7c:	eaffffc4 	b	28e94 <CSerialDevice::Read(void*, unsigned int)+0xe0>
   28f80:	00037118 	.word	0x00037118

00028f84 <CSerialDevice::GetOptions() const>:
   28f84:	e2800a01 	add	r0, r0, #4096	; 0x1000
   28f88:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   28f8c:	e12fff1e 	bx	lr

00028f90 <CSerialDevice::SetOptions(unsigned int)>:
   28f90:	e2800a01 	add	r0, r0, #4096	; 0x1000
   28f94:	e58010cc 	str	r1, [r0, #204]	; 0xcc
   28f98:	e12fff1e 	bx	lr

00028f9c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   28f9c:	e92d4010 	push	{r4, lr}
   28fa0:	e5903004 	ldr	r3, [r0, #4]
   28fa4:	e3530000 	cmp	r3, #0
   28fa8:	0a00000e 	beq	28fe8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   28fac:	e2800a01 	add	r0, r0, #4096	; 0x1000
   28fb0:	e59030d0 	ldr	r3, [r0, #208]	; 0xd0
   28fb4:	e3530000 	cmp	r3, #0
   28fb8:	1a00000e 	bne	28ff8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   28fbc:	e3510000 	cmp	r1, #0
   28fc0:	0a000010 	beq	29008 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   28fc4:	e1d130d0 	ldrsb	r3, [r1]
   28fc8:	e3530000 	cmp	r3, #0
   28fcc:	0a000011 	beq	29018 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   28fd0:	e3520000 	cmp	r2, #0
   28fd4:	0a000013 	beq	29028 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   28fd8:	e58020d8 	str	r2, [r0, #216]	; 0xd8
   28fdc:	e58010d4 	str	r1, [r0, #212]	; 0xd4
   28fe0:	e58010d0 	str	r1, [r0, #208]	; 0xd0
   28fe4:	e8bd8010 	pop	{r4, pc}
   28fe8:	e59f1048 	ldr	r1, [pc, #72]	; 29038 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   28fec:	e30021e9 	movw	r2, #489	; 0x1e9
   28ff0:	e2810f43 	add	r0, r1, #268	; 0x10c
   28ff4:	ebffefde 	bl	24f74 <assertion_failed>
   28ff8:	e59f1038 	ldr	r1, [pc, #56]	; 29038 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   28ffc:	e30021ea 	movw	r2, #490	; 0x1ea
   29000:	e2810f49 	add	r0, r1, #292	; 0x124
   29004:	ebffefda 	bl	24f74 <assertion_failed>
   29008:	e59f1028 	ldr	r1, [pc, #40]	; 29038 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2900c:	e3a02f7b 	mov	r2, #492	; 0x1ec
   29010:	e2810f4d 	add	r0, r1, #308	; 0x134
   29014:	ebffefd6 	bl	24f74 <assertion_failed>
   29018:	e59f1018 	ldr	r1, [pc, #24]	; 29038 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2901c:	e30021ed 	movw	r2, #493	; 0x1ed
   29020:	e2810d05 	add	r0, r1, #320	; 0x140
   29024:	ebffefd2 	bl	24f74 <assertion_failed>
   29028:	e59f1008 	ldr	r1, [pc, #8]	; 29038 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2902c:	e30021ee 	movw	r2, #494	; 0x1ee
   29030:	e2810e15 	add	r0, r1, #336	; 0x150
   29034:	ebffefce 	bl	24f74 <assertion_failed>
   29038:	00037118 	.word	0x00037118

0002903c <CSerialDevice::AvailableForWrite()>:
   2903c:	e92d4010 	push	{r4, lr}
   29040:	e5d03014 	ldrb	r3, [r0, #20]
   29044:	e3530000 	cmp	r3, #0
   29048:	0a000017 	beq	290ac <CSerialDevice::AvailableForWrite()+0x70>
   2904c:	e5903004 	ldr	r3, [r0, #4]
   29050:	e3530000 	cmp	r3, #0
   29054:	0a000018 	beq	290bc <CSerialDevice::AvailableForWrite()+0x80>
   29058:	e2804a01 	add	r4, r0, #4096	; 0x1000
   2905c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   29060:	e3500000 	cmp	r0, #0
   29064:	1a00000d 	bne	290a0 <CSerialDevice::AvailableForWrite()+0x64>
   29068:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
   2906c:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   29070:	e1520003 	cmp	r2, r3
   29074:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   29078:	e59420c4 	ldr	r2, [r4, #196]	; 0xc4
   2907c:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
   29080:	82434001 	subhi	r4, r3, #1
   29084:	9284400f 	addls	r4, r4, #15
   29088:	e3500000 	cmp	r0, #0
   2908c:	e0444002 	sub	r4, r4, r2
   29090:	0a000000 	beq	29098 <CSerialDevice::AvailableForWrite()+0x5c>
   29094:	eb000f19 	bl	2cd00 <LeaveCritical>
   29098:	e1a00004 	mov	r0, r4
   2909c:	e8bd8010 	pop	{r4, pc}
   290a0:	eb000ee9 	bl	2cc4c <EnterCritical>
   290a4:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   290a8:	eaffffee 	b	29068 <CSerialDevice::AvailableForWrite()+0x2c>
   290ac:	e59f1018 	ldr	r1, [pc, #24]	; 290cc <CSerialDevice::AvailableForWrite()+0x90>
   290b0:	e3a02f7e 	mov	r2, #504	; 0x1f8
   290b4:	e28100f4 	add	r0, r1, #244	; 0xf4
   290b8:	ebffefad 	bl	24f74 <assertion_failed>
   290bc:	e59f1008 	ldr	r1, [pc, #8]	; 290cc <CSerialDevice::AvailableForWrite()+0x90>
   290c0:	e30021f9 	movw	r2, #505	; 0x1f9
   290c4:	e2810f43 	add	r0, r1, #268	; 0x10c
   290c8:	ebffefa9 	bl	24f74 <assertion_failed>
   290cc:	00037118 	.word	0x00037118

000290d0 <CSerialDevice::AvailableForRead()>:
   290d0:	e92d4070 	push	{r4, r5, r6, lr}
   290d4:	e5d03014 	ldrb	r3, [r0, #20]
   290d8:	e3530000 	cmp	r3, #0
   290dc:	0a000018 	beq	29144 <CSerialDevice::AvailableForRead()+0x74>
   290e0:	e5903004 	ldr	r3, [r0, #4]
   290e4:	e1a04000 	mov	r4, r0
   290e8:	e3530000 	cmp	r3, #0
   290ec:	0a000018 	beq	29154 <CSerialDevice::AvailableForRead()+0x84>
   290f0:	e2805a01 	add	r5, r0, #4096	; 0x1000
   290f4:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   290f8:	e3500000 	cmp	r0, #0
   290fc:	1a00000d 	bne	29138 <CSerialDevice::AvailableForRead()+0x68>
   29100:	e59428b8 	ldr	r2, [r4, #2232]	; 0x8b8
   29104:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   29108:	e1520003 	cmp	r2, r3
   2910c:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   29110:	359428bc 	ldrcc	r2, [r4, #2236]	; 0x8bc
   29114:	32834b02 	addcc	r4, r3, #2048	; 0x800
   29118:	259448bc 	ldrcs	r4, [r4, #2236]	; 0x8bc
   2911c:	30444002 	subcc	r4, r4, r2
   29120:	20434004 	subcs	r4, r3, r4
   29124:	e3500000 	cmp	r0, #0
   29128:	0a000000 	beq	29130 <CSerialDevice::AvailableForRead()+0x60>
   2912c:	eb000ef3 	bl	2cd00 <LeaveCritical>
   29130:	e1a00004 	mov	r0, r4
   29134:	e8bd8070 	pop	{r4, r5, r6, pc}
   29138:	eb000ec3 	bl	2cc4c <EnterCritical>
   2913c:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   29140:	eaffffee 	b	29100 <CSerialDevice::AvailableForRead()+0x30>
   29144:	e59f1018 	ldr	r1, [pc, #24]	; 29164 <CSerialDevice::AvailableForRead()+0x94>
   29148:	e300220e 	movw	r2, #526	; 0x20e
   2914c:	e28100f4 	add	r0, r1, #244	; 0xf4
   29150:	ebffef87 	bl	24f74 <assertion_failed>
   29154:	e59f1008 	ldr	r1, [pc, #8]	; 29164 <CSerialDevice::AvailableForRead()+0x94>
   29158:	e300220f 	movw	r2, #527	; 0x20f
   2915c:	e2810f43 	add	r0, r1, #268	; 0x10c
   29160:	ebffef83 	bl	24f74 <assertion_failed>
   29164:	00037118 	.word	0x00037118

00029168 <CSerialDevice::Peek()>:
   29168:	e92d4070 	push	{r4, r5, r6, lr}
   2916c:	e5d03014 	ldrb	r3, [r0, #20]
   29170:	e3530000 	cmp	r3, #0
   29174:	0a00001f 	beq	291f8 <CSerialDevice::Peek()+0x90>
   29178:	e5903004 	ldr	r3, [r0, #4]
   2917c:	e1a04000 	mov	r4, r0
   29180:	e3530000 	cmp	r3, #0
   29184:	0a00001f 	beq	29208 <CSerialDevice::Peek()+0xa0>
   29188:	e2805a01 	add	r5, r0, #4096	; 0x1000
   2918c:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   29190:	e3500000 	cmp	r0, #0
   29194:	1a000008 	bne	291bc <CSerialDevice::Peek()+0x54>
   29198:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   2919c:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
   291a0:	e1520003 	cmp	r2, r3
   291a4:	0a00001b 	beq	29218 <CSerialDevice::Peek()+0xb0>
   291a8:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   291ac:	e0844003 	add	r4, r4, r3
   291b0:	e5d440b8 	ldrb	r4, [r4, #184]	; 0xb8
   291b4:	e1a00004 	mov	r0, r4
   291b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   291bc:	eb000ea2 	bl	2cc4c <EnterCritical>
   291c0:	e59428b8 	ldr	r2, [r4, #2232]	; 0x8b8
   291c4:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
   291c8:	e1520003 	cmp	r2, r3
   291cc:	03e04000 	mvneq	r4, #0
   291d0:	159438bc 	ldrne	r3, [r4, #2236]	; 0x8bc
   291d4:	059520dc 	ldreq	r2, [r5, #220]	; 0xdc
   291d8:	10844003 	addne	r4, r4, r3
   291dc:	159520dc 	ldrne	r2, [r5, #220]	; 0xdc
   291e0:	15d440b8 	ldrbne	r4, [r4, #184]	; 0xb8
   291e4:	e3520000 	cmp	r2, #0
   291e8:	0afffff1 	beq	291b4 <CSerialDevice::Peek()+0x4c>
   291ec:	eb000ec3 	bl	2cd00 <LeaveCritical>
   291f0:	e1a00004 	mov	r0, r4
   291f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   291f8:	e59f1020 	ldr	r1, [pc, #32]	; 29220 <CSerialDevice::Peek()+0xb8>
   291fc:	e3a02f89 	mov	r2, #548	; 0x224
   29200:	e28100f4 	add	r0, r1, #244	; 0xf4
   29204:	ebffef5a 	bl	24f74 <assertion_failed>
   29208:	e59f1010 	ldr	r1, [pc, #16]	; 29220 <CSerialDevice::Peek()+0xb8>
   2920c:	e3002225 	movw	r2, #549	; 0x225
   29210:	e2810f43 	add	r0, r1, #268	; 0x10c
   29214:	ebffef56 	bl	24f74 <assertion_failed>
   29218:	e3e04000 	mvn	r4, #0
   2921c:	eaffffe4 	b	291b4 <CSerialDevice::Peek()+0x4c>
   29220:	00037118 	.word	0x00037118

00029224 <CSerialDevice::Flush()>:
   29224:	e5902010 	ldr	r2, [r0, #16]
   29228:	e2822018 	add	r2, r2, #24
   2922c:	e5923000 	ldr	r3, [r2]
   29230:	e3130008 	tst	r3, #8
   29234:	1afffffc 	bne	2922c <CSerialDevice::Flush()+0x8>
   29238:	e12fff1e 	bx	lr

0002923c <CSerialDevice::Write(unsigned char)>:
   2923c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29240:	e5903004 	ldr	r3, [r0, #4]
   29244:	e3530000 	cmp	r3, #0
   29248:	0a000024 	beq	292e0 <CSerialDevice::Write(unsigned char)+0xa4>
   2924c:	e2805a01 	add	r5, r0, #4096	; 0x1000
   29250:	e1a06001 	mov	r6, r1
   29254:	e1a04000 	mov	r4, r0
   29258:	e59520dc 	ldr	r2, [r5, #220]	; 0xdc
   2925c:	e3520000 	cmp	r2, #0
   29260:	1a000013 	bne	292b4 <CSerialDevice::Write(unsigned char)+0x78>
   29264:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   29268:	e59510c8 	ldr	r1, [r5, #200]	; 0xc8
   2926c:	e2833001 	add	r3, r3, #1
   29270:	e7ea3053 	ubfx	r3, r3, #0, #11
   29274:	e1530001 	cmp	r3, r1
   29278:	0a000021 	beq	29304 <CSerialDevice::Write(unsigned char)+0xc8>
   2927c:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   29280:	e3a07001 	mov	r7, #1
   29284:	e0840003 	add	r0, r4, r3
   29288:	e0833007 	add	r3, r3, r7
   2928c:	e58530c4 	str	r3, [r5, #196]	; 0xc4
   29290:	e5c068c4 	strb	r6, [r0, #2244]	; 0x8c4
   29294:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   29298:	e7ea3053 	ubfx	r3, r3, #0, #11
   2929c:	e58530c4 	str	r3, [r5, #196]	; 0xc4
   292a0:	e3520000 	cmp	r2, #0
   292a4:	0a000000 	beq	292ac <CSerialDevice::Write(unsigned char)+0x70>
   292a8:	eb000e94 	bl	2cd00 <LeaveCritical>
   292ac:	e1a00007 	mov	r0, r7
   292b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   292b4:	e1a00002 	mov	r0, r2
   292b8:	eb000e63 	bl	2cc4c <EnterCritical>
   292bc:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   292c0:	e59520c8 	ldr	r2, [r5, #200]	; 0xc8
   292c4:	e2833001 	add	r3, r3, #1
   292c8:	e7ea3053 	ubfx	r3, r3, #0, #11
   292cc:	e1530002 	cmp	r3, r2
   292d0:	e59520dc 	ldr	r2, [r5, #220]	; 0xdc
   292d4:	03a07000 	moveq	r7, #0
   292d8:	1affffe7 	bne	2927c <CSerialDevice::Write(unsigned char)+0x40>
   292dc:	eaffffef 	b	292a0 <CSerialDevice::Write(unsigned char)+0x64>
   292e0:	e5900010 	ldr	r0, [r0, #16]
   292e4:	e2802018 	add	r2, r0, #24
   292e8:	e5923000 	ldr	r3, [r2]
   292ec:	e3130020 	tst	r3, #32
   292f0:	1afffffc 	bne	292e8 <CSerialDevice::Write(unsigned char)+0xac>
   292f4:	e3a07001 	mov	r7, #1
   292f8:	e5801000 	str	r1, [r0]
   292fc:	e1a00007 	mov	r0, r7
   29300:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29304:	e1a07002 	mov	r7, r2
   29308:	e1a00007 	mov	r0, r7
   2930c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00029310 <CSerialDevice::InterruptHandler()>:
   29310:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29314:	e2805a01 	add	r5, r0, #4096	; 0x1000
   29318:	e1a04000 	mov	r4, r0
   2931c:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   29320:	e3500000 	cmp	r0, #0
   29324:	1a00006b 	bne	294d8 <CSerialDevice::InterruptHandler()+0x1c8>
   29328:	e5943010 	ldr	r3, [r4, #16]
   2932c:	e3a06000 	mov	r6, #0
   29330:	e3e07002 	mvn	r7, #2
   29334:	e3e0c001 	mvn	ip, #1
   29338:	e3e0e000 	mvn	lr, #0
   2933c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   29340:	e5832044 	str	r2, [r3, #68]	; 0x44
   29344:	e5942010 	ldr	r2, [r4, #16]
   29348:	e2820018 	add	r0, r2, #24
   2934c:	e5903000 	ldr	r3, [r0]
   29350:	e3130010 	tst	r3, #16
   29354:	1a000024 	bne	293ec <CSerialDevice::InterruptHandler()+0xdc>
   29358:	e5921000 	ldr	r1, [r2]
   2935c:	e3110b01 	tst	r1, #1024	; 0x400
   29360:	0a000042 	beq	29470 <CSerialDevice::InterruptHandler()+0x160>
   29364:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   29368:	e3530000 	cmp	r3, #0
   2936c:	0584e8c0 	streq	lr, [r4, #2240]	; 0x8c0
   29370:	e59580d0 	ldr	r8, [r5, #208]	; 0xd0
   29374:	e3580000 	cmp	r8, #0
   29378:	0a00000a 	beq	293a8 <CSerialDevice::InterruptHandler()+0x98>
   2937c:	e59590d4 	ldr	r9, [r5, #212]	; 0xd4
   29380:	e6af3071 	sxtb	r3, r1
   29384:	e1d9a0d0 	ldrsb	sl, [r9]
   29388:	e15a0003 	cmp	sl, r3
   2938c:	158580d4 	strne	r8, [r5, #212]	; 0xd4
   29390:	1a000004 	bne	293a8 <CSerialDevice::InterruptHandler()+0x98>
   29394:	e2893001 	add	r3, r9, #1
   29398:	e58530d4 	str	r3, [r5, #212]	; 0xd4
   2939c:	e1d930d1 	ldrsb	r3, [r9, #1]
   293a0:	e3530000 	cmp	r3, #0
   293a4:	03a06001 	moveq	r6, #1
   293a8:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   293ac:	e59488bc 	ldr	r8, [r4, #2236]	; 0x8bc
   293b0:	e2833001 	add	r3, r3, #1
   293b4:	e7ea3053 	ubfx	r3, r3, #0, #11
   293b8:	e1530008 	cmp	r3, r8
   293bc:	0a000031 	beq	29488 <CSerialDevice::InterruptHandler()+0x178>
   293c0:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   293c4:	e0848003 	add	r8, r4, r3
   293c8:	e2833001 	add	r3, r3, #1
   293cc:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
   293d0:	e5c810b8 	strb	r1, [r8, #184]	; 0xb8
   293d4:	e59438b8 	ldr	r3, [r4, #2232]	; 0x8b8
   293d8:	e7ea3053 	ubfx	r3, r3, #0, #11
   293dc:	e58438b8 	str	r3, [r4, #2232]	; 0x8b8
   293e0:	e5903000 	ldr	r3, [r0]
   293e4:	e3130010 	tst	r3, #16
   293e8:	0affffda 	beq	29358 <CSerialDevice::InterruptHandler()+0x48>
   293ec:	e5903000 	ldr	r3, [r0]
   293f0:	e3130020 	tst	r3, #32
   293f4:	1a000015 	bne	29450 <CSerialDevice::InterruptHandler()+0x140>
   293f8:	e59530c4 	ldr	r3, [r5, #196]	; 0xc4
   293fc:	e59510c8 	ldr	r1, [r5, #200]	; 0xc8
   29400:	e1510003 	cmp	r1, r3
   29404:	1a000004 	bne	2941c <CSerialDevice::InterruptHandler()+0x10c>
   29408:	ea000028 	b	294b0 <CSerialDevice::InterruptHandler()+0x1a0>
   2940c:	e59510c4 	ldr	r1, [r5, #196]	; 0xc4
   29410:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
   29414:	e1510003 	cmp	r1, r3
   29418:	0a000024 	beq	294b0 <CSerialDevice::InterruptHandler()+0x1a0>
   2941c:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
   29420:	e0841003 	add	r1, r4, r3
   29424:	e2833001 	add	r3, r3, #1
   29428:	e58530c8 	str	r3, [r5, #200]	; 0xc8
   2942c:	e5d138c4 	ldrb	r3, [r1, #2244]	; 0x8c4
   29430:	e5823000 	str	r3, [r2]
   29434:	e59530c8 	ldr	r3, [r5, #200]	; 0xc8
   29438:	e7ea3053 	ubfx	r3, r3, #0, #11
   2943c:	e58530c8 	str	r3, [r5, #200]	; 0xc8
   29440:	e5942010 	ldr	r2, [r4, #16]
   29444:	e5923018 	ldr	r3, [r2, #24]
   29448:	e3130020 	tst	r3, #32
   2944c:	0affffee 	beq	2940c <CSerialDevice::InterruptHandler()+0xfc>
   29450:	e59530dc 	ldr	r3, [r5, #220]	; 0xdc
   29454:	e3530000 	cmp	r3, #0
   29458:	1a00001a 	bne	294c8 <CSerialDevice::InterruptHandler()+0x1b8>
   2945c:	e3560000 	cmp	r6, #0
   29460:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29464:	e59530d8 	ldr	r3, [r5, #216]	; 0xd8
   29468:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2946c:	e12fff13 	bx	r3
   29470:	e3110b02 	tst	r1, #2048	; 0x800
   29474:	0a000007 	beq	29498 <CSerialDevice::InterruptHandler()+0x188>
   29478:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   2947c:	e3530000 	cmp	r3, #0
   29480:	0584c8c0 	streq	ip, [r4, #2240]	; 0x8c0
   29484:	eaffffb9 	b	29370 <CSerialDevice::InterruptHandler()+0x60>
   29488:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   2948c:	e3530000 	cmp	r3, #0
   29490:	0584c8c0 	streq	ip, [r4, #2240]	; 0x8c0
   29494:	eaffffac 	b	2934c <CSerialDevice::InterruptHandler()+0x3c>
   29498:	e3110c01 	tst	r1, #256	; 0x100
   2949c:	0affffb3 	beq	29370 <CSerialDevice::InterruptHandler()+0x60>
   294a0:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   294a4:	e3530000 	cmp	r3, #0
   294a8:	058478c0 	streq	r7, [r4, #2240]	; 0x8c0
   294ac:	eaffffaf 	b	29370 <CSerialDevice::InterruptHandler()+0x60>
   294b0:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   294b4:	e3c33020 	bic	r3, r3, #32
   294b8:	e5823038 	str	r3, [r2, #56]	; 0x38
   294bc:	e59530dc 	ldr	r3, [r5, #220]	; 0xdc
   294c0:	e3530000 	cmp	r3, #0
   294c4:	0affffe4 	beq	2945c <CSerialDevice::InterruptHandler()+0x14c>
   294c8:	eb000e0c 	bl	2cd00 <LeaveCritical>
   294cc:	e3560000 	cmp	r6, #0
   294d0:	1affffe3 	bne	29464 <CSerialDevice::InterruptHandler()+0x154>
   294d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   294d8:	eb000ddb 	bl	2cc4c <EnterCritical>
   294dc:	eaffff91 	b	29328 <CSerialDevice::InterruptHandler()+0x18>

000294e0 <CSerialDevice::InterruptStub(void*)>:
   294e0:	f57ff05f 	dmb	sy
   294e4:	e3093428 	movw	r3, #37928	; 0x9428
   294e8:	e3403003 	movt	r3, #3
   294ec:	e593200c 	ldr	r2, [r3, #12]
   294f0:	e3120001 	tst	r2, #1
   294f4:	012fff1e 	bxeq	lr
   294f8:	e5930010 	ldr	r0, [r3, #16]
   294fc:	e3500000 	cmp	r0, #0
   29500:	0a000000 	beq	29508 <CSerialDevice::InterruptStub(void*)+0x28>
   29504:	eaffff81 	b	29310 <CSerialDevice::InterruptHandler()>
   29508:	e59f100c 	ldr	r1, [pc, #12]	; 2951c <CSerialDevice::InterruptStub(void*)+0x3c>
   2950c:	e30022d1 	movw	r2, #721	; 0x2d1
   29510:	e92d4010 	push	{r4, lr}
   29514:	e2810e16 	add	r0, r1, #352	; 0x160
   29518:	ebffee95 	bl	24f74 <assertion_failed>
   2951c:	00037118 	.word	0x00037118

00029520 <CString::~CString()>:
   29520:	e92d4010 	push	{r4, lr}
   29524:	e1a04000 	mov	r4, r0
   29528:	e5900004 	ldr	r0, [r0, #4]
   2952c:	e59f3014 	ldr	r3, [pc, #20]	; 29548 <CString::~CString()+0x28>
   29530:	e5843000 	str	r3, [r4]
   29534:	e3500000 	cmp	r0, #0
   29538:	0a000000 	beq	29540 <CString::~CString()+0x20>
   2953c:	eb000a78 	bl	2bf24 <operator delete[](void*)>
   29540:	e1a00004 	mov	r0, r4
   29544:	e8bd8010 	pop	{r4, pc}
   29548:	00037290 	.word	0x00037290

0002954c <CString::~CString()>:
   2954c:	e92d4010 	push	{r4, lr}
   29550:	e1a04000 	mov	r4, r0
   29554:	e5900004 	ldr	r0, [r0, #4]
   29558:	e59f3020 	ldr	r3, [pc, #32]	; 29580 <CString::~CString()+0x34>
   2955c:	e5843000 	str	r3, [r4]
   29560:	e3500000 	cmp	r0, #0
   29564:	0a000000 	beq	2956c <CString::~CString()+0x20>
   29568:	eb000a6d 	bl	2bf24 <operator delete[](void*)>
   2956c:	e1a00004 	mov	r0, r4
   29570:	e3a01010 	mov	r1, #16
   29574:	eb000a6b 	bl	2bf28 <operator delete(void*, unsigned int)>
   29578:	e1a00004 	mov	r0, r4
   2957c:	e8bd8010 	pop	{r4, pc}
   29580:	00037290 	.word	0x00037290

00029584 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   29584:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29588:	e990002c 	ldmib	r0, {r2, r3, r5}
   2958c:	e0455002 	sub	r5, r5, r2
   29590:	e0851001 	add	r1, r5, r1
   29594:	e2812001 	add	r2, r1, #1
   29598:	e1520003 	cmp	r2, r3
   2959c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   295a0:	e1a04000 	mov	r4, r0
   295a4:	e2816041 	add	r6, r1, #65	; 0x41
   295a8:	e1a00006 	mov	r0, r6
   295ac:	eb000a55 	bl	2bf08 <operator new[](unsigned int)>
   295b0:	e3a02000 	mov	r2, #0
   295b4:	e594300c 	ldr	r3, [r4, #12]
   295b8:	e1a07000 	mov	r7, r0
   295bc:	e5c32000 	strb	r2, [r3]
   295c0:	e5941004 	ldr	r1, [r4, #4]
   295c4:	eb000851 	bl	2b710 <strcpy>
   295c8:	e5940004 	ldr	r0, [r4, #4]
   295cc:	e3500000 	cmp	r0, #0
   295d0:	0a000000 	beq	295d8 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   295d4:	eb000a52 	bl	2bf24 <operator delete[](void*)>
   295d8:	e0875005 	add	r5, r7, r5
   295dc:	e5847004 	str	r7, [r4, #4]
   295e0:	e584500c 	str	r5, [r4, #12]
   295e4:	e5846008 	str	r6, [r4, #8]
   295e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000295ec <CString::CString()>:
   295ec:	e59f100c 	ldr	r1, [pc, #12]	; 29600 <CString::CString()+0x14>
   295f0:	e3a02000 	mov	r2, #0
   295f4:	e8800006 	stm	r0, {r1, r2}
   295f8:	e5802008 	str	r2, [r0, #8]
   295fc:	e12fff1e 	bx	lr
   29600:	00037290 	.word	0x00037290

00029604 <CString::CString(char const*)>:
   29604:	e92d4070 	push	{r4, r5, r6, lr}
   29608:	e1a04000 	mov	r4, r0
   2960c:	e59f3030 	ldr	r3, [pc, #48]	; 29644 <CString::CString(char const*)+0x40>
   29610:	e1a00001 	mov	r0, r1
   29614:	e1a05001 	mov	r5, r1
   29618:	e5843000 	str	r3, [r4]
   2961c:	eb0007d1 	bl	2b568 <strlen>
   29620:	e2803001 	add	r3, r0, #1
   29624:	e1a00003 	mov	r0, r3
   29628:	e5843008 	str	r3, [r4, #8]
   2962c:	eb000a35 	bl	2bf08 <operator new[](unsigned int)>
   29630:	e1a01005 	mov	r1, r5
   29634:	e5840004 	str	r0, [r4, #4]
   29638:	eb000834 	bl	2b710 <strcpy>
   2963c:	e1a00004 	mov	r0, r4
   29640:	e8bd8070 	pop	{r4, r5, r6, pc}
   29644:	00037290 	.word	0x00037290

00029648 <CString::operator char const*() const>:
   29648:	e5900004 	ldr	r0, [r0, #4]
   2964c:	e3063108 	movw	r3, #24840	; 0x6108
   29650:	e3403003 	movt	r3, #3
   29654:	e3500000 	cmp	r0, #0
   29658:	01a00003 	moveq	r0, r3
   2965c:	e12fff1e 	bx	lr

00029660 <CString::operator=(char const*)>:
   29660:	e92d4070 	push	{r4, r5, r6, lr}
   29664:	e1a04000 	mov	r4, r0
   29668:	e5900004 	ldr	r0, [r0, #4]
   2966c:	e1a05001 	mov	r5, r1
   29670:	e3500000 	cmp	r0, #0
   29674:	0a000000 	beq	2967c <CString::operator=(char const*)+0x1c>
   29678:	eb000a29 	bl	2bf24 <operator delete[](void*)>
   2967c:	e1a00005 	mov	r0, r5
   29680:	eb0007b8 	bl	2b568 <strlen>
   29684:	e2803001 	add	r3, r0, #1
   29688:	e1a00003 	mov	r0, r3
   2968c:	e5843008 	str	r3, [r4, #8]
   29690:	eb000a1c 	bl	2bf08 <operator new[](unsigned int)>
   29694:	e1a01005 	mov	r1, r5
   29698:	e5840004 	str	r0, [r4, #4]
   2969c:	eb00081b 	bl	2b710 <strcpy>
   296a0:	e5940004 	ldr	r0, [r4, #4]
   296a4:	e8bd8070 	pop	{r4, r5, r6, pc}

000296a8 <CString::operator=(CString const&)>:
   296a8:	e92d4070 	push	{r4, r5, r6, lr}
   296ac:	e1a04000 	mov	r4, r0
   296b0:	e5900004 	ldr	r0, [r0, #4]
   296b4:	e1a06001 	mov	r6, r1
   296b8:	e3500000 	cmp	r0, #0
   296bc:	0a000000 	beq	296c4 <CString::operator=(CString const&)+0x1c>
   296c0:	eb000a17 	bl	2bf24 <operator delete[](void*)>
   296c4:	e5960004 	ldr	r0, [r6, #4]
   296c8:	e3065108 	movw	r5, #24840	; 0x6108
   296cc:	e3405003 	movt	r5, #3
   296d0:	e3500000 	cmp	r0, #0
   296d4:	01a00005 	moveq	r0, r5
   296d8:	eb0007a2 	bl	2b568 <strlen>
   296dc:	e2803001 	add	r3, r0, #1
   296e0:	e1a00003 	mov	r0, r3
   296e4:	e5843008 	str	r3, [r4, #8]
   296e8:	eb000a06 	bl	2bf08 <operator new[](unsigned int)>
   296ec:	e5840004 	str	r0, [r4, #4]
   296f0:	e5961004 	ldr	r1, [r6, #4]
   296f4:	e3510000 	cmp	r1, #0
   296f8:	01a01005 	moveq	r1, r5
   296fc:	eb000803 	bl	2b710 <strcpy>
   29700:	e1a00004 	mov	r0, r4
   29704:	e8bd8070 	pop	{r4, r5, r6, pc}

00029708 <CString::GetLength() const>:
   29708:	e5900004 	ldr	r0, [r0, #4]
   2970c:	e3500000 	cmp	r0, #0
   29710:	012fff1e 	bxeq	lr
   29714:	ea000793 	b	2b568 <strlen>

00029718 <CString::Append(char const*)>:
   29718:	e92d4070 	push	{r4, r5, r6, lr}
   2971c:	e1a04000 	mov	r4, r0
   29720:	e5900004 	ldr	r0, [r0, #4]
   29724:	e3a03001 	mov	r3, #1
   29728:	e1a06001 	mov	r6, r1
   2972c:	e5843008 	str	r3, [r4, #8]
   29730:	e3500000 	cmp	r0, #0
   29734:	0a000003 	beq	29748 <CString::Append(char const*)+0x30>
   29738:	eb00078a 	bl	2b568 <strlen>
   2973c:	e5943008 	ldr	r3, [r4, #8]
   29740:	e0830000 	add	r0, r3, r0
   29744:	e5840008 	str	r0, [r4, #8]
   29748:	e1a00006 	mov	r0, r6
   2974c:	eb000785 	bl	2b568 <strlen>
   29750:	e5943008 	ldr	r3, [r4, #8]
   29754:	e0800003 	add	r0, r0, r3
   29758:	e5840008 	str	r0, [r4, #8]
   2975c:	eb0009e9 	bl	2bf08 <operator new[](unsigned int)>
   29760:	e5941004 	ldr	r1, [r4, #4]
   29764:	e1a05000 	mov	r5, r0
   29768:	e3510000 	cmp	r1, #0
   2976c:	05c01000 	strbeq	r1, [r0]
   29770:	0a000004 	beq	29788 <CString::Append(char const*)+0x70>
   29774:	eb0007e5 	bl	2b710 <strcpy>
   29778:	e5940004 	ldr	r0, [r4, #4]
   2977c:	e3500000 	cmp	r0, #0
   29780:	0a000000 	beq	29788 <CString::Append(char const*)+0x70>
   29784:	eb0009e6 	bl	2bf24 <operator delete[](void*)>
   29788:	e1a01006 	mov	r1, r6
   2978c:	e1a00005 	mov	r0, r5
   29790:	eb0007fb 	bl	2b784 <strcat>
   29794:	e5845004 	str	r5, [r4, #4]
   29798:	e8bd8070 	pop	{r4, r5, r6, pc}

0002979c <CString::Compare(char const*) const>:
   2979c:	e5900004 	ldr	r0, [r0, #4]
   297a0:	ea00077a 	b	2b590 <strcmp>

000297a4 <CString::Find(char) const>:
   297a4:	e5902004 	ldr	r2, [r0, #4]
   297a8:	e1d230d0 	ldrsb	r3, [r2]
   297ac:	e3530000 	cmp	r3, #0
   297b0:	0a000009 	beq	297dc <CString::Find(char) const+0x38>
   297b4:	e1510003 	cmp	r1, r3
   297b8:	e3a00000 	mov	r0, #0
   297bc:	1a000002 	bne	297cc <CString::Find(char) const+0x28>
   297c0:	e12fff1e 	bx	lr
   297c4:	e1530001 	cmp	r3, r1
   297c8:	012fff1e 	bxeq	lr
   297cc:	e1f230d1 	ldrsb	r3, [r2, #1]!
   297d0:	e2800001 	add	r0, r0, #1
   297d4:	e3530000 	cmp	r3, #0
   297d8:	1afffff9 	bne	297c4 <CString::Find(char) const+0x20>
   297dc:	e3e00000 	mvn	r0, #0
   297e0:	e12fff1e 	bx	lr

000297e4 <CString::PutChar(char, unsigned int)>:
   297e4:	e92d4070 	push	{r4, r5, r6, lr}
   297e8:	e2524000 	subs	r4, r2, #0
   297ec:	08bd8070 	popeq	{r4, r5, r6, pc}
   297f0:	e1a06001 	mov	r6, r1
   297f4:	e1a01004 	mov	r1, r4
   297f8:	e1a05000 	mov	r5, r0
   297fc:	ebffff60 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   29800:	e2443001 	sub	r3, r4, #1
   29804:	e595200c 	ldr	r2, [r5, #12]
   29808:	e2433001 	sub	r3, r3, #1
   2980c:	e3730001 	cmn	r3, #1
   29810:	e2820001 	add	r0, r2, #1
   29814:	e585000c 	str	r0, [r5, #12]
   29818:	e5c26000 	strb	r6, [r2]
   2981c:	1afffff8 	bne	29804 <CString::PutChar(char, unsigned int)+0x20>
   29820:	e8bd8070 	pop	{r4, r5, r6, pc}

00029824 <CString::PutString(char const*)>:
   29824:	e92d4070 	push	{r4, r5, r6, lr}
   29828:	e1a04000 	mov	r4, r0
   2982c:	e1a00001 	mov	r0, r1
   29830:	e1a05001 	mov	r5, r1
   29834:	eb00074b 	bl	2b568 <strlen>
   29838:	e2506000 	subs	r6, r0, #0
   2983c:	0a000002 	beq	2984c <CString::PutString(char const*)+0x28>
   29840:	e1a01006 	mov	r1, r6
   29844:	e1a00004 	mov	r0, r4
   29848:	ebffff4d 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2984c:	e1a01005 	mov	r1, r5
   29850:	e594000c 	ldr	r0, [r4, #12]
   29854:	eb0007ad 	bl	2b710 <strcpy>
   29858:	e594100c 	ldr	r1, [r4, #12]
   2985c:	e0811006 	add	r1, r1, r6
   29860:	e584100c 	str	r1, [r4, #12]
   29864:	e8bd8070 	pop	{r4, r5, r6, pc}

00029868 <CString::Replace(char const*, char const*)>:
   29868:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2986c:	e1d180d0 	ldrsb	r8, [r1]
   29870:	e24dd010 	sub	sp, sp, #16
   29874:	e3580000 	cmp	r8, #0
   29878:	1a000002 	bne	29888 <CString::Replace(char const*, char const*)+0x20>
   2987c:	e1a00008 	mov	r0, r8
   29880:	e28dd010 	add	sp, sp, #16
   29884:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29888:	e1a06000 	mov	r6, r0
   2988c:	e1a07001 	mov	r7, r1
   29890:	e5901004 	ldr	r1, [r0, #4]
   29894:	e1a0000d 	mov	r0, sp
   29898:	e1a09002 	mov	r9, r2
   2989c:	ebffff58 	bl	29604 <CString::CString(char const*)>
   298a0:	e5960004 	ldr	r0, [r6, #4]
   298a4:	e3500000 	cmp	r0, #0
   298a8:	0a000000 	beq	298b0 <CString::Replace(char const*, char const*)+0x48>
   298ac:	eb00099c 	bl	2bf24 <operator delete[](void*)>
   298b0:	e3a00040 	mov	r0, #64	; 0x40
   298b4:	e5860008 	str	r0, [r6, #8]
   298b8:	eb000992 	bl	2bf08 <operator new[](unsigned int)>
   298bc:	e59d4004 	ldr	r4, [sp, #4]
   298c0:	e3a08000 	mov	r8, #0
   298c4:	e5860004 	str	r0, [r6, #4]
   298c8:	e586000c 	str	r0, [r6, #12]
   298cc:	e1d710d0 	ldrsb	r1, [r7]
   298d0:	e1a00004 	mov	r0, r4
   298d4:	eb0007bb 	bl	2b7c8 <strchr>
   298d8:	e2505000 	subs	r5, r0, #0
   298dc:	0a00002d 	beq	29998 <CString::Replace(char const*, char const*)+0x130>
   298e0:	e1540005 	cmp	r4, r5
   298e4:	2a000039 	bcs	299d0 <CString::Replace(char const*, char const*)+0x168>
   298e8:	e3a01001 	mov	r1, #1
   298ec:	e1a00006 	mov	r0, r6
   298f0:	e0d4a0d1 	ldrsb	sl, [r4], #1
   298f4:	ebffff22 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   298f8:	e596300c 	ldr	r3, [r6, #12]
   298fc:	e1550004 	cmp	r5, r4
   29900:	e2832001 	add	r2, r3, #1
   29904:	e586200c 	str	r2, [r6, #12]
   29908:	e5c3a000 	strb	sl, [r3]
   2990c:	1afffff5 	bne	298e8 <CString::Replace(char const*, char const*)+0x80>
   29910:	e2854001 	add	r4, r5, #1
   29914:	e1a0c005 	mov	ip, r5
   29918:	e1d730d1 	ldrsb	r3, [r7, #1]
   2991c:	e2871001 	add	r1, r7, #1
   29920:	e3530000 	cmp	r3, #0
   29924:	0a00000c 	beq	2995c <CString::Replace(char const*, char const*)+0xf4>
   29928:	e1d520d1 	ldrsb	r2, [r5, #1]
   2992c:	e1520003 	cmp	r2, r3
   29930:	1a00000e 	bne	29970 <CString::Replace(char const*, char const*)+0x108>
   29934:	e2853002 	add	r3, r5, #2
   29938:	ea000002 	b	29948 <CString::Replace(char const*, char const*)+0xe0>
   2993c:	e1d400d0 	ldrsb	r0, [r4]
   29940:	e1500002 	cmp	r0, r2
   29944:	1a000009 	bne	29970 <CString::Replace(char const*, char const*)+0x108>
   29948:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2994c:	e1a04003 	mov	r4, r3
   29950:	e2833001 	add	r3, r3, #1
   29954:	e3520000 	cmp	r2, #0
   29958:	1afffff7 	bne	2993c <CString::Replace(char const*, char const*)+0xd4>
   2995c:	e1a01009 	mov	r1, r9
   29960:	e1a00006 	mov	r0, r6
   29964:	e2888001 	add	r8, r8, #1
   29968:	ebffffad 	bl	29824 <CString::PutString(char const*)>
   2996c:	eaffffd6 	b	298cc <CString::Replace(char const*, char const*)+0x64>
   29970:	e3a01001 	mov	r1, #1
   29974:	e1a00006 	mov	r0, r6
   29978:	e1dc50d0 	ldrsb	r5, [ip]
   2997c:	e08c4001 	add	r4, ip, r1
   29980:	ebfffeff 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   29984:	e596300c 	ldr	r3, [r6, #12]
   29988:	e2832001 	add	r2, r3, #1
   2998c:	e586200c 	str	r2, [r6, #12]
   29990:	e5c35000 	strb	r5, [r3]
   29994:	eaffffcc 	b	298cc <CString::Replace(char const*, char const*)+0x64>
   29998:	e1a00006 	mov	r0, r6
   2999c:	e1a01004 	mov	r1, r4
   299a0:	ebffff9f 	bl	29824 <CString::PutString(char const*)>
   299a4:	e596200c 	ldr	r2, [r6, #12]
   299a8:	e59f302c 	ldr	r3, [pc, #44]	; 299dc <CString::Replace(char const*, char const*)+0x174>
   299ac:	e5c25000 	strb	r5, [r2]
   299b0:	e59d0004 	ldr	r0, [sp, #4]
   299b4:	e58d3000 	str	r3, [sp]
   299b8:	e3500000 	cmp	r0, #0
   299bc:	0affffae 	beq	2987c <CString::Replace(char const*, char const*)+0x14>
   299c0:	eb000957 	bl	2bf24 <operator delete[](void*)>
   299c4:	e1a00008 	mov	r0, r8
   299c8:	e28dd010 	add	sp, sp, #16
   299cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   299d0:	e1a0c004 	mov	ip, r4
   299d4:	e2854001 	add	r4, r5, #1
   299d8:	eaffffce 	b	29918 <CString::Replace(char const*, char const*)+0xb0>
   299dc:	00037290 	.word	0x00037290

000299e0 <CString::ReserveSpace(unsigned int)>:
   299e0:	e3510000 	cmp	r1, #0
   299e4:	012fff1e 	bxeq	lr
   299e8:	eafffee5 	b	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>

000299ec <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   299ec:	e1510002 	cmp	r1, r2
   299f0:	e92d4070 	push	{r4, r5, r6, lr}
   299f4:	23a0e001 	movcs	lr, #1
   299f8:	3a000019 	bcc	29a64 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x78>
   299fc:	e00e0e92 	mul	lr, r2, lr
   29a00:	e734fe11 	udiv	r4, r1, lr
   29a04:	e1540002 	cmp	r4, r2
   29a08:	e1a0c004 	mov	ip, r4
   29a0c:	2afffffa 	bcs	299fc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
   29a10:	e3530000 	cmp	r3, #0
   29a14:	e1a05000 	mov	r5, r0
   29a18:	13a06037 	movne	r6, #55	; 0x37
   29a1c:	03a06057 	moveq	r6, #87	; 0x57
   29a20:	ea000002 	b	29a30 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x44>
   29a24:	e734fe11 	udiv	r4, r1, lr
   29a28:	e1a05003 	mov	r5, r3
   29a2c:	e1a0c004 	mov	ip, r4
   29a30:	e061149e 	mls	r1, lr, r4, r1
   29a34:	e1a03005 	mov	r3, r5
   29a38:	e73ef21e 	udiv	lr, lr, r2
   29a3c:	e35c0009 	cmp	ip, #9
   29a40:	e6efc07c 	uxtb	ip, ip
   29a44:	928cc030 	addls	ip, ip, #48	; 0x30
   29a48:	808cc006 	addhi	ip, ip, r6
   29a4c:	e6afc07c 	sxtb	ip, ip
   29a50:	e4c3c001 	strb	ip, [r3], #1
   29a54:	e35e0000 	cmp	lr, #0
   29a58:	1afffff1 	bne	29a24 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x38>
   29a5c:	e5c5e001 	strb	lr, [r5, #1]
   29a60:	e8bd8070 	pop	{r4, r5, r6, pc}
   29a64:	e1a0c001 	mov	ip, r1
   29a68:	e3a0e001 	mov	lr, #1
   29a6c:	e1a04001 	mov	r4, r1
   29a70:	eaffffe6 	b	29a10 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

00029a74 <CString::ftoa(char*, double, unsigned int)>:
   29a74:	eeb50bc0 	vcmpe.f64	d0, #0.0
   29a78:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   29a7c:	eddf0b8b 	vldr	d16, [pc, #556]	; 29cb0 <CString::ftoa(char*, double, unsigned int)+0x23c>
   29a80:	ed2d8b02 	vpush	{d8}
   29a84:	eeb08b40 	vmov.f64	d8, d0
   29a88:	e24dd014 	sub	sp, sp, #20
   29a8c:	e1a04000 	mov	r4, r0
   29a90:	e1a07001 	mov	r7, r1
   29a94:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   29a98:	4eb18b40 	vnegmi.f64	d8, d0
   29a9c:	43a0302d 	movmi	r3, #45	; 0x2d
   29aa0:	42806001 	addmi	r6, r0, #1
   29aa4:	45c03000 	strbmi	r3, [r0]
   29aa8:	51a06000 	movpl	r6, r0
   29aac:	eeb48be0 	vcmpe.f64	d8, d16
   29ab0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   29ab4:	ca00006e 	bgt	29c74 <CString::ftoa(char*, double, unsigned int)+0x200>
   29ab8:	eefc7bc8 	vcvt.u32.f64	s15, d8
   29abc:	ee175a90 	vmov	r5, s15
   29ac0:	e3550009 	cmp	r5, #9
   29ac4:	83a02001 	movhi	r2, #1
   29ac8:	83a0100a 	movhi	r1, #10
   29acc:	9a000070 	bls	29c94 <CString::ftoa(char*, double, unsigned int)+0x220>
   29ad0:	e0020291 	mul	r2, r1, r2
   29ad4:	e733f215 	udiv	r3, r5, r2
   29ad8:	e3530009 	cmp	r3, #9
   29adc:	8afffffb 	bhi	29ad0 <CString::ftoa(char*, double, unsigned int)+0x5c>
   29ae0:	e30ceccd 	movw	lr, #52429	; 0xcccd
   29ae4:	e34ceccc 	movt	lr, #52428	; 0xcccc
   29ae8:	e1a0c006 	mov	ip, r6
   29aec:	e1a01005 	mov	r1, r5
   29af0:	e730f215 	udiv	r0, r5, r2
   29af4:	ea000002 	b	29b04 <CString::ftoa(char*, double, unsigned int)+0x90>
   29af8:	e1a0c000 	mov	ip, r0
   29afc:	e730f211 	udiv	r0, r1, r2
   29b00:	e1a03000 	mov	r3, r0
   29b04:	e0611092 	mls	r1, r2, r0, r1
   29b08:	e3530009 	cmp	r3, #9
   29b0c:	e082029e 	umull	r0, r2, lr, r2
   29b10:	e1a0000c 	mov	r0, ip
   29b14:	e6ef3073 	uxtb	r3, r3
   29b18:	92833030 	addls	r3, r3, #48	; 0x30
   29b1c:	82833057 	addhi	r3, r3, #87	; 0x57
   29b20:	e6af3073 	sxtb	r3, r3
   29b24:	e1b021a2 	lsrs	r2, r2, #3
   29b28:	e4c03001 	strb	r3, [r0], #1
   29b2c:	1afffff1 	bne	29af8 <CString::ftoa(char*, double, unsigned int)+0x84>
   29b30:	e5cc2001 	strb	r2, [ip, #1]
   29b34:	e3570000 	cmp	r7, #0
   29b38:	1a000003 	bne	29b4c <CString::ftoa(char*, double, unsigned int)+0xd8>
   29b3c:	e1a00004 	mov	r0, r4
   29b40:	e28dd014 	add	sp, sp, #20
   29b44:	ecbd8b02 	vpop	{d8}
   29b48:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   29b4c:	e1a00006 	mov	r0, r6
   29b50:	eb000684 	bl	2b568 <strlen>
   29b54:	e3570009 	cmp	r7, #9
   29b58:	31a09007 	movcc	r9, r7
   29b5c:	23a09009 	movcs	r9, #9
   29b60:	e3570001 	cmp	r7, #1
   29b64:	e0868000 	add	r8, r6, r0
   29b68:	e3a0302e 	mov	r3, #46	; 0x2e
   29b6c:	e7c63000 	strb	r3, [r6, r0]
   29b70:	e2886001 	add	r6, r8, #1
   29b74:	9ef21b04 	vmovls.f64	d17, #36	; 0x41200000  10.0
   29b78:	9a000008 	bls	29ba0 <CString::ftoa(char*, double, unsigned int)+0x12c>
   29b7c:	e3a0200a 	mov	r2, #10
   29b80:	e3a03002 	mov	r3, #2
   29b84:	e1a01002 	mov	r1, r2
   29b88:	e2833001 	add	r3, r3, #1
   29b8c:	e0020291 	mul	r2, r1, r2
   29b90:	e1530009 	cmp	r3, r9
   29b94:	9afffffb 	bls	29b88 <CString::ftoa(char*, double, unsigned int)+0x114>
   29b98:	ee072a90 	vmov	s15, r2
   29b9c:	eef81b67 	vcvt.f64.u32	d17, s15
   29ba0:	ee075a90 	vmov	s15, r5
   29ba4:	eef80b67 	vcvt.f64.u32	d16, s15
   29ba8:	ee388b60 	vsub.f64	d8, d8, d16
   29bac:	ee288b21 	vmul.f64	d8, d8, d17
   29bb0:	eefc7bc8 	vcvt.u32.f64	s15, d8
   29bb4:	ee171a90 	vmov	r1, s15
   29bb8:	e3510009 	cmp	r1, #9
   29bbc:	83a02001 	movhi	r2, #1
   29bc0:	83a0c00a 	movhi	ip, #10
   29bc4:	9a000035 	bls	29ca0 <CString::ftoa(char*, double, unsigned int)+0x22c>
   29bc8:	e002029c 	mul	r2, ip, r2
   29bcc:	e730f211 	udiv	r0, r1, r2
   29bd0:	e3500009 	cmp	r0, #9
   29bd4:	e1a03000 	mov	r3, r0
   29bd8:	8afffffa 	bhi	29bc8 <CString::ftoa(char*, double, unsigned int)+0x154>
   29bdc:	e30ceccd 	movw	lr, #52429	; 0xcccd
   29be0:	e34ceccc 	movt	lr, #52428	; 0xcccc
   29be4:	e28dc004 	add	ip, sp, #4
   29be8:	ea000002 	b	29bf8 <CString::ftoa(char*, double, unsigned int)+0x184>
   29bec:	e1a0c000 	mov	ip, r0
   29bf0:	e730f211 	udiv	r0, r1, r2
   29bf4:	e1a03000 	mov	r3, r0
   29bf8:	e0611092 	mls	r1, r2, r0, r1
   29bfc:	e3530009 	cmp	r3, #9
   29c00:	e082029e 	umull	r0, r2, lr, r2
   29c04:	e1a0000c 	mov	r0, ip
   29c08:	e6ef3073 	uxtb	r3, r3
   29c0c:	92833030 	addls	r3, r3, #48	; 0x30
   29c10:	82833057 	addhi	r3, r3, #87	; 0x57
   29c14:	e6af3073 	sxtb	r3, r3
   29c18:	e1b021a2 	lsrs	r2, r2, #3
   29c1c:	e4c03001 	strb	r3, [r0], #1
   29c20:	1afffff1 	bne	29bec <CString::ftoa(char*, double, unsigned int)+0x178>
   29c24:	e5cc2001 	strb	r2, [ip, #1]
   29c28:	e28d0004 	add	r0, sp, #4
   29c2c:	eb00064d 	bl	2b568 <strlen>
   29c30:	e0590000 	subs	r0, r9, r0
   29c34:	0a000007 	beq	29c58 <CString::ftoa(char*, double, unsigned int)+0x1e4>
   29c38:	e2802001 	add	r2, r0, #1
   29c3c:	e1a03006 	mov	r3, r6
   29c40:	e0888002 	add	r8, r8, r2
   29c44:	e3a02030 	mov	r2, #48	; 0x30
   29c48:	e4c32001 	strb	r2, [r3], #1
   29c4c:	e1530008 	cmp	r3, r8
   29c50:	1afffffc 	bne	29c48 <CString::ftoa(char*, double, unsigned int)+0x1d4>
   29c54:	e0866000 	add	r6, r6, r0
   29c58:	e28d1004 	add	r1, sp, #4
   29c5c:	e1a00006 	mov	r0, r6
   29c60:	eb0006aa 	bl	2b710 <strcpy>
   29c64:	e1a00004 	mov	r0, r4
   29c68:	e28dd014 	add	sp, sp, #20
   29c6c:	ecbd8b02 	vpop	{d8}
   29c70:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   29c74:	e1a00006 	mov	r0, r6
   29c78:	e3071298 	movw	r1, #29336	; 0x7298
   29c7c:	e3401003 	movt	r1, #3
   29c80:	eb0006a2 	bl	2b710 <strcpy>
   29c84:	e1a00004 	mov	r0, r4
   29c88:	e28dd014 	add	sp, sp, #20
   29c8c:	ecbd8b02 	vpop	{d8}
   29c90:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   29c94:	ee173a90 	vmov	r3, s15
   29c98:	e3a02001 	mov	r2, #1
   29c9c:	eaffff8f 	b	29ae0 <CString::ftoa(char*, double, unsigned int)+0x6c>
   29ca0:	ee173a90 	vmov	r3, s15
   29ca4:	e3a02001 	mov	r2, #1
   29ca8:	ee170a90 	vmov	r0, s15
   29cac:	eaffffca 	b	29bdc <CString::ftoa(char*, double, unsigned int)+0x168>
   29cb0:	ffe00000 	.word	0xffe00000
   29cb4:	41efffff 	.word	0x41efffff

00029cb8 <CString::FormatV(char const*, std::__va_list)>:
   29cb8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29cbc:	e1a09000 	mov	r9, r0
   29cc0:	e5900004 	ldr	r0, [r0, #4]
   29cc4:	e24dd024 	sub	sp, sp, #36	; 0x24
   29cc8:	e1a08001 	mov	r8, r1
   29ccc:	e1a0b002 	mov	fp, r2
   29cd0:	e3500000 	cmp	r0, #0
   29cd4:	0a000000 	beq	29cdc <CString::FormatV(char const*, std::__va_list)+0x24>
   29cd8:	eb000891 	bl	2bf24 <operator delete[](void*)>
   29cdc:	e3a00040 	mov	r0, #64	; 0x40
   29ce0:	e30caccd 	movw	sl, #52429	; 0xcccd
   29ce4:	e34caccc 	movt	sl, #52428	; 0xcccc
   29ce8:	e5890008 	str	r0, [r9, #8]
   29cec:	eb000885 	bl	2bf08 <operator new[](unsigned int)>
   29cf0:	e5890004 	str	r0, [r9, #4]
   29cf4:	e589000c 	str	r0, [r9, #12]
   29cf8:	e1d840d0 	ldrsb	r4, [r8]
   29cfc:	e3540000 	cmp	r4, #0
   29d00:	0a00005b 	beq	29e74 <CString::FormatV(char const*, std::__va_list)+0x1bc>
   29d04:	e3540025 	cmp	r4, #37	; 0x25
   29d08:	e2886001 	add	r6, r8, #1
   29d0c:	1a00004d 	bne	29e48 <CString::FormatV(char const*, std::__va_list)+0x190>
   29d10:	e1d850d1 	ldrsb	r5, [r8, #1]
   29d14:	e3550025 	cmp	r5, #37	; 0x25
   29d18:	0a00012d 	beq	2a1d4 <CString::FormatV(char const*, std::__va_list)+0x51c>
   29d1c:	e355002d 	cmp	r5, #45	; 0x2d
   29d20:	02886002 	addeq	r6, r8, #2
   29d24:	03a02001 	moveq	r2, #1
   29d28:	13a02000 	movne	r2, #0
   29d2c:	01d850d2 	ldrsbeq	r5, [r8, #2]
   29d30:	e2868001 	add	r8, r6, #1
   29d34:	e3550030 	cmp	r5, #48	; 0x30
   29d38:	02863002 	addeq	r3, r6, #2
   29d3c:	03a01001 	moveq	r1, #1
   29d40:	13a01000 	movne	r1, #0
   29d44:	01d650d1 	ldrsbeq	r5, [r6, #1]
   29d48:	01a06008 	moveq	r6, r8
   29d4c:	01a08003 	moveq	r8, r3
   29d50:	e2453030 	sub	r3, r5, #48	; 0x30
   29d54:	e6ef3073 	uxtb	r3, r3
   29d58:	e3530009 	cmp	r3, #9
   29d5c:	8a00005b 	bhi	29ed0 <CString::FormatV(char const*, std::__va_list)+0x218>
   29d60:	e3a04000 	mov	r4, #0
   29d64:	e3a0000a 	mov	r0, #10
   29d68:	ea000000 	b	29d70 <CString::FormatV(char const*, std::__va_list)+0xb8>
   29d6c:	e1a06007 	mov	r6, r7
   29d70:	e0245490 	mla	r4, r0, r4, r5
   29d74:	e1d650d1 	ldrsb	r5, [r6, #1]
   29d78:	e2867001 	add	r7, r6, #1
   29d7c:	e2453030 	sub	r3, r5, #48	; 0x30
   29d80:	e2444030 	sub	r4, r4, #48	; 0x30
   29d84:	e6ef3073 	uxtb	r3, r3
   29d88:	e3530009 	cmp	r3, #9
   29d8c:	9afffff6 	bls	29d6c <CString::FormatV(char const*, std::__va_list)+0xb4>
   29d90:	e2868002 	add	r8, r6, #2
   29d94:	e355002e 	cmp	r5, #46	; 0x2e
   29d98:	0a000039 	beq	29e84 <CString::FormatV(char const*, std::__va_list)+0x1cc>
   29d9c:	e1d750d0 	ldrsb	r5, [r7]
   29da0:	e3a03006 	mov	r3, #6
   29da4:	e355006c 	cmp	r5, #108	; 0x6c
   29da8:	01d750d1 	ldrsbeq	r5, [r7, #1]
   29dac:	01a07008 	moveq	r7, r8
   29db0:	02888001 	addeq	r8, r8, #1
   29db4:	e2450058 	sub	r0, r5, #88	; 0x58
   29db8:	e3500020 	cmp	r0, #32
   29dbc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   29dc0:	ea0000f2 	b	2a190 <CString::FormatV(char const*, std::__va_list)+0x4d8>
   29dc4:	0002a188 	.word	0x0002a188
   29dc8:	0002a190 	.word	0x0002a190
   29dcc:	0002a190 	.word	0x0002a190
   29dd0:	0002a190 	.word	0x0002a190
   29dd4:	0002a190 	.word	0x0002a190
   29dd8:	0002a190 	.word	0x0002a190
   29ddc:	0002a190 	.word	0x0002a190
   29de0:	0002a190 	.word	0x0002a190
   29de4:	0002a190 	.word	0x0002a190
   29de8:	0002a190 	.word	0x0002a190
   29dec:	0002a190 	.word	0x0002a190
   29df0:	0002a14c 	.word	0x0002a14c
   29df4:	0002a050 	.word	0x0002a050
   29df8:	0002a190 	.word	0x0002a190
   29dfc:	00029f9c 	.word	0x00029f9c
   29e00:	0002a190 	.word	0x0002a190
   29e04:	0002a190 	.word	0x0002a190
   29e08:	0002a050 	.word	0x0002a050
   29e0c:	0002a190 	.word	0x0002a190
   29e10:	0002a190 	.word	0x0002a190
   29e14:	0002a190 	.word	0x0002a190
   29e18:	0002a190 	.word	0x0002a190
   29e1c:	0002a190 	.word	0x0002a190
   29e20:	00029edc 	.word	0x00029edc
   29e24:	0002a188 	.word	0x0002a188
   29e28:	0002a190 	.word	0x0002a190
   29e2c:	0002a190 	.word	0x0002a190
   29e30:	0002a014 	.word	0x0002a014
   29e34:	0002a190 	.word	0x0002a190
   29e38:	00029f94 	.word	0x00029f94
   29e3c:	0002a190 	.word	0x0002a190
   29e40:	0002a190 	.word	0x0002a190
   29e44:	0002a188 	.word	0x0002a188
   29e48:	e3a01001 	mov	r1, #1
   29e4c:	e1a00009 	mov	r0, r9
   29e50:	ebfffdcb 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   29e54:	e599300c 	ldr	r3, [r9, #12]
   29e58:	e1a08006 	mov	r8, r6
   29e5c:	e2832001 	add	r2, r3, #1
   29e60:	e589200c 	str	r2, [r9, #12]
   29e64:	e5c34000 	strb	r4, [r3]
   29e68:	e1d840d0 	ldrsb	r4, [r8]
   29e6c:	e3540000 	cmp	r4, #0
   29e70:	1affffa3 	bne	29d04 <CString::FormatV(char const*, std::__va_list)+0x4c>
   29e74:	e599300c 	ldr	r3, [r9, #12]
   29e78:	e5c34000 	strb	r4, [r3]
   29e7c:	e28dd024 	add	sp, sp, #36	; 0x24
   29e80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e84:	e1d750d1 	ldrsb	r5, [r7, #1]
   29e88:	e2453030 	sub	r3, r5, #48	; 0x30
   29e8c:	e6ef3073 	uxtb	r3, r3
   29e90:	e3530009 	cmp	r3, #9
   29e94:	8a00015b 	bhi	2a408 <CString::FormatV(char const*, std::__va_list)+0x750>
   29e98:	e3a03000 	mov	r3, #0
   29e9c:	e3a0c00a 	mov	ip, #10
   29ea0:	ea000000 	b	29ea8 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   29ea4:	e1a08007 	mov	r8, r7
   29ea8:	e023539c 	mla	r3, ip, r3, r5
   29eac:	e1d850d1 	ldrsb	r5, [r8, #1]
   29eb0:	e2887001 	add	r7, r8, #1
   29eb4:	e2450030 	sub	r0, r5, #48	; 0x30
   29eb8:	e2433030 	sub	r3, r3, #48	; 0x30
   29ebc:	e6ef0070 	uxtb	r0, r0
   29ec0:	e3500009 	cmp	r0, #9
   29ec4:	9afffff6 	bls	29ea4 <CString::FormatV(char const*, std::__va_list)+0x1ec>
   29ec8:	e2888002 	add	r8, r8, #2
   29ecc:	eaffffb4 	b	29da4 <CString::FormatV(char const*, std::__va_list)+0xec>
   29ed0:	e1a07006 	mov	r7, r6
   29ed4:	e3a04000 	mov	r4, #0
   29ed8:	eaffffad 	b	29d94 <CString::FormatV(char const*, std::__va_list)+0xdc>
   29edc:	e3a06008 	mov	r6, #8
   29ee0:	e59be000 	ldr	lr, [fp]
   29ee4:	e28bb004 	add	fp, fp, #4
   29ee8:	e15e0006 	cmp	lr, r6
   29eec:	23a00001 	movcs	r0, #1
   29ef0:	3a00010f 	bcc	2a334 <CString::FormatV(char const*, std::__va_list)+0x67c>
   29ef4:	e0000096 	mul	r0, r6, r0
   29ef8:	e73cf01e 	udiv	ip, lr, r0
   29efc:	e156000c 	cmp	r6, ip
   29f00:	e1a0300c 	mov	r3, ip
   29f04:	9afffffa 	bls	29ef4 <CString::FormatV(char const*, std::__va_list)+0x23c>
   29f08:	e3550058 	cmp	r5, #88	; 0x58
   29f0c:	e28d5008 	add	r5, sp, #8
   29f10:	13a07057 	movne	r7, #87	; 0x57
   29f14:	03a07037 	moveq	r7, #55	; 0x37
   29f18:	ea000002 	b	29f28 <CString::FormatV(char const*, std::__va_list)+0x270>
   29f1c:	e1a0500c 	mov	r5, ip
   29f20:	e73cf01e 	udiv	ip, lr, r0
   29f24:	e1a0300c 	mov	r3, ip
   29f28:	e06eec90 	mls	lr, r0, ip, lr
   29f2c:	e1a0c005 	mov	ip, r5
   29f30:	e730f610 	udiv	r0, r0, r6
   29f34:	e3530009 	cmp	r3, #9
   29f38:	e6ef3073 	uxtb	r3, r3
   29f3c:	92833030 	addls	r3, r3, #48	; 0x30
   29f40:	80833007 	addhi	r3, r3, r7
   29f44:	e6af3073 	sxtb	r3, r3
   29f48:	e4cc3001 	strb	r3, [ip], #1
   29f4c:	e3500000 	cmp	r0, #0
   29f50:	1afffff1 	bne	29f1c <CString::FormatV(char const*, std::__va_list)+0x264>
   29f54:	e5c50001 	strb	r0, [r5, #1]
   29f58:	e28d0008 	add	r0, sp, #8
   29f5c:	e58d1004 	str	r1, [sp, #4]
   29f60:	e58d2000 	str	r2, [sp]
   29f64:	eb00057f 	bl	2b568 <strlen>
   29f68:	e59d2000 	ldr	r2, [sp]
   29f6c:	e1a05000 	mov	r5, r0
   29f70:	e59d1004 	ldr	r1, [sp, #4]
   29f74:	e3520000 	cmp	r2, #0
   29f78:	1a00009e 	bne	2a1f8 <CString::FormatV(char const*, std::__va_list)+0x540>
   29f7c:	e1500004 	cmp	r0, r4
   29f80:	3a0000af 	bcc	2a244 <CString::FormatV(char const*, std::__va_list)+0x58c>
   29f84:	e28d1008 	add	r1, sp, #8
   29f88:	e1a00009 	mov	r0, r9
   29f8c:	ebfffe24 	bl	29824 <CString::PutString(char const*)>
   29f90:	eaffff58 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   29f94:	e3a0600a 	mov	r6, #10
   29f98:	eaffffd0 	b	29ee0 <CString::FormatV(char const*, std::__va_list)+0x228>
   29f9c:	e28bb007 	add	fp, fp, #7
   29fa0:	e1a01003 	mov	r1, r3
   29fa4:	e3cb3007 	bic	r3, fp, #7
   29fa8:	e28d0008 	add	r0, sp, #8
   29fac:	e58d2000 	str	r2, [sp]
   29fb0:	e283b008 	add	fp, r3, #8
   29fb4:	ed930b00 	vldr	d0, [r3]
   29fb8:	ebfffead 	bl	29a74 <CString::ftoa(char*, double, unsigned int)>
   29fbc:	e28d0008 	add	r0, sp, #8
   29fc0:	eb000568 	bl	2b568 <strlen>
   29fc4:	e59d2000 	ldr	r2, [sp]
   29fc8:	e1a05000 	mov	r5, r0
   29fcc:	e3520000 	cmp	r2, #0
   29fd0:	1a0000db 	bne	2a344 <CString::FormatV(char const*, std::__va_list)+0x68c>
   29fd4:	e1500004 	cmp	r0, r4
   29fd8:	2affffe9 	bcs	29f84 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   29fdc:	e0444000 	sub	r4, r4, r0
   29fe0:	e1a00009 	mov	r0, r9
   29fe4:	e1a01004 	mov	r1, r4
   29fe8:	ebfffd65 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   29fec:	e2443001 	sub	r3, r4, #1
   29ff0:	e3a00020 	mov	r0, #32
   29ff4:	e599200c 	ldr	r2, [r9, #12]
   29ff8:	e2433001 	sub	r3, r3, #1
   29ffc:	e3730001 	cmn	r3, #1
   2a000:	e2821001 	add	r1, r2, #1
   2a004:	e589100c 	str	r1, [r9, #12]
   2a008:	e5c20000 	strb	r0, [r2]
   2a00c:	1afffff8 	bne	29ff4 <CString::FormatV(char const*, std::__va_list)+0x33c>
   2a010:	eaffffdb 	b	29f84 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   2a014:	e59b6000 	ldr	r6, [fp]
   2a018:	e28bb004 	add	fp, fp, #4
   2a01c:	e58d2000 	str	r2, [sp]
   2a020:	e1a00006 	mov	r0, r6
   2a024:	eb00054f 	bl	2b568 <strlen>
   2a028:	e59d2000 	ldr	r2, [sp]
   2a02c:	e1a05000 	mov	r5, r0
   2a030:	e3520000 	cmp	r2, #0
   2a034:	1a0000e0 	bne	2a3bc <CString::FormatV(char const*, std::__va_list)+0x704>
   2a038:	e1500004 	cmp	r0, r4
   2a03c:	3a0000f8 	bcc	2a424 <CString::FormatV(char const*, std::__va_list)+0x76c>
   2a040:	e1a01006 	mov	r1, r6
   2a044:	e1a00009 	mov	r0, r9
   2a048:	ebfffdf5 	bl	29824 <CString::PutString(char const*)>
   2a04c:	eaffff29 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a050:	e59b6000 	ldr	r6, [fp]
   2a054:	e28bb004 	add	fp, fp, #4
   2a058:	e3560000 	cmp	r6, #0
   2a05c:	b2666000 	rsblt	r6, r6, #0
   2a060:	b3a05001 	movlt	r5, #1
   2a064:	a3a05000 	movge	r5, #0
   2a068:	e3560009 	cmp	r6, #9
   2a06c:	e1a0c006 	mov	ip, r6
   2a070:	c3a00001 	movgt	r0, #1
   2a074:	c3a0e00a 	movgt	lr, #10
   2a078:	da0000e6 	ble	2a418 <CString::FormatV(char const*, std::__va_list)+0x760>
   2a07c:	e000009e 	mul	r0, lr, r0
   2a080:	e733f016 	udiv	r3, r6, r0
   2a084:	e3530009 	cmp	r3, #9
   2a088:	8afffffb 	bhi	2a07c <CString::FormatV(char const*, std::__va_list)+0x3c4>
   2a08c:	e736f016 	udiv	r6, r6, r0
   2a090:	e28de008 	add	lr, sp, #8
   2a094:	ea000002 	b	2a0a4 <CString::FormatV(char const*, std::__va_list)+0x3ec>
   2a098:	e1a0e006 	mov	lr, r6
   2a09c:	e736f01c 	udiv	r6, ip, r0
   2a0a0:	e1a03006 	mov	r3, r6
   2a0a4:	e06cc690 	mls	ip, r0, r6, ip
   2a0a8:	e3530009 	cmp	r3, #9
   2a0ac:	e080609a 	umull	r6, r0, sl, r0
   2a0b0:	e1a0600e 	mov	r6, lr
   2a0b4:	e6ef3073 	uxtb	r3, r3
   2a0b8:	92833030 	addls	r3, r3, #48	; 0x30
   2a0bc:	82833057 	addhi	r3, r3, #87	; 0x57
   2a0c0:	e6af3073 	sxtb	r3, r3
   2a0c4:	e1b001a0 	lsrs	r0, r0, #3
   2a0c8:	e4c63001 	strb	r3, [r6], #1
   2a0cc:	1afffff1 	bne	2a098 <CString::FormatV(char const*, std::__va_list)+0x3e0>
   2a0d0:	e5ce0001 	strb	r0, [lr, #1]
   2a0d4:	e28d0008 	add	r0, sp, #8
   2a0d8:	e58d1004 	str	r1, [sp, #4]
   2a0dc:	e58d2000 	str	r2, [sp]
   2a0e0:	eb000520 	bl	2b568 <strlen>
   2a0e4:	e3550000 	cmp	r5, #0
   2a0e8:	e1a06000 	mov	r6, r0
   2a0ec:	e59d2000 	ldr	r2, [sp]
   2a0f0:	e59d1004 	ldr	r1, [sp, #4]
   2a0f4:	1a000062 	bne	2a284 <CString::FormatV(char const*, std::__va_list)+0x5cc>
   2a0f8:	e3520000 	cmp	r2, #0
   2a0fc:	0a0000df 	beq	2a480 <CString::FormatV(char const*, std::__va_list)+0x7c8>
   2a100:	e28d1008 	add	r1, sp, #8
   2a104:	e1a00009 	mov	r0, r9
   2a108:	ebfffdc5 	bl	29824 <CString::PutString(char const*)>
   2a10c:	e1540006 	cmp	r4, r6
   2a110:	9afffef8 	bls	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a114:	e0444006 	sub	r4, r4, r6
   2a118:	e1a00009 	mov	r0, r9
   2a11c:	e1a01004 	mov	r1, r4
   2a120:	ebfffd17 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a124:	e2443001 	sub	r3, r4, #1
   2a128:	e3a00020 	mov	r0, #32
   2a12c:	e599200c 	ldr	r2, [r9, #12]
   2a130:	e2433001 	sub	r3, r3, #1
   2a134:	e3730001 	cmn	r3, #1
   2a138:	e2821001 	add	r1, r2, #1
   2a13c:	e589100c 	str	r1, [r9, #12]
   2a140:	e5c20000 	strb	r0, [r2]
   2a144:	1afffff8 	bne	2a12c <CString::FormatV(char const*, std::__va_list)+0x474>
   2a148:	eafffeea 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a14c:	e3520000 	cmp	r2, #0
   2a150:	e28b6004 	add	r6, fp, #4
   2a154:	e1db50d0 	ldrsb	r5, [fp]
   2a158:	1a00008c 	bne	2a390 <CString::FormatV(char const*, std::__va_list)+0x6d8>
   2a15c:	e3540001 	cmp	r4, #1
   2a160:	8a000066 	bhi	2a300 <CString::FormatV(char const*, std::__va_list)+0x648>
   2a164:	e3a01001 	mov	r1, #1
   2a168:	e1a00009 	mov	r0, r9
   2a16c:	ebfffd04 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a170:	e599300c 	ldr	r3, [r9, #12]
   2a174:	e1a0b006 	mov	fp, r6
   2a178:	e2832001 	add	r2, r3, #1
   2a17c:	e589200c 	str	r2, [r9, #12]
   2a180:	e5c35000 	strb	r5, [r3]
   2a184:	eafffedb 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a188:	e3a06010 	mov	r6, #16
   2a18c:	eaffff53 	b	29ee0 <CString::FormatV(char const*, std::__va_list)+0x228>
   2a190:	e3a01001 	mov	r1, #1
   2a194:	e1a00009 	mov	r0, r9
   2a198:	ebfffcf9 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a19c:	e599300c 	ldr	r3, [r9, #12]
   2a1a0:	e3a02025 	mov	r2, #37	; 0x25
   2a1a4:	e1a00009 	mov	r0, r9
   2a1a8:	e2831001 	add	r1, r3, #1
   2a1ac:	e589100c 	str	r1, [r9, #12]
   2a1b0:	e3a01001 	mov	r1, #1
   2a1b4:	e5c32000 	strb	r2, [r3]
   2a1b8:	e1d740d0 	ldrsb	r4, [r7]
   2a1bc:	ebfffcf0 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a1c0:	e599300c 	ldr	r3, [r9, #12]
   2a1c4:	e2832001 	add	r2, r3, #1
   2a1c8:	e589200c 	str	r2, [r9, #12]
   2a1cc:	e5c34000 	strb	r4, [r3]
   2a1d0:	eafffec8 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a1d4:	e3a01001 	mov	r1, #1
   2a1d8:	e1a00009 	mov	r0, r9
   2a1dc:	ebfffce8 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a1e0:	e599300c 	ldr	r3, [r9, #12]
   2a1e4:	e2888002 	add	r8, r8, #2
   2a1e8:	e2832001 	add	r2, r3, #1
   2a1ec:	e589200c 	str	r2, [r9, #12]
   2a1f0:	e5c35000 	strb	r5, [r3]
   2a1f4:	eafffebf 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a1f8:	e28d1008 	add	r1, sp, #8
   2a1fc:	e1a00009 	mov	r0, r9
   2a200:	ebfffd87 	bl	29824 <CString::PutString(char const*)>
   2a204:	e1550004 	cmp	r5, r4
   2a208:	2afffeba 	bcs	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a20c:	e0444005 	sub	r4, r4, r5
   2a210:	e1a00009 	mov	r0, r9
   2a214:	e1a01004 	mov	r1, r4
   2a218:	ebfffcd9 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a21c:	e2443001 	sub	r3, r4, #1
   2a220:	e3a00020 	mov	r0, #32
   2a224:	e599200c 	ldr	r2, [r9, #12]
   2a228:	e2433001 	sub	r3, r3, #1
   2a22c:	e3730001 	cmn	r3, #1
   2a230:	e2821001 	add	r1, r2, #1
   2a234:	e589100c 	str	r1, [r9, #12]
   2a238:	e5c20000 	strb	r0, [r2]
   2a23c:	1afffff8 	bne	2a224 <CString::FormatV(char const*, std::__va_list)+0x56c>
   2a240:	eafffeac 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a244:	e0444000 	sub	r4, r4, r0
   2a248:	e3510000 	cmp	r1, #0
   2a24c:	e1a00009 	mov	r0, r9
   2a250:	e1a01004 	mov	r1, r4
   2a254:	13a05030 	movne	r5, #48	; 0x30
   2a258:	03a05020 	moveq	r5, #32
   2a25c:	ebfffcc8 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a260:	e2443001 	sub	r3, r4, #1
   2a264:	e599200c 	ldr	r2, [r9, #12]
   2a268:	e2433001 	sub	r3, r3, #1
   2a26c:	e3730001 	cmn	r3, #1
   2a270:	e2821001 	add	r1, r2, #1
   2a274:	e589100c 	str	r1, [r9, #12]
   2a278:	e5c25000 	strb	r5, [r2]
   2a27c:	1afffff8 	bne	2a264 <CString::FormatV(char const*, std::__va_list)+0x5ac>
   2a280:	eaffff3f 	b	29f84 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   2a284:	e2806001 	add	r6, r0, #1
   2a288:	e3520000 	cmp	r2, #0
   2a28c:	1a000072 	bne	2a45c <CString::FormatV(char const*, std::__va_list)+0x7a4>
   2a290:	e3510000 	cmp	r1, #0
   2a294:	1a000098 	bne	2a4fc <CString::FormatV(char const*, std::__va_list)+0x844>
   2a298:	e1540006 	cmp	r4, r6
   2a29c:	9a00000e 	bls	2a2dc <CString::FormatV(char const*, std::__va_list)+0x624>
   2a2a0:	e0444006 	sub	r4, r4, r6
   2a2a4:	e1a00009 	mov	r0, r9
   2a2a8:	e1a01004 	mov	r1, r4
   2a2ac:	ebfffcb4 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a2b0:	e2443001 	sub	r3, r4, #1
   2a2b4:	e3a00020 	mov	r0, #32
   2a2b8:	e599200c 	ldr	r2, [r9, #12]
   2a2bc:	e2433001 	sub	r3, r3, #1
   2a2c0:	e3730001 	cmn	r3, #1
   2a2c4:	e2821001 	add	r1, r2, #1
   2a2c8:	e589100c 	str	r1, [r9, #12]
   2a2cc:	e5c20000 	strb	r0, [r2]
   2a2d0:	1afffff8 	bne	2a2b8 <CString::FormatV(char const*, std::__va_list)+0x600>
   2a2d4:	e3550000 	cmp	r5, #0
   2a2d8:	0affff29 	beq	29f84 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   2a2dc:	e3a01001 	mov	r1, #1
   2a2e0:	e1a00009 	mov	r0, r9
   2a2e4:	ebfffca6 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a2e8:	e599300c 	ldr	r3, [r9, #12]
   2a2ec:	e3a0202d 	mov	r2, #45	; 0x2d
   2a2f0:	e2831001 	add	r1, r3, #1
   2a2f4:	e589100c 	str	r1, [r9, #12]
   2a2f8:	e5c32000 	strb	r2, [r3]
   2a2fc:	eaffff20 	b	29f84 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   2a300:	e2441001 	sub	r1, r4, #1
   2a304:	e1a00009 	mov	r0, r9
   2a308:	ebfffc9d 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a30c:	e2444002 	sub	r4, r4, #2
   2a310:	e3a01020 	mov	r1, #32
   2a314:	e599300c 	ldr	r3, [r9, #12]
   2a318:	e2444001 	sub	r4, r4, #1
   2a31c:	e3740001 	cmn	r4, #1
   2a320:	e2832001 	add	r2, r3, #1
   2a324:	e589200c 	str	r2, [r9, #12]
   2a328:	e5c31000 	strb	r1, [r3]
   2a32c:	1afffff8 	bne	2a314 <CString::FormatV(char const*, std::__va_list)+0x65c>
   2a330:	eaffff8b 	b	2a164 <CString::FormatV(char const*, std::__va_list)+0x4ac>
   2a334:	e1a0300e 	mov	r3, lr
   2a338:	e3a00001 	mov	r0, #1
   2a33c:	e1a0c00e 	mov	ip, lr
   2a340:	eafffef0 	b	29f08 <CString::FormatV(char const*, std::__va_list)+0x250>
   2a344:	e28d1008 	add	r1, sp, #8
   2a348:	e1a00009 	mov	r0, r9
   2a34c:	ebfffd34 	bl	29824 <CString::PutString(char const*)>
   2a350:	e1550004 	cmp	r5, r4
   2a354:	2afffe67 	bcs	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a358:	e0444005 	sub	r4, r4, r5
   2a35c:	e1a00009 	mov	r0, r9
   2a360:	e1a01004 	mov	r1, r4
   2a364:	ebfffc86 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a368:	e2443001 	sub	r3, r4, #1
   2a36c:	e3a00020 	mov	r0, #32
   2a370:	e599200c 	ldr	r2, [r9, #12]
   2a374:	e2433001 	sub	r3, r3, #1
   2a378:	e3730001 	cmn	r3, #1
   2a37c:	e2821001 	add	r1, r2, #1
   2a380:	e589100c 	str	r1, [r9, #12]
   2a384:	e5c20000 	strb	r0, [r2]
   2a388:	1afffff8 	bne	2a370 <CString::FormatV(char const*, std::__va_list)+0x6b8>
   2a38c:	eafffe59 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a390:	e3a01001 	mov	r1, #1
   2a394:	e1a00009 	mov	r0, r9
   2a398:	ebfffc79 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a39c:	e599300c 	ldr	r3, [r9, #12]
   2a3a0:	e3540001 	cmp	r4, #1
   2a3a4:	e2832001 	add	r2, r3, #1
   2a3a8:	e589200c 	str	r2, [r9, #12]
   2a3ac:	e5c35000 	strb	r5, [r3]
   2a3b0:	8a000044 	bhi	2a4c8 <CString::FormatV(char const*, std::__va_list)+0x810>
   2a3b4:	e1a0b006 	mov	fp, r6
   2a3b8:	eafffe4e 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a3bc:	e1a01006 	mov	r1, r6
   2a3c0:	e1a00009 	mov	r0, r9
   2a3c4:	ebfffd16 	bl	29824 <CString::PutString(char const*)>
   2a3c8:	e1550004 	cmp	r5, r4
   2a3cc:	2afffe49 	bcs	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a3d0:	e0444005 	sub	r4, r4, r5
   2a3d4:	e1a00009 	mov	r0, r9
   2a3d8:	e1a01004 	mov	r1, r4
   2a3dc:	ebfffc68 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a3e0:	e2443001 	sub	r3, r4, #1
   2a3e4:	e3a00020 	mov	r0, #32
   2a3e8:	e599200c 	ldr	r2, [r9, #12]
   2a3ec:	e2433001 	sub	r3, r3, #1
   2a3f0:	e3730001 	cmn	r3, #1
   2a3f4:	e2821001 	add	r1, r2, #1
   2a3f8:	e589100c 	str	r1, [r9, #12]
   2a3fc:	e5c20000 	strb	r0, [r2]
   2a400:	1afffff8 	bne	2a3e8 <CString::FormatV(char const*, std::__va_list)+0x730>
   2a404:	eafffe3b 	b	29cf8 <CString::FormatV(char const*, std::__va_list)+0x40>
   2a408:	e1a07008 	mov	r7, r8
   2a40c:	e3a03000 	mov	r3, #0
   2a410:	e2888001 	add	r8, r8, #1
   2a414:	eafffe62 	b	29da4 <CString::FormatV(char const*, std::__va_list)+0xec>
   2a418:	e1a03006 	mov	r3, r6
   2a41c:	e3a00001 	mov	r0, #1
   2a420:	eaffff19 	b	2a08c <CString::FormatV(char const*, std::__va_list)+0x3d4>
   2a424:	e0444000 	sub	r4, r4, r0
   2a428:	e1a00009 	mov	r0, r9
   2a42c:	e1a01004 	mov	r1, r4
   2a430:	ebfffc53 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a434:	e2443001 	sub	r3, r4, #1
   2a438:	e3a00020 	mov	r0, #32
   2a43c:	e599200c 	ldr	r2, [r9, #12]
   2a440:	e2433001 	sub	r3, r3, #1
   2a444:	e3730001 	cmn	r3, #1
   2a448:	e2821001 	add	r1, r2, #1
   2a44c:	e589100c 	str	r1, [r9, #12]
   2a450:	e5c20000 	strb	r0, [r2]
   2a454:	1afffff8 	bne	2a43c <CString::FormatV(char const*, std::__va_list)+0x784>
   2a458:	eafffef8 	b	2a040 <CString::FormatV(char const*, std::__va_list)+0x388>
   2a45c:	e3a01001 	mov	r1, #1
   2a460:	e1a00009 	mov	r0, r9
   2a464:	ebfffc46 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a468:	e599300c 	ldr	r3, [r9, #12]
   2a46c:	e3a0202d 	mov	r2, #45	; 0x2d
   2a470:	e2831001 	add	r1, r3, #1
   2a474:	e589100c 	str	r1, [r9, #12]
   2a478:	e5c32000 	strb	r2, [r3]
   2a47c:	eaffff1f 	b	2a100 <CString::FormatV(char const*, std::__va_list)+0x448>
   2a480:	e3510000 	cmp	r1, #0
   2a484:	0a000025 	beq	2a520 <CString::FormatV(char const*, std::__va_list)+0x868>
   2a488:	e1540006 	cmp	r4, r6
   2a48c:	9afffebc 	bls	29f84 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   2a490:	e0444006 	sub	r4, r4, r6
   2a494:	e1a00009 	mov	r0, r9
   2a498:	e1a01004 	mov	r1, r4
   2a49c:	ebfffc38 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a4a0:	e2443001 	sub	r3, r4, #1
   2a4a4:	e3a00030 	mov	r0, #48	; 0x30
   2a4a8:	e599200c 	ldr	r2, [r9, #12]
   2a4ac:	e2433001 	sub	r3, r3, #1
   2a4b0:	e3730001 	cmn	r3, #1
   2a4b4:	e2821001 	add	r1, r2, #1
   2a4b8:	e589100c 	str	r1, [r9, #12]
   2a4bc:	e5c20000 	strb	r0, [r2]
   2a4c0:	1afffff8 	bne	2a4a8 <CString::FormatV(char const*, std::__va_list)+0x7f0>
   2a4c4:	eafffeae 	b	29f84 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   2a4c8:	e2441001 	sub	r1, r4, #1
   2a4cc:	e1a00009 	mov	r0, r9
   2a4d0:	ebfffc2b 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a4d4:	e2444002 	sub	r4, r4, #2
   2a4d8:	e3a01020 	mov	r1, #32
   2a4dc:	e599300c 	ldr	r3, [r9, #12]
   2a4e0:	e2444001 	sub	r4, r4, #1
   2a4e4:	e3740001 	cmn	r4, #1
   2a4e8:	e2832001 	add	r2, r3, #1
   2a4ec:	e589200c 	str	r2, [r9, #12]
   2a4f0:	e5c31000 	strb	r1, [r3]
   2a4f4:	1afffff8 	bne	2a4dc <CString::FormatV(char const*, std::__va_list)+0x824>
   2a4f8:	eaffffad 	b	2a3b4 <CString::FormatV(char const*, std::__va_list)+0x6fc>
   2a4fc:	e3a01001 	mov	r1, #1
   2a500:	e1a00009 	mov	r0, r9
   2a504:	ebfffc1e 	bl	29584 <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2a508:	e599300c 	ldr	r3, [r9, #12]
   2a50c:	e3a0202d 	mov	r2, #45	; 0x2d
   2a510:	e2831001 	add	r1, r3, #1
   2a514:	e589100c 	str	r1, [r9, #12]
   2a518:	e5c32000 	strb	r2, [r3]
   2a51c:	eaffffd9 	b	2a488 <CString::FormatV(char const*, std::__va_list)+0x7d0>
   2a520:	e1500004 	cmp	r0, r4
   2a524:	2afffe96 	bcs	29f84 <CString::FormatV(char const*, std::__va_list)+0x2cc>
   2a528:	eaffff5c 	b	2a2a0 <CString::FormatV(char const*, std::__va_list)+0x5e8>

0002a52c <CString::Format(char const*, ...)>:
   2a52c:	e92d000e 	push	{r1, r2, r3}
   2a530:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2a534:	e24dd008 	sub	sp, sp, #8
   2a538:	e28d3010 	add	r3, sp, #16
   2a53c:	e1a02003 	mov	r2, r3
   2a540:	e59d100c 	ldr	r1, [sp, #12]
   2a544:	e58d3004 	str	r3, [sp, #4]
   2a548:	ebfffdda 	bl	29cb8 <CString::FormatV(char const*, std::__va_list)>
   2a54c:	e28dd008 	add	sp, sp, #8
   2a550:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   2a554:	e28dd00c 	add	sp, sp, #12
   2a558:	e12fff1e 	bx	lr

0002a55c <__aeabi_atexit>:
   2a55c:	e12fff1e 	bx	lr

0002a560 <__errno>:
   2a560:	e59f0000 	ldr	r0, [pc]	; 2a568 <__errno+0x8>
   2a564:	e12fff1e 	bx	lr
   2a568:	00039440 	.word	0x00039440

0002a56c <set_qemu_exit_status>:
   2a56c:	e309343c 	movw	r3, #37948	; 0x943c
   2a570:	e3403003 	movt	r3, #3
   2a574:	e5830008 	str	r0, [r3, #8]
   2a578:	e12fff1e 	bx	lr

0002a57c <halt>:
   2a57c:	f10c0080 	cpsid	i
   2a580:	f10c0040 	cpsid	f
   2a584:	f57ff04f 	dsb	sy
   2a588:	e320f003 	wfi
   2a58c:	eafffffc 	b	2a584 <halt+0x8>

0002a590 <reboot>:
   2a590:	e3a03000 	mov	r3, #0
   2a594:	e3433f10 	movt	r3, #16144	; 0x3f10
   2a598:	e3a01001 	mov	r1, #1
   2a59c:	e3451a00 	movt	r1, #23040	; 0x5a00
   2a5a0:	e3a02020 	mov	r2, #32
   2a5a4:	e3452a00 	movt	r2, #23040	; 0x5a00
   2a5a8:	e5831024 	str	r1, [r3, #36]	; 0x24
   2a5ac:	e583201c 	str	r2, [r3, #28]
   2a5b0:	eafffffe 	b	2a5b0 <reboot+0x20>

0002a5b4 <sysinit>:
   2a5b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2a5b8:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   2a5bc:	f1080040 	cpsie	f
   2a5c0:	eb000744 	bl	2c2d8 <InvalidateDataCacheL1Only>
   2a5c4:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   2a5c8:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   2a5cc:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   2a5d0:	f57ff06f 	isb	sy
   2a5d4:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   2a5d8:	eee83a10 	vmsr	fpexc, r3
   2a5dc:	e3a03402 	mov	r3, #33554432	; 0x2000000
   2a5e0:	eee13a10 	vmsr	fpscr, r3
   2a5e4:	e30924d4 	movw	r2, #38100	; 0x94d4
   2a5e8:	e3402003 	movt	r2, #3
   2a5ec:	e30903e8 	movw	r0, #37864	; 0x93e8
   2a5f0:	e3400003 	movt	r0, #3
   2a5f4:	e0422000 	sub	r2, r2, r0
   2a5f8:	e3a01000 	mov	r1, #0
   2a5fc:	eb000389 	bl	2b428 <memset>
   2a600:	e1a0000d 	mov	r0, sp
   2a604:	ebfff0ef 	bl	269c8 <CMachineInfo::CMachineInfo()>
   2a608:	e28d001c 	add	r0, sp, #28
   2a60c:	e3a01001 	mov	r1, #1
   2a610:	e3084f58 	movw	r4, #36696	; 0x8f58
   2a614:	e3404003 	movt	r4, #3
   2a618:	eb0008a1 	bl	2c8a4 <CMemorySystem::CMemorySystem(bool)>
   2a61c:	e3083f60 	movw	r3, #36704	; 0x8f60
   2a620:	e3403003 	movt	r3, #3
   2a624:	e1540003 	cmp	r4, r3
   2a628:	2a000008 	bcs	2a650 <sysinit+0x9c>
   2a62c:	e2835003 	add	r5, r3, #3
   2a630:	e2843004 	add	r3, r4, #4
   2a634:	e0455003 	sub	r5, r5, r3
   2a638:	e3c55003 	bic	r5, r5, #3
   2a63c:	e0855003 	add	r5, r5, r3
   2a640:	e4943004 	ldr	r3, [r4], #4
   2a644:	e12fff33 	blx	r3
   2a648:	e1540005 	cmp	r4, r5
   2a64c:	1afffffb 	bne	2a640 <sysinit+0x8c>
   2a650:	ebff7686 	bl	8070 <main>
   2a654:	e3500001 	cmp	r0, #1
   2a658:	0a000000 	beq	2a660 <sysinit+0xac>
   2a65c:	ebffffc6 	bl	2a57c <halt>
   2a660:	eb000552 	bl	2bbb0 <IsChainBootEnabled>
   2a664:	e3500000 	cmp	r0, #0
   2a668:	1a000000 	bne	2a670 <sysinit+0xbc>
   2a66c:	ebffffc7 	bl	2a590 <reboot>
   2a670:	e28d001c 	add	r0, sp, #28
   2a674:	eb0008ec 	bl	2ca2c <CMemorySystem::Destructor()>
   2a678:	f10c0040 	cpsid	f
   2a67c:	eb000551 	bl	2bbc8 <DoChainBoot>
   2a680:	eafffff9 	b	2a66c <sysinit+0xb8>

0002a684 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>:
   2a684:	e2800001 	add	r0, r0, #1
   2a688:	f57ff06f 	isb	sy
   2a68c:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   2a690:	f57ff06f 	isb	sy
   2a694:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   2a698:	e0433002 	sub	r3, r3, r2
   2a69c:	e1500003 	cmp	r0, r3
   2a6a0:	8afffffa 	bhi	2a690 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0xc>
   2a6a4:	e12fff1e 	bx	lr

0002a6a8 <CTimer::CTimer(CInterruptSystem*)>:
   2a6a8:	e92d4070 	push	{r4, r5, r6, lr}
   2a6ac:	e1a04000 	mov	r4, r0
   2a6b0:	e3a05000 	mov	r5, #0
   2a6b4:	e3a06001 	mov	r6, #1
   2a6b8:	e2800018 	add	r0, r0, #24
   2a6bc:	e5845004 	str	r5, [r4, #4]
   2a6c0:	e5841000 	str	r1, [r4]
   2a6c4:	e5845008 	str	r5, [r4, #8]
   2a6c8:	e5845014 	str	r5, [r4, #20]
   2a6cc:	e5846010 	str	r6, [r4, #16]
   2a6d0:	e584500c 	str	r5, [r4, #12]
   2a6d4:	eb0012ce 	bl	2f214 <CPtrList::CPtrList()>
   2a6d8:	e3093448 	movw	r3, #37960	; 0x9448
   2a6dc:	e3403003 	movt	r3, #3
   2a6e0:	e3a02d35 	mov	r2, #3392	; 0xd40
   2a6e4:	e3402003 	movt	r2, #3
   2a6e8:	e5842020 	str	r2, [r4, #32]
   2a6ec:	e3a010c8 	mov	r1, #200	; 0xc8
   2a6f0:	e5932000 	ldr	r2, [r3]
   2a6f4:	e584601c 	str	r6, [r4, #28]
   2a6f8:	e5845038 	str	r5, [r4, #56]	; 0x38
   2a6fc:	e1520005 	cmp	r2, r5
   2a700:	e5841024 	str	r1, [r4, #36]	; 0x24
   2a704:	1a000002 	bne	2a714 <CTimer::CTimer(CInterruptSystem*)+0x6c>
   2a708:	e5834000 	str	r4, [r3]
   2a70c:	e1a00004 	mov	r0, r4
   2a710:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a714:	e30712dc 	movw	r1, #29404	; 0x72dc
   2a718:	e3401003 	movt	r1, #3
   2a71c:	e3040fc4 	movw	r0, #20420	; 0x4fc4
   2a720:	e3400003 	movt	r0, #3
   2a724:	e3a02041 	mov	r2, #65	; 0x41
   2a728:	ebffea11 	bl	24f74 <assertion_failed>

0002a72c <CTimer::~CTimer()>:
   2a72c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2a730:	e1a08000 	mov	r8, r0
   2a734:	e5900000 	ldr	r0, [r0]
   2a738:	e3500000 	cmp	r0, #0
   2a73c:	0a00002f 	beq	2a800 <CTimer::~CTimer()+0xd4>
   2a740:	e3a03000 	mov	r3, #0
   2a744:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   2a748:	e3a01049 	mov	r1, #73	; 0x49
   2a74c:	e2884018 	add	r4, r8, #24
   2a750:	eb000a61 	bl	2d0dc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2a754:	e1a00004 	mov	r0, r4
   2a758:	e3047d43 	movw	r7, #19779	; 0x4d43
   2a75c:	e3447b54 	movt	r7, #19284	; 0x4b54
   2a760:	eb0012b8 	bl	2f248 <CPtrList::GetFirst()>
   2a764:	e2505000 	subs	r5, r0, #0
   2a768:	0a000011 	beq	2a7b4 <CTimer::~CTimer()+0x88>
   2a76c:	e1a01005 	mov	r1, r5
   2a770:	e1a00004 	mov	r0, r4
   2a774:	eb0012cb 	bl	2f2a8 <CPtrList::GetPtr(TPtrListElement*)>
   2a778:	e2506000 	subs	r6, r0, #0
   2a77c:	0a000013 	beq	2a7d0 <CTimer::~CTimer()+0xa4>
   2a780:	e5963000 	ldr	r3, [r6]
   2a784:	e1530007 	cmp	r3, r7
   2a788:	1a000016 	bne	2a7e8 <CTimer::~CTimer()+0xbc>
   2a78c:	e1a01005 	mov	r1, r5
   2a790:	e1a00004 	mov	r0, r4
   2a794:	eb001351 	bl	2f4e0 <CPtrList::Remove(TPtrListElement*)>
   2a798:	e1a00006 	mov	r0, r6
   2a79c:	e3a01014 	mov	r1, #20
   2a7a0:	eb0005e0 	bl	2bf28 <operator delete(void*, unsigned int)>
   2a7a4:	e1a00004 	mov	r0, r4
   2a7a8:	eb0012a6 	bl	2f248 <CPtrList::GetFirst()>
   2a7ac:	e2505000 	subs	r5, r0, #0
   2a7b0:	1affffed 	bne	2a76c <CTimer::~CTimer()+0x40>
   2a7b4:	e3093448 	movw	r3, #37960	; 0x9448
   2a7b8:	e3403003 	movt	r3, #3
   2a7bc:	e1a00004 	mov	r0, r4
   2a7c0:	e5835000 	str	r5, [r3]
   2a7c4:	eb001295 	bl	2f220 <CPtrList::~CPtrList()>
   2a7c8:	e1a00008 	mov	r0, r8
   2a7cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a7d0:	e30712dc 	movw	r1, #29404	; 0x72dc
   2a7d4:	e3401003 	movt	r1, #3
   2a7d8:	e3020afc 	movw	r0, #11004	; 0x2afc
   2a7dc:	e3400003 	movt	r0, #3
   2a7e0:	e3a02058 	mov	r2, #88	; 0x58
   2a7e4:	ebffe9e2 	bl	24f74 <assertion_failed>
   2a7e8:	e30712dc 	movw	r1, #29404	; 0x72dc
   2a7ec:	e3401003 	movt	r1, #3
   2a7f0:	e30702e8 	movw	r0, #29416	; 0x72e8
   2a7f4:	e3400003 	movt	r0, #3
   2a7f8:	e3a02059 	mov	r2, #89	; 0x59
   2a7fc:	ebffe9dc 	bl	24f74 <assertion_failed>
   2a800:	e30712dc 	movw	r1, #29404	; 0x72dc
   2a804:	e3401003 	movt	r1, #3
   2a808:	e30007dc 	movw	r0, #2012	; 0x7dc
   2a80c:	e3400003 	movt	r0, #3
   2a810:	e3a02047 	mov	r2, #71	; 0x47
   2a814:	ebffe9d6 	bl	24f74 <assertion_failed>

0002a818 <CTimer::SetTimeZone(int)>:
   2a818:	e2813e59 	add	r3, r1, #1424	; 0x590
   2a81c:	e3002b3e 	movw	r2, #2878	; 0xb3e
   2a820:	e283300f 	add	r3, r3, #15
   2a824:	e1530002 	cmp	r3, r2
   2a828:	95801014 	strls	r1, [r0, #20]
   2a82c:	93a00001 	movls	r0, #1
   2a830:	83a00000 	movhi	r0, #0
   2a834:	e12fff1e 	bx	lr

0002a838 <CTimer::GetTimeZone() const>:
   2a838:	e5900014 	ldr	r0, [r0, #20]
   2a83c:	e12fff1e 	bx	lr

0002a840 <CTimer::SetTime(unsigned int, bool)>:
   2a840:	e92d4070 	push	{r4, r5, r6, lr}
   2a844:	e3520000 	cmp	r2, #0
   2a848:	e1a04000 	mov	r4, r0
   2a84c:	e1a05001 	mov	r5, r1
   2a850:	1a000005 	bne	2a86c <CTimer::SetTime(unsigned int, bool)+0x2c>
   2a854:	e5901014 	ldr	r1, [r0, #20]
   2a858:	e3a0303c 	mov	r3, #60	; 0x3c
   2a85c:	e0030193 	mul	r3, r3, r1
   2a860:	e3530000 	cmp	r3, #0
   2a864:	ba00000e 	blt	2a8a4 <CTimer::SetTime(unsigned int, bool)+0x64>
   2a868:	e0855003 	add	r5, r5, r3
   2a86c:	e5940010 	ldr	r0, [r4, #16]
   2a870:	e3500000 	cmp	r0, #0
   2a874:	1a000002 	bne	2a884 <CTimer::SetTime(unsigned int, bool)+0x44>
   2a878:	e3a00001 	mov	r0, #1
   2a87c:	e584500c 	str	r5, [r4, #12]
   2a880:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a884:	eb0008f0 	bl	2cc4c <EnterCritical>
   2a888:	e5943010 	ldr	r3, [r4, #16]
   2a88c:	e584500c 	str	r5, [r4, #12]
   2a890:	e3530000 	cmp	r3, #0
   2a894:	0a000007 	beq	2a8b8 <CTimer::SetTime(unsigned int, bool)+0x78>
   2a898:	eb000918 	bl	2cd00 <LeaveCritical>
   2a89c:	e3a00001 	mov	r0, #1
   2a8a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a8a4:	e2631000 	rsb	r1, r3, #0
   2a8a8:	e1510005 	cmp	r1, r5
   2a8ac:	daffffed 	ble	2a868 <CTimer::SetTime(unsigned int, bool)+0x28>
   2a8b0:	e1a00002 	mov	r0, r2
   2a8b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a8b8:	e3a00001 	mov	r0, #1
   2a8bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a8c0 <CTimer::GetClockTicks()>:
   2a8c0:	f57ff06f 	isb	sy
   2a8c4:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
   2a8c8:	e12fff1e 	bx	lr

0002a8cc <CTimer::GetTicks() const>:
   2a8cc:	e5900004 	ldr	r0, [r0, #4]
   2a8d0:	e12fff1e 	bx	lr

0002a8d4 <CTimer::GetUptime() const>:
   2a8d4:	e5900008 	ldr	r0, [r0, #8]
   2a8d8:	e12fff1e 	bx	lr

0002a8dc <CTimer::GetTime() const>:
   2a8dc:	e590000c 	ldr	r0, [r0, #12]
   2a8e0:	e12fff1e 	bx	lr

0002a8e4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   2a8e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2a8e8:	e1a04000 	mov	r4, r0
   2a8ec:	e5900010 	ldr	r0, [r0, #16]
   2a8f0:	e1a05001 	mov	r5, r1
   2a8f4:	e1a06002 	mov	r6, r2
   2a8f8:	e3500000 	cmp	r0, #0
   2a8fc:	1a000011 	bne	2a948 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   2a900:	e594700c 	ldr	r7, [r4, #12]
   2a904:	e5944004 	ldr	r4, [r4, #4]
   2a908:	e3550000 	cmp	r5, #0
   2a90c:	0a000016 	beq	2a96c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   2a910:	e5857000 	str	r7, [r5]
   2a914:	e3560000 	cmp	r6, #0
   2a918:	0a000019 	beq	2a984 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   2a91c:	e308051f 	movw	r0, #34079	; 0x851f
   2a920:	e34501eb 	movt	r0, #20971	; 0x51eb
   2a924:	e3a02064 	mov	r2, #100	; 0x64
   2a928:	e3023710 	movw	r3, #10000	; 0x2710
   2a92c:	e0810094 	umull	r0, r1, r4, r0
   2a930:	e3a00001 	mov	r0, #1
   2a934:	e1a012a1 	lsr	r1, r1, #5
   2a938:	e0614192 	mls	r1, r2, r1, r4
   2a93c:	e0030193 	mul	r3, r3, r1
   2a940:	e5863000 	str	r3, [r6]
   2a944:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a948:	eb0008bf 	bl	2cc4c <EnterCritical>
   2a94c:	e5943010 	ldr	r3, [r4, #16]
   2a950:	e594700c 	ldr	r7, [r4, #12]
   2a954:	e3530000 	cmp	r3, #0
   2a958:	e5944004 	ldr	r4, [r4, #4]
   2a95c:	0affffe9 	beq	2a908 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   2a960:	eb0008e6 	bl	2cd00 <LeaveCritical>
   2a964:	e3550000 	cmp	r5, #0
   2a968:	1affffe8 	bne	2a910 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   2a96c:	e30712dc 	movw	r1, #29404	; 0x72dc
   2a970:	e3401003 	movt	r1, #3
   2a974:	e3070310 	movw	r0, #29456	; 0x7310
   2a978:	e3400003 	movt	r0, #3
   2a97c:	e3a02f41 	mov	r2, #260	; 0x104
   2a980:	ebffe97b 	bl	24f74 <assertion_failed>
   2a984:	e30712dc 	movw	r1, #29404	; 0x72dc
   2a988:	e3401003 	movt	r1, #3
   2a98c:	e3070320 	movw	r0, #29472	; 0x7320
   2a990:	e3400003 	movt	r0, #3
   2a994:	e3002107 	movw	r2, #263	; 0x107
   2a998:	ebffe975 	bl	24f74 <assertion_failed>

0002a99c <CTimer::GetUniversalTime() const>:
   2a99c:	e5902014 	ldr	r2, [r0, #20]
   2a9a0:	e3a0303c 	mov	r3, #60	; 0x3c
   2a9a4:	e590000c 	ldr	r0, [r0, #12]
   2a9a8:	e0030293 	mul	r3, r3, r2
   2a9ac:	e1500003 	cmp	r0, r3
   2a9b0:	a0400003 	subge	r0, r0, r3
   2a9b4:	b3a00000 	movlt	r0, #0
   2a9b8:	e12fff1e 	bx	lr

0002a9bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   2a9bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2a9c0:	e1a04000 	mov	r4, r0
   2a9c4:	e5900010 	ldr	r0, [r0, #16]
   2a9c8:	e1a06001 	mov	r6, r1
   2a9cc:	e1a07002 	mov	r7, r2
   2a9d0:	e3500000 	cmp	r0, #0
   2a9d4:	1a000019 	bne	2aa40 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   2a9d8:	e594500c 	ldr	r5, [r4, #12]
   2a9dc:	e5948004 	ldr	r8, [r4, #4]
   2a9e0:	e5942014 	ldr	r2, [r4, #20]
   2a9e4:	e3a0303c 	mov	r3, #60	; 0x3c
   2a9e8:	e0030293 	mul	r3, r3, r2
   2a9ec:	e1550003 	cmp	r5, r3
   2a9f0:	ba000010 	blt	2aa38 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   2a9f4:	e3560000 	cmp	r6, #0
   2a9f8:	0a000018 	beq	2aa60 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   2a9fc:	e0453003 	sub	r3, r5, r3
   2aa00:	e3570000 	cmp	r7, #0
   2aa04:	e5863000 	str	r3, [r6]
   2aa08:	0a00001a 	beq	2aa78 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   2aa0c:	e308451f 	movw	r4, #34079	; 0x851f
   2aa10:	e34541eb 	movt	r4, #20971	; 0x51eb
   2aa14:	e3a01064 	mov	r1, #100	; 0x64
   2aa18:	e3023710 	movw	r3, #10000	; 0x2710
   2aa1c:	e3a00001 	mov	r0, #1
   2aa20:	e0854498 	umull	r4, r5, r8, r4
   2aa24:	e1a022a5 	lsr	r2, r5, #5
   2aa28:	e0688291 	mls	r8, r1, r2, r8
   2aa2c:	e0080893 	mul	r8, r3, r8
   2aa30:	e5878000 	str	r8, [r7]
   2aa34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2aa38:	e3a00000 	mov	r0, #0
   2aa3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2aa40:	eb000881 	bl	2cc4c <EnterCritical>
   2aa44:	e5943010 	ldr	r3, [r4, #16]
   2aa48:	e594500c 	ldr	r5, [r4, #12]
   2aa4c:	e3530000 	cmp	r3, #0
   2aa50:	e5948004 	ldr	r8, [r4, #4]
   2aa54:	0affffe1 	beq	2a9e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   2aa58:	eb0008a8 	bl	2cd00 <LeaveCritical>
   2aa5c:	eaffffdf 	b	2a9e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   2aa60:	e30712dc 	movw	r1, #29404	; 0x72dc
   2aa64:	e3401003 	movt	r1, #3
   2aa68:	e3070310 	movw	r0, #29456	; 0x7310
   2aa6c:	e3400003 	movt	r0, #3
   2aa70:	e3002129 	movw	r2, #297	; 0x129
   2aa74:	ebffe93e 	bl	24f74 <assertion_failed>
   2aa78:	e30712dc 	movw	r1, #29404	; 0x72dc
   2aa7c:	e3401003 	movt	r1, #3
   2aa80:	e3070320 	movw	r0, #29472	; 0x7320
   2aa84:	e3400003 	movt	r0, #3
   2aa88:	e3a02f4b 	mov	r2, #300	; 0x12c
   2aa8c:	ebffe938 	bl	24f74 <assertion_failed>

0002aa90 <CTimer::GetTimeString()>:
   2aa90:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa94:	e1a04000 	mov	r4, r0
   2aa98:	e5900010 	ldr	r0, [r0, #16]
   2aa9c:	e24dd024 	sub	sp, sp, #36	; 0x24
   2aaa0:	e3500000 	cmp	r0, #0
   2aaa4:	1a000076 	bne	2ac84 <CTimer::GetTimeString()+0x1f4>
   2aaa8:	e594700c 	ldr	r7, [r4, #12]
   2aaac:	e5949004 	ldr	r9, [r4, #4]
   2aab0:	e1973009 	orrs	r3, r7, r9
   2aab4:	0a00007a 	beq	2aca4 <CTimer::GetTimeString()+0x214>
   2aab8:	e3080889 	movw	r0, #34953	; 0x8889
   2aabc:	e3480888 	movt	r0, #34952	; 0x8888
   2aac0:	e3a0b03c 	mov	fp, #60	; 0x3c
   2aac4:	e30b63c5 	movw	r6, #46021	; 0xb3c5
   2aac8:	e34961a2 	movt	r6, #37282	; 0x91a2
   2aacc:	e0821790 	umull	r1, r2, r0, r7
   2aad0:	e3043507 	movw	r3, #17671	; 0x4507
   2aad4:	e34c322e 	movt	r3, #49710	; 0xc22e
   2aad8:	e0854097 	umull	r4, r5, r7, r0
   2aadc:	e308151f 	movw	r1, #34079	; 0x851f
   2aae0:	e34511eb 	movt	r1, #20971	; 0x51eb
   2aae4:	e1a022a2 	lsr	r2, r2, #5
   2aae8:	e086c796 	umull	ip, r6, r6, r7
   2aaec:	e1a082a5 	lsr	r8, r5, #5
   2aaf0:	e083c793 	umull	ip, r3, r3, r7
   2aaf4:	e3a0a064 	mov	sl, #100	; 0x64
   2aaf8:	e3a0ee19 	mov	lr, #400	; 0x190
   2aafc:	e0c54092 	smull	r4, r5, r2, r0
   2ab00:	e1a065a6 	lsr	r6, r6, #11
   2ab04:	e068789b 	mls	r8, fp, r8, r7
   2ab08:	e1a03823 	lsr	r3, r3, #16
   2ab0c:	e0827005 	add	r7, r2, r5
   2ab10:	e58d3014 	str	r3, [sp, #20]
   2ab14:	e1a072c7 	asr	r7, r7, #5
   2ab18:	e30057b2 	movw	r5, #1970	; 0x7b2
   2ab1c:	e300c16d 	movw	ip, #365	; 0x16d
   2ab20:	e300016e 	movw	r0, #366	; 0x16e
   2ab24:	e067279b 	mls	r7, fp, r7, r2
   2ab28:	ea000003 	b	2ab3c <CTimer::GetTimeString()+0xac>
   2ab2c:	e59d3014 	ldr	r3, [sp, #20]
   2ab30:	e2855001 	add	r5, r5, #1
   2ab34:	e0433002 	sub	r3, r3, r2
   2ab38:	e58d3014 	str	r3, [sp, #20]
   2ab3c:	e0832195 	umull	r2, r3, r5, r1
   2ab40:	e1cd21f8 	strd	r2, [sp, #24]
   2ab44:	e1a023a3 	lsr	r2, r3, #7
   2ab48:	e59d301c 	ldr	r3, [sp, #28]
   2ab4c:	e1a0b2a3 	lsr	fp, r3, #5
   2ab50:	e063529e 	mls	r3, lr, r2, r5
   2ab54:	e16f3f13 	clz	r3, r3
   2ab58:	e0625b9a 	mls	r2, sl, fp, r5
   2ab5c:	e3520000 	cmp	r2, #0
   2ab60:	01a032a3 	lsreq	r3, r3, #5
   2ab64:	0a000002 	beq	2ab74 <CTimer::GetTimeString()+0xe4>
   2ab68:	e3150003 	tst	r5, #3
   2ab6c:	03a03001 	moveq	r3, #1
   2ab70:	13a03000 	movne	r3, #0
   2ab74:	e3530000 	cmp	r3, #0
   2ab78:	e59d4014 	ldr	r4, [sp, #20]
   2ab7c:	01a0200c 	moveq	r2, ip
   2ab80:	11a02000 	movne	r2, r0
   2ab84:	e1540002 	cmp	r4, r2
   2ab88:	2affffe7 	bcs	2ab2c <CTimer::GetTimeString()+0x9c>
   2ab8c:	e30712a4 	movw	r1, #29348	; 0x72a4
   2ab90:	e3401003 	movt	r1, #3
   2ab94:	e3a0a000 	mov	sl, #0
   2ab98:	ea000002 	b	2aba8 <CTimer::GetTimeString()+0x118>
   2ab9c:	e28aa001 	add	sl, sl, #1
   2aba0:	e0402002 	sub	r2, r0, r2
   2aba4:	e58d2014 	str	r2, [sp, #20]
   2aba8:	e35a0001 	cmp	sl, #1
   2abac:	13a02000 	movne	r2, #0
   2abb0:	02032001 	andeq	r2, r3, #1
   2abb4:	e59d0014 	ldr	r0, [sp, #20]
   2abb8:	e3520000 	cmp	r2, #0
   2abbc:	13a0201d 	movne	r2, #29
   2abc0:	0791210a 	ldreq	r2, [r1, sl, lsl #2]
   2abc4:	e1500002 	cmp	r0, r2
   2abc8:	2afffff3 	bcs	2ab9c <CTimer::GetTimeString()+0x10c>
   2abcc:	e308251f 	movw	r2, #34079	; 0x851f
   2abd0:	e34521eb 	movt	r2, #20971	; 0x51eb
   2abd4:	e3a01064 	mov	r1, #100	; 0x64
   2abd8:	e3a00010 	mov	r0, #16
   2abdc:	e0832299 	umull	r2, r3, r9, r2
   2abe0:	e1a0b2a3 	lsr	fp, r3, #5
   2abe4:	e06b9b91 	mls	fp, r1, fp, r9
   2abe8:	eb0004c0 	bl	2bef0 <operator new(unsigned int)>
   2abec:	e1a09000 	mov	r9, r0
   2abf0:	ebfffa7d 	bl	295ec <CString::CString()>
   2abf4:	e30037b7 	movw	r3, #1975	; 0x7b7
   2abf8:	e1550003 	cmp	r5, r3
   2abfc:	8a00000a 	bhi	2ac2c <CTimer::GetTimeString()+0x19c>
   2ac00:	e3071350 	movw	r1, #29520	; 0x7350
   2ac04:	e3401003 	movt	r1, #3
   2ac08:	e58db004 	str	fp, [sp, #4]
   2ac0c:	e1a03007 	mov	r3, r7
   2ac10:	e58d8000 	str	r8, [sp]
   2ac14:	e1a02006 	mov	r2, r6
   2ac18:	e1a00009 	mov	r0, r9
   2ac1c:	ebfffe42 	bl	2a52c <CString::Format(char const*, ...)>
   2ac20:	e1a00009 	mov	r0, r9
   2ac24:	e28dd024 	add	sp, sp, #36	; 0x24
   2ac28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac2c:	e30a2aab 	movw	r2, #43691	; 0xaaab
   2ac30:	e34a2aaa 	movt	r2, #43690	; 0xaaaa
   2ac34:	e30932ec 	movw	r3, #37612	; 0x92ec
   2ac38:	e3403003 	movt	r3, #3
   2ac3c:	e3a0c018 	mov	ip, #24
   2ac40:	e58db00c 	str	fp, [sp, #12]
   2ac44:	e0854296 	umull	r4, r5, r6, r2
   2ac48:	e58d8008 	str	r8, [sp, #8]
   2ac4c:	e1a00009 	mov	r0, r9
   2ac50:	e3071334 	movw	r1, #29492	; 0x7334
   2ac54:	e3401003 	movt	r1, #3
   2ac58:	e1a0e225 	lsr	lr, r5, #4
   2ac5c:	e793210a 	ldr	r2, [r3, sl, lsl #2]
   2ac60:	e59d3014 	ldr	r3, [sp, #20]
   2ac64:	e58d7004 	str	r7, [sp, #4]
   2ac68:	e0666e9c 	mls	r6, ip, lr, r6
   2ac6c:	e2833001 	add	r3, r3, #1
   2ac70:	e58d6000 	str	r6, [sp]
   2ac74:	ebfffe2c 	bl	2a52c <CString::Format(char const*, ...)>
   2ac78:	e1a00009 	mov	r0, r9
   2ac7c:	e28dd024 	add	sp, sp, #36	; 0x24
   2ac80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac84:	eb0007f0 	bl	2cc4c <EnterCritical>
   2ac88:	e5943010 	ldr	r3, [r4, #16]
   2ac8c:	e594700c 	ldr	r7, [r4, #12]
   2ac90:	e3530000 	cmp	r3, #0
   2ac94:	e5949004 	ldr	r9, [r4, #4]
   2ac98:	0affff84 	beq	2aab0 <CTimer::GetTimeString()+0x20>
   2ac9c:	eb000817 	bl	2cd00 <LeaveCritical>
   2aca0:	eaffff82 	b	2aab0 <CTimer::GetTimeString()+0x20>
   2aca4:	e1a09003 	mov	r9, r3
   2aca8:	eaffffdc 	b	2ac20 <CTimer::GetTimeString()+0x190>

0002acac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   2acac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2acb0:	e1a09000 	mov	r9, r0
   2acb4:	e3a00014 	mov	r0, #20
   2acb8:	e1a05001 	mov	r5, r1
   2acbc:	e1a04002 	mov	r4, r2
   2acc0:	e1a08003 	mov	r8, r3
   2acc4:	eb000489 	bl	2bef0 <operator new(unsigned int)>
   2acc8:	e5996004 	ldr	r6, [r9, #4]
   2accc:	e3540000 	cmp	r4, #0
   2acd0:	e0866005 	add	r6, r6, r5
   2acd4:	0a000040 	beq	2addc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   2acd8:	e1a07000 	mov	r7, r0
   2acdc:	e599001c 	ldr	r0, [r9, #28]
   2ace0:	e59d3020 	ldr	r3, [sp, #32]
   2ace4:	e3042d43 	movw	r2, #19779	; 0x4d43
   2ace8:	e3442b54 	movt	r2, #19284	; 0x4b54
   2acec:	e5874004 	str	r4, [r7, #4]
   2acf0:	e3500000 	cmp	r0, #0
   2acf4:	e5872000 	str	r2, [r7]
   2acf8:	e5876008 	str	r6, [r7, #8]
   2acfc:	e587800c 	str	r8, [r7, #12]
   2ad00:	e5873010 	str	r3, [r7, #16]
   2ad04:	1a000025 	bne	2ada0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
   2ad08:	e2895018 	add	r5, r9, #24
   2ad0c:	e1a00005 	mov	r0, r5
   2ad10:	eb00114c 	bl	2f248 <CPtrList::GetFirst()>
   2ad14:	e2504000 	subs	r4, r0, #0
   2ad18:	0a00002a 	beq	2adc8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
   2ad1c:	e3048d43 	movw	r8, #19779	; 0x4d43
   2ad20:	e3448b54 	movt	r8, #19284	; 0x4b54
   2ad24:	e1a01004 	mov	r1, r4
   2ad28:	e1a00005 	mov	r0, r5
   2ad2c:	eb00115d 	bl	2f2a8 <CPtrList::GetPtr(TPtrListElement*)>
   2ad30:	e3500000 	cmp	r0, #0
   2ad34:	0a00000d 	beq	2ad70 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
   2ad38:	e5903000 	ldr	r3, [r0]
   2ad3c:	e1530008 	cmp	r3, r8
   2ad40:	1a000010 	bne	2ad88 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   2ad44:	e5903008 	ldr	r3, [r0, #8]
   2ad48:	e1a01004 	mov	r1, r4
   2ad4c:	e1a00005 	mov	r0, r5
   2ad50:	e0433006 	sub	r3, r3, r6
   2ad54:	e3530000 	cmp	r3, #0
   2ad58:	ca000012 	bgt	2ada8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   2ad5c:	eb00113b 	bl	2f250 <CPtrList::GetNext(TPtrListElement*)>
   2ad60:	e3500000 	cmp	r0, #0
   2ad64:	0a000017 	beq	2adc8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
   2ad68:	e1a04000 	mov	r4, r0
   2ad6c:	eaffffec 	b	2ad24 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
   2ad70:	e30712dc 	movw	r1, #29404	; 0x72dc
   2ad74:	e3401003 	movt	r1, #3
   2ad78:	e3070364 	movw	r0, #29540	; 0x7364
   2ad7c:	e3400003 	movt	r0, #3
   2ad80:	e3002193 	movw	r2, #403	; 0x193
   2ad84:	ebffe87a 	bl	24f74 <assertion_failed>
   2ad88:	e30712dc 	movw	r1, #29404	; 0x72dc
   2ad8c:	e3401003 	movt	r1, #3
   2ad90:	e3070374 	movw	r0, #29556	; 0x7374
   2ad94:	e3400003 	movt	r0, #3
   2ad98:	e3a02f65 	mov	r2, #404	; 0x194
   2ad9c:	ebffe874 	bl	24f74 <assertion_failed>
   2ada0:	eb0007a9 	bl	2cc4c <EnterCritical>
   2ada4:	eaffffd7 	b	2ad08 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   2ada8:	e1a02007 	mov	r2, r7
   2adac:	eb001153 	bl	2f300 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   2adb0:	e599301c 	ldr	r3, [r9, #28]
   2adb4:	e3530000 	cmp	r3, #0
   2adb8:	0a000000 	beq	2adc0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>
   2adbc:	eb0007cf 	bl	2cd00 <LeaveCritical>
   2adc0:	e1a00007 	mov	r0, r7
   2adc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2adc8:	e1a01004 	mov	r1, r4
   2adcc:	e1a00005 	mov	r0, r5
   2add0:	e1a02007 	mov	r2, r7
   2add4:	eb001185 	bl	2f3f0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   2add8:	eafffff4 	b	2adb0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x104>
   2addc:	e30712dc 	movw	r1, #29404	; 0x72dc
   2ade0:	e3401003 	movt	r1, #3
   2ade4:	e30707e8 	movw	r0, #30696	; 0x77e8
   2ade8:	e3400003 	movt	r0, #3
   2adec:	e3002183 	movw	r2, #387	; 0x183
   2adf0:	ebffe85f 	bl	24f74 <assertion_failed>

0002adf4 <CTimer::CancelKernelTimer(unsigned int)>:
   2adf4:	e92d4070 	push	{r4, r5, r6, lr}
   2adf8:	e2514000 	subs	r4, r1, #0
   2adfc:	0a00001c 	beq	2ae74 <CTimer::CancelKernelTimer(unsigned int)+0x80>
   2ae00:	e1a05000 	mov	r5, r0
   2ae04:	e590001c 	ldr	r0, [r0, #28]
   2ae08:	e3500000 	cmp	r0, #0
   2ae0c:	1a000016 	bne	2ae6c <CTimer::CancelKernelTimer(unsigned int)+0x78>
   2ae10:	e2856018 	add	r6, r5, #24
   2ae14:	e1a01004 	mov	r1, r4
   2ae18:	e1a00006 	mov	r0, r6
   2ae1c:	eb0011fc 	bl	2f614 <CPtrList::Find(void*)>
   2ae20:	e2501000 	subs	r1, r0, #0
   2ae24:	0a00000b 	beq	2ae58 <CTimer::CancelKernelTimer(unsigned int)+0x64>
   2ae28:	e5942000 	ldr	r2, [r4]
   2ae2c:	e3043d43 	movw	r3, #19779	; 0x4d43
   2ae30:	e3443b54 	movt	r3, #19284	; 0x4b54
   2ae34:	e1520003 	cmp	r2, r3
   2ae38:	1a000013 	bne	2ae8c <CTimer::CancelKernelTimer(unsigned int)+0x98>
   2ae3c:	e1a00006 	mov	r0, r6
   2ae40:	eb0011a6 	bl	2f4e0 <CPtrList::Remove(TPtrListElement*)>
   2ae44:	e3a03000 	mov	r3, #0
   2ae48:	e1a00004 	mov	r0, r4
   2ae4c:	e5843000 	str	r3, [r4]
   2ae50:	e3a01014 	mov	r1, #20
   2ae54:	eb000433 	bl	2bf28 <operator delete(void*, unsigned int)>
   2ae58:	e595301c 	ldr	r3, [r5, #28]
   2ae5c:	e3530000 	cmp	r3, #0
   2ae60:	08bd8070 	popeq	{r4, r5, r6, pc}
   2ae64:	e8bd4070 	pop	{r4, r5, r6, lr}
   2ae68:	ea0007a4 	b	2cd00 <LeaveCritical>
   2ae6c:	eb000776 	bl	2cc4c <EnterCritical>
   2ae70:	eaffffe6 	b	2ae10 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   2ae74:	e30712dc 	movw	r1, #29404	; 0x72dc
   2ae78:	e3401003 	movt	r1, #3
   2ae7c:	e3020afc 	movw	r0, #11004	; 0x2afc
   2ae80:	e3400003 	movt	r0, #3
   2ae84:	e3a02e1b 	mov	r2, #432	; 0x1b0
   2ae88:	ebffe839 	bl	24f74 <assertion_failed>
   2ae8c:	e30712dc 	movw	r1, #29404	; 0x72dc
   2ae90:	e3401003 	movt	r1, #3
   2ae94:	e30702e8 	movw	r0, #29416	; 0x72e8
   2ae98:	e3400003 	movt	r0, #3
   2ae9c:	e30021b7 	movw	r2, #439	; 0x1b7
   2aea0:	ebffe833 	bl	24f74 <assertion_failed>

0002aea4 <CTimer::PollKernelTimers()>:
   2aea4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2aea8:	e1a06000 	mov	r6, r0
   2aeac:	e590001c 	ldr	r0, [r0, #28]
   2aeb0:	e3500000 	cmp	r0, #0
   2aeb4:	1a00003f 	bne	2afb8 <CTimer::PollKernelTimers()+0x114>
   2aeb8:	e2867018 	add	r7, r6, #24
   2aebc:	e1a00007 	mov	r0, r7
   2aec0:	eb0010e0 	bl	2f248 <CPtrList::GetFirst()>
   2aec4:	e2505000 	subs	r5, r0, #0
   2aec8:	0a000029 	beq	2af74 <CTimer::PollKernelTimers()+0xd0>
   2aecc:	e3048d43 	movw	r8, #19779	; 0x4d43
   2aed0:	e3448b54 	movt	r8, #19284	; 0x4b54
   2aed4:	e3a09000 	mov	r9, #0
   2aed8:	e1a01005 	mov	r1, r5
   2aedc:	e1a00007 	mov	r0, r7
   2aee0:	eb0010f0 	bl	2f2a8 <CPtrList::GetPtr(TPtrListElement*)>
   2aee4:	e2504000 	subs	r4, r0, #0
   2aee8:	0a000034 	beq	2afc0 <CTimer::PollKernelTimers()+0x11c>
   2aeec:	e5943000 	ldr	r3, [r4]
   2aef0:	e1530008 	cmp	r3, r8
   2aef4:	1a000037 	bne	2afd8 <CTimer::PollKernelTimers()+0x134>
   2aef8:	e5962004 	ldr	r2, [r6, #4]
   2aefc:	e5943008 	ldr	r3, [r4, #8]
   2af00:	e0433002 	sub	r3, r3, r2
   2af04:	e3530000 	cmp	r3, #0
   2af08:	ca000019 	bgt	2af74 <CTimer::PollKernelTimers()+0xd0>
   2af0c:	e1a01005 	mov	r1, r5
   2af10:	e1a00007 	mov	r0, r7
   2af14:	eb0010cd 	bl	2f250 <CPtrList::GetNext(TPtrListElement*)>
   2af18:	e1a01005 	mov	r1, r5
   2af1c:	e1a0a000 	mov	sl, r0
   2af20:	e1a00007 	mov	r0, r7
   2af24:	eb00116d 	bl	2f4e0 <CPtrList::Remove(TPtrListElement*)>
   2af28:	e596301c 	ldr	r3, [r6, #28]
   2af2c:	e3530000 	cmp	r3, #0
   2af30:	1a000014 	bne	2af88 <CTimer::PollKernelTimers()+0xe4>
   2af34:	e5943004 	ldr	r3, [r4, #4]
   2af38:	e3530000 	cmp	r3, #0
   2af3c:	0a000015 	beq	2af98 <CTimer::PollKernelTimers()+0xf4>
   2af40:	e5942010 	ldr	r2, [r4, #16]
   2af44:	e1a00004 	mov	r0, r4
   2af48:	e594100c 	ldr	r1, [r4, #12]
   2af4c:	e12fff33 	blx	r3
   2af50:	e1a00004 	mov	r0, r4
   2af54:	e5849000 	str	r9, [r4]
   2af58:	e3a01014 	mov	r1, #20
   2af5c:	eb0003f1 	bl	2bf28 <operator delete(void*, unsigned int)>
   2af60:	e596001c 	ldr	r0, [r6, #28]
   2af64:	e3500000 	cmp	r0, #0
   2af68:	1a000010 	bne	2afb0 <CTimer::PollKernelTimers()+0x10c>
   2af6c:	e25a5000 	subs	r5, sl, #0
   2af70:	1affffd8 	bne	2aed8 <CTimer::PollKernelTimers()+0x34>
   2af74:	e596301c 	ldr	r3, [r6, #28]
   2af78:	e3530000 	cmp	r3, #0
   2af7c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2af80:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2af84:	ea00075d 	b	2cd00 <LeaveCritical>
   2af88:	eb00075c 	bl	2cd00 <LeaveCritical>
   2af8c:	e5943004 	ldr	r3, [r4, #4]
   2af90:	e3530000 	cmp	r3, #0
   2af94:	1affffe9 	bne	2af40 <CTimer::PollKernelTimers()+0x9c>
   2af98:	e30712dc 	movw	r1, #29404	; 0x72dc
   2af9c:	e3401003 	movt	r1, #3
   2afa0:	e30707e8 	movw	r0, #30696	; 0x77e8
   2afa4:	e3400003 	movt	r0, #3
   2afa8:	e30021db 	movw	r2, #475	; 0x1db
   2afac:	ebffe7f0 	bl	24f74 <assertion_failed>
   2afb0:	eb000725 	bl	2cc4c <EnterCritical>
   2afb4:	eaffffec 	b	2af6c <CTimer::PollKernelTimers()+0xc8>
   2afb8:	eb000723 	bl	2cc4c <EnterCritical>
   2afbc:	eaffffbd 	b	2aeb8 <CTimer::PollKernelTimers()+0x14>
   2afc0:	e30712dc 	movw	r1, #29404	; 0x72dc
   2afc4:	e3401003 	movt	r1, #3
   2afc8:	e3020afc 	movw	r0, #11004	; 0x2afc
   2afcc:	e3400003 	movt	r0, #3
   2afd0:	e3a02f73 	mov	r2, #460	; 0x1cc
   2afd4:	ebffe7e6 	bl	24f74 <assertion_failed>
   2afd8:	e30712dc 	movw	r1, #29404	; 0x72dc
   2afdc:	e3401003 	movt	r1, #3
   2afe0:	e30702e8 	movw	r0, #29416	; 0x72e8
   2afe4:	e3400003 	movt	r0, #3
   2afe8:	e30021cd 	movw	r2, #461	; 0x1cd
   2afec:	ebffe7e0 	bl	24f74 <assertion_failed>

0002aff0 <CTimer::InterruptHandler()>:
   2aff0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2aff4:	e1a04000 	mov	r4, r0
   2aff8:	ec5ecf2e 	mrrc	15, 2, ip, lr, cr14
   2affc:	e3a06000 	mov	r6, #0
   2b000:	e3020710 	movw	r0, #10000	; 0x2710
   2b004:	e186200c 	orr	r2, r6, ip
   2b008:	e3a01000 	mov	r1, #0
   2b00c:	e0926000 	adds	r6, r2, r0
   2b010:	e3a03000 	mov	r3, #0
   2b014:	e0ae7001 	adc	r7, lr, r1
   2b018:	e1a00006 	mov	r0, r6
   2b01c:	e3a01000 	mov	r1, #0
   2b020:	e1a02007 	mov	r2, r7
   2b024:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
   2b028:	e5940010 	ldr	r0, [r4, #16]
   2b02c:	e3500000 	cmp	r0, #0
   2b030:	1a000018 	bne	2b098 <CTimer::InterruptHandler()+0xa8>
   2b034:	e5943004 	ldr	r3, [r4, #4]
   2b038:	e308051f 	movw	r0, #34079	; 0x851f
   2b03c:	e34501eb 	movt	r0, #20971	; 0x51eb
   2b040:	e2833001 	add	r3, r3, #1
   2b044:	e3a0c064 	mov	ip, #100	; 0x64
   2b048:	e5843004 	str	r3, [r4, #4]
   2b04c:	e0810093 	umull	r0, r1, r3, r0
   2b050:	e1a022a1 	lsr	r2, r1, #5
   2b054:	e062329c 	mls	r2, ip, r2, r3
   2b058:	e3520000 	cmp	r2, #0
   2b05c:	0a00001a 	beq	2b0cc <CTimer::InterruptHandler()+0xdc>
   2b060:	e1a00004 	mov	r0, r4
   2b064:	ebffff8e 	bl	2aea4 <CTimer::PollKernelTimers()>
   2b068:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   2b06c:	e3530000 	cmp	r3, #0
   2b070:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2b074:	e2846028 	add	r6, r4, #40	; 0x28
   2b078:	e3a05000 	mov	r5, #0
   2b07c:	e4963004 	ldr	r3, [r6], #4
   2b080:	e2855001 	add	r5, r5, #1
   2b084:	e12fff33 	blx	r3
   2b088:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   2b08c:	e1530005 	cmp	r3, r5
   2b090:	8afffff9 	bhi	2b07c <CTimer::InterruptHandler()+0x8c>
   2b094:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b098:	eb0006eb 	bl	2cc4c <EnterCritical>
   2b09c:	e5943004 	ldr	r3, [r4, #4]
   2b0a0:	e308051f 	movw	r0, #34079	; 0x851f
   2b0a4:	e34501eb 	movt	r0, #20971	; 0x51eb
   2b0a8:	e2833001 	add	r3, r3, #1
   2b0ac:	e3a0c064 	mov	ip, #100	; 0x64
   2b0b0:	e5843004 	str	r3, [r4, #4]
   2b0b4:	e5942010 	ldr	r2, [r4, #16]
   2b0b8:	e0810093 	umull	r0, r1, r3, r0
   2b0bc:	e1a012a1 	lsr	r1, r1, #5
   2b0c0:	e063319c 	mls	r3, ip, r1, r3
   2b0c4:	e3530000 	cmp	r3, #0
   2b0c8:	1a000005 	bne	2b0e4 <CTimer::InterruptHandler()+0xf4>
   2b0cc:	e5943008 	ldr	r3, [r4, #8]
   2b0d0:	e2833001 	add	r3, r3, #1
   2b0d4:	e5843008 	str	r3, [r4, #8]
   2b0d8:	e594300c 	ldr	r3, [r4, #12]
   2b0dc:	e2833001 	add	r3, r3, #1
   2b0e0:	e584300c 	str	r3, [r4, #12]
   2b0e4:	e3520000 	cmp	r2, #0
   2b0e8:	0affffdc 	beq	2b060 <CTimer::InterruptHandler()+0x70>
   2b0ec:	eb000703 	bl	2cd00 <LeaveCritical>
   2b0f0:	eaffffda 	b	2b060 <CTimer::InterruptHandler()+0x70>

0002b0f4 <CTimer::InterruptHandler(void*)>:
   2b0f4:	e3500000 	cmp	r0, #0
   2b0f8:	0a000000 	beq	2b100 <CTimer::InterruptHandler(void*)+0xc>
   2b0fc:	eaffffbb 	b	2aff0 <CTimer::InterruptHandler()>
   2b100:	e30712dc 	movw	r1, #29404	; 0x72dc
   2b104:	e3401003 	movt	r1, #3
   2b108:	e30007a4 	movw	r0, #1956	; 0x7a4
   2b10c:	e3400003 	movt	r0, #3
   2b110:	e92d4010 	push	{r4, lr}
   2b114:	e3002223 	movw	r2, #547	; 0x223
   2b118:	ebffe795 	bl	24f74 <assertion_failed>

0002b11c <CTimer::TuneMsDelay()>:
   2b11c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b120:	e1a06000 	mov	r6, r0
   2b124:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   2b128:	e24dd00c 	sub	sp, sp, #12
   2b12c:	e3024710 	movw	r4, #10000	; 0x2710
   2b130:	e5963020 	ldr	r3, [r6, #32]
   2b134:	e308551f 	movw	r5, #34079	; 0x851f
   2b138:	e34551eb 	movt	r5, #20971	; 0x51eb
   2b13c:	e5967004 	ldr	r7, [r6, #4]
   2b140:	e0000390 	mul	r0, r0, r3
   2b144:	eb000a6d 	bl	2db00 <DelayLoop>
   2b148:	e5963004 	ldr	r3, [r6, #4]
   2b14c:	e5962020 	ldr	r2, [r6, #32]
   2b150:	e3041dd3 	movw	r1, #19923	; 0x4dd3
   2b154:	e3411062 	movt	r1, #4194	; 0x1062
   2b158:	e0433007 	sub	r3, r3, r7
   2b15c:	e734f314 	udiv	r4, r4, r3
   2b160:	e0020492 	mul	r2, r2, r4
   2b164:	e0823295 	umull	r3, r2, r5, r2
   2b168:	e1a022a2 	lsr	r2, r2, #5
   2b16c:	e5862020 	str	r2, [r6, #32]
   2b170:	e2822f7d 	add	r2, r2, #500	; 0x1f4
   2b174:	e0c32192 	smull	r2, r3, r2, r1
   2b178:	e1a03343 	asr	r3, r3, #6
   2b17c:	e5863024 	str	r3, [r6, #36]	; 0x24
   2b180:	e0876594 	umull	r6, r7, r4, r5
   2b184:	ebffed1f 	bl	26608 <CLogger::Get()>
   2b188:	e3a01064 	mov	r1, #100	; 0x64
   2b18c:	e0c32594 	smull	r2, r3, r4, r5
   2b190:	e3a02003 	mov	r2, #3
   2b194:	e1a0c2a7 	lsr	ip, r7, #5
   2b198:	e1a032c3 	asr	r3, r3, #5
   2b19c:	e58d3000 	str	r3, [sp]
   2b1a0:	e307339c 	movw	r3, #29596	; 0x739c
   2b1a4:	e3403003 	movt	r3, #3
   2b1a8:	e0644c91 	mls	r4, r1, ip, r4
   2b1ac:	e59f100c 	ldr	r1, [pc, #12]	; 2b1c0 <CTimer::TuneMsDelay()+0xa4>
   2b1b0:	e58d4004 	str	r4, [sp, #4]
   2b1b4:	ebffec54 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b1b8:	e28dd00c 	add	sp, sp, #12
   2b1bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b1c0:	000372d4 	.word	0x000372d4

0002b1c4 <CTimer::Initialize()>:
   2b1c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2b1c8:	e1a06000 	mov	r6, r0
   2b1cc:	e5900000 	ldr	r0, [r0]
   2b1d0:	e24dd00c 	sub	sp, sp, #12
   2b1d4:	e3500000 	cmp	r0, #0
   2b1d8:	0a000028 	beq	2b280 <CTimer::Initialize()+0xbc>
   2b1dc:	e1a03006 	mov	r3, r6
   2b1e0:	e3a01049 	mov	r1, #73	; 0x49
   2b1e4:	e30b20f4 	movw	r2, #45300	; 0xb0f4
   2b1e8:	e3402002 	movt	r2, #2
   2b1ec:	eb00077b 	bl	2cfe0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2b1f0:	ec51cf0e 	mrrc	15, 0, ip, r1, cr14
   2b1f4:	e3a04000 	mov	r4, #0
   2b1f8:	e3022710 	movw	r2, #10000	; 0x2710
   2b1fc:	e184000c 	orr	r0, r4, ip
   2b200:	e3a03000 	mov	r3, #0
   2b204:	e0908002 	adds	r8, r0, r2
   2b208:	e0a19003 	adc	r9, r1, r3
   2b20c:	e1a02008 	mov	r2, r8
   2b210:	e3a03000 	mov	r3, #0
   2b214:	e1a00009 	mov	r0, r9
   2b218:	e3a01000 	mov	r1, #0
   2b21c:	ec402f2e 	mcrr	15, 2, r2, r0, cr14
   2b220:	e3a03001 	mov	r3, #1
   2b224:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   2b228:	e1a00006 	mov	r0, r6
   2b22c:	ebffffba 	bl	2b11c <CTimer::TuneMsDelay()>
   2b230:	ee1e6f10 	mrc	15, 0, r6, cr14, cr0, {0}
   2b234:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   2b238:	e3a02b3e 	mov	r2, #63488	; 0xf800
   2b23c:	e3402124 	movt	r2, #292	; 0x124
   2b240:	e30a3aab 	movw	r3, #43691	; 0xaaab
   2b244:	e34036aa 	movt	r3, #1706	; 0x6aa
   2b248:	e5917008 	ldr	r7, [r1, #8]
   2b24c:	e1570003 	cmp	r7, r3
   2b250:	01560002 	cmpeq	r6, r2
   2b254:	0a000006 	beq	2b274 <CTimer::Initialize()+0xb0>
   2b258:	ebffecea 	bl	26608 <CLogger::Get()>
   2b25c:	e30733b4 	movw	r3, #29620	; 0x73b4
   2b260:	e3403003 	movt	r3, #3
   2b264:	e1cd60f0 	strd	r6, [sp]
   2b268:	e1a02004 	mov	r2, r4
   2b26c:	e59f1024 	ldr	r1, [pc, #36]	; 2b298 <CTimer::Initialize()+0xd4>
   2b270:	ebffec25 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b274:	e3a00001 	mov	r0, #1
   2b278:	e28dd00c 	add	sp, sp, #12
   2b27c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b280:	e30712dc 	movw	r1, #29404	; 0x72dc
   2b284:	e3401003 	movt	r1, #3
   2b288:	e30007dc 	movw	r0, #2012	; 0x7dc
   2b28c:	e3400003 	movt	r0, #3
   2b290:	e3a02065 	mov	r2, #101	; 0x65
   2b294:	ebffe736 	bl	24f74 <assertion_failed>
   2b298:	000372d4 	.word	0x000372d4

0002b29c <CTimer::RegisterPeriodicHandler(void (*)())>:
   2b29c:	e92d4010 	push	{r4, lr}
   2b2a0:	e3510000 	cmp	r1, #0
   2b2a4:	0a00000a 	beq	2b2d4 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
   2b2a8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   2b2ac:	e3530003 	cmp	r3, #3
   2b2b0:	8a00000d 	bhi	2b2ec <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   2b2b4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   2b2b8:	e283300a 	add	r3, r3, #10
   2b2bc:	e7801103 	str	r1, [r0, r3, lsl #2]
   2b2c0:	f57ff04f 	dsb	sy
   2b2c4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   2b2c8:	e2833001 	add	r3, r3, #1
   2b2cc:	e5803038 	str	r3, [r0, #56]	; 0x38
   2b2d0:	e8bd8010 	pop	{r4, pc}
   2b2d4:	e30712dc 	movw	r1, #29404	; 0x72dc
   2b2d8:	e3401003 	movt	r1, #3
   2b2dc:	e30707e8 	movw	r0, #30696	; 0x77e8
   2b2e0:	e3400003 	movt	r0, #3
   2b2e4:	e3002239 	movw	r2, #569	; 0x239
   2b2e8:	ebffe721 	bl	24f74 <assertion_failed>
   2b2ec:	e30712dc 	movw	r1, #29404	; 0x72dc
   2b2f0:	e3401003 	movt	r1, #3
   2b2f4:	e30703f0 	movw	r0, #29680	; 0x73f0
   2b2f8:	e3400003 	movt	r0, #3
   2b2fc:	e300223b 	movw	r2, #571	; 0x23b
   2b300:	ebffe71b 	bl	24f74 <assertion_failed>

0002b304 <CTimer::SimpleMsDelay(unsigned int)>:
   2b304:	e3500000 	cmp	r0, #0
   2b308:	012fff1e 	bxeq	lr
   2b30c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   2b310:	e0000093 	mul	r0, r3, r0
   2b314:	e3500000 	cmp	r0, #0
   2b318:	012fff1e 	bxeq	lr
   2b31c:	eafffcd8 	b	2a684 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

0002b320 <CTimer::SimpleusDelay(unsigned int)>:
   2b320:	e3500000 	cmp	r0, #0
   2b324:	012fff1e 	bxeq	lr
   2b328:	eafffcd5 	b	2a684 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

0002b32c <CTimer::IsLeapYear(unsigned int)>:
   2b32c:	e308251f 	movw	r2, #34079	; 0x851f
   2b330:	e34521eb 	movt	r2, #20971	; 0x51eb
   2b334:	e3a01064 	mov	r1, #100	; 0x64
   2b338:	e083c092 	umull	ip, r3, r2, r0
   2b33c:	e1a032a3 	lsr	r3, r3, #5
   2b340:	e0630391 	mls	r3, r1, r3, r0
   2b344:	e3530000 	cmp	r3, #0
   2b348:	0a000003 	beq	2b35c <CTimer::IsLeapYear(unsigned int)+0x30>
   2b34c:	e3100003 	tst	r0, #3
   2b350:	03a00001 	moveq	r0, #1
   2b354:	13a00000 	movne	r0, #0
   2b358:	e12fff1e 	bx	lr
   2b35c:	e92d0030 	push	{r4, r5}
   2b360:	e0854290 	umull	r4, r5, r0, r2
   2b364:	e3a02e19 	mov	r2, #400	; 0x190
   2b368:	e1a033a5 	lsr	r3, r5, #7
   2b36c:	e8bd0030 	pop	{r4, r5}
   2b370:	e0600392 	mls	r0, r2, r3, r0
   2b374:	e16f0f10 	clz	r0, r0
   2b378:	e1a002a0 	lsr	r0, r0, #5
   2b37c:	e12fff1e 	bx	lr

0002b380 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   2b380:	e3500001 	cmp	r0, #1
   2b384:	0a000003 	beq	2b398 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   2b388:	e30732a4 	movw	r3, #29348	; 0x72a4
   2b38c:	e3403003 	movt	r3, #3
   2b390:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   2b394:	e12fff1e 	bx	lr
   2b398:	e308251f 	movw	r2, #34079	; 0x851f
   2b39c:	e34521eb 	movt	r2, #20971	; 0x51eb
   2b3a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2b3a4:	e3a0e064 	mov	lr, #100	; 0x64
   2b3a8:	e0832291 	umull	r2, r3, r1, r2
   2b3ac:	e1a0c2a3 	lsr	ip, r3, #5
   2b3b0:	e06c1c9e 	mls	ip, lr, ip, r1
   2b3b4:	e35c0000 	cmp	ip, #0
   2b3b8:	0a000008 	beq	2b3e0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
   2b3bc:	e3110003 	tst	r1, #3
   2b3c0:	03a01001 	moveq	r1, #1
   2b3c4:	13a01000 	movne	r1, #0
   2b3c8:	e3510000 	cmp	r1, #0
   2b3cc:	030732a4 	movweq	r3, #29348	; 0x72a4
   2b3d0:	03403003 	movteq	r3, #3
   2b3d4:	07930100 	ldreq	r0, [r3, r0, lsl #2]
   2b3d8:	13a0001d 	movne	r0, #29
   2b3dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2b3e0:	e1a033a3 	lsr	r3, r3, #7
   2b3e4:	e3a02e19 	mov	r2, #400	; 0x190
   2b3e8:	e0611392 	mls	r1, r2, r3, r1
   2b3ec:	e16f1f11 	clz	r1, r1
   2b3f0:	e1a012a1 	lsr	r1, r1, #5
   2b3f4:	eafffff3 	b	2b3c8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0002b3f8 <CTimer::Get()>:
   2b3f8:	e3093448 	movw	r3, #37960	; 0x9448
   2b3fc:	e3403003 	movt	r3, #3
   2b400:	e5930000 	ldr	r0, [r3]
   2b404:	e3500000 	cmp	r0, #0
   2b408:	112fff1e 	bxne	lr
   2b40c:	e30712dc 	movw	r1, #29404	; 0x72dc
   2b410:	e3401003 	movt	r1, #3
   2b414:	e3040ffc 	movw	r0, #20476	; 0x4ffc
   2b418:	e3400003 	movt	r0, #3
   2b41c:	e92d4010 	push	{r4, lr}
   2b420:	e3a02f9f 	mov	r2, #636	; 0x27c
   2b424:	ebffe6d2 	bl	24f74 <assertion_failed>

0002b428 <memset>:
   2b428:	e352000f 	cmp	r2, #15
   2b42c:	e7e1c050 	ubfx	ip, r0, #0, #2
   2b430:	93a03000 	movls	r3, #0
   2b434:	83a03001 	movhi	r3, #1
   2b438:	e35c0000 	cmp	ip, #0
   2b43c:	13a03000 	movne	r3, #0
   2b440:	e3530000 	cmp	r3, #0
   2b444:	1a000008 	bne	2b46c <memset+0x44>
   2b448:	e3520000 	cmp	r2, #0
   2b44c:	e1a03000 	mov	r3, r0
   2b450:	012fff1e 	bxeq	lr
   2b454:	e6af1071 	sxtb	r1, r1
   2b458:	e0802002 	add	r2, r0, r2
   2b45c:	e4c31001 	strb	r1, [r3], #1
   2b460:	e1530002 	cmp	r3, r2
   2b464:	1afffffc 	bne	2b45c <memset+0x34>
   2b468:	e12fff1e 	bx	lr
   2b46c:	e2423010 	sub	r3, r2, #16
   2b470:	e92d4010 	push	{r4, lr}
   2b474:	e1a03223 	lsr	r3, r3, #4
   2b478:	e2804020 	add	r4, r0, #32
   2b47c:	e181e401 	orr	lr, r1, r1, lsl #8
   2b480:	e0844203 	add	r4, r4, r3, lsl #4
   2b484:	e18ee80e 	orr	lr, lr, lr, lsl #16
   2b488:	e280c010 	add	ip, r0, #16
   2b48c:	e50ce010 	str	lr, [ip, #-16]
   2b490:	e28cc010 	add	ip, ip, #16
   2b494:	e50ce01c 	str	lr, [ip, #-28]	; 0xffffffe4
   2b498:	e50ce018 	str	lr, [ip, #-24]	; 0xffffffe8
   2b49c:	e50ce014 	str	lr, [ip, #-20]	; 0xffffffec
   2b4a0:	e15c0004 	cmp	ip, r4
   2b4a4:	1afffff8 	bne	2b48c <memset+0x64>
   2b4a8:	e202200f 	and	r2, r2, #15
   2b4ac:	e2833001 	add	r3, r3, #1
   2b4b0:	e3520000 	cmp	r2, #0
   2b4b4:	e0803203 	add	r3, r0, r3, lsl #4
   2b4b8:	08bd8010 	popeq	{r4, pc}
   2b4bc:	e6af1071 	sxtb	r1, r1
   2b4c0:	e0832002 	add	r2, r3, r2
   2b4c4:	e4c31001 	strb	r1, [r3], #1
   2b4c8:	e1530002 	cmp	r3, r2
   2b4cc:	1afffffc 	bne	2b4c4 <memset+0x9c>
   2b4d0:	e8bd8010 	pop	{r4, pc}

0002b4d4 <memmove>:
   2b4d4:	e1500001 	cmp	r0, r1
   2b4d8:	9a00000a 	bls	2b508 <memmove+0x34>
   2b4dc:	e0813002 	add	r3, r1, r2
   2b4e0:	e1530000 	cmp	r3, r0
   2b4e4:	9a000007 	bls	2b508 <memmove+0x34>
   2b4e8:	e3520000 	cmp	r2, #0
   2b4ec:	e0802002 	add	r2, r0, r2
   2b4f0:	012fff1e 	bxeq	lr
   2b4f4:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   2b4f8:	e562c001 	strb	ip, [r2, #-1]!
   2b4fc:	e1510003 	cmp	r1, r3
   2b500:	1afffffb 	bne	2b4f4 <memmove+0x20>
   2b504:	e12fff1e 	bx	lr
   2b508:	ea00016e 	b	2bac8 <memcpy>

0002b50c <memcmp>:
   2b50c:	e3520000 	cmp	r2, #0
   2b510:	e242c001 	sub	ip, r2, #1
   2b514:	0a00000d 	beq	2b550 <memcmp+0x44>
   2b518:	e5d02000 	ldrb	r2, [r0]
   2b51c:	e5d13000 	ldrb	r3, [r1]
   2b520:	e1520003 	cmp	r2, r3
   2b524:	8a00000b 	bhi	2b558 <memcmp+0x4c>
   2b528:	3a00000c 	bcc	2b560 <memcmp+0x54>
   2b52c:	e081c00c 	add	ip, r1, ip
   2b530:	ea000004 	b	2b548 <memcmp+0x3c>
   2b534:	e5f02001 	ldrb	r2, [r0, #1]!
   2b538:	e5f13001 	ldrb	r3, [r1, #1]!
   2b53c:	e1520003 	cmp	r2, r3
   2b540:	8a000004 	bhi	2b558 <memcmp+0x4c>
   2b544:	3a000005 	bcc	2b560 <memcmp+0x54>
   2b548:	e151000c 	cmp	r1, ip
   2b54c:	1afffff8 	bne	2b534 <memcmp+0x28>
   2b550:	e3a00000 	mov	r0, #0
   2b554:	e12fff1e 	bx	lr
   2b558:	e3a00001 	mov	r0, #1
   2b55c:	e12fff1e 	bx	lr
   2b560:	e3e00000 	mvn	r0, #0
   2b564:	e12fff1e 	bx	lr

0002b568 <strlen>:
   2b568:	e1d010d0 	ldrsb	r1, [r0]
   2b56c:	e2803001 	add	r3, r0, #1
   2b570:	e3510000 	cmp	r1, #0
   2b574:	0a000003 	beq	2b588 <strlen+0x20>
   2b578:	e0431000 	sub	r1, r3, r0
   2b57c:	e0d320d1 	ldrsb	r2, [r3], #1
   2b580:	e3520000 	cmp	r2, #0
   2b584:	1afffffb 	bne	2b578 <strlen+0x10>
   2b588:	e1a00001 	mov	r0, r1
   2b58c:	e12fff1e 	bx	lr

0002b590 <strcmp>:
   2b590:	e1d030d0 	ldrsb	r3, [r0]
   2b594:	e1d120d0 	ldrsb	r2, [r1]
   2b598:	e3530000 	cmp	r3, #0
   2b59c:	0a00000e 	beq	2b5dc <strcmp+0x4c>
   2b5a0:	e3520000 	cmp	r2, #0
   2b5a4:	0a00000c 	beq	2b5dc <strcmp+0x4c>
   2b5a8:	e1520003 	cmp	r2, r3
   2b5ac:	ba00000f 	blt	2b5f0 <strcmp+0x60>
   2b5b0:	da000005 	ble	2b5cc <strcmp+0x3c>
   2b5b4:	ea00000f 	b	2b5f8 <strcmp+0x68>
   2b5b8:	e3520000 	cmp	r2, #0
   2b5bc:	0a000006 	beq	2b5dc <strcmp+0x4c>
   2b5c0:	e1530002 	cmp	r3, r2
   2b5c4:	ca000009 	bgt	2b5f0 <strcmp+0x60>
   2b5c8:	ba00000a 	blt	2b5f8 <strcmp+0x68>
   2b5cc:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2b5d0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2b5d4:	e3530000 	cmp	r3, #0
   2b5d8:	1afffff6 	bne	2b5b8 <strcmp+0x28>
   2b5dc:	e1530002 	cmp	r3, r2
   2b5e0:	ca000002 	bgt	2b5f0 <strcmp+0x60>
   2b5e4:	b3e00000 	mvnlt	r0, #0
   2b5e8:	a3a00000 	movge	r0, #0
   2b5ec:	e12fff1e 	bx	lr
   2b5f0:	e3a00001 	mov	r0, #1
   2b5f4:	e12fff1e 	bx	lr
   2b5f8:	e3e00000 	mvn	r0, #0
   2b5fc:	e12fff1e 	bx	lr

0002b600 <strcasecmp>:
   2b600:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2b604:	e2400001 	sub	r0, r0, #1
   2b608:	e2411001 	sub	r1, r1, #1
   2b60c:	ea000006 	b	2b62c <strcasecmp+0x2c>
   2b610:	e35e0019 	cmp	lr, #25
   2b614:	9242c020 	subls	ip, r2, #32
   2b618:	e35c0000 	cmp	ip, #0
   2b61c:	0a00000b 	beq	2b650 <strcasecmp+0x50>
   2b620:	e153000c 	cmp	r3, ip
   2b624:	ca000010 	bgt	2b66c <strcasecmp+0x6c>
   2b628:	ba000011 	blt	2b674 <strcasecmp+0x74>
   2b62c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2b630:	e2432061 	sub	r2, r3, #97	; 0x61
   2b634:	e3520019 	cmp	r2, #25
   2b638:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2b63c:	92433020 	subls	r3, r3, #32
   2b640:	e3530000 	cmp	r3, #0
   2b644:	e1a0c002 	mov	ip, r2
   2b648:	e242e061 	sub	lr, r2, #97	; 0x61
   2b64c:	1affffef 	bne	2b610 <strcasecmp+0x10>
   2b650:	e35e0019 	cmp	lr, #25
   2b654:	92422020 	subls	r2, r2, #32
   2b658:	e1520003 	cmp	r2, r3
   2b65c:	ba000002 	blt	2b66c <strcasecmp+0x6c>
   2b660:	c3e00000 	mvngt	r0, #0
   2b664:	d3a00000 	movle	r0, #0
   2b668:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2b66c:	e3a00001 	mov	r0, #1
   2b670:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2b674:	e3e00000 	mvn	r0, #0
   2b678:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002b67c <strncmp>:
   2b67c:	e3520000 	cmp	r2, #0
   2b680:	0a000016 	beq	2b6e0 <strncmp+0x64>
   2b684:	e1d030d0 	ldrsb	r3, [r0]
   2b688:	e1d1c0d0 	ldrsb	ip, [r1]
   2b68c:	e3530000 	cmp	r3, #0
   2b690:	0a000015 	beq	2b6ec <strncmp+0x70>
   2b694:	e35c0000 	cmp	ip, #0
   2b698:	0a000013 	beq	2b6ec <strncmp+0x70>
   2b69c:	e153000c 	cmp	r3, ip
   2b6a0:	ca000016 	bgt	2b700 <strncmp+0x84>
   2b6a4:	ba000017 	blt	2b708 <strncmp+0x8c>
   2b6a8:	e2422001 	sub	r2, r2, #1
   2b6ac:	e0812002 	add	r2, r1, r2
   2b6b0:	ea000008 	b	2b6d8 <strncmp+0x5c>
   2b6b4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2b6b8:	e3530000 	cmp	r3, #0
   2b6bc:	0a000009 	beq	2b6e8 <strncmp+0x6c>
   2b6c0:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   2b6c4:	e35c0000 	cmp	ip, #0
   2b6c8:	0a000007 	beq	2b6ec <strncmp+0x70>
   2b6cc:	e153000c 	cmp	r3, ip
   2b6d0:	ca00000a 	bgt	2b700 <strncmp+0x84>
   2b6d4:	ba00000b 	blt	2b708 <strncmp+0x8c>
   2b6d8:	e1510002 	cmp	r1, r2
   2b6dc:	1afffff4 	bne	2b6b4 <strncmp+0x38>
   2b6e0:	e3a00000 	mov	r0, #0
   2b6e4:	e12fff1e 	bx	lr
   2b6e8:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   2b6ec:	e153000c 	cmp	r3, ip
   2b6f0:	ca000002 	bgt	2b700 <strncmp+0x84>
   2b6f4:	b3e00000 	mvnlt	r0, #0
   2b6f8:	a3a00000 	movge	r0, #0
   2b6fc:	e12fff1e 	bx	lr
   2b700:	e3a00001 	mov	r0, #1
   2b704:	e12fff1e 	bx	lr
   2b708:	e3e00000 	mvn	r0, #0
   2b70c:	e12fff1e 	bx	lr

0002b710 <strcpy>:
   2b710:	e1d130d0 	ldrsb	r3, [r1]
   2b714:	e1a02000 	mov	r2, r0
   2b718:	e3530000 	cmp	r3, #0
   2b71c:	0a000003 	beq	2b730 <strcpy+0x20>
   2b720:	e4c23001 	strb	r3, [r2], #1
   2b724:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2b728:	e3530000 	cmp	r3, #0
   2b72c:	1afffffb 	bne	2b720 <strcpy+0x10>
   2b730:	e3a03000 	mov	r3, #0
   2b734:	e5c23000 	strb	r3, [r2]
   2b738:	e12fff1e 	bx	lr

0002b73c <strncpy>:
   2b73c:	e3520000 	cmp	r2, #0
   2b740:	012fff1e 	bxeq	lr
   2b744:	e1d1c0d0 	ldrsb	ip, [r1]
   2b748:	e35c0000 	cmp	ip, #0
   2b74c:	0a00000a 	beq	2b77c <strncpy+0x40>
   2b750:	e0802002 	add	r2, r0, r2
   2b754:	e1a03000 	mov	r3, r0
   2b758:	e4c3c001 	strb	ip, [r3], #1
   2b75c:	e1530002 	cmp	r3, r2
   2b760:	012fff1e 	bxeq	lr
   2b764:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   2b768:	e35c0000 	cmp	ip, #0
   2b76c:	1afffff9 	bne	2b758 <strncpy+0x1c>
   2b770:	e3a02000 	mov	r2, #0
   2b774:	e5c32000 	strb	r2, [r3]
   2b778:	e12fff1e 	bx	lr
   2b77c:	e1a03000 	mov	r3, r0
   2b780:	eafffffa 	b	2b770 <strncpy+0x34>

0002b784 <strcat>:
   2b784:	e1d030d0 	ldrsb	r3, [r0]
   2b788:	e3530000 	cmp	r3, #0
   2b78c:	e1a03000 	mov	r3, r0
   2b790:	0a000002 	beq	2b7a0 <strcat+0x1c>
   2b794:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2b798:	e3520000 	cmp	r2, #0
   2b79c:	1afffffc 	bne	2b794 <strcat+0x10>
   2b7a0:	e1d120d0 	ldrsb	r2, [r1]
   2b7a4:	e3520000 	cmp	r2, #0
   2b7a8:	0a000003 	beq	2b7bc <strcat+0x38>
   2b7ac:	e4c32001 	strb	r2, [r3], #1
   2b7b0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2b7b4:	e3520000 	cmp	r2, #0
   2b7b8:	1afffffb 	bne	2b7ac <strcat+0x28>
   2b7bc:	e3a02000 	mov	r2, #0
   2b7c0:	e5c32000 	strb	r2, [r3]
   2b7c4:	e12fff1e 	bx	lr

0002b7c8 <strchr>:
   2b7c8:	e1d020d0 	ldrsb	r2, [r0]
   2b7cc:	e3520000 	cmp	r2, #0
   2b7d0:	0a000009 	beq	2b7fc <strchr+0x34>
   2b7d4:	e1510002 	cmp	r1, r2
   2b7d8:	1a000002 	bne	2b7e8 <strchr+0x20>
   2b7dc:	e12fff1e 	bx	lr
   2b7e0:	e1530001 	cmp	r3, r1
   2b7e4:	012fff1e 	bxeq	lr
   2b7e8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2b7ec:	e3530000 	cmp	r3, #0
   2b7f0:	1afffffa 	bne	2b7e0 <strchr+0x18>
   2b7f4:	e1a00003 	mov	r0, r3
   2b7f8:	e12fff1e 	bx	lr
   2b7fc:	e1a00002 	mov	r0, r2
   2b800:	e12fff1e 	bx	lr

0002b804 <strstr>:
   2b804:	e92d4010 	push	{r4, lr}
   2b808:	e1d140d0 	ldrsb	r4, [r1]
   2b80c:	e1d030d0 	ldrsb	r3, [r0]
   2b810:	e3530000 	cmp	r3, #0
   2b814:	1a000005 	bne	2b830 <strstr+0x2c>
   2b818:	e3540000 	cmp	r4, #0
   2b81c:	13a00000 	movne	r0, #0
   2b820:	e8bd8010 	pop	{r4, pc}
   2b824:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2b828:	e3530000 	cmp	r3, #0
   2b82c:	0a00000d 	beq	2b868 <strstr+0x64>
   2b830:	e3540000 	cmp	r4, #0
   2b834:	08bd8010 	popeq	{r4, pc}
   2b838:	e1d030d0 	ldrsb	r3, [r0]
   2b83c:	e1530004 	cmp	r3, r4
   2b840:	1afffff7 	bne	2b824 <strstr+0x20>
   2b844:	e1a02001 	mov	r2, r1
   2b848:	e1a0c000 	mov	ip, r0
   2b84c:	e1f230d1 	ldrsb	r3, [r2, #1]!
   2b850:	e3530000 	cmp	r3, #0
   2b854:	08bd8010 	popeq	{r4, pc}
   2b858:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   2b85c:	e15e0003 	cmp	lr, r3
   2b860:	0afffff9 	beq	2b84c <strstr+0x48>
   2b864:	eaffffee 	b	2b824 <strstr+0x20>
   2b868:	e1a00003 	mov	r0, r3
   2b86c:	e8bd8010 	pop	{r4, pc}

0002b870 <strtok_r>:
   2b870:	e3500000 	cmp	r0, #0
   2b874:	0a000029 	beq	2b920 <strtok_r+0xb0>
   2b878:	e1d0c0d0 	ldrsb	ip, [r0]
   2b87c:	e35c0000 	cmp	ip, #0
   2b880:	0a00002d 	beq	2b93c <strtok_r+0xcc>
   2b884:	e92d4030 	push	{r4, r5, lr}
   2b888:	e1d140d0 	ldrsb	r4, [r1]
   2b88c:	e3540000 	cmp	r4, #0
   2b890:	0a000008 	beq	2b8b8 <strtok_r+0x48>
   2b894:	e15c0004 	cmp	ip, r4
   2b898:	0a000019 	beq	2b904 <strtok_r+0x94>
   2b89c:	e1a0e001 	mov	lr, r1
   2b8a0:	ea000001 	b	2b8ac <strtok_r+0x3c>
   2b8a4:	e15c0003 	cmp	ip, r3
   2b8a8:	0a000015 	beq	2b904 <strtok_r+0x94>
   2b8ac:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2b8b0:	e3530000 	cmp	r3, #0
   2b8b4:	1afffffa 	bne	2b8a4 <strtok_r+0x34>
   2b8b8:	e35c0000 	cmp	ip, #0
   2b8bc:	0a00001b 	beq	2b930 <strtok_r+0xc0>
   2b8c0:	e1a05000 	mov	r5, r0
   2b8c4:	e3540000 	cmp	r4, #0
   2b8c8:	0a000008 	beq	2b8f0 <strtok_r+0x80>
   2b8cc:	e15c0004 	cmp	ip, r4
   2b8d0:	0a00000d 	beq	2b90c <strtok_r+0x9c>
   2b8d4:	e1a0e001 	mov	lr, r1
   2b8d8:	ea000001 	b	2b8e4 <strtok_r+0x74>
   2b8dc:	e153000c 	cmp	r3, ip
   2b8e0:	0a000009 	beq	2b90c <strtok_r+0x9c>
   2b8e4:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   2b8e8:	e3530000 	cmp	r3, #0
   2b8ec:	1afffffa 	bne	2b8dc <strtok_r+0x6c>
   2b8f0:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
   2b8f4:	e35c0000 	cmp	ip, #0
   2b8f8:	1afffff1 	bne	2b8c4 <strtok_r+0x54>
   2b8fc:	e5825000 	str	r5, [r2]
   2b900:	e8bd8030 	pop	{r4, r5, pc}
   2b904:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
   2b908:	eaffffdf 	b	2b88c <strtok_r+0x1c>
   2b90c:	e3a03000 	mov	r3, #0
   2b910:	e2855001 	add	r5, r5, #1
   2b914:	e5453001 	strb	r3, [r5, #-1]
   2b918:	e5825000 	str	r5, [r2]
   2b91c:	e8bd8030 	pop	{r4, r5, pc}
   2b920:	e5920000 	ldr	r0, [r2]
   2b924:	e3500000 	cmp	r0, #0
   2b928:	1affffd2 	bne	2b878 <strtok_r+0x8>
   2b92c:	e12fff1e 	bx	lr
   2b930:	e3a00000 	mov	r0, #0
   2b934:	e5820000 	str	r0, [r2]
   2b938:	e8bd8030 	pop	{r4, r5, pc}
   2b93c:	e3a00000 	mov	r0, #0
   2b940:	e5820000 	str	r0, [r2]
   2b944:	e12fff1e 	bx	lr

0002b948 <strtoul>:
   2b948:	e3510000 	cmp	r1, #0
   2b94c:	e2423002 	sub	r3, r2, #2
   2b950:	e92d4070 	push	{r4, r5, r6, lr}
   2b954:	e3c2e010 	bic	lr, r2, #16
   2b958:	15810000 	strne	r0, [r1]
   2b95c:	e3520000 	cmp	r2, #0
   2b960:	13530022 	cmpne	r3, #34	; 0x22
   2b964:	8a000032 	bhi	2ba34 <strtoul+0xec>
   2b968:	e1d030d0 	ldrsb	r3, [r0]
   2b96c:	e1a04000 	mov	r4, r0
   2b970:	e2800001 	add	r0, r0, #1
   2b974:	e243c009 	sub	ip, r3, #9
   2b978:	e3530020 	cmp	r3, #32
   2b97c:	e6efc07c 	uxtb	ip, ip
   2b980:	0afffff8 	beq	2b968 <strtoul+0x20>
   2b984:	e35c0004 	cmp	ip, #4
   2b988:	9afffff6 	bls	2b968 <strtoul+0x20>
   2b98c:	e353002b 	cmp	r3, #43	; 0x2b
   2b990:	0a000029 	beq	2ba3c <strtoul+0xf4>
   2b994:	e353002d 	cmp	r3, #45	; 0x2d
   2b998:	03a06001 	moveq	r6, #1
   2b99c:	13a06000 	movne	r6, #0
   2b9a0:	01d430d1 	ldrsbeq	r3, [r4, #1]
   2b9a4:	01a04000 	moveq	r4, r0
   2b9a8:	e3530030 	cmp	r3, #48	; 0x30
   2b9ac:	0a000027 	beq	2ba50 <strtoul+0x108>
   2b9b0:	e3520000 	cmp	r2, #0
   2b9b4:	03a0200a 	moveq	r2, #10
   2b9b8:	e353002f 	cmp	r3, #47	; 0x2f
   2b9bc:	e1a0c003 	mov	ip, r3
   2b9c0:	da00003a 	ble	2bab0 <strtoul+0x168>
   2b9c4:	e3a05001 	mov	r5, #1
   2b9c8:	e3a0e000 	mov	lr, #0
   2b9cc:	ea000008 	b	2b9f4 <strtoul+0xac>
   2b9d0:	e020c29e 	mla	r0, lr, r2, ip
   2b9d4:	e3a05000 	mov	r5, #0
   2b9d8:	e150000e 	cmp	r0, lr
   2b9dc:	3a000026 	bcc	2ba7c <strtoul+0x134>
   2b9e0:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
   2b9e4:	e1a0e000 	mov	lr, r0
   2b9e8:	e35c002f 	cmp	ip, #47	; 0x2f
   2b9ec:	e1a0300c 	mov	r3, ip
   2b9f0:	da000026 	ble	2ba90 <strtoul+0x148>
   2b9f4:	e2433061 	sub	r3, r3, #97	; 0x61
   2b9f8:	e3530019 	cmp	r3, #25
   2b9fc:	924cc020 	subls	ip, ip, #32
   2ba00:	e35c0040 	cmp	ip, #64	; 0x40
   2ba04:	c24cc007 	subgt	ip, ip, #7
   2ba08:	e24cc030 	sub	ip, ip, #48	; 0x30
   2ba0c:	e15c0002 	cmp	ip, r2
   2ba10:	baffffee 	blt	2b9d0 <strtoul+0x88>
   2ba14:	e2253001 	eor	r3, r5, #1
   2ba18:	e1a0000e 	mov	r0, lr
   2ba1c:	e0033006 	and	r3, r3, r6
   2ba20:	e3510000 	cmp	r1, #0
   2ba24:	15814000 	strne	r4, [r1]
   2ba28:	e3530000 	cmp	r3, #0
   2ba2c:	12600000 	rsbne	r0, r0, #0
   2ba30:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ba34:	e3a00000 	mov	r0, #0
   2ba38:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ba3c:	e1d430d1 	ldrsb	r3, [r4, #1]
   2ba40:	e3a06000 	mov	r6, #0
   2ba44:	e1a04000 	mov	r4, r0
   2ba48:	e3530030 	cmp	r3, #48	; 0x30
   2ba4c:	1affffd7 	bne	2b9b0 <strtoul+0x68>
   2ba50:	e1d430d1 	ldrsb	r3, [r4, #1]
   2ba54:	e284c001 	add	ip, r4, #1
   2ba58:	e3c30020 	bic	r0, r3, #32
   2ba5c:	e3500058 	cmp	r0, #88	; 0x58
   2ba60:	1a00000c 	bne	2ba98 <strtoul+0x150>
   2ba64:	e35e0000 	cmp	lr, #0
   2ba68:	1afffff1 	bne	2ba34 <strtoul+0xec>
   2ba6c:	e1d430d2 	ldrsb	r3, [r4, #2]
   2ba70:	e3a02010 	mov	r2, #16
   2ba74:	e2844002 	add	r4, r4, #2
   2ba78:	eaffffce 	b	2b9b8 <strtoul+0x70>
   2ba7c:	e1510005 	cmp	r1, r5
   2ba80:	0a000008 	beq	2baa8 <strtoul+0x160>
   2ba84:	e5814000 	str	r4, [r1]
   2ba88:	e3e00000 	mvn	r0, #0
   2ba8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ba90:	e3a03001 	mov	r3, #1
   2ba94:	eaffffe0 	b	2ba1c <strtoul+0xd4>
   2ba98:	e3520000 	cmp	r2, #0
   2ba9c:	e1a0400c 	mov	r4, ip
   2baa0:	03a02008 	moveq	r2, #8
   2baa4:	eaffffc3 	b	2b9b8 <strtoul+0x70>
   2baa8:	e3e00000 	mvn	r0, #0
   2baac:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bab0:	e3510000 	cmp	r1, #0
   2bab4:	0affffde 	beq	2ba34 <strtoul+0xec>
   2bab8:	e3a00000 	mov	r0, #0
   2babc:	e5814000 	str	r4, [r1]
   2bac0:	e8bd8070 	pop	{r4, r5, r6, pc}

0002bac4 <char2int>:
   2bac4:	e12fff1e 	bx	lr

0002bac8 <memcpy>:
   2bac8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   2bacc:	e352007f 	cmp	r2, #127	; 0x7f
   2bad0:	9a00000b 	bls	2bb04 <memcpy+0x3c>
   2bad4:	e3110003 	tst	r1, #3
   2bad8:	1a000009 	bne	2bb04 <memcpy+0x3c>
   2badc:	e3100003 	tst	r0, #3
   2bae0:	1a000007 	bne	2bb04 <memcpy+0x3c>
   2bae4:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   2bae8:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2baec:	e2422020 	sub	r2, r2, #32
   2baf0:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2baf4:	f5d1f040 	pld	[r1, #64]	; 0x40
   2baf8:	e352001f 	cmp	r2, #31
   2bafc:	8afffff9 	bhi	2bae8 <memcpy+0x20>
   2bb00:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   2bb04:	e3520000 	cmp	r2, #0
   2bb08:	0a000003 	beq	2bb1c <memcpy+0x54>
   2bb0c:	e4d13001 	ldrb	r3, [r1], #1
   2bb10:	e2522001 	subs	r2, r2, #1
   2bb14:	e4c03001 	strb	r3, [r0], #1
   2bb18:	1afffffb 	bne	2bb0c <memcpy+0x44>
   2bb1c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   2bb20:	e12fff1e 	bx	lr

0002bb24 <ChainBootStub(void const*, unsigned int)>:
   2bb24:	e2811003 	add	r1, r1, #3
   2bb28:	e1b01121 	lsrs	r1, r1, #2
   2bb2c:	0a000008 	beq	2bb54 <ChainBootStub(void const*, unsigned int)+0x30>
   2bb30:	e2811a02 	add	r1, r1, #8192	; 0x2000
   2bb34:	e2400004 	sub	r0, r0, #4
   2bb38:	e1a02101 	lsl	r2, r1, #2
   2bb3c:	e3a03902 	mov	r3, #32768	; 0x8000
   2bb40:	e5b01004 	ldr	r1, [r0, #4]!
   2bb44:	e2833004 	add	r3, r3, #4
   2bb48:	e5031004 	str	r1, [r3, #-4]
   2bb4c:	e1530002 	cmp	r3, r2
   2bb50:	1afffffa 	bne	2bb40 <ChainBootStub(void const*, unsigned int)+0x1c>
   2bb54:	e3a03000 	mov	r3, #0
   2bb58:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2bb5c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2bb60:	f57ff04f 	dsb	sy
   2bb64:	f57ff06f 	isb	sy
   2bb68:	e3a03902 	mov	r3, #32768	; 0x8000
   2bb6c:	e12fff13 	bx	r3

0002bb70 <EnableChainBoot>:
   2bb70:	e309344c 	movw	r3, #37964	; 0x944c
   2bb74:	e3403003 	movt	r3, #3
   2bb78:	e92d4010 	push	{r4, lr}
   2bb7c:	e3a02b01 	mov	r2, #1024	; 0x400
   2bb80:	e5831004 	str	r1, [r3, #4]
   2bb84:	e30b1b24 	movw	r1, #47908	; 0xbb24
   2bb88:	e3401002 	movt	r1, #2
   2bb8c:	e5830000 	str	r0, [r3]
   2bb90:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   2bb94:	ebffffcb 	bl	2bac8 <memcpy>
   2bb98:	e3a03000 	mov	r3, #0
   2bb9c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2bba0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2bba4:	f57ff04f 	dsb	sy
   2bba8:	f57ff06f 	isb	sy
   2bbac:	e8bd8010 	pop	{r4, pc}

0002bbb0 <IsChainBootEnabled>:
   2bbb0:	e309344c 	movw	r3, #37964	; 0x944c
   2bbb4:	e3403003 	movt	r3, #3
   2bbb8:	e5930000 	ldr	r0, [r3]
   2bbbc:	e2900000 	adds	r0, r0, #0
   2bbc0:	13a00001 	movne	r0, #1
   2bbc4:	e12fff1e 	bx	lr

0002bbc8 <DoChainBoot>:
   2bbc8:	e309344c 	movw	r3, #37964	; 0x944c
   2bbcc:	e3403003 	movt	r3, #3
   2bbd0:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   2bbd4:	e1c300d0 	ldrd	r0, [r3]
   2bbd8:	e12fff12 	bx	r2

0002bbdc <CMACAddress::CMACAddress()>:
   2bbdc:	e3a02000 	mov	r2, #0
   2bbe0:	e5c02000 	strb	r2, [r0]
   2bbe4:	e12fff1e 	bx	lr

0002bbe8 <CMACAddress::~CMACAddress()>:
   2bbe8:	e12fff1e 	bx	lr

0002bbec <CMACAddress::operator==(CMACAddress const&) const>:
   2bbec:	e92d4010 	push	{r4, lr}
   2bbf0:	e5d03000 	ldrb	r3, [r0]
   2bbf4:	e3530000 	cmp	r3, #0
   2bbf8:	0a000009 	beq	2bc24 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   2bbfc:	e5d13000 	ldrb	r3, [r1]
   2bc00:	e2800001 	add	r0, r0, #1
   2bc04:	e3530000 	cmp	r3, #0
   2bc08:	0a00000b 	beq	2bc3c <CMACAddress::operator==(CMACAddress const&) const+0x50>
   2bc0c:	e2811001 	add	r1, r1, #1
   2bc10:	e3a02006 	mov	r2, #6
   2bc14:	ebfffe3c 	bl	2b50c <memcmp>
   2bc18:	e16f0f10 	clz	r0, r0
   2bc1c:	e1a002a0 	lsr	r0, r0, #5
   2bc20:	e8bd8010 	pop	{r4, pc}
   2bc24:	e3071454 	movw	r1, #29780	; 0x7454
   2bc28:	e3401003 	movt	r1, #3
   2bc2c:	e3000f54 	movw	r0, #3924	; 0xf54
   2bc30:	e3400003 	movt	r0, #3
   2bc34:	e3a02029 	mov	r2, #41	; 0x29
   2bc38:	ebffe4cd 	bl	24f74 <assertion_failed>
   2bc3c:	e3071454 	movw	r1, #29780	; 0x7454
   2bc40:	e3401003 	movt	r1, #3
   2bc44:	e3000f54 	movw	r0, #3924	; 0xf54
   2bc48:	e3400003 	movt	r0, #3
   2bc4c:	e3a02041 	mov	r2, #65	; 0x41
   2bc50:	ebffe4c7 	bl	24f74 <assertion_failed>

0002bc54 <CMACAddress::operator!=(CMACAddress const&) const>:
   2bc54:	e92d4010 	push	{r4, lr}
   2bc58:	ebffffe3 	bl	2bbec <CMACAddress::operator==(CMACAddress const&) const>
   2bc5c:	e2200001 	eor	r0, r0, #1
   2bc60:	e6ef0070 	uxtb	r0, r0
   2bc64:	e8bd8010 	pop	{r4, pc}

0002bc68 <CMACAddress::Set(unsigned char const*)>:
   2bc68:	e92d4010 	push	{r4, lr}
   2bc6c:	e3510000 	cmp	r1, #0
   2bc70:	0a000006 	beq	2bc90 <CMACAddress::Set(unsigned char const*)+0x28>
   2bc74:	e1a04000 	mov	r4, r0
   2bc78:	e3a02006 	mov	r2, #6
   2bc7c:	e2800001 	add	r0, r0, #1
   2bc80:	ebffff90 	bl	2bac8 <memcpy>
   2bc84:	e3a03001 	mov	r3, #1
   2bc88:	e5c43000 	strb	r3, [r4]
   2bc8c:	e8bd8010 	pop	{r4, pc}
   2bc90:	e3071454 	movw	r1, #29780	; 0x7454
   2bc94:	e3401003 	movt	r1, #3
   2bc98:	e3050b70 	movw	r0, #23408	; 0x5b70
   2bc9c:	e3400003 	movt	r0, #3
   2bca0:	e3a02034 	mov	r2, #52	; 0x34
   2bca4:	ebffe4b2 	bl	24f74 <assertion_failed>

0002bca8 <CMACAddress::CMACAddress(unsigned char const*)>:
   2bca8:	e92d4010 	push	{r4, lr}
   2bcac:	e1a04000 	mov	r4, r0
   2bcb0:	ebffffec 	bl	2bc68 <CMACAddress::Set(unsigned char const*)>
   2bcb4:	e1a00004 	mov	r0, r4
   2bcb8:	e8bd8010 	pop	{r4, pc}

0002bcbc <CMACAddress::SetBroadcast()>:
   2bcbc:	e92d4010 	push	{r4, lr}
   2bcc0:	e1a04000 	mov	r4, r0
   2bcc4:	e3a02006 	mov	r2, #6
   2bcc8:	e2800001 	add	r0, r0, #1
   2bccc:	e3a010ff 	mov	r1, #255	; 0xff
   2bcd0:	ebfffdd4 	bl	2b428 <memset>
   2bcd4:	e3a03001 	mov	r3, #1
   2bcd8:	e5c43000 	strb	r3, [r4]
   2bcdc:	e8bd8010 	pop	{r4, pc}

0002bce0 <CMACAddress::Get() const>:
   2bce0:	e5d03000 	ldrb	r3, [r0]
   2bce4:	e3530000 	cmp	r3, #0
   2bce8:	0a000001 	beq	2bcf4 <CMACAddress::Get() const+0x14>
   2bcec:	e2800001 	add	r0, r0, #1
   2bcf0:	e12fff1e 	bx	lr
   2bcf4:	e3071454 	movw	r1, #29780	; 0x7454
   2bcf8:	e3401003 	movt	r1, #3
   2bcfc:	e3000f54 	movw	r0, #3924	; 0xf54
   2bd00:	e3400003 	movt	r0, #3
   2bd04:	e92d4010 	push	{r4, lr}
   2bd08:	e3a02041 	mov	r2, #65	; 0x41
   2bd0c:	ebffe498 	bl	24f74 <assertion_failed>

0002bd10 <CMACAddress::CopyTo(unsigned char*) const>:
   2bd10:	e92d4010 	push	{r4, lr}
   2bd14:	e5d02000 	ldrb	r2, [r0]
   2bd18:	e3520000 	cmp	r2, #0
   2bd1c:	0a000007 	beq	2bd40 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   2bd20:	e1a03001 	mov	r3, r1
   2bd24:	e3510000 	cmp	r1, #0
   2bd28:	0a00000a 	beq	2bd58 <CMACAddress::CopyTo(unsigned char*) const+0x48>
   2bd2c:	e2801001 	add	r1, r0, #1
   2bd30:	e3a02006 	mov	r2, #6
   2bd34:	e1a00003 	mov	r0, r3
   2bd38:	e8bd4010 	pop	{r4, lr}
   2bd3c:	eaffff61 	b	2bac8 <memcpy>
   2bd40:	e3071454 	movw	r1, #29780	; 0x7454
   2bd44:	e3401003 	movt	r1, #3
   2bd48:	e3000f54 	movw	r0, #3924	; 0xf54
   2bd4c:	e3400003 	movt	r0, #3
   2bd50:	e3a02047 	mov	r2, #71	; 0x47
   2bd54:	ebffe486 	bl	24f74 <assertion_failed>
   2bd58:	e3071454 	movw	r1, #29780	; 0x7454
   2bd5c:	e3401003 	movt	r1, #3
   2bd60:	e3020270 	movw	r0, #8816	; 0x2270
   2bd64:	e3400003 	movt	r0, #3
   2bd68:	e3a02048 	mov	r2, #72	; 0x48
   2bd6c:	ebffe480 	bl	24f74 <assertion_failed>

0002bd70 <CMACAddress::IsBroadcast() const>:
   2bd70:	e5d0c000 	ldrb	ip, [r0]
   2bd74:	e35c0000 	cmp	ip, #0
   2bd78:	12803001 	addne	r3, r0, #1
   2bd7c:	12802007 	addne	r2, r0, #7
   2bd80:	0a000009 	beq	2bdac <CMACAddress::IsBroadcast() const+0x3c>
   2bd84:	e4d31001 	ldrb	r1, [r3], #1
   2bd88:	e35100ff 	cmp	r1, #255	; 0xff
   2bd8c:	1a000003 	bne	2bda0 <CMACAddress::IsBroadcast() const+0x30>
   2bd90:	e1530002 	cmp	r3, r2
   2bd94:	1afffffa 	bne	2bd84 <CMACAddress::IsBroadcast() const+0x14>
   2bd98:	e1a0000c 	mov	r0, ip
   2bd9c:	e12fff1e 	bx	lr
   2bda0:	e3a0c000 	mov	ip, #0
   2bda4:	e1a0000c 	mov	r0, ip
   2bda8:	e12fff1e 	bx	lr
   2bdac:	e3071454 	movw	r1, #29780	; 0x7454
   2bdb0:	e3401003 	movt	r1, #3
   2bdb4:	e3000f54 	movw	r0, #3924	; 0xf54
   2bdb8:	e3400003 	movt	r0, #3
   2bdbc:	e92d4010 	push	{r4, lr}
   2bdc0:	e3a0204e 	mov	r2, #78	; 0x4e
   2bdc4:	ebffe46a 	bl	24f74 <assertion_failed>

0002bdc8 <CMACAddress::GetSize() const>:
   2bdc8:	e3a00006 	mov	r0, #6
   2bdcc:	e12fff1e 	bx	lr

0002bdd0 <CMACAddress::Format(CString*) const>:
   2bdd0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2bdd4:	e5d03000 	ldrb	r3, [r0]
   2bdd8:	e24dd014 	sub	sp, sp, #20
   2bddc:	e3530000 	cmp	r3, #0
   2bde0:	0a000011 	beq	2be2c <CMACAddress::Format(CString*) const+0x5c>
   2bde4:	e3510000 	cmp	r1, #0
   2bde8:	0a000015 	beq	2be44 <CMACAddress::Format(CString*) const+0x74>
   2bdec:	e1a0c000 	mov	ip, r0
   2bdf0:	e5d03002 	ldrb	r3, [r0, #2]
   2bdf4:	e1a00001 	mov	r0, r1
   2bdf8:	e3071464 	movw	r1, #29796	; 0x7464
   2bdfc:	e3401003 	movt	r1, #3
   2be00:	e5dce006 	ldrb	lr, [ip, #6]
   2be04:	e5dc2001 	ldrb	r2, [ip, #1]
   2be08:	e58de00c 	str	lr, [sp, #12]
   2be0c:	e5dce005 	ldrb	lr, [ip, #5]
   2be10:	e58de008 	str	lr, [sp, #8]
   2be14:	e5dce004 	ldrb	lr, [ip, #4]
   2be18:	e5dcc003 	ldrb	ip, [ip, #3]
   2be1c:	e88d5000 	stm	sp, {ip, lr}
   2be20:	ebfff9c1 	bl	2a52c <CString::Format(char const*, ...)>
   2be24:	e28dd014 	add	sp, sp, #20
   2be28:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2be2c:	e3071454 	movw	r1, #29780	; 0x7454
   2be30:	e3401003 	movt	r1, #3
   2be34:	e3000f54 	movw	r0, #3924	; 0xf54
   2be38:	e3400003 	movt	r0, #3
   2be3c:	e3a02062 	mov	r2, #98	; 0x62
   2be40:	ebffe44b 	bl	24f74 <assertion_failed>
   2be44:	e3071454 	movw	r1, #29780	; 0x7454
   2be48:	e3401003 	movt	r1, #3
   2be4c:	e3050b80 	movw	r0, #23424	; 0x5b80
   2be50:	e3400003 	movt	r0, #3
   2be54:	e3a02063 	mov	r2, #99	; 0x63
   2be58:	ebffe445 	bl	24f74 <assertion_failed>

0002be5c <CNetDevice::AddNetDevice()>:
   2be5c:	e3093454 	movw	r3, #37972	; 0x9454
   2be60:	e3403003 	movt	r3, #3
   2be64:	e5932000 	ldr	r2, [r3]
   2be68:	e3520004 	cmp	r2, #4
   2be6c:	90831102 	addls	r1, r3, r2, lsl #2
   2be70:	92822001 	addls	r2, r2, #1
   2be74:	95832000 	strls	r2, [r3]
   2be78:	95810004 	strls	r0, [r1, #4]
   2be7c:	e12fff1e 	bx	lr

0002be80 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   2be80:	e3500005 	cmp	r0, #5
   2be84:	9309331c 	movwls	r3, #37660	; 0x931c
   2be88:	93403003 	movtls	r3, #3
   2be8c:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   2be90:	83070484 	movwhi	r0, #29828	; 0x7484
   2be94:	83400003 	movthi	r0, #3
   2be98:	e12fff1e 	bx	lr

0002be9c <CNetDevice::GetNetDevice(unsigned int)>:
   2be9c:	e3093454 	movw	r3, #37972	; 0x9454
   2bea0:	e3403003 	movt	r3, #3
   2bea4:	e5932000 	ldr	r2, [r3]
   2bea8:	e1520000 	cmp	r2, r0
   2beac:	80833100 	addhi	r3, r3, r0, lsl #2
   2beb0:	85930004 	ldrhi	r0, [r3, #4]
   2beb4:	93a00000 	movls	r0, #0
   2beb8:	e12fff1e 	bx	lr

0002bebc <operator new(unsigned int, int)>:
   2bebc:	e3510000 	cmp	r1, #0
   2bec0:	0a000001 	beq	2becc <operator new(unsigned int, int)+0x10>
   2bec4:	e3510002 	cmp	r1, #2
   2bec8:	1a000005 	bne	2bee4 <operator new(unsigned int, int)+0x28>
   2becc:	e3093470 	movw	r3, #38000	; 0x9470
   2bed0:	e3403003 	movt	r3, #3
   2bed4:	e1a01000 	mov	r1, r0
   2bed8:	e5930000 	ldr	r0, [r3]
   2bedc:	e280000c 	add	r0, r0, #12
   2bee0:	ea000036 	b	2bfc0 <CHeapAllocator::Allocate(unsigned int)>
   2bee4:	e3a00000 	mov	r0, #0
   2bee8:	e12fff1e 	bx	lr

0002beec <operator new[](unsigned int, int)>:
   2beec:	eafffff2 	b	2bebc <operator new(unsigned int, int)>

0002bef0 <operator new(unsigned int)>:
   2bef0:	e3093470 	movw	r3, #38000	; 0x9470
   2bef4:	e3403003 	movt	r3, #3
   2bef8:	e1a01000 	mov	r1, r0
   2befc:	e5930000 	ldr	r0, [r3]
   2bf00:	e280000c 	add	r0, r0, #12
   2bf04:	ea00002d 	b	2bfc0 <CHeapAllocator::Allocate(unsigned int)>

0002bf08 <operator new[](unsigned int)>:
   2bf08:	eafffff8 	b	2bef0 <operator new(unsigned int)>

0002bf0c <operator delete(void*)>:
   2bf0c:	e3093470 	movw	r3, #38000	; 0x9470
   2bf10:	e3403003 	movt	r3, #3
   2bf14:	e1a01000 	mov	r1, r0
   2bf18:	e5930000 	ldr	r0, [r3]
   2bf1c:	e280000c 	add	r0, r0, #12
   2bf20:	ea000092 	b	2c170 <CHeapAllocator::Free(void*)>

0002bf24 <operator delete[](void*)>:
   2bf24:	eafffff8 	b	2bf0c <operator delete(void*)>

0002bf28 <operator delete(void*, unsigned int)>:
   2bf28:	e3093470 	movw	r3, #38000	; 0x9470
   2bf2c:	e3403003 	movt	r3, #3
   2bf30:	e1a01000 	mov	r1, r0
   2bf34:	e5930000 	ldr	r0, [r3]
   2bf38:	e280000c 	add	r0, r0, #12
   2bf3c:	ea00008b 	b	2c170 <CHeapAllocator::Free(void*)>

0002bf40 <operator delete[](void*, unsigned int)>:
   2bf40:	eafffff8 	b	2bf28 <operator delete(void*, unsigned int)>

0002bf44 <CHeapAllocator::CHeapAllocator(char const*)>:
   2bf44:	e92d4010 	push	{r4, lr}
   2bf48:	e1a04000 	mov	r4, r0
   2bf4c:	e3a03000 	mov	r3, #0
   2bf50:	e3a0c001 	mov	ip, #1
   2bf54:	e3a020a8 	mov	r2, #168	; 0xa8
   2bf58:	e5841000 	str	r1, [r4]
   2bf5c:	e2800010 	add	r0, r0, #16
   2bf60:	e1a01003 	mov	r1, r3
   2bf64:	e5843004 	str	r3, [r4, #4]
   2bf68:	e5843008 	str	r3, [r4, #8]
   2bf6c:	e584300c 	str	r3, [r4, #12]
   2bf70:	e584c0b8 	str	ip, [r4, #184]	; 0xb8
   2bf74:	ebfffd2b 	bl	2b428 <memset>
   2bf78:	e59f3020 	ldr	r3, [pc, #32]	; 2bfa0 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   2bf7c:	e1a02004 	mov	r2, r4
   2bf80:	e283001c 	add	r0, r3, #28
   2bf84:	e5b31004 	ldr	r1, [r3, #4]!
   2bf88:	e2822008 	add	r2, r2, #8
   2bf8c:	e5821008 	str	r1, [r2, #8]
   2bf90:	e1530000 	cmp	r3, r0
   2bf94:	1afffffa 	bne	2bf84 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   2bf98:	e1a00004 	mov	r0, r4
   2bf9c:	e8bd8010 	pop	{r4, pc}
   2bfa0:	00039330 	.word	0x00039330

0002bfa4 <CHeapAllocator::~CHeapAllocator()>:
   2bfa4:	e12fff1e 	bx	lr

0002bfa8 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   2bfa8:	e0812002 	add	r2, r1, r2
   2bfac:	e980000e 	stmib	r0, {r1, r2, r3}
   2bfb0:	e12fff1e 	bx	lr

0002bfb4 <CHeapAllocator::GetFreeSpace() const>:
   2bfb4:	e9900005 	ldmib	r0, {r0, r2}
   2bfb8:	e0420000 	sub	r0, r2, r0
   2bfbc:	e12fff1e 	bx	lr

0002bfc0 <CHeapAllocator::Allocate(unsigned int)>:
   2bfc0:	e5903004 	ldr	r3, [r0, #4]
   2bfc4:	e3530000 	cmp	r3, #0
   2bfc8:	0a000066 	beq	2c168 <CHeapAllocator::Allocate(unsigned int)+0x1a8>
   2bfcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2bfd0:	e1a05000 	mov	r5, r0
   2bfd4:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   2bfd8:	e1a04001 	mov	r4, r1
   2bfdc:	e3500000 	cmp	r0, #0
   2bfe0:	1a000048 	bne	2c108 <CHeapAllocator::Allocate(unsigned int)+0x148>
   2bfe4:	e5953010 	ldr	r3, [r5, #16]
   2bfe8:	e2852010 	add	r2, r5, #16
   2bfec:	e3530000 	cmp	r3, #0
   2bff0:	0a000007 	beq	2c014 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2bff4:	e1540003 	cmp	r4, r3
   2bff8:	8a000002 	bhi	2c008 <CHeapAllocator::Allocate(unsigned int)+0x48>
   2bffc:	ea000025 	b	2c098 <CHeapAllocator::Allocate(unsigned int)+0xd8>
   2c000:	e1530004 	cmp	r3, r4
   2c004:	2a000023 	bcs	2c098 <CHeapAllocator::Allocate(unsigned int)+0xd8>
   2c008:	e5b23008 	ldr	r3, [r2, #8]!
   2c00c:	e3530000 	cmp	r3, #0
   2c010:	1afffffa 	bne	2c000 <CHeapAllocator::Allocate(unsigned int)+0x40>
   2c014:	e5956004 	ldr	r6, [r5, #4]
   2c018:	e284301f 	add	r3, r4, #31
   2c01c:	e3c3300f 	bic	r3, r3, #15
   2c020:	e595700c 	ldr	r7, [r5, #12]
   2c024:	e0863003 	add	r3, r6, r3
   2c028:	e1560003 	cmp	r6, r3
   2c02c:	3a000006 	bcc	2c04c <CHeapAllocator::Allocate(unsigned int)+0x8c>
   2c030:	e3570000 	cmp	r7, #0
   2c034:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2c038:	1a000037 	bne	2c11c <CHeapAllocator::Allocate(unsigned int)+0x15c>
   2c03c:	e3530000 	cmp	r3, #0
   2c040:	1a000032 	bne	2c110 <CHeapAllocator::Allocate(unsigned int)+0x150>
   2c044:	e3a00000 	mov	r0, #0
   2c048:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c04c:	e5952008 	ldr	r2, [r5, #8]
   2c050:	e0422007 	sub	r2, r2, r7
   2c054:	e1530002 	cmp	r3, r2
   2c058:	8afffff4 	bhi	2c030 <CHeapAllocator::Allocate(unsigned int)+0x70>
   2c05c:	e5853004 	str	r3, [r5, #4]
   2c060:	e3a02043 	mov	r2, #67	; 0x43
   2c064:	e3a0304d 	mov	r3, #77	; 0x4d
   2c068:	e5c62000 	strb	r2, [r6]
   2c06c:	e5c63001 	strb	r3, [r6, #1]
   2c070:	e3a0204c 	mov	r2, #76	; 0x4c
   2c074:	e3a03042 	mov	r3, #66	; 0x42
   2c078:	e5864004 	str	r4, [r6, #4]
   2c07c:	e5c62002 	strb	r2, [r6, #2]
   2c080:	e5c63003 	strb	r3, [r6, #3]
   2c084:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2c088:	e3530000 	cmp	r3, #0
   2c08c:	0a00000f 	beq	2c0d0 <CHeapAllocator::Allocate(unsigned int)+0x110>
   2c090:	eb00031a 	bl	2cd00 <LeaveCritical>
   2c094:	ea00000d 	b	2c0d0 <CHeapAllocator::Allocate(unsigned int)+0x110>
   2c098:	e5926004 	ldr	r6, [r2, #4]
   2c09c:	e3560000 	cmp	r6, #0
   2c0a0:	01a04003 	moveq	r4, r3
   2c0a4:	0affffda 	beq	2c014 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2c0a8:	e5961000 	ldr	r1, [r6]
   2c0ac:	e3043d43 	movw	r3, #19779	; 0x4d43
   2c0b0:	e344324c 	movt	r3, #16972	; 0x424c
   2c0b4:	e1510003 	cmp	r1, r3
   2c0b8:	05963008 	ldreq	r3, [r6, #8]
   2c0bc:	05823004 	streq	r3, [r2, #4]
   2c0c0:	1a000022 	bne	2c150 <CHeapAllocator::Allocate(unsigned int)+0x190>
   2c0c4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2c0c8:	e3530000 	cmp	r3, #0
   2c0cc:	1affffef 	bne	2c090 <CHeapAllocator::Allocate(unsigned int)+0xd0>
   2c0d0:	e2860010 	add	r0, r6, #16
   2c0d4:	e3a03000 	mov	r3, #0
   2c0d8:	e310000f 	tst	r0, #15
   2c0dc:	e5c63008 	strb	r3, [r6, #8]
   2c0e0:	e5c63009 	strb	r3, [r6, #9]
   2c0e4:	e5c6300a 	strb	r3, [r6, #10]
   2c0e8:	e5c6300b 	strb	r3, [r6, #11]
   2c0ec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2c0f0:	e307151c 	movw	r1, #29980	; 0x751c
   2c0f4:	e3401003 	movt	r1, #3
   2c0f8:	e307056c 	movw	r0, #30060	; 0x756c
   2c0fc:	e3400003 	movt	r0, #3
   2c100:	e3a0208e 	mov	r2, #142	; 0x8e
   2c104:	ebffe39a 	bl	24f74 <assertion_failed>
   2c108:	eb0002cf 	bl	2cc4c <EnterCritical>
   2c10c:	eaffffb4 	b	2bfe4 <CHeapAllocator::Allocate(unsigned int)+0x24>
   2c110:	eb0002fa 	bl	2cd00 <LeaveCritical>
   2c114:	e1a00007 	mov	r0, r7
   2c118:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c11c:	e3530000 	cmp	r3, #0
   2c120:	e3a03000 	mov	r3, #0
   2c124:	e585300c 	str	r3, [r5, #12]
   2c128:	0a000000 	beq	2c130 <CHeapAllocator::Allocate(unsigned int)+0x170>
   2c12c:	eb0002f3 	bl	2cd00 <LeaveCritical>
   2c130:	ebffe934 	bl	26608 <CLogger::Get()>
   2c134:	e5951000 	ldr	r1, [r5]
   2c138:	e3a02000 	mov	r2, #0
   2c13c:	e307355c 	movw	r3, #30044	; 0x755c
   2c140:	e3403003 	movt	r3, #3
   2c144:	ebffe870 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2c148:	e3a00000 	mov	r0, #0
   2c14c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c150:	e307151c 	movw	r1, #29980	; 0x751c
   2c154:	e3401003 	movt	r1, #3
   2c158:	e3070530 	movw	r0, #30000	; 0x7530
   2c15c:	e3400003 	movt	r0, #3
   2c160:	e3a0205e 	mov	r2, #94	; 0x5e
   2c164:	ebffe382 	bl	24f74 <assertion_failed>
   2c168:	e3a00000 	mov	r0, #0
   2c16c:	e12fff1e 	bx	lr

0002c170 <CHeapAllocator::Free(void*)>:
   2c170:	e92d4070 	push	{r4, r5, r6, lr}
   2c174:	e2515000 	subs	r5, r1, #0
   2c178:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c17c:	e5352010 	ldr	r2, [r5, #-16]!
   2c180:	e3043d43 	movw	r3, #19779	; 0x4d43
   2c184:	e344324c 	movt	r3, #16972	; 0x424c
   2c188:	e1a06000 	mov	r6, r0
   2c18c:	e1520003 	cmp	r2, r3
   2c190:	1a000018 	bne	2c1f8 <CHeapAllocator::Free(void*)+0x88>
   2c194:	e5903010 	ldr	r3, [r0, #16]
   2c198:	e2804010 	add	r4, r0, #16
   2c19c:	e3530000 	cmp	r3, #0
   2c1a0:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c1a4:	e5952004 	ldr	r2, [r5, #4]
   2c1a8:	e1530002 	cmp	r3, r2
   2c1ac:	0a000004 	beq	2c1c4 <CHeapAllocator::Free(void*)+0x54>
   2c1b0:	e5b43008 	ldr	r3, [r4, #8]!
   2c1b4:	e3530000 	cmp	r3, #0
   2c1b8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c1bc:	e1520003 	cmp	r2, r3
   2c1c0:	1afffffa 	bne	2c1b0 <CHeapAllocator::Free(void*)+0x40>
   2c1c4:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   2c1c8:	e3500000 	cmp	r0, #0
   2c1cc:	1a000007 	bne	2c1f0 <CHeapAllocator::Free(void*)+0x80>
   2c1d0:	e5943004 	ldr	r3, [r4, #4]
   2c1d4:	e5853008 	str	r3, [r5, #8]
   2c1d8:	e5845004 	str	r5, [r4, #4]
   2c1dc:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2c1e0:	e3530000 	cmp	r3, #0
   2c1e4:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c1e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c1ec:	ea0002c3 	b	2cd00 <LeaveCritical>
   2c1f0:	eb000295 	bl	2cc4c <EnterCritical>
   2c1f4:	eafffff5 	b	2c1d0 <CHeapAllocator::Free(void*)+0x60>
   2c1f8:	e307151c 	movw	r1, #29980	; 0x751c
   2c1fc:	e3401003 	movt	r1, #3
   2c200:	e3070530 	movw	r0, #30000	; 0x7530
   2c204:	e3400003 	movt	r0, #3
   2c208:	e3a020bf 	mov	r2, #191	; 0xbf
   2c20c:	ebffe358 	bl	24f74 <assertion_failed>

0002c210 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   2c210:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2c214:	e2515000 	subs	r5, r1, #0
   2c218:	e24dd00c 	sub	sp, sp, #12
   2c21c:	0a00001c 	beq	2c294 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x84>
   2c220:	e3520000 	cmp	r2, #0
   2c224:	0a000024 	beq	2c2bc <CHeapAllocator::ReAllocate(void*, unsigned int)+0xac>
   2c228:	e1a04005 	mov	r4, r5
   2c22c:	e3043d43 	movw	r3, #19779	; 0x4d43
   2c230:	e344324c 	movt	r3, #16972	; 0x424c
   2c234:	e5341010 	ldr	r1, [r4, #-16]!
   2c238:	e1510003 	cmp	r1, r3
   2c23c:	1a000018 	bne	2c2a4 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x94>
   2c240:	e5943004 	ldr	r3, [r4, #4]
   2c244:	e1530002 	cmp	r3, r2
   2c248:	3a000002 	bcc	2c258 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x48>
   2c24c:	e1a00005 	mov	r0, r5
   2c250:	e28dd00c 	add	sp, sp, #12
   2c254:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c258:	e1a01002 	mov	r1, r2
   2c25c:	e1a06000 	mov	r6, r0
   2c260:	ebffff56 	bl	2bfc0 <CHeapAllocator::Allocate(unsigned int)>
   2c264:	e2507000 	subs	r7, r0, #0
   2c268:	0a000018 	beq	2c2d0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc0>
   2c26c:	e5942004 	ldr	r2, [r4, #4]
   2c270:	e1a01005 	mov	r1, r5
   2c274:	ebfffe13 	bl	2bac8 <memcpy>
   2c278:	e1a01005 	mov	r1, r5
   2c27c:	e1a00006 	mov	r0, r6
   2c280:	e1a05007 	mov	r5, r7
   2c284:	ebffffb9 	bl	2c170 <CHeapAllocator::Free(void*)>
   2c288:	e1a00005 	mov	r0, r5
   2c28c:	e28dd00c 	add	sp, sp, #12
   2c290:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c294:	e1a01002 	mov	r1, r2
   2c298:	e28dd00c 	add	sp, sp, #12
   2c29c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2c2a0:	eaffff46 	b	2bfc0 <CHeapAllocator::Allocate(unsigned int)>
   2c2a4:	e307151c 	movw	r1, #29980	; 0x751c
   2c2a8:	e3401003 	movt	r1, #3
   2c2ac:	e3070530 	movw	r0, #30000	; 0x7530
   2c2b0:	e3400003 	movt	r0, #3
   2c2b4:	e3a020a3 	mov	r2, #163	; 0xa3
   2c2b8:	ebffe32d 	bl	24f74 <assertion_failed>
   2c2bc:	e58d2004 	str	r2, [sp, #4]
   2c2c0:	ebffffaa 	bl	2c170 <CHeapAllocator::Free(void*)>
   2c2c4:	e59d2004 	ldr	r2, [sp, #4]
   2c2c8:	e1a05002 	mov	r5, r2
   2c2cc:	eaffffde 	b	2c24c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x3c>
   2c2d0:	e1a05007 	mov	r5, r7
   2c2d4:	eaffffdc 	b	2c24c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x3c>

0002c2d8 <InvalidateDataCacheL1Only>:
   2c2d8:	e92d0070 	push	{r4, r5, r6}
   2c2dc:	e3a00000 	mov	r0, #0
   2c2e0:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   2c2e4:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   2c2e8:	e3071fff 	movw	r1, #32767	; 0x7fff
   2c2ec:	e00126a0 	and	r2, r1, r0, lsr #13
   2c2f0:	e30013ff 	movw	r1, #1023	; 0x3ff
   2c2f4:	e00131a0 	and	r3, r1, r0, lsr #3
   2c2f8:	e2822001 	add	r2, r2, #1
   2c2fc:	e2000007 	and	r0, r0, #7
   2c300:	e2800004 	add	r0, r0, #4
   2c304:	e16f1f13 	clz	r1, r3
   2c308:	e2834001 	add	r4, r3, #1
   2c30c:	e2422001 	sub	r2, r2, #1
   2c310:	e1a03004 	mov	r3, r4
   2c314:	e2533001 	subs	r3, r3, #1
   2c318:	e1a05113 	lsl	r5, r3, r1
   2c31c:	e1a06012 	lsl	r6, r2, r0
   2c320:	e1855006 	orr	r5, r5, r6
   2c324:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   2c328:	cafffff9 	bgt	2c314 <InvalidateDataCacheL1Only+0x3c>
   2c32c:	e3520000 	cmp	r2, #0
   2c330:	cafffff5 	bgt	2c30c <InvalidateDataCacheL1Only+0x34>
   2c334:	f57ff04e 	dsb	st
   2c338:	f57ff06f 	isb	sy
   2c33c:	e8bd0070 	pop	{r4, r5, r6}
   2c340:	e12fff1e 	bx	lr

0002c344 <InvalidateDataCache>:
   2c344:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   2c348:	f57ff05f 	dmb	sy
   2c34c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   2c350:	e1a03ba0 	lsr	r3, r0, #23
   2c354:	e213300e 	ands	r3, r3, #14
   2c358:	0a00001d 	beq	2c3d4 <InvalidateDataCache+0x90>
   2c35c:	e3a0a000 	mov	sl, #0
   2c360:	e08a20aa 	add	r2, sl, sl, lsr #1
   2c364:	e1a01230 	lsr	r1, r0, r2
   2c368:	e2011007 	and	r1, r1, #7
   2c36c:	e3510002 	cmp	r1, #2
   2c370:	ba000014 	blt	2c3c8 <InvalidateDataCache+0x84>
   2c374:	e10f9000 	mrs	r9, CPSR
   2c378:	f10c0080 	cpsid	i
   2c37c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   2c380:	f57ff06f 	isb	sy
   2c384:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   2c388:	e121f009 	msr	CPSR_c, r9
   2c38c:	e2012007 	and	r2, r1, #7
   2c390:	e2822004 	add	r2, r2, #4
   2c394:	e30043ff 	movw	r4, #1023	; 0x3ff
   2c398:	e01441a1 	ands	r4, r4, r1, lsr #3
   2c39c:	e16f5f14 	clz	r5, r4
   2c3a0:	e3077fff 	movw	r7, #32767	; 0x7fff
   2c3a4:	e01776a1 	ands	r7, r7, r1, lsr #13
   2c3a8:	e1a09007 	mov	r9, r7
   2c3ac:	e18ab514 	orr	fp, sl, r4, lsl r5
   2c3b0:	e18bb219 	orr	fp, fp, r9, lsl r2
   2c3b4:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   2c3b8:	e2599001 	subs	r9, r9, #1
   2c3bc:	aafffffa 	bge	2c3ac <InvalidateDataCache+0x68>
   2c3c0:	e2544001 	subs	r4, r4, #1
   2c3c4:	aafffff7 	bge	2c3a8 <InvalidateDataCache+0x64>
   2c3c8:	e28aa002 	add	sl, sl, #2
   2c3cc:	e153000a 	cmp	r3, sl
   2c3d0:	caffffe2 	bgt	2c360 <InvalidateDataCache+0x1c>
   2c3d4:	e3a0a000 	mov	sl, #0
   2c3d8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   2c3dc:	f57ff04e 	dsb	st
   2c3e0:	f57ff06f 	isb	sy
   2c3e4:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   2c3e8:	e12fff1e 	bx	lr

0002c3ec <CleanDataCache>:
   2c3ec:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   2c3f0:	f57ff05f 	dmb	sy
   2c3f4:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   2c3f8:	e1a03ba0 	lsr	r3, r0, #23
   2c3fc:	e213300e 	ands	r3, r3, #14
   2c400:	0a00001d 	beq	2c47c <CleanDataCache+0x90>
   2c404:	e3a0a000 	mov	sl, #0
   2c408:	e08a20aa 	add	r2, sl, sl, lsr #1
   2c40c:	e1a01230 	lsr	r1, r0, r2
   2c410:	e2011007 	and	r1, r1, #7
   2c414:	e3510002 	cmp	r1, #2
   2c418:	ba000014 	blt	2c470 <CleanDataCache+0x84>
   2c41c:	e10f9000 	mrs	r9, CPSR
   2c420:	f10c0080 	cpsid	i
   2c424:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   2c428:	f57ff06f 	isb	sy
   2c42c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   2c430:	e121f009 	msr	CPSR_c, r9
   2c434:	e2012007 	and	r2, r1, #7
   2c438:	e2822004 	add	r2, r2, #4
   2c43c:	e30043ff 	movw	r4, #1023	; 0x3ff
   2c440:	e01441a1 	ands	r4, r4, r1, lsr #3
   2c444:	e16f5f14 	clz	r5, r4
   2c448:	e3077fff 	movw	r7, #32767	; 0x7fff
   2c44c:	e01776a1 	ands	r7, r7, r1, lsr #13
   2c450:	e1a09007 	mov	r9, r7
   2c454:	e18ab514 	orr	fp, sl, r4, lsl r5
   2c458:	e18bb219 	orr	fp, fp, r9, lsl r2
   2c45c:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   2c460:	e2599001 	subs	r9, r9, #1
   2c464:	aafffffa 	bge	2c454 <CleanDataCache+0x68>
   2c468:	e2544001 	subs	r4, r4, #1
   2c46c:	aafffff7 	bge	2c450 <CleanDataCache+0x64>
   2c470:	e28aa002 	add	sl, sl, #2
   2c474:	e153000a 	cmp	r3, sl
   2c478:	caffffe2 	bgt	2c408 <CleanDataCache+0x1c>
   2c47c:	e3a0a000 	mov	sl, #0
   2c480:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   2c484:	f57ff04e 	dsb	st
   2c488:	f57ff06f 	isb	sy
   2c48c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   2c490:	e12fff1e 	bx	lr

0002c494 <CleanAndInvalidateDataCacheRange>:
   2c494:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   2c498:	e1a03823 	lsr	r3, r3, #16
   2c49c:	e203300f 	and	r3, r3, #15
   2c4a0:	e3a02004 	mov	r2, #4
   2c4a4:	e1a02312 	lsl	r2, r2, r3
   2c4a8:	e0801001 	add	r1, r0, r1
   2c4ac:	e2423001 	sub	r3, r2, #1
   2c4b0:	e1c00003 	bic	r0, r0, r3
   2c4b4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2c4b8:	e0800002 	add	r0, r0, r2
   2c4bc:	e1500001 	cmp	r0, r1
   2c4c0:	3afffffb 	bcc	2c4b4 <CleanAndInvalidateDataCacheRange+0x20>
   2c4c4:	f57ff04e 	dsb	st
   2c4c8:	e12fff1e 	bx	lr

0002c4cc <CExceptionHandler::Get() [clone .part.1]>:
   2c4cc:	e30715a0 	movw	r1, #30112	; 0x75a0
   2c4d0:	e3401003 	movt	r1, #3
   2c4d4:	e3040ffc 	movw	r0, #20476	; 0x4ffc
   2c4d8:	e3400003 	movt	r0, #3
   2c4dc:	e92d4010 	push	{r4, lr}
   2c4e0:	e3a02087 	mov	r2, #135	; 0x87
   2c4e4:	ebffe2a2 	bl	24f74 <assertion_failed>

0002c4e8 <CExceptionHandler::CExceptionHandler()>:
   2c4e8:	e309c46c 	movw	ip, #37996	; 0x946c
   2c4ec:	e340c003 	movt	ip, #3
   2c4f0:	e92d4010 	push	{r4, lr}
   2c4f4:	e1a04000 	mov	r4, r0
   2c4f8:	e59c0000 	ldr	r0, [ip]
   2c4fc:	e3500000 	cmp	r0, #0
   2c500:	1a000012 	bne	2c550 <CExceptionHandler::CExceptionHandler()+0x68>
   2c504:	e59f105c 	ldr	r1, [pc, #92]	; 2c568 <CExceptionHandler::CExceptionHandler()+0x80>
   2c508:	e59f205c 	ldr	r2, [pc, #92]	; 2c56c <CExceptionHandler::CExceptionHandler()+0x84>
   2c50c:	e59f305c 	ldr	r3, [pc, #92]	; 2c570 <CExceptionHandler::CExceptionHandler()+0x88>
   2c510:	e1a01141 	asr	r1, r1, #2
   2c514:	e58c4000 	str	r4, [ip]
   2c518:	e1a02142 	asr	r2, r2, #2
   2c51c:	e2411002 	sub	r1, r1, #2
   2c520:	e1a03143 	asr	r3, r3, #2
   2c524:	e2422002 	sub	r2, r2, #2
   2c528:	e2433002 	sub	r3, r3, #2
   2c52c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   2c530:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2c534:	e5801004 	str	r1, [r0, #4]
   2c538:	e580200c 	str	r2, [r0, #12]
   2c53c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2c540:	e5803010 	str	r3, [r0, #16]
   2c544:	eb000202 	bl	2cd54 <SyncDataAndInstructionCache>
   2c548:	e1a00004 	mov	r0, r4
   2c54c:	e8bd8010 	pop	{r4, pc}
   2c550:	e30715a0 	movw	r1, #30112	; 0x75a0
   2c554:	e3401003 	movt	r1, #3
   2c558:	e3040fc4 	movw	r0, #20420	; 0x4fc4
   2c55c:	e3400003 	movt	r0, #3
   2c560:	e3a02030 	mov	r2, #48	; 0x30
   2c564:	ebffe282 	bl	24f74 <assertion_failed>
   2c568:	0002c82c 	.word	0x0002c82c
   2c56c:	0002c784 	.word	0x0002c784
   2c570:	0002c7d0 	.word	0x0002c7d0

0002c574 <CExceptionHandler::~CExceptionHandler()>:
   2c574:	e309346c 	movw	r3, #37996	; 0x946c
   2c578:	e3403003 	movt	r3, #3
   2c57c:	e3a02000 	mov	r2, #0
   2c580:	e5832000 	str	r2, [r3]
   2c584:	e12fff1e 	bx	lr

0002c588 <CExceptionHandler::Throw(unsigned int)>:
   2c588:	e92d4010 	push	{r4, lr}
   2c58c:	e1a04001 	mov	r4, r1
   2c590:	e24dd008 	sub	sp, sp, #8
   2c594:	ebffe81b 	bl	26608 <CLogger::Get()>
   2c598:	e3092350 	movw	r2, #37712	; 0x9350
   2c59c:	e3402003 	movt	r2, #3
   2c5a0:	e30735b8 	movw	r3, #30136	; 0x75b8
   2c5a4:	e3403003 	movt	r3, #3
   2c5a8:	e3071598 	movw	r1, #30104	; 0x7598
   2c5ac:	e3401003 	movt	r1, #3
   2c5b0:	e792c104 	ldr	ip, [r2, r4, lsl #2]
   2c5b4:	e3a02000 	mov	r2, #0
   2c5b8:	e58dc000 	str	ip, [sp]
   2c5bc:	ebffe752 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2c5c0:	e28dd008 	add	sp, sp, #8
   2c5c4:	e8bd8010 	pop	{r4, pc}

0002c5c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2c5c8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2c5cc:	e3510002 	cmp	r1, #2
   2c5d0:	e1a05001 	mov	r5, r1
   2c5d4:	e24dd024 	sub	sp, sp, #36	; 0x24
   2c5d8:	e1a04002 	mov	r4, r2
   2c5dc:	0a000030 	beq	2c6a4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2c5e0:	e3510003 	cmp	r1, #3
   2c5e4:	0a000024 	beq	2c67c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   2c5e8:	e3a07000 	mov	r7, #0
   2c5ec:	e1a08007 	mov	r8, r7
   2c5f0:	e3540000 	cmp	r4, #0
   2c5f4:	0a000024 	beq	2c68c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   2c5f8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2c5fc:	e5949048 	ldr	r9, [r4, #72]	; 0x48
   2c600:	e203301f 	and	r3, r3, #31
   2c604:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   2c608:	e3530011 	cmp	r3, #17
   2c60c:	0a000027 	beq	2c6b0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2c610:	e3530012 	cmp	r3, #18
   2c614:	08940240 	ldmeq	r4, {r6, r9}
   2c618:	e1a00006 	mov	r0, r6
   2c61c:	e3071598 	movw	r1, #30104	; 0x7598
   2c620:	e3401003 	movt	r1, #3
   2c624:	ebffe3e1 	bl	255b0 <debug_stacktrace(unsigned int const*, char const*)>
   2c628:	ebffe7f6 	bl	26608 <CLogger::Get()>
   2c62c:	e3093350 	movw	r3, #37712	; 0x9350
   2c630:	e3403003 	movt	r3, #3
   2c634:	e594e04c 	ldr	lr, [r4, #76]	; 0x4c
   2c638:	e3a02000 	mov	r2, #0
   2c63c:	e594c050 	ldr	ip, [r4, #80]	; 0x50
   2c640:	e3071598 	movw	r1, #30104	; 0x7598
   2c644:	e3401003 	movt	r1, #3
   2c648:	e7934105 	ldr	r4, [r3, r5, lsl #2]
   2c64c:	e30735d4 	movw	r3, #30164	; 0x75d4
   2c650:	e3403003 	movt	r3, #3
   2c654:	e58d9014 	str	r9, [sp, #20]
   2c658:	e58d6010 	str	r6, [sp, #16]
   2c65c:	e58d700c 	str	r7, [sp, #12]
   2c660:	e58d8008 	str	r8, [sp, #8]
   2c664:	e58d4000 	str	r4, [sp]
   2c668:	e58de018 	str	lr, [sp, #24]
   2c66c:	e58dc004 	str	ip, [sp, #4]
   2c670:	ebffe725 	bl	2630c <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2c674:	e28dd024 	add	sp, sp, #36	; 0x24
   2c678:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c67c:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   2c680:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   2c684:	e3540000 	cmp	r4, #0
   2c688:	1affffda 	bne	2c5f8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2c68c:	e30715a0 	movw	r1, #30112	; 0x75a0
   2c690:	e3401003 	movt	r1, #3
   2c694:	e30705c8 	movw	r0, #30152	; 0x75c8
   2c698:	e3400003 	movt	r0, #3
   2c69c:	e3a02069 	mov	r2, #105	; 0x69
   2c6a0:	ebffe233 	bl	24f74 <assertion_failed>
   2c6a4:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   2c6a8:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   2c6ac:	eaffffcf 	b	2c5f0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   2c6b0:	e594900c 	ldr	r9, [r4, #12]
   2c6b4:	e5946008 	ldr	r6, [r4, #8]
   2c6b8:	eaffffd6 	b	2c618 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>

0002c6bc <CExceptionHandler::Get()>:
   2c6bc:	e309346c 	movw	r3, #37996	; 0x946c
   2c6c0:	e3403003 	movt	r3, #3
   2c6c4:	e5930000 	ldr	r0, [r3]
   2c6c8:	e3500000 	cmp	r0, #0
   2c6cc:	112fff1e 	bxne	lr
   2c6d0:	e92d4010 	push	{r4, lr}
   2c6d4:	ebffff7c 	bl	2c4cc <CExceptionHandler::Get() [clone .part.1]>

0002c6d8 <ExceptionHandler>:
   2c6d8:	e92d4070 	push	{r4, r5, r6, lr}
   2c6dc:	e1a04000 	mov	r4, r0
   2c6e0:	e1a05001 	mov	r5, r1
   2c6e4:	eb0002a5 	bl	2d180 <CInterruptSystem::DisableFIQ()>
   2c6e8:	f1080040 	cpsie	f
   2c6ec:	e309346c 	movw	r3, #37996	; 0x946c
   2c6f0:	e3403003 	movt	r3, #3
   2c6f4:	e5930000 	ldr	r0, [r3]
   2c6f8:	e3500000 	cmp	r0, #0
   2c6fc:	0a000003 	beq	2c710 <ExceptionHandler+0x38>
   2c700:	e1a02005 	mov	r2, r5
   2c704:	e1a01004 	mov	r1, r4
   2c708:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c70c:	eaffffad 	b	2c5c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   2c710:	ebffff6d 	bl	2c4cc <CExceptionHandler::Get() [clone .part.1]>

0002c714 <raise>:
   2c714:	e309346c 	movw	r3, #37996	; 0x946c
   2c718:	e3403003 	movt	r3, #3
   2c71c:	e92d4010 	push	{r4, lr}
   2c720:	e5930000 	ldr	r0, [r3]
   2c724:	e3500000 	cmp	r0, #0
   2c728:	0a000003 	beq	2c73c <raise+0x28>
   2c72c:	e3a01004 	mov	r1, #4
   2c730:	ebffff94 	bl	2c588 <CExceptionHandler::Throw(unsigned int)>
   2c734:	e3a00000 	mov	r0, #0
   2c738:	e8bd8010 	pop	{r4, pc}
   2c73c:	ebffff62 	bl	2c4cc <CExceptionHandler::Get() [clone .part.1]>

0002c740 <UndefinedInstructionInternal>:
   2c740:	e24dd004 	sub	sp, sp, #4
   2c744:	e24ee004 	sub	lr, lr, #4
   2c748:	e92d4000 	stmfd	sp!, {lr}
   2c74c:	e14fe000 	mrs	lr, SPSR
   2c750:	e92d4000 	stmfd	sp!, {lr}
   2c754:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2c758:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2c75c:	e1a0100d 	mov	r1, sp
   2c760:	f1020012 	cps	#18
   2c764:	e1a0200d 	mov	r2, sp
   2c768:	e1a0300e 	mov	r3, lr
   2c76c:	f1020011 	cps	#17
   2c770:	e1a0400d 	mov	r4, sp
   2c774:	e1a0500e 	mov	r5, lr
   2c778:	f102001f 	cps	#31
   2c77c:	e1a0d001 	mov	sp, r1
   2c780:	e92d003c 	push	{r2, r3, r4, r5}
   2c784:	e1a0100d 	mov	r1, sp
   2c788:	e3a00001 	mov	r0, #1
   2c78c:	eaffffd1 	b	2c6d8 <ExceptionHandler>

0002c790 <PrefetchAbortStub>:
   2c790:	e24dd004 	sub	sp, sp, #4
   2c794:	e24ee004 	sub	lr, lr, #4
   2c798:	e92d4000 	stmfd	sp!, {lr}
   2c79c:	e14fe000 	mrs	lr, SPSR
   2c7a0:	e92d4000 	stmfd	sp!, {lr}
   2c7a4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2c7a8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2c7ac:	e1a0100d 	mov	r1, sp
   2c7b0:	f1020012 	cps	#18
   2c7b4:	e1a0200d 	mov	r2, sp
   2c7b8:	e1a0300e 	mov	r3, lr
   2c7bc:	f1020011 	cps	#17
   2c7c0:	e1a0400d 	mov	r4, sp
   2c7c4:	e1a0500e 	mov	r5, lr
   2c7c8:	f102001f 	cps	#31
   2c7cc:	e1a0d001 	mov	sp, r1
   2c7d0:	e92d003c 	push	{r2, r3, r4, r5}
   2c7d4:	e1a0100d 	mov	r1, sp
   2c7d8:	e3a00002 	mov	r0, #2
   2c7dc:	eaffffbd 	b	2c6d8 <ExceptionHandler>

0002c7e0 <DataAbortStub>:
   2c7e0:	e24dd004 	sub	sp, sp, #4
   2c7e4:	e24ee008 	sub	lr, lr, #8
   2c7e8:	e92d4000 	stmfd	sp!, {lr}
   2c7ec:	e14fe000 	mrs	lr, SPSR
   2c7f0:	e92d4000 	stmfd	sp!, {lr}
   2c7f4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2c7f8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2c7fc:	e1a0100d 	mov	r1, sp
   2c800:	f1020012 	cps	#18
   2c804:	e1a0200d 	mov	r2, sp
   2c808:	e1a0300e 	mov	r3, lr
   2c80c:	f1020011 	cps	#17
   2c810:	e1a0400d 	mov	r4, sp
   2c814:	e1a0500e 	mov	r5, lr
   2c818:	f102001f 	cps	#31
   2c81c:	e1a0d001 	mov	sp, r1
   2c820:	e92d003c 	push	{r2, r3, r4, r5}
   2c824:	e1a0100d 	mov	r1, sp
   2c828:	e3a00003 	mov	r0, #3
   2c82c:	eaffffa9 	b	2c6d8 <ExceptionHandler>

0002c830 <UndefinedInstructionStub>:
   2c830:	e92d4001 	push	{r0, lr}
   2c834:	eef80a10 	vmrs	r0, fpexc
   2c838:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2c83c:	0affffbf 	beq	2c740 <UndefinedInstructionInternal>
   2c840:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2c844:	eee80a10 	vmsr	fpexc, r0
   2c848:	e8fd8001 	ldm	sp!, {r0, pc}^

0002c84c <IRQStub>:
   2c84c:	e24ee004 	sub	lr, lr, #4
   2c850:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2c854:	e59f003c 	ldr	r0, [pc, #60]	; 2c898 <FIQStub+0x34>
   2c858:	e580e000 	str	lr, [r0]
   2c85c:	eb0002ac 	bl	2d314 <InterruptHandler>
   2c860:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002c864 <FIQStub>:
   2c864:	e24ee004 	sub	lr, lr, #4
   2c868:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2c86c:	e59f2028 	ldr	r2, [pc, #40]	; 2c89c <FIQStub+0x38>
   2c870:	e5921000 	ldr	r1, [r2]
   2c874:	e3510000 	cmp	r1, #0
   2c878:	0a000002 	beq	2c888 <FIQStub+0x24>
   2c87c:	e5920004 	ldr	r0, [r2, #4]
   2c880:	e12fff31 	blx	r1
   2c884:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2c888:	e59f1010 	ldr	r1, [pc, #16]	; 2c8a0 <FIQStub+0x3c>
   2c88c:	e3a00000 	mov	r0, #0
   2c890:	e5810000 	str	r0, [r1]
   2c894:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2c898:	00039370 	.word	0x00039370
   2c89c:	00039364 	.word	0x00039364
   2c8a0:	3f00b20c 	.word	0x3f00b20c

0002c8a4 <CMemorySystem::CMemorySystem(bool)>:
   2c8a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2c8a8:	e1a04000 	mov	r4, r0
   2c8ac:	e280700c 	add	r7, r0, #12
   2c8b0:	e3a05000 	mov	r5, #0
   2c8b4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2c8b8:	e28060c8 	add	r6, r0, #200	; 0xc8
   2c8bc:	e5c41000 	strb	r1, [r4]
   2c8c0:	e5845004 	str	r5, [r4, #4]
   2c8c4:	e1a00007 	mov	r0, r7
   2c8c8:	e5845008 	str	r5, [r4, #8]
   2c8cc:	e307165c 	movw	r1, #30300	; 0x765c
   2c8d0:	e3401003 	movt	r1, #3
   2c8d4:	ebfffd9a 	bl	2bf44 <CHeapAllocator::CHeapAllocator(char const*)>
   2c8d8:	e1a00006 	mov	r0, r6
   2c8dc:	eb000b68 	bl	2f684 <CPageAllocator::CPageAllocator()>
   2c8e0:	e3093470 	movw	r3, #38000	; 0x9470
   2c8e4:	e3403003 	movt	r3, #3
   2c8e8:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2c8ec:	e5935000 	ldr	r5, [r3]
   2c8f0:	e3550000 	cmp	r5, #0
   2c8f4:	0a000002 	beq	2c904 <CMemorySystem::CMemorySystem(bool)+0x60>
   2c8f8:	e1a00004 	mov	r0, r4
   2c8fc:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2c900:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c904:	e3a01001 	mov	r1, #1
   2c908:	e28d000c 	add	r0, sp, #12
   2c90c:	e5834000 	str	r4, [r3]
   2c910:	ebffe1b8 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2c914:	e3a03014 	mov	r3, #20
   2c918:	e58d5000 	str	r5, [sp]
   2c91c:	e28d000c 	add	r0, sp, #12
   2c920:	e3a01005 	mov	r1, #5
   2c924:	e3401001 	movt	r1, #1
   2c928:	e08d2003 	add	r2, sp, r3
   2c92c:	ebffe1fa 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2c930:	e3500000 	cmp	r0, #0
   2c934:	1a00001d 	bne	2c9b0 <CMemorySystem::CMemorySystem(bool)+0x10c>
   2c938:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   2c93c:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   2c940:	e3a03303 	mov	r3, #201326592	; 0xc000000
   2c944:	e58d0020 	str	r0, [sp, #32]
   2c948:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2c94c:	e5843004 	str	r3, [r4, #4]
   2c950:	e1a00007 	mov	r0, r7
   2c954:	e3a03701 	mov	r3, #262144	; 0x40000
   2c958:	e3a01605 	mov	r1, #5242880	; 0x500000
   2c95c:	ebfffd91 	bl	2bfa8 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   2c960:	e1a01005 	mov	r1, r5
   2c964:	e1a00006 	mov	r0, r6
   2c968:	e3a02501 	mov	r2, #4194304	; 0x400000
   2c96c:	eb000b4c 	bl	2f6a4 <CPageAllocator::Setup(unsigned int, unsigned int)>
   2c970:	e5d43000 	ldrb	r3, [r4]
   2c974:	e3530000 	cmp	r3, #0
   2c978:	0a000007 	beq	2c99c <CMemorySystem::CMemorySystem(bool)+0xf8>
   2c97c:	e3a00004 	mov	r0, #4
   2c980:	ebfffd5a 	bl	2bef0 <operator new(unsigned int)>
   2c984:	e5941004 	ldr	r1, [r4, #4]
   2c988:	e1a05000 	mov	r5, r0
   2c98c:	eb000081 	bl	2cb98 <CPageTable::CPageTable(unsigned int)>
   2c990:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2c994:	e1a00004 	mov	r0, r4
   2c998:	eb000047 	bl	2cabc <CMemorySystem::EnableMMU()>
   2c99c:	e28d000c 	add	r0, sp, #12
   2c9a0:	ebffe19b 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   2c9a4:	e1a00004 	mov	r0, r4
   2c9a8:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2c9ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c9b0:	e59d3020 	ldr	r3, [sp, #32]
   2c9b4:	e3530000 	cmp	r3, #0
   2c9b8:	059d3024 	ldreq	r3, [sp, #36]	; 0x24
   2c9bc:	02435501 	subeq	r5, r3, #4194304	; 0x400000
   2c9c0:	02432609 	subeq	r2, r3, #9437184	; 0x900000
   2c9c4:	0affffe0 	beq	2c94c <CMemorySystem::CMemorySystem(bool)+0xa8>
   2c9c8:	e59f1008 	ldr	r1, [pc, #8]	; 2c9d8 <CMemorySystem::CMemorySystem(bool)+0x134>
   2c9cc:	e3a0204e 	mov	r2, #78	; 0x4e
   2c9d0:	e281000c 	add	r0, r1, #12
   2c9d4:	ebffe166 	bl	24f74 <assertion_failed>
   2c9d8:	00037664 	.word	0x00037664

0002c9dc <CMemorySystem::~CMemorySystem()>:
   2c9dc:	e3093470 	movw	r3, #38000	; 0x9470
   2c9e0:	e3403003 	movt	r3, #3
   2c9e4:	e92d4010 	push	{r4, lr}
   2c9e8:	e1a04000 	mov	r4, r0
   2c9ec:	e5932000 	ldr	r2, [r3]
   2c9f0:	e1500002 	cmp	r0, r2
   2c9f4:	0a000005 	beq	2ca10 <CMemorySystem::~CMemorySystem()+0x34>
   2c9f8:	e28400c8 	add	r0, r4, #200	; 0xc8
   2c9fc:	eb000b27 	bl	2f6a0 <CPageAllocator::~CPageAllocator()>
   2ca00:	e284000c 	add	r0, r4, #12
   2ca04:	ebfffd66 	bl	2bfa4 <CHeapAllocator::~CHeapAllocator()>
   2ca08:	e1a00004 	mov	r0, r4
   2ca0c:	e8bd8010 	pop	{r4, pc}
   2ca10:	e5d02000 	ldrb	r2, [r0]
   2ca14:	e3a01000 	mov	r1, #0
   2ca18:	e5831000 	str	r1, [r3]
   2ca1c:	e1520001 	cmp	r2, r1
   2ca20:	0afffff4 	beq	2c9f8 <CMemorySystem::~CMemorySystem()+0x1c>
   2ca24:	eb000051 	bl	2cb70 <CMemorySystem::Destructor() [clone .part.0]>
   2ca28:	eafffff2 	b	2c9f8 <CMemorySystem::~CMemorySystem()+0x1c>

0002ca2c <CMemorySystem::Destructor()>:
   2ca2c:	e3093470 	movw	r3, #38000	; 0x9470
   2ca30:	e3403003 	movt	r3, #3
   2ca34:	e5932000 	ldr	r2, [r3]
   2ca38:	e1520000 	cmp	r2, r0
   2ca3c:	112fff1e 	bxne	lr
   2ca40:	e5d22000 	ldrb	r2, [r2]
   2ca44:	e3a01000 	mov	r1, #0
   2ca48:	e5831000 	str	r1, [r3]
   2ca4c:	e1520001 	cmp	r2, r1
   2ca50:	012fff1e 	bxeq	lr
   2ca54:	ea000045 	b	2cb70 <CMemorySystem::Destructor() [clone .part.0]>

0002ca58 <CMemorySystem::GetMemSize() const>:
   2ca58:	e3093470 	movw	r3, #38000	; 0x9470
   2ca5c:	e3403003 	movt	r3, #3
   2ca60:	e5933000 	ldr	r3, [r3]
   2ca64:	e3530000 	cmp	r3, #0
   2ca68:	0a000002 	beq	2ca78 <CMemorySystem::GetMemSize() const+0x20>
   2ca6c:	e9930009 	ldmib	r3, {r0, r3}
   2ca70:	e0800003 	add	r0, r0, r3
   2ca74:	e12fff1e 	bx	lr
   2ca78:	e59f100c 	ldr	r1, [pc, #12]	; 2ca8c <CMemorySystem::GetMemSize() const+0x34>
   2ca7c:	e3a020a0 	mov	r2, #160	; 0xa0
   2ca80:	e92d4010 	push	{r4, lr}
   2ca84:	e2810028 	add	r0, r1, #40	; 0x28
   2ca88:	ebffe139 	bl	24f74 <assertion_failed>
   2ca8c:	00037664 	.word	0x00037664

0002ca90 <CMemorySystem::Get()>:
   2ca90:	e3093470 	movw	r3, #38000	; 0x9470
   2ca94:	e3403003 	movt	r3, #3
   2ca98:	e5930000 	ldr	r0, [r3]
   2ca9c:	e3500000 	cmp	r0, #0
   2caa0:	112fff1e 	bxne	lr
   2caa4:	e59f100c 	ldr	r1, [pc, #12]	; 2cab8 <CMemorySystem::Get()+0x28>
   2caa8:	e3a020a6 	mov	r2, #166	; 0xa6
   2caac:	e92d4010 	push	{r4, lr}
   2cab0:	e2810028 	add	r0, r1, #40	; 0x28
   2cab4:	ebffe12e 	bl	24f74 <assertion_failed>
   2cab8:	00037664 	.word	0x00037664

0002cabc <CMemorySystem::EnableMMU()>:
   2cabc:	e5d03000 	ldrb	r3, [r0]
   2cac0:	e92d4010 	push	{r4, lr}
   2cac4:	e3530000 	cmp	r3, #0
   2cac8:	0a000018 	beq	2cb30 <CMemorySystem::EnableMMU()+0x74>
   2cacc:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   2cad0:	e3833040 	orr	r3, r3, #64	; 0x40
   2cad4:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2cad8:	ee104f70 	mrc	15, 0, r4, cr0, cr0, {3}
   2cadc:	e2144001 	ands	r4, r4, #1
   2cae0:	1a000016 	bne	2cb40 <CMemorySystem::EnableMMU()+0x84>
   2cae4:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   2cae8:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   2caec:	e3500000 	cmp	r0, #0
   2caf0:	0a000016 	beq	2cb50 <CMemorySystem::EnableMMU()+0x94>
   2caf4:	eb00004c 	bl	2cc2c <CPageTable::GetBaseAddress() const>
   2caf8:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   2cafc:	e3a03001 	mov	r3, #1
   2cb00:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2cb04:	ebfffe0e 	bl	2c344 <InvalidateDataCache>
   2cb08:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   2cb0c:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2cb10:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   2cb14:	f57ff04f 	dsb	sy
   2cb18:	f57ff06f 	isb	sy
   2cb1c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2cb20:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   2cb24:	e3833005 	orr	r3, r3, #5
   2cb28:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2cb2c:	e8bd8010 	pop	{r4, pc}
   2cb30:	e59f1028 	ldr	r1, [pc, #40]	; 2cb60 <CMemorySystem::EnableMMU()+0xa4>
   2cb34:	e3a020ac 	mov	r2, #172	; 0xac
   2cb38:	e2810038 	add	r0, r1, #56	; 0x38
   2cb3c:	ebffe10c 	bl	24f74 <assertion_failed>
   2cb40:	e59f1018 	ldr	r1, [pc, #24]	; 2cb60 <CMemorySystem::EnableMMU()+0xa4>
   2cb44:	e3a020ba 	mov	r2, #186	; 0xba
   2cb48:	e2810048 	add	r0, r1, #72	; 0x48
   2cb4c:	ebffe108 	bl	24f74 <assertion_failed>
   2cb50:	e59f1008 	ldr	r1, [pc, #8]	; 2cb60 <CMemorySystem::EnableMMU()+0xa4>
   2cb54:	e3a020c0 	mov	r2, #192	; 0xc0
   2cb58:	e2810074 	add	r0, r1, #116	; 0x74
   2cb5c:	ebffe104 	bl	24f74 <assertion_failed>
   2cb60:	00037664 	.word	0x00037664

0002cb64 <CMemorySystem::GetCoherentPage(unsigned int)>:
   2cb64:	e1a00600 	lsl	r0, r0, #12
   2cb68:	e2800501 	add	r0, r0, #4194304	; 0x400000
   2cb6c:	e12fff1e 	bx	lr

0002cb70 <CMemorySystem::Destructor() [clone .part.0]>:
   2cb70:	e92d4010 	push	{r4, lr}
   2cb74:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2cb78:	e3c33005 	bic	r3, r3, #5
   2cb7c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2cb80:	ebfffe19 	bl	2c3ec <CleanDataCache>
   2cb84:	ebfffdee 	bl	2c344 <InvalidateDataCache>
   2cb88:	e3a03000 	mov	r3, #0
   2cb8c:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   2cb90:	f57ff04f 	dsb	sy
   2cb94:	e8bd8010 	pop	{r4, pc}

0002cb98 <CPageTable::CPageTable(unsigned int)>:
   2cb98:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cb9c:	e1a07000 	mov	r7, r0
   2cba0:	e3a009ba 	mov	r0, #3047424	; 0x2e8000
   2cba4:	e30feb70 	movw	lr, #64368	; 0xfb70
   2cba8:	e340e002 	movt	lr, #2
   2cbac:	e3008412 	movw	r8, #1042	; 0x412
   2cbb0:	e3408041 	movt	r8, #65	; 0x41
   2cbb4:	e30f5ffe 	movw	r5, #65534	; 0xfffe
   2cbb8:	e3445003 	movt	r5, #16387	; 0x4003
   2cbbc:	e3009416 	movw	r9, #1046	; 0x416
   2cbc0:	e3409001 	movt	r9, #1
   2cbc4:	e1a02000 	mov	r2, r0
   2cbc8:	e3a03000 	mov	r3, #0
   2cbcc:	e5870000 	str	r0, [r7]
   2cbd0:	e300641e 	movw	r6, #1054	; 0x41e
   2cbd4:	e300440e 	movw	r4, #1038	; 0x40e
   2cbd8:	e15e0003 	cmp	lr, r3
   2cbdc:	8183c004 	orrhi	ip, r3, r4
   2cbe0:	8a000007 	bhi	2cc04 <CPageTable::CPageTable(unsigned int)+0x6c>
   2cbe4:	e1a0c003 	mov	ip, r3
   2cbe8:	e3530501 	cmp	r3, #4194304	; 0x400000
   2cbec:	0a00000b 	beq	2cc20 <CPageTable::CPageTable(unsigned int)+0x88>
   2cbf0:	e1510003 	cmp	r1, r3
   2cbf4:	8183c006 	orrhi	ip, r3, r6
   2cbf8:	8a000001 	bhi	2cc04 <CPageTable::CPageTable(unsigned int)+0x6c>
   2cbfc:	e1530005 	cmp	r3, r5
   2cc00:	9183c009 	orrls	ip, r3, r9
   2cc04:	e482c004 	str	ip, [r2], #4
   2cc08:	e2833601 	add	r3, r3, #1048576	; 0x100000
   2cc0c:	e35209bb 	cmp	r2, #3063808	; 0x2ec000
   2cc10:	1afffff0 	bne	2cbd8 <CPageTable::CPageTable(unsigned int)+0x40>
   2cc14:	ebfffdf4 	bl	2c3ec <CleanDataCache>
   2cc18:	e1a00007 	mov	r0, r7
   2cc1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cc20:	e1a0c008 	mov	ip, r8
   2cc24:	eafffff6 	b	2cc04 <CPageTable::CPageTable(unsigned int)+0x6c>

0002cc28 <CPageTable::~CPageTable()>:
   2cc28:	e12fff1e 	bx	lr

0002cc2c <CPageTable::GetBaseAddress() const>:
   2cc2c:	e5900000 	ldr	r0, [r0]
   2cc30:	e3800059 	orr	r0, r0, #89	; 0x59
   2cc34:	e12fff1e 	bx	lr

0002cc38 <CurrentExecutionLevel>:
   2cc38:	e10f0000 	mrs	r0, CPSR
   2cc3c:	e3100040 	tst	r0, #64	; 0x40
   2cc40:	07e003d0 	ubfxeq	r0, r0, #7, #1
   2cc44:	13a00002 	movne	r0, #2
   2cc48:	e12fff1e 	bx	lr

0002cc4c <EnterCritical>:
   2cc4c:	e2403001 	sub	r3, r0, #1
   2cc50:	e92d4010 	push	{r4, lr}
   2cc54:	e3530001 	cmp	r3, #1
   2cc58:	8a000014 	bhi	2ccb0 <EnterCritical+0x64>
   2cc5c:	e10f1000 	mrs	r1, CPSR
   2cc60:	e3500002 	cmp	r0, #2
   2cc64:	1a000017 	bne	2ccc8 <EnterCritical+0x7c>
   2cc68:	f10c00c0 	cpsid	if
   2cc6c:	e3093474 	movw	r3, #38004	; 0x9474
   2cc70:	e3403003 	movt	r3, #3
   2cc74:	e5932000 	ldr	r2, [r3]
   2cc78:	e3520013 	cmp	r2, #19
   2cc7c:	8a000019 	bhi	2cce8 <EnterCritical+0x9c>
   2cc80:	e5932000 	ldr	r2, [r3]
   2cc84:	e3500001 	cmp	r0, #1
   2cc88:	e2820001 	add	r0, r2, #1
   2cc8c:	e5830000 	str	r0, [r3]
   2cc90:	e0833102 	add	r3, r3, r2, lsl #2
   2cc94:	e5831004 	str	r1, [r3, #4]
   2cc98:	0a000001 	beq	2cca4 <EnterCritical+0x58>
   2cc9c:	f57ff05f 	dmb	sy
   2cca0:	e8bd8010 	pop	{r4, pc}
   2cca4:	f1080040 	cpsie	f
   2cca8:	f57ff05f 	dmb	sy
   2ccac:	e8bd8010 	pop	{r4, pc}
   2ccb0:	e30716ec 	movw	r1, #30444	; 0x76ec
   2ccb4:	e3401003 	movt	r1, #3
   2ccb8:	e30706fc 	movw	r0, #30460	; 0x76fc
   2ccbc:	e3400003 	movt	r0, #3
   2ccc0:	e3a02064 	mov	r2, #100	; 0x64
   2ccc4:	ebffe0aa 	bl	24f74 <assertion_failed>
   2ccc8:	e3110040 	tst	r1, #64	; 0x40
   2cccc:	0affffe5 	beq	2cc68 <EnterCritical+0x1c>
   2ccd0:	e30716ec 	movw	r1, #30444	; 0x76ec
   2ccd4:	e3401003 	movt	r1, #3
   2ccd8:	e3070734 	movw	r0, #30516	; 0x7734
   2ccdc:	e3400003 	movt	r0, #3
   2cce0:	e3a0206a 	mov	r2, #106	; 0x6a
   2cce4:	ebffe0a2 	bl	24f74 <assertion_failed>
   2cce8:	e30716ec 	movw	r1, #30444	; 0x76ec
   2ccec:	e3401003 	movt	r1, #3
   2ccf0:	e3070764 	movw	r0, #30564	; 0x7764
   2ccf4:	e3400003 	movt	r0, #3
   2ccf8:	e3a0206e 	mov	r2, #110	; 0x6e
   2ccfc:	ebffe09c 	bl	24f74 <assertion_failed>

0002cd00 <LeaveCritical>:
   2cd00:	f57ff05f 	dmb	sy
   2cd04:	f10c0040 	cpsid	f
   2cd08:	e3093474 	movw	r3, #38004	; 0x9474
   2cd0c:	e3403003 	movt	r3, #3
   2cd10:	e5932000 	ldr	r2, [r3]
   2cd14:	e3520000 	cmp	r2, #0
   2cd18:	0a000006 	beq	2cd38 <LeaveCritical+0x38>
   2cd1c:	e5932000 	ldr	r2, [r3]
   2cd20:	e2422001 	sub	r2, r2, #1
   2cd24:	e5832000 	str	r2, [r3]
   2cd28:	e0833102 	add	r3, r3, r2, lsl #2
   2cd2c:	e5933004 	ldr	r3, [r3, #4]
   2cd30:	e121f003 	msr	CPSR_c, r3
   2cd34:	e12fff1e 	bx	lr
   2cd38:	e30716ec 	movw	r1, #30444	; 0x76ec
   2cd3c:	e3401003 	movt	r1, #3
   2cd40:	e307078c 	movw	r0, #30604	; 0x778c
   2cd44:	e3400003 	movt	r0, #3
   2cd48:	e92d4010 	push	{r4, lr}
   2cd4c:	e3a0207f 	mov	r2, #127	; 0x7f
   2cd50:	ebffe087 	bl	24f74 <assertion_failed>

0002cd54 <SyncDataAndInstructionCache>:
   2cd54:	e92d4010 	push	{r4, lr}
   2cd58:	ebfffda3 	bl	2c3ec <CleanDataCache>
   2cd5c:	e3a03000 	mov	r3, #0
   2cd60:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2cd64:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2cd68:	f57ff04f 	dsb	sy
   2cd6c:	f57ff06f 	isb	sy
   2cd70:	e8bd8010 	pop	{r4, pc}

0002cd74 <CInterruptSystem::CInterruptSystem()>:
   2cd74:	e2802f53 	add	r2, r0, #332	; 0x14c
   2cd78:	e1a0c000 	mov	ip, r0
   2cd7c:	e2403004 	sub	r3, r0, #4
   2cd80:	e3a01000 	mov	r1, #0
   2cd84:	e1a00002 	mov	r0, r2
   2cd88:	e5a31004 	str	r1, [r3, #4]!
   2cd8c:	e5a21004 	str	r1, [r2, #4]!
   2cd90:	e1530000 	cmp	r3, r0
   2cd94:	1afffffb 	bne	2cd88 <CInterruptSystem::CInterruptSystem()+0x14>
   2cd98:	e30934c8 	movw	r3, #38088	; 0x94c8
   2cd9c:	e3403003 	movt	r3, #3
   2cda0:	e1a0000c 	mov	r0, ip
   2cda4:	e583c000 	str	ip, [r3]
   2cda8:	e12fff1e 	bx	lr

0002cdac <CInterruptSystem::~CInterruptSystem()>:
   2cdac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2cdb0:	f10c0080 	cpsid	i
   2cdb4:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
   2cdb8:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2cdbc:	e3433f00 	movt	r3, #16128	; 0x3f00
   2cdc0:	e30924c8 	movw	r2, #38088	; 0x94c8
   2cdc4:	e3402003 	movt	r2, #3
   2cdc8:	e3a01000 	mov	r1, #0
   2cdcc:	e3e0c000 	mvn	ip, #0
   2cdd0:	e583120c 	str	r1, [r3, #524]	; 0x20c
   2cdd4:	e583c21c 	str	ip, [r3, #540]	; 0x21c
   2cdd8:	e583c220 	str	ip, [r3, #544]	; 0x220
   2cddc:	e583c224 	str	ip, [r3, #548]	; 0x224
   2cde0:	e58e1040 	str	r1, [lr, #64]	; 0x40
   2cde4:	e5821000 	str	r1, [r2]
   2cde8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002cdec <CInterruptSystem::Initialize()>:
   2cdec:	e59f2058 	ldr	r2, [pc, #88]	; 2ce4c <CInterruptSystem::Initialize()+0x60>
   2cdf0:	e59f3058 	ldr	r3, [pc, #88]	; 2ce50 <CInterruptSystem::Initialize()+0x64>
   2cdf4:	e92d4010 	push	{r4, lr}
   2cdf8:	e3a04000 	mov	r4, #0
   2cdfc:	e1a02142 	asr	r2, r2, #2
   2ce00:	e1a03143 	asr	r3, r3, #2
   2ce04:	e2422002 	sub	r2, r2, #2
   2ce08:	e2433002 	sub	r3, r3, #2
   2ce0c:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2ce10:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2ce14:	e1c421f8 	strd	r2, [r4, #24]
   2ce18:	ebffffcd 	bl	2cd54 <SyncDataAndInstructionCache>
   2ce1c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   2ce20:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2ce24:	e3433f00 	movt	r3, #16128	; 0x3f00
   2ce28:	e3e02000 	mvn	r2, #0
   2ce2c:	e583420c 	str	r4, [r3, #524]	; 0x20c
   2ce30:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2ce34:	e5832220 	str	r2, [r3, #544]	; 0x220
   2ce38:	e5832224 	str	r2, [r3, #548]	; 0x224
   2ce3c:	e5814040 	str	r4, [r1, #64]	; 0x40
   2ce40:	f1080080 	cpsie	i
   2ce44:	e3a00001 	mov	r0, #1
   2ce48:	e8bd8010 	pop	{r4, pc}
   2ce4c:	0002c834 	.word	0x0002c834
   2ce50:	0002c848 	.word	0x0002c848

0002ce54 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   2ce54:	e92d4010 	push	{r4, lr}
   2ce58:	e3510047 	cmp	r1, #71	; 0x47
   2ce5c:	8a00000d 	bhi	2ce98 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x44>
   2ce60:	e3520000 	cmp	r2, #0
   2ce64:	0a000011 	beq	2ceb0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x5c>
   2ce68:	e3090364 	movw	r0, #37732	; 0x9364
   2ce6c:	e3400003 	movt	r0, #3
   2ce70:	e590c000 	ldr	ip, [r0]
   2ce74:	e35c0000 	cmp	ip, #0
   2ce78:	1a000012 	bne	2cec8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x74>
   2ce7c:	e3a0ca0b 	mov	ip, #45056	; 0xb000
   2ce80:	e343cf00 	movt	ip, #16128	; 0x3f00
   2ce84:	e5802000 	str	r2, [r0]
   2ce88:	e3811080 	orr	r1, r1, #128	; 0x80
   2ce8c:	e5803004 	str	r3, [r0, #4]
   2ce90:	e58c120c 	str	r1, [ip, #524]	; 0x20c
   2ce94:	e8bd8010 	pop	{r4, pc}
   2ce98:	e30717a4 	movw	r1, #30628	; 0x77a4
   2ce9c:	e3401003 	movt	r1, #3
   2cea0:	e30707b4 	movw	r0, #30644	; 0x77b4
   2cea4:	e3400003 	movt	r0, #3
   2cea8:	e3a0208f 	mov	r2, #143	; 0x8f
   2ceac:	ebffe030 	bl	24f74 <assertion_failed>
   2ceb0:	e30717a4 	movw	r1, #30628	; 0x77a4
   2ceb4:	e3401003 	movt	r1, #3
   2ceb8:	e30707e8 	movw	r0, #30696	; 0x77e8
   2cebc:	e3400003 	movt	r0, #3
   2cec0:	e3a02090 	mov	r2, #144	; 0x90
   2cec4:	ebffe02a 	bl	24f74 <assertion_failed>
   2cec8:	e30717a4 	movw	r1, #30628	; 0x77a4
   2cecc:	e3401003 	movt	r1, #3
   2ced0:	e30707c8 	movw	r0, #30664	; 0x77c8
   2ced4:	e3400003 	movt	r0, #3
   2ced8:	e3a02091 	mov	r2, #145	; 0x91
   2cedc:	ebffe024 	bl	24f74 <assertion_failed>

0002cee0 <CInterruptSystem::DisconnectFIQ()>:
   2cee0:	e3093364 	movw	r3, #37732	; 0x9364
   2cee4:	e3403003 	movt	r3, #3
   2cee8:	e5932000 	ldr	r2, [r3]
   2ceec:	e3520000 	cmp	r2, #0
   2cef0:	0a00000c 	beq	2cf28 <CInterruptSystem::DisconnectFIQ()+0x48>
   2cef4:	e3a01a0b 	mov	r1, #45056	; 0xb000
   2cef8:	e3431f00 	movt	r1, #16128	; 0x3f00
   2cefc:	e3a02000 	mov	r2, #0
   2cf00:	e581220c 	str	r2, [r1, #524]	; 0x20c
   2cf04:	e5c32000 	strb	r2, [r3]
   2cf08:	e5c32001 	strb	r2, [r3, #1]
   2cf0c:	e5c32002 	strb	r2, [r3, #2]
   2cf10:	e5c32003 	strb	r2, [r3, #3]
   2cf14:	e5c32004 	strb	r2, [r3, #4]
   2cf18:	e5c32005 	strb	r2, [r3, #5]
   2cf1c:	e5c32006 	strb	r2, [r3, #6]
   2cf20:	e5c32007 	strb	r2, [r3, #7]
   2cf24:	e12fff1e 	bx	lr
   2cf28:	e30717a4 	movw	r1, #30628	; 0x77a4
   2cf2c:	e3401003 	movt	r1, #3
   2cf30:	e30707e0 	movw	r0, #30688	; 0x77e0
   2cf34:	e3400003 	movt	r0, #3
   2cf38:	e92d4010 	push	{r4, lr}
   2cf3c:	e3a0209b 	mov	r2, #155	; 0x9b
   2cf40:	ebffe00b 	bl	24f74 <assertion_failed>

0002cf44 <CInterruptSystem::EnableIRQ(unsigned int)>:
   2cf44:	e92d4010 	push	{r4, lr}
   2cf48:	e3500053 	cmp	r0, #83	; 0x53
   2cf4c:	8a000017 	bhi	2cfb0 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   2cf50:	e3500047 	cmp	r0, #71	; 0x47
   2cf54:	8a00000e 	bhi	2cf94 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   2cf58:	e350001f 	cmp	r0, #31
   2cf5c:	930b3210 	movwls	r3, #45584	; 0xb210
   2cf60:	93433f00 	movtls	r3, #16128	; 0x3f00
   2cf64:	9a000005 	bls	2cf80 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   2cf68:	e30b2214 	movw	r2, #45588	; 0xb214
   2cf6c:	e3432f00 	movt	r2, #16128	; 0x3f00
   2cf70:	e350003f 	cmp	r0, #63	; 0x3f
   2cf74:	e30b3218 	movw	r3, #45592	; 0xb218
   2cf78:	e3433f00 	movt	r3, #16128	; 0x3f00
   2cf7c:	91a03002 	movls	r3, r2
   2cf80:	e200001f 	and	r0, r0, #31
   2cf84:	e3a02001 	mov	r2, #1
   2cf88:	e1a00012 	lsl	r0, r2, r0
   2cf8c:	e5830000 	str	r0, [r3]
   2cf90:	e8bd8010 	pop	{r4, pc}
   2cf94:	e3500049 	cmp	r0, #73	; 0x49
   2cf98:	1a00000a 	bne	2cfc8 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   2cf9c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   2cfa0:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2cfa4:	e3833002 	orr	r3, r3, #2
   2cfa8:	e5823040 	str	r3, [r2, #64]	; 0x40
   2cfac:	e8bd8010 	pop	{r4, pc}
   2cfb0:	e30717a4 	movw	r1, #30628	; 0x77a4
   2cfb4:	e3401003 	movt	r1, #3
   2cfb8:	e30707f8 	movw	r0, #30712	; 0x77f8
   2cfbc:	e3400003 	movt	r0, #3
   2cfc0:	e3a020a7 	mov	r2, #167	; 0xa7
   2cfc4:	ebffdfea 	bl	24f74 <assertion_failed>
   2cfc8:	e30717a4 	movw	r1, #30628	; 0x77a4
   2cfcc:	e3401003 	movt	r1, #3
   2cfd0:	e307080c 	movw	r0, #30732	; 0x780c
   2cfd4:	e3400003 	movt	r0, #3
   2cfd8:	e3a020b0 	mov	r2, #176	; 0xb0
   2cfdc:	ebffdfe4 	bl	24f74 <assertion_failed>

0002cfe0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   2cfe0:	e92d4010 	push	{r4, lr}
   2cfe4:	e3510053 	cmp	r1, #83	; 0x53
   2cfe8:	8a000008 	bhi	2d010 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   2cfec:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   2cff0:	e080e101 	add	lr, r0, r1, lsl #2
   2cff4:	e35c0000 	cmp	ip, #0
   2cff8:	1a00000a 	bne	2d028 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   2cffc:	e7802101 	str	r2, [r0, r1, lsl #2]
   2d000:	e1a00001 	mov	r0, r1
   2d004:	e58e3150 	str	r3, [lr, #336]	; 0x150
   2d008:	e8bd4010 	pop	{r4, lr}
   2d00c:	eaffffcc 	b	2cf44 <CInterruptSystem::EnableIRQ(unsigned int)>
   2d010:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d014:	e3401003 	movt	r1, #3
   2d018:	e30707f8 	movw	r0, #30712	; 0x77f8
   2d01c:	e3400003 	movt	r0, #3
   2d020:	e3a02076 	mov	r2, #118	; 0x76
   2d024:	ebffdfd2 	bl	24f74 <assertion_failed>
   2d028:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d02c:	e3401003 	movt	r1, #3
   2d030:	e307082c 	movw	r0, #30764	; 0x782c
   2d034:	e3400003 	movt	r0, #3
   2d038:	e3a02077 	mov	r2, #119	; 0x77
   2d03c:	ebffdfcc 	bl	24f74 <assertion_failed>

0002d040 <CInterruptSystem::DisableIRQ(unsigned int)>:
   2d040:	e92d4010 	push	{r4, lr}
   2d044:	e3500053 	cmp	r0, #83	; 0x53
   2d048:	8a000017 	bhi	2d0ac <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   2d04c:	e3500047 	cmp	r0, #71	; 0x47
   2d050:	8a00000e 	bhi	2d090 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   2d054:	e350001f 	cmp	r0, #31
   2d058:	930b321c 	movwls	r3, #45596	; 0xb21c
   2d05c:	93433f00 	movtls	r3, #16128	; 0x3f00
   2d060:	9a000005 	bls	2d07c <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   2d064:	e30b2220 	movw	r2, #45600	; 0xb220
   2d068:	e3432f00 	movt	r2, #16128	; 0x3f00
   2d06c:	e350003f 	cmp	r0, #63	; 0x3f
   2d070:	e30b3224 	movw	r3, #45604	; 0xb224
   2d074:	e3433f00 	movt	r3, #16128	; 0x3f00
   2d078:	91a03002 	movls	r3, r2
   2d07c:	e200001f 	and	r0, r0, #31
   2d080:	e3a02001 	mov	r2, #1
   2d084:	e1a00012 	lsl	r0, r2, r0
   2d088:	e5830000 	str	r0, [r3]
   2d08c:	e8bd8010 	pop	{r4, pc}
   2d090:	e3500049 	cmp	r0, #73	; 0x49
   2d094:	1a00000a 	bne	2d0c4 <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   2d098:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   2d09c:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2d0a0:	e3c33002 	bic	r3, r3, #2
   2d0a4:	e5823040 	str	r3, [r2, #64]	; 0x40
   2d0a8:	e8bd8010 	pop	{r4, pc}
   2d0ac:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d0b0:	e3401003 	movt	r1, #3
   2d0b4:	e30707f8 	movw	r0, #30712	; 0x77f8
   2d0b8:	e3400003 	movt	r0, #3
   2d0bc:	e3a020bf 	mov	r2, #191	; 0xbf
   2d0c0:	ebffdfab 	bl	24f74 <assertion_failed>
   2d0c4:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d0c8:	e3401003 	movt	r1, #3
   2d0cc:	e307080c 	movw	r0, #30732	; 0x780c
   2d0d0:	e3400003 	movt	r0, #3
   2d0d4:	e3a020c8 	mov	r2, #200	; 0xc8
   2d0d8:	ebffdfa5 	bl	24f74 <assertion_failed>

0002d0dc <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   2d0dc:	e92d4070 	push	{r4, r5, r6, lr}
   2d0e0:	e3510053 	cmp	r1, #83	; 0x53
   2d0e4:	8a00000b 	bhi	2d118 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2d0e8:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   2d0ec:	e1a04001 	mov	r4, r1
   2d0f0:	e1a05000 	mov	r5, r0
   2d0f4:	e0806101 	add	r6, r0, r1, lsl #2
   2d0f8:	e3530000 	cmp	r3, #0
   2d0fc:	0a00000b 	beq	2d130 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x54>
   2d100:	e1a00001 	mov	r0, r1
   2d104:	ebffffcd 	bl	2d040 <CInterruptSystem::DisableIRQ(unsigned int)>
   2d108:	e3a03000 	mov	r3, #0
   2d10c:	e7853104 	str	r3, [r5, r4, lsl #2]
   2d110:	e5863150 	str	r3, [r6, #336]	; 0x150
   2d114:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d118:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d11c:	e3401003 	movt	r1, #3
   2d120:	e30707f8 	movw	r0, #30712	; 0x77f8
   2d124:	e3400003 	movt	r0, #3
   2d128:	e3a02081 	mov	r2, #129	; 0x81
   2d12c:	ebffdf90 	bl	24f74 <assertion_failed>
   2d130:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d134:	e3401003 	movt	r1, #3
   2d138:	e3070848 	movw	r0, #30792	; 0x7848
   2d13c:	e3400003 	movt	r0, #3
   2d140:	e3a02082 	mov	r2, #130	; 0x82
   2d144:	ebffdf8a 	bl	24f74 <assertion_failed>

0002d148 <CInterruptSystem::EnableFIQ(unsigned int)>:
   2d148:	e3500047 	cmp	r0, #71	; 0x47
   2d14c:	8a000004 	bhi	2d164 <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   2d150:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2d154:	e3433f00 	movt	r3, #16128	; 0x3f00
   2d158:	e3800080 	orr	r0, r0, #128	; 0x80
   2d15c:	e583020c 	str	r0, [r3, #524]	; 0x20c
   2d160:	e12fff1e 	bx	lr
   2d164:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d168:	e3401003 	movt	r1, #3
   2d16c:	e30707b4 	movw	r0, #30644	; 0x77b4
   2d170:	e3400003 	movt	r0, #3
   2d174:	e92d4010 	push	{r4, lr}
   2d178:	e3a020d7 	mov	r2, #215	; 0xd7
   2d17c:	ebffdf7c 	bl	24f74 <assertion_failed>

0002d180 <CInterruptSystem::DisableFIQ()>:
   2d180:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2d184:	e3433f00 	movt	r3, #16128	; 0x3f00
   2d188:	e3a02000 	mov	r2, #0
   2d18c:	e583220c 	str	r2, [r3, #524]	; 0x20c
   2d190:	e12fff1e 	bx	lr

0002d194 <CInterruptSystem::Get()>:
   2d194:	e30934c8 	movw	r3, #38088	; 0x94c8
   2d198:	e3403003 	movt	r3, #3
   2d19c:	e5930000 	ldr	r0, [r3]
   2d1a0:	e3500000 	cmp	r0, #0
   2d1a4:	112fff1e 	bxne	lr
   2d1a8:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d1ac:	e3401003 	movt	r1, #3
   2d1b0:	e3040ffc 	movw	r0, #20476	; 0x4ffc
   2d1b4:	e3400003 	movt	r0, #3
   2d1b8:	e92d4010 	push	{r4, lr}
   2d1bc:	e3a020e9 	mov	r2, #233	; 0xe9
   2d1c0:	ebffdf6b 	bl	24f74 <assertion_failed>

0002d1c4 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   2d1c4:	e92d4010 	push	{r4, lr}
   2d1c8:	e3510053 	cmp	r1, #83	; 0x53
   2d1cc:	8a000007 	bhi	2d1f0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   2d1d0:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   2d1d4:	e0800101 	add	r0, r0, r1, lsl #2
   2d1d8:	e3540000 	cmp	r4, #0
   2d1dc:	0a000009 	beq	2d208 <CInterruptSystem::CallIRQHandler(unsigned int)+0x44>
   2d1e0:	e5900150 	ldr	r0, [r0, #336]	; 0x150
   2d1e4:	e12fff34 	blx	r4
   2d1e8:	e3a00001 	mov	r0, #1
   2d1ec:	e8bd8010 	pop	{r4, pc}
   2d1f0:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d1f4:	e3401003 	movt	r1, #3
   2d1f8:	e30707f8 	movw	r0, #30712	; 0x77f8
   2d1fc:	e3400003 	movt	r0, #3
   2d200:	e3a020ef 	mov	r2, #239	; 0xef
   2d204:	ebffdf5a 	bl	24f74 <assertion_failed>
   2d208:	e1a00001 	mov	r0, r1
   2d20c:	ebffff8b 	bl	2d040 <CInterruptSystem::DisableIRQ(unsigned int)>
   2d210:	e1a00004 	mov	r0, r4
   2d214:	e8bd8010 	pop	{r4, pc}

0002d218 <CInterruptSystem::InterruptHandler()>:
   2d218:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2d21c:	e30974c8 	movw	r7, #38088	; 0x94c8
   2d220:	e3407003 	movt	r7, #3
   2d224:	e24dd014 	sub	sp, sp, #20
   2d228:	e5970000 	ldr	r0, [r7]
   2d22c:	e3500000 	cmp	r0, #0
   2d230:	0a00002b 	beq	2d2e4 <CInterruptSystem::InterruptHandler()+0xcc>
   2d234:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   2d238:	e5936060 	ldr	r6, [r3, #96]	; 0x60
   2d23c:	e3c63c01 	bic	r3, r6, #256	; 0x100
   2d240:	e3c33002 	bic	r3, r3, #2
   2d244:	e3530000 	cmp	r3, #0
   2d248:	1a00002b 	bne	2d2fc <CInterruptSystem::InterruptHandler()+0xe4>
   2d24c:	e2166002 	ands	r6, r6, #2
   2d250:	1a00001f 	bne	2d2d4 <CInterruptSystem::InterruptHandler()+0xbc>
   2d254:	e3a03a0b 	mov	r3, #45056	; 0xb000
   2d258:	e3433f00 	movt	r3, #16128	; 0x3f00
   2d25c:	e5934204 	ldr	r4, [r3, #516]	; 0x204
   2d260:	e58d4004 	str	r4, [sp, #4]
   2d264:	e3540000 	cmp	r4, #0
   2d268:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2d26c:	e58d2008 	str	r2, [sp, #8]
   2d270:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   2d274:	e6ef3073 	uxtb	r3, r3
   2d278:	e58d300c 	str	r3, [sp, #12]
   2d27c:	1a000006 	bne	2d29c <CInterruptSystem::InterruptHandler()+0x84>
   2d280:	e2866001 	add	r6, r6, #1
   2d284:	e3560003 	cmp	r6, #3
   2d288:	0a00000f 	beq	2d2cc <CInterruptSystem::InterruptHandler()+0xb4>
   2d28c:	e28d3004 	add	r3, sp, #4
   2d290:	e7934106 	ldr	r4, [r3, r6, lsl #2]
   2d294:	e3540000 	cmp	r4, #0
   2d298:	0afffff8 	beq	2d280 <CInterruptSystem::InterruptHandler()+0x68>
   2d29c:	e1a05286 	lsl	r5, r6, #5
   2d2a0:	ea000002 	b	2d2b0 <CInterruptSystem::InterruptHandler()+0x98>
   2d2a4:	e2855001 	add	r5, r5, #1
   2d2a8:	e1b040a4 	lsrs	r4, r4, #1
   2d2ac:	0afffff3 	beq	2d280 <CInterruptSystem::InterruptHandler()+0x68>
   2d2b0:	e3140001 	tst	r4, #1
   2d2b4:	0afffffa 	beq	2d2a4 <CInterruptSystem::InterruptHandler()+0x8c>
   2d2b8:	e1a01005 	mov	r1, r5
   2d2bc:	e5970000 	ldr	r0, [r7]
   2d2c0:	ebffffbf 	bl	2d1c4 <CInterruptSystem::CallIRQHandler(unsigned int)>
   2d2c4:	e3500000 	cmp	r0, #0
   2d2c8:	0afffff5 	beq	2d2a4 <CInterruptSystem::InterruptHandler()+0x8c>
   2d2cc:	e28dd014 	add	sp, sp, #20
   2d2d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2d2d4:	e3a01049 	mov	r1, #73	; 0x49
   2d2d8:	e28dd014 	add	sp, sp, #20
   2d2dc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2d2e0:	eaffffb7 	b	2d1c4 <CInterruptSystem::CallIRQHandler(unsigned int)>
   2d2e4:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d2e8:	e3401003 	movt	r1, #3
   2d2ec:	e3040ffc 	movw	r0, #20476	; 0x4ffc
   2d2f0:	e3400003 	movt	r0, #3
   2d2f4:	e3002102 	movw	r2, #258	; 0x102
   2d2f8:	ebffdf1d 	bl	24f74 <assertion_failed>
   2d2fc:	e30717a4 	movw	r1, #30628	; 0x77a4
   2d300:	e3401003 	movt	r1, #3
   2d304:	e3070864 	movw	r0, #30820	; 0x7864
   2d308:	e3400003 	movt	r0, #3
   2d30c:	e3002106 	movw	r2, #262	; 0x106
   2d310:	ebffdf17 	bl	24f74 <assertion_failed>

0002d314 <InterruptHandler>:
   2d314:	eaffffbf 	b	2d218 <CInterruptSystem::InterruptHandler()>

0002d318 <__cxa_pure_virtual>:
   2d318:	e307188c 	movw	r1, #30860	; 0x788c
   2d31c:	e3401003 	movt	r1, #3
   2d320:	e3010398 	movw	r0, #5016	; 0x1398
   2d324:	e3400003 	movt	r0, #3
   2d328:	e92d4010 	push	{r4, lr}
   2d32c:	e3a02018 	mov	r2, #24
   2d330:	ebffdf0f 	bl	24f74 <assertion_failed>

0002d334 <malloc>:
   2d334:	e3093470 	movw	r3, #38000	; 0x9470
   2d338:	e3403003 	movt	r3, #3
   2d33c:	e1a01000 	mov	r1, r0
   2d340:	e5930000 	ldr	r0, [r3]
   2d344:	e280000c 	add	r0, r0, #12
   2d348:	eafffb1c 	b	2bfc0 <CHeapAllocator::Allocate(unsigned int)>

0002d34c <free>:
   2d34c:	e3093470 	movw	r3, #38000	; 0x9470
   2d350:	e3403003 	movt	r3, #3
   2d354:	e1a01000 	mov	r1, r0
   2d358:	e5930000 	ldr	r0, [r3]
   2d35c:	e280000c 	add	r0, r0, #12
   2d360:	eafffb82 	b	2c170 <CHeapAllocator::Free(void*)>

0002d364 <calloc>:
   2d364:	e92d4070 	push	{r4, r5, r6, lr}
   2d368:	e0040190 	mul	r4, r0, r1
   2d36c:	e3540000 	cmp	r4, #0
   2d370:	03a04001 	moveq	r4, #1
   2d374:	e1540000 	cmp	r4, r0
   2d378:	3a00000c 	bcc	2d3b0 <calloc+0x4c>
   2d37c:	e3093470 	movw	r3, #38000	; 0x9470
   2d380:	e3403003 	movt	r3, #3
   2d384:	e1a01004 	mov	r1, r4
   2d388:	e5930000 	ldr	r0, [r3]
   2d38c:	e280000c 	add	r0, r0, #12
   2d390:	ebfffb0a 	bl	2bfc0 <CHeapAllocator::Allocate(unsigned int)>
   2d394:	e2505000 	subs	r5, r0, #0
   2d398:	0a000002 	beq	2d3a8 <calloc+0x44>
   2d39c:	e1a02004 	mov	r2, r4
   2d3a0:	e3a01000 	mov	r1, #0
   2d3a4:	ebfff81f 	bl	2b428 <memset>
   2d3a8:	e1a00005 	mov	r0, r5
   2d3ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d3b0:	e307189c 	movw	r1, #30876	; 0x789c
   2d3b4:	e3401003 	movt	r1, #3
   2d3b8:	e30708a8 	movw	r0, #30888	; 0x78a8
   2d3bc:	e3400003 	movt	r0, #3
   2d3c0:	e3a0202b 	mov	r2, #43	; 0x2b
   2d3c4:	ebffdeea 	bl	24f74 <assertion_failed>

0002d3c8 <realloc>:
   2d3c8:	e3093470 	movw	r3, #38000	; 0x9470
   2d3cc:	e3403003 	movt	r3, #3
   2d3d0:	e1a02001 	mov	r2, r1
   2d3d4:	e1a01000 	mov	r1, r0
   2d3d8:	e5930000 	ldr	r0, [r3]
   2d3dc:	e280000c 	add	r0, r0, #12
   2d3e0:	eafffb8a 	b	2c210 <CHeapAllocator::ReAllocate(void*, unsigned int)>

0002d3e4 <palloc>:
   2d3e4:	e3093470 	movw	r3, #38000	; 0x9470
   2d3e8:	e3403003 	movt	r3, #3
   2d3ec:	e5930000 	ldr	r0, [r3]
   2d3f0:	e28000c8 	add	r0, r0, #200	; 0xc8
   2d3f4:	ea0008b7 	b	2f6d8 <CPageAllocator::Allocate()>

0002d3f8 <pfree>:
   2d3f8:	e3093470 	movw	r3, #38000	; 0x9470
   2d3fc:	e3403003 	movt	r3, #3
   2d400:	e1a01000 	mov	r1, r0
   2d404:	e5930000 	ldr	r0, [r3]
   2d408:	e28000c8 	add	r0, r0, #200	; 0xc8
   2d40c:	ea0008ea 	b	2f7bc <CPageAllocator::Free(void*)>

0002d410 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   2d410:	e92d4030 	push	{r4, r5, lr}
   2d414:	e1a04000 	mov	r4, r0
   2d418:	e3a02000 	mov	r2, #0
   2d41c:	e24dd014 	sub	sp, sp, #20
   2d420:	e3a0c001 	mov	ip, #1
   2d424:	e5943020 	ldr	r3, [r4, #32]
   2d428:	e1a01002 	mov	r1, r2
   2d42c:	e28d0008 	add	r0, sp, #8
   2d430:	e5c3c011 	strb	ip, [r3, #17]
   2d434:	e5c3200c 	strb	r2, [r3, #12]
   2d438:	e5c3200d 	strb	r2, [r3, #13]
   2d43c:	e5c3200e 	strb	r2, [r3, #14]
   2d440:	e5c3200f 	strb	r2, [r3, #15]
   2d444:	e5c32010 	strb	r2, [r3, #16]
   2d448:	e5c32012 	strb	r2, [r3, #18]
   2d44c:	e5c32013 	strb	r2, [r3, #19]
   2d450:	ebffdee8 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d454:	e5942020 	ldr	r2, [r4, #32]
   2d458:	e3003408 	movw	r3, #1032	; 0x408
   2d45c:	e28d0008 	add	r0, sp, #8
   2d460:	e58d3000 	str	r3, [sp]
   2d464:	e308100b 	movw	r1, #32779	; 0x800b
   2d468:	e3401004 	movt	r1, #4
   2d46c:	e3003414 	movw	r3, #1044	; 0x414
   2d470:	ebffdf29 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d474:	e2505000 	subs	r5, r0, #0
   2d478:	0a000003 	beq	2d48c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x7c>
   2d47c:	e5943020 	ldr	r3, [r4, #32]
   2d480:	e593300c 	ldr	r3, [r3, #12]
   2d484:	e3530000 	cmp	r3, #0
   2d488:	0a000000 	beq	2d490 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x80>
   2d48c:	e3a05000 	mov	r5, #0
   2d490:	e28d0008 	add	r0, sp, #8
   2d494:	ebffdede 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d498:	e1a00005 	mov	r0, r5
   2d49c:	e28dd014 	add	sp, sp, #20
   2d4a0:	e8bd8030 	pop	{r4, r5, pc}

0002d4a4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   2d4a4:	e92d4030 	push	{r4, r5, lr}
   2d4a8:	e1a04000 	mov	r4, r0
   2d4ac:	e3a05000 	mov	r5, #0
   2d4b0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2d4b4:	e3520000 	cmp	r2, #0
   2d4b8:	13510000 	cmpne	r1, #0
   2d4bc:	e8840006 	stm	r4, {r1, r2}
   2d4c0:	e5843010 	str	r3, [r4, #16]
   2d4c4:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   2d4c8:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   2d4cc:	e584c00c 	str	ip, [r4, #12]
   2d4d0:	e5840008 	str	r0, [r4, #8]
   2d4d4:	e5845014 	str	r5, [r4, #20]
   2d4d8:	e5845018 	str	r5, [r4, #24]
   2d4dc:	e584501c 	str	r5, [r4, #28]
   2d4e0:	e5845020 	str	r5, [r4, #32]
   2d4e4:	1a000012 	bne	2d534 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   2d4e8:	e1a01005 	mov	r1, r5
   2d4ec:	e28d000c 	add	r0, sp, #12
   2d4f0:	ebffdec0 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d4f4:	e3a03014 	mov	r3, #20
   2d4f8:	e58d5000 	str	r5, [sp]
   2d4fc:	e28d000c 	add	r0, sp, #12
   2d500:	e3a01003 	mov	r1, #3
   2d504:	e3401004 	movt	r1, #4
   2d508:	e08d2003 	add	r2, sp, r3
   2d50c:	ebffdf02 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d510:	e1500005 	cmp	r0, r5
   2d514:	1a00002a 	bne	2d5c4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x120>
   2d518:	e3a02d0a 	mov	r2, #640	; 0x280
   2d51c:	e3a03e1e 	mov	r3, #480	; 0x1e0
   2d520:	e1c420f0 	strd	r2, [r4]
   2d524:	e28d000c 	add	r0, sp, #12
   2d528:	ebffdeb9 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d52c:	e5940008 	ldr	r0, [r4, #8]
   2d530:	e5943010 	ldr	r3, [r4, #16]
   2d534:	e3500000 	cmp	r0, #0
   2d538:	0a00001d 	beq	2d5b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   2d53c:	e594200c 	ldr	r2, [r4, #12]
   2d540:	e3520000 	cmp	r2, #0
   2d544:	0a00001a 	beq	2d5b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   2d548:	e3530008 	cmp	r3, #8
   2d54c:	8a000007 	bhi	2d570 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xcc>
   2d550:	e3000414 	movw	r0, #1044	; 0x414
   2d554:	ebfffa6b 	bl	2bf08 <operator new[](unsigned int)>
   2d558:	e3a02b01 	mov	r2, #1024	; 0x400
   2d55c:	e1a03000 	mov	r3, r0
   2d560:	e3a01000 	mov	r1, #0
   2d564:	e2800014 	add	r0, r0, #20
   2d568:	e5843020 	str	r3, [r4, #32]
   2d56c:	ebfff7ad 	bl	2b428 <memset>
   2d570:	e3a02070 	mov	r2, #112	; 0x70
   2d574:	e2840024 	add	r0, r4, #36	; 0x24
   2d578:	e3091374 	movw	r1, #37748	; 0x9374
   2d57c:	e3401003 	movt	r1, #3
   2d580:	ebfff950 	bl	2bac8 <memcpy>
   2d584:	e5941008 	ldr	r1, [r4, #8]
   2d588:	e8941008 	ldm	r4, {r3, ip}
   2d58c:	e5843030 	str	r3, [r4, #48]	; 0x30
   2d590:	e594200c 	ldr	r2, [r4, #12]
   2d594:	e1a00004 	mov	r0, r4
   2d598:	e5943010 	ldr	r3, [r4, #16]
   2d59c:	e584c034 	str	ip, [r4, #52]	; 0x34
   2d5a0:	e5841044 	str	r1, [r4, #68]	; 0x44
   2d5a4:	e5842048 	str	r2, [r4, #72]	; 0x48
   2d5a8:	e5843058 	str	r3, [r4, #88]	; 0x58
   2d5ac:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2d5b0:	e8bd8030 	pop	{r4, r5, pc}
   2d5b4:	e8940006 	ldm	r4, {r1, r2}
   2d5b8:	e5841008 	str	r1, [r4, #8]
   2d5bc:	e584200c 	str	r2, [r4, #12]
   2d5c0:	eaffffe0 	b	2d548 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   2d5c4:	e1cd22d0 	ldrd	r2, [sp, #32]
   2d5c8:	e5842000 	str	r2, [r4]
   2d5cc:	e5843004 	str	r3, [r4, #4]
   2d5d0:	e2421d0a 	sub	r1, r2, #640	; 0x280
   2d5d4:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   2d5d8:	e3520f96 	cmp	r2, #600	; 0x258
   2d5dc:	93510c05 	cmpls	r1, #1280	; 0x500
   2d5e0:	8affffcc 	bhi	2d518 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   2d5e4:	eaffffce 	b	2d524 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x80>

0002d5e8 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   2d5e8:	e92d4010 	push	{r4, lr}
   2d5ec:	e3a01014 	mov	r1, #20
   2d5f0:	e1a04000 	mov	r4, r0
   2d5f4:	e5900020 	ldr	r0, [r0, #32]
   2d5f8:	ebfffa4a 	bl	2bf28 <operator delete(void*, unsigned int)>
   2d5fc:	e1a00004 	mov	r0, r4
   2d600:	e8bd8010 	pop	{r4, pc}

0002d604 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   2d604:	e5903010 	ldr	r3, [r0, #16]
   2d608:	e3530008 	cmp	r3, #8
   2d60c:	812fff1e 	bxhi	lr
   2d610:	e5900020 	ldr	r0, [r0, #32]
   2d614:	e1a03982 	lsl	r3, r2, #19
   2d618:	e1a0c5a2 	lsr	ip, r2, #11
   2d61c:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   2d620:	e183318c 	orr	r3, r3, ip, lsl #3
   2d624:	e1a02282 	lsl	r2, r2, #5
   2d628:	e0801101 	add	r1, r0, r1, lsl #2
   2d62c:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   2d630:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   2d634:	e1822003 	orr	r2, r2, r3
   2d638:	e5812014 	str	r2, [r1, #20]
   2d63c:	e12fff1e 	bx	lr

0002d640 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   2d640:	e5903010 	ldr	r3, [r0, #16]
   2d644:	e3530008 	cmp	r3, #8
   2d648:	95903020 	ldrls	r3, [r0, #32]
   2d64c:	90831101 	addls	r1, r3, r1, lsl #2
   2d650:	95812014 	strls	r2, [r1, #20]
   2d654:	e12fff1e 	bx	lr

0002d658 <CBcmFrameBuffer::Initialize()>:
   2d658:	e92d4030 	push	{r4, r5, lr}
   2d65c:	e3a01000 	mov	r1, #0
   2d660:	e1a04000 	mov	r4, r0
   2d664:	e24dd00c 	sub	sp, sp, #12
   2d668:	e1a0000d 	mov	r0, sp
   2d66c:	ebffde61 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d670:	e2841024 	add	r1, r4, #36	; 0x24
   2d674:	e1a0000d 	mov	r0, sp
   2d678:	e3a02070 	mov	r2, #112	; 0x70
   2d67c:	ebffde69 	bl	25028 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   2d680:	e2505000 	subs	r5, r0, #0
   2d684:	0a00001e 	beq	2d704 <CBcmFrameBuffer::Initialize()+0xac>
   2d688:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   2d68c:	e3530000 	cmp	r3, #0
   2d690:	0a00001a 	beq	2d700 <CBcmFrameBuffer::Initialize()+0xa8>
   2d694:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   2d698:	e3530000 	cmp	r3, #0
   2d69c:	0a000017 	beq	2d700 <CBcmFrameBuffer::Initialize()+0xa8>
   2d6a0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   2d6a4:	e3530000 	cmp	r3, #0
   2d6a8:	0a000014 	beq	2d700 <CBcmFrameBuffer::Initialize()+0xa8>
   2d6ac:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   2d6b0:	e3530000 	cmp	r3, #0
   2d6b4:	0a000011 	beq	2d700 <CBcmFrameBuffer::Initialize()+0xa8>
   2d6b8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   2d6bc:	e3530000 	cmp	r3, #0
   2d6c0:	0a00000e 	beq	2d700 <CBcmFrameBuffer::Initialize()+0xa8>
   2d6c4:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   2d6c8:	e3530000 	cmp	r3, #0
   2d6cc:	0a00000b 	beq	2d700 <CBcmFrameBuffer::Initialize()+0xa8>
   2d6d0:	e5941010 	ldr	r1, [r4, #16]
   2d6d4:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   2d6d8:	e5942080 	ldr	r2, [r4, #128]	; 0x80
   2d6dc:	e5843014 	str	r3, [r4, #20]
   2d6e0:	e3510008 	cmp	r1, #8
   2d6e4:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   2d6e8:	e1c421f8 	strd	r2, [r4, #24]
   2d6ec:	8a000004 	bhi	2d704 <CBcmFrameBuffer::Initialize()+0xac>
   2d6f0:	e1a00004 	mov	r0, r4
   2d6f4:	ebffff45 	bl	2d410 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   2d6f8:	e1a05000 	mov	r5, r0
   2d6fc:	ea000000 	b	2d704 <CBcmFrameBuffer::Initialize()+0xac>
   2d700:	e1a05003 	mov	r5, r3
   2d704:	e1a0000d 	mov	r0, sp
   2d708:	ebffde41 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d70c:	e1a00005 	mov	r0, r5
   2d710:	e28dd00c 	add	sp, sp, #12
   2d714:	e8bd8030 	pop	{r4, r5, pc}

0002d718 <CBcmFrameBuffer::GetWidth() const>:
   2d718:	e5900000 	ldr	r0, [r0]
   2d71c:	e12fff1e 	bx	lr

0002d720 <CBcmFrameBuffer::GetHeight() const>:
   2d720:	e5900004 	ldr	r0, [r0, #4]
   2d724:	e12fff1e 	bx	lr

0002d728 <CBcmFrameBuffer::GetVirtWidth() const>:
   2d728:	e5900008 	ldr	r0, [r0, #8]
   2d72c:	e12fff1e 	bx	lr

0002d730 <CBcmFrameBuffer::GetVirtHeight() const>:
   2d730:	e590000c 	ldr	r0, [r0, #12]
   2d734:	e12fff1e 	bx	lr

0002d738 <CBcmFrameBuffer::GetPitch() const>:
   2d738:	e590001c 	ldr	r0, [r0, #28]
   2d73c:	e12fff1e 	bx	lr

0002d740 <CBcmFrameBuffer::GetDepth() const>:
   2d740:	e5900010 	ldr	r0, [r0, #16]
   2d744:	e12fff1e 	bx	lr

0002d748 <CBcmFrameBuffer::GetBuffer() const>:
   2d748:	e5900014 	ldr	r0, [r0, #20]
   2d74c:	e12fff1e 	bx	lr

0002d750 <CBcmFrameBuffer::GetSize() const>:
   2d750:	e5900018 	ldr	r0, [r0, #24]
   2d754:	e12fff1e 	bx	lr

0002d758 <CBcmFrameBuffer::UpdatePalette()>:
   2d758:	e5903010 	ldr	r3, [r0, #16]
   2d75c:	e3530008 	cmp	r3, #8
   2d760:	9a000001 	bls	2d76c <CBcmFrameBuffer::UpdatePalette()+0x14>
   2d764:	e3a00001 	mov	r0, #1
   2d768:	e12fff1e 	bx	lr
   2d76c:	eaffff27 	b	2d410 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0002d770 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   2d770:	e92d4070 	push	{r4, r5, r6, lr}
   2d774:	e1a05001 	mov	r5, r1
   2d778:	e3a01000 	mov	r1, #0
   2d77c:	e24dd028 	sub	sp, sp, #40	; 0x28
   2d780:	e1a06002 	mov	r6, r2
   2d784:	e28d000c 	add	r0, sp, #12
   2d788:	ebffde1a 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d78c:	e3a03008 	mov	r3, #8
   2d790:	e58d3000 	str	r3, [sp]
   2d794:	e3a03014 	mov	r3, #20
   2d798:	e28d000c 	add	r0, sp, #12
   2d79c:	e3081009 	movw	r1, #32777	; 0x8009
   2d7a0:	e3401004 	movt	r1, #4
   2d7a4:	e08d2003 	add	r2, sp, r3
   2d7a8:	e58d5020 	str	r5, [sp, #32]
   2d7ac:	e58d6024 	str	r6, [sp, #36]	; 0x24
   2d7b0:	ebffde59 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d7b4:	e2504000 	subs	r4, r0, #0
   2d7b8:	0a000006 	beq	2d7d8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   2d7bc:	e59d3020 	ldr	r3, [sp, #32]
   2d7c0:	e1530005 	cmp	r3, r5
   2d7c4:	13a04000 	movne	r4, #0
   2d7c8:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   2d7cc:	00444006 	subeq	r4, r4, r6
   2d7d0:	016f4f14 	clzeq	r4, r4
   2d7d4:	01a042a4 	lsreq	r4, r4, #5
   2d7d8:	e28d000c 	add	r0, sp, #12
   2d7dc:	ebffde0c 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d7e0:	e1a00004 	mov	r0, r4
   2d7e4:	e28dd028 	add	sp, sp, #40	; 0x28
   2d7e8:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d7ec <CBcmFrameBuffer::WaitForVerticalSync()>:
   2d7ec:	e92d4010 	push	{r4, lr}
   2d7f0:	e3a01000 	mov	r1, #0
   2d7f4:	e24dd020 	sub	sp, sp, #32
   2d7f8:	e28d0008 	add	r0, sp, #8
   2d7fc:	ebffddfd 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d800:	e3a03000 	mov	r3, #0
   2d804:	e58d3000 	str	r3, [sp]
   2d808:	e3a03010 	mov	r3, #16
   2d80c:	e08d2003 	add	r2, sp, r3
   2d810:	e28d0008 	add	r0, sp, #8
   2d814:	e308100e 	movw	r1, #32782	; 0x800e
   2d818:	e3401004 	movt	r1, #4
   2d81c:	ebffde3e 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d820:	e1a04000 	mov	r4, r0
   2d824:	e28d0008 	add	r0, sp, #8
   2d828:	ebffddf9 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d82c:	e1a00004 	mov	r0, r4
   2d830:	e28dd020 	add	sp, sp, #32
   2d834:	e8bd8010 	pop	{r4, pc}

0002d838 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   2d838:	e92d4010 	push	{r4, lr}
   2d83c:	e1a04001 	mov	r4, r1
   2d840:	e3a01000 	mov	r1, #0
   2d844:	e24dd020 	sub	sp, sp, #32
   2d848:	e28d0008 	add	r0, sp, #8
   2d84c:	ebffdde9 	bl	24ff8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d850:	e3a03004 	mov	r3, #4
   2d854:	e58d3000 	str	r3, [sp]
   2d858:	e3a03010 	mov	r3, #16
   2d85c:	e08d2003 	add	r2, sp, r3
   2d860:	e28d0008 	add	r0, sp, #8
   2d864:	e308100f 	movw	r1, #32783	; 0x800f
   2d868:	e3401004 	movt	r1, #4
   2d86c:	e58d401c 	str	r4, [sp, #28]
   2d870:	ebffde29 	bl	2511c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d874:	e1a04000 	mov	r4, r0
   2d878:	e28d0008 	add	r0, sp, #8
   2d87c:	ebffdde4 	bl	25014 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d880:	e1a00004 	mov	r0, r4
   2d884:	e28dd020 	add	sp, sp, #32
   2d888:	e8bd8010 	pop	{r4, pc}

0002d88c <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2d88c:	e5801000 	str	r1, [r0]
   2d890:	e5c02004 	strb	r2, [r0, #4]
   2d894:	e12fff1e 	bx	lr

0002d898 <CBcmMailBox::~CBcmMailBox()>:
   2d898:	e12fff1e 	bx	lr

0002d89c <CBcmMailBox::WriteRead(unsigned int)>:
   2d89c:	e92d4070 	push	{r4, r5, r6, lr}
   2d8a0:	e1a05000 	mov	r5, r0
   2d8a4:	e5d03004 	ldrb	r3, [r0, #4]
   2d8a8:	e24dd008 	sub	sp, sp, #8
   2d8ac:	e1a06001 	mov	r6, r1
   2d8b0:	e3530000 	cmp	r3, #0
   2d8b4:	1a000004 	bne	2d8cc <CBcmMailBox::WriteRead(unsigned int)+0x30>
   2d8b8:	e30934cc 	movw	r3, #38092	; 0x94cc
   2d8bc:	e3403003 	movt	r3, #3
   2d8c0:	e5930000 	ldr	r0, [r3]
   2d8c4:	e3500000 	cmp	r0, #0
   2d8c8:	1a00002e 	bne	2d988 <CBcmMailBox::WriteRead(unsigned int)+0xec>
   2d8cc:	e3a04a0b 	mov	r4, #45056	; 0xb000
   2d8d0:	e3434f00 	movt	r4, #16128	; 0x3f00
   2d8d4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2d8d8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2d8dc:	1a000005 	bne	2d8f8 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   2d8e0:	e3a00014 	mov	r0, #20
   2d8e4:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2d8e8:	ebfff685 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
   2d8ec:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2d8f0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2d8f4:	0afffff9 	beq	2d8e0 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   2d8f8:	e3a01a0b 	mov	r1, #45056	; 0xb000
   2d8fc:	e3431f00 	movt	r1, #16128	; 0x3f00
   2d900:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
   2d904:	e3530000 	cmp	r3, #0
   2d908:	bafffffc 	blt	2d900 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   2d90c:	e316000f 	tst	r6, #15
   2d910:	1a00001e 	bne	2d990 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   2d914:	e5953000 	ldr	r3, [r5]
   2d918:	e3a02a0b 	mov	r2, #45056	; 0xb000
   2d91c:	e3432f00 	movt	r2, #16128	; 0x3f00
   2d920:	e1866003 	orr	r6, r6, r3
   2d924:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
   2d928:	e5951000 	ldr	r1, [r5]
   2d92c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2d930:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2d934:	1afffffc 	bne	2d92c <CBcmMailBox::WriteRead(unsigned int)+0x90>
   2d938:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2d93c:	e200300f 	and	r3, r0, #15
   2d940:	e1530001 	cmp	r3, r1
   2d944:	1afffff8 	bne	2d92c <CBcmMailBox::WriteRead(unsigned int)+0x90>
   2d948:	e5d53004 	ldrb	r3, [r5, #4]
   2d94c:	e3c0000f 	bic	r0, r0, #15
   2d950:	e3530000 	cmp	r3, #0
   2d954:	1a000004 	bne	2d96c <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   2d958:	e30934cc 	movw	r3, #38092	; 0x94cc
   2d95c:	e3403003 	movt	r3, #3
   2d960:	e5933000 	ldr	r3, [r3]
   2d964:	e3530000 	cmp	r3, #0
   2d968:	1a000001 	bne	2d974 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   2d96c:	e28dd008 	add	sp, sp, #8
   2d970:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d974:	e58d0004 	str	r0, [sp, #4]
   2d978:	ebfffce0 	bl	2cd00 <LeaveCritical>
   2d97c:	e59d0004 	ldr	r0, [sp, #4]
   2d980:	e28dd008 	add	sp, sp, #8
   2d984:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d988:	ebfffcaf 	bl	2cc4c <EnterCritical>
   2d98c:	eaffffce 	b	2d8cc <CBcmMailBox::WriteRead(unsigned int)+0x30>
   2d990:	e30718bc 	movw	r1, #30908	; 0x78bc
   2d994:	e3401003 	movt	r1, #3
   2d998:	e30708cc 	movw	r0, #30924	; 0x78cc
   2d99c:	e3400003 	movt	r0, #3
   2d9a0:	e3a02062 	mov	r2, #98	; 0x62
   2d9a4:	ebffdd72 	bl	24f74 <assertion_failed>

0002d9a8 <CBcmMailBox::Flush()>:
   2d9a8:	e92d4010 	push	{r4, lr}
   2d9ac:	e3a04a0b 	mov	r4, #45056	; 0xb000
   2d9b0:	e3434f00 	movt	r4, #16128	; 0x3f00
   2d9b4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2d9b8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2d9bc:	18bd8010 	popne	{r4, pc}
   2d9c0:	e3a00014 	mov	r0, #20
   2d9c4:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2d9c8:	ebfff64d 	bl	2b304 <CTimer::SimpleMsDelay(unsigned int)>
   2d9cc:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2d9d0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2d9d4:	0afffff9 	beq	2d9c0 <CBcmMailBox::Flush()+0x18>
   2d9d8:	e8bd8010 	pop	{r4, pc}

0002d9dc <CBcmMailBox::Read()>:
   2d9dc:	e5901000 	ldr	r1, [r0]
   2d9e0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   2d9e4:	e3432f00 	movt	r2, #16128	; 0x3f00
   2d9e8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2d9ec:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2d9f0:	1afffffc 	bne	2d9e8 <CBcmMailBox::Read()+0xc>
   2d9f4:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2d9f8:	e200300f 	and	r3, r0, #15
   2d9fc:	e1530001 	cmp	r3, r1
   2da00:	1afffff8 	bne	2d9e8 <CBcmMailBox::Read()+0xc>
   2da04:	e3c0000f 	bic	r0, r0, #15
   2da08:	e12fff1e 	bx	lr

0002da0c <CBcmMailBox::Write(unsigned int)>:
   2da0c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   2da10:	e3432f00 	movt	r2, #16128	; 0x3f00
   2da14:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2da18:	e3530000 	cmp	r3, #0
   2da1c:	bafffffc 	blt	2da14 <CBcmMailBox::Write(unsigned int)+0x8>
   2da20:	e311000f 	tst	r1, #15
   2da24:	1a000003 	bne	2da38 <CBcmMailBox::Write(unsigned int)+0x2c>
   2da28:	e5903000 	ldr	r3, [r0]
   2da2c:	e1811003 	orr	r1, r1, r3
   2da30:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2da34:	e12fff1e 	bx	lr
   2da38:	e30718bc 	movw	r1, #30908	; 0x78bc
   2da3c:	e3401003 	movt	r1, #3
   2da40:	e30708cc 	movw	r0, #30924	; 0x78cc
   2da44:	e3400003 	movt	r0, #3
   2da48:	e92d4010 	push	{r4, lr}
   2da4c:	e3a02062 	mov	r2, #98	; 0x62
   2da50:	ebffdd47 	bl	24f74 <assertion_failed>

0002da54 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   2da54:	e30934cc 	movw	r3, #38092	; 0x94cc
   2da58:	e3403003 	movt	r3, #3
   2da5c:	e3a02000 	mov	r2, #0
   2da60:	e5832000 	str	r2, [r3]
   2da64:	e12fff1e 	bx	lr

0002da68 <CCharGenerator::CCharGenerator()>:
   2da68:	e3a03008 	mov	r3, #8
   2da6c:	e5803000 	str	r3, [r0]
   2da70:	e12fff1e 	bx	lr

0002da74 <CCharGenerator::~CCharGenerator()>:
   2da74:	e12fff1e 	bx	lr

0002da78 <CCharGenerator::GetCharWidth() const>:
   2da78:	e5900000 	ldr	r0, [r0]
   2da7c:	e12fff1e 	bx	lr

0002da80 <CCharGenerator::GetCharHeight() const>:
   2da80:	e3a00013 	mov	r0, #19
   2da84:	e12fff1e 	bx	lr

0002da88 <CCharGenerator::GetUnderline() const>:
   2da88:	e3a00010 	mov	r0, #16
   2da8c:	e12fff1e 	bx	lr

0002da90 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   2da90:	e6ef1071 	uxtb	r1, r1
   2da94:	e2411021 	sub	r1, r1, #33	; 0x21
   2da98:	e35100de 	cmp	r1, #222	; 0xde
   2da9c:	8a00000d 	bhi	2dad8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   2daa0:	e5900000 	ldr	r0, [r0]
   2daa4:	e1500002 	cmp	r0, r2
   2daa8:	9a00000c 	bls	2dae0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   2daac:	e353000f 	cmp	r3, #15
   2dab0:	8a000008 	bhi	2dad8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   2dab4:	e30708e0 	movw	r0, #30944	; 0x78e0
   2dab8:	e3400003 	movt	r0, #3
   2dabc:	e0801201 	add	r1, r0, r1, lsl #4
   2dac0:	e3a00080 	mov	r0, #128	; 0x80
   2dac4:	e7d13003 	ldrb	r3, [r1, r3]
   2dac8:	e0133250 	ands	r3, r3, r0, asr r2
   2dacc:	13a00001 	movne	r0, #1
   2dad0:	03a00000 	moveq	r0, #0
   2dad4:	e12fff1e 	bx	lr
   2dad8:	e3a00000 	mov	r0, #0
   2dadc:	e12fff1e 	bx	lr
   2dae0:	e30816d0 	movw	r1, #34512	; 0x86d0
   2dae4:	e3401003 	movt	r1, #3
   2dae8:	e30806e4 	movw	r0, #34532	; 0x86e4
   2daec:	e3400003 	movt	r0, #3
   2daf0:	e92d4010 	push	{r4, lr}
   2daf4:	e3a0204e 	mov	r2, #78	; 0x4e
   2daf8:	ebffdd1d 	bl	24f74 <assertion_failed>
   2dafc:	00000000 	andeq	r0, r0, r0

0002db00 <DelayLoop>:
   2db00:	e1a01001 	mov	r1, r1
   2db04:	e1a02002 	mov	r2, r2
   2db08:	e2500001 	subs	r0, r0, #1
   2db0c:	8afffffb 	bhi	2db00 <DelayLoop>
   2db10:	e1a0f00e 	mov	pc, lr

0002db14 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   2db14:	e92d4070 	push	{r4, r5, r6, lr}
   2db18:	e1a04000 	mov	r4, r0
   2db1c:	e1a06001 	mov	r6, r1
   2db20:	e1a05002 	mov	r5, r2
   2db24:	ebffe5a4 	bl	271bc <CMachineInfo::Get()>
   2db28:	e1a01006 	mov	r1, r6
   2db2c:	ebffe551 	bl	27078 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   2db30:	e584500c 	str	r5, [r4, #12]
   2db34:	e3500080 	cmp	r0, #128	; 0x80
   2db38:	e3a05000 	mov	r5, #0
   2db3c:	e5840000 	str	r0, [r4]
   2db40:	e5845004 	str	r5, [r4, #4]
   2db44:	e5845008 	str	r5, [r4, #8]
   2db48:	e5c45010 	strb	r5, [r4, #16]
   2db4c:	e5845014 	str	r5, [r4, #20]
   2db50:	e5845018 	str	r5, [r4, #24]
   2db54:	e5c4501c 	strb	r5, [r4, #28]
   2db58:	0a000021 	beq	2dbe4 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xd0>
   2db5c:	e350000c 	cmp	r0, #12
   2db60:	8a000024 	bhi	2dbf8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xe4>
   2db64:	e1a01005 	mov	r1, r5
   2db68:	e3a0003f 	mov	r0, #63	; 0x3f
   2db6c:	ebfff8de 	bl	2beec <operator new[](unsigned int, int)>
   2db70:	e280301f 	add	r3, r0, #31
   2db74:	e3c3301f 	bic	r3, r3, #31
   2db78:	e3a02a07 	mov	r2, #28672	; 0x7000
   2db7c:	e3432f00 	movt	r2, #16128	; 0x3f00
   2db80:	e9840009 	stmib	r4, {r0, r3}
   2db84:	e3a0c001 	mov	ip, #1
   2db88:	e5941000 	ldr	r1, [r4]
   2db8c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   2db90:	e5835018 	str	r5, [r3, #24]
   2db94:	e583501c 	str	r5, [r3, #28]
   2db98:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   2db9c:	e183311c 	orr	r3, r3, ip, lsl r1
   2dba0:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   2dba4:	ebfff5dd 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
   2dba8:	e5943000 	ldr	r3, [r4]
   2dbac:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   2dbb0:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   2dbb4:	e2833070 	add	r3, r3, #112	; 0x70
   2dbb8:	e1a03403 	lsl	r3, r3, #8
   2dbbc:	e5832000 	str	r2, [r3]
   2dbc0:	e5943000 	ldr	r3, [r4]
   2dbc4:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   2dbc8:	e2833070 	add	r3, r3, #112	; 0x70
   2dbcc:	e1a03403 	lsl	r3, r3, #8
   2dbd0:	e5932000 	ldr	r2, [r3]
   2dbd4:	e3520000 	cmp	r2, #0
   2dbd8:	bafffffc 	blt	2dbd0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xbc>
   2dbdc:	e1a00004 	mov	r0, r4
   2dbe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2dbe4:	e30816fc 	movw	r1, #34556	; 0x86fc
   2dbe8:	e3401003 	movt	r1, #3
   2dbec:	e2810010 	add	r0, r1, #16
   2dbf0:	e3a02056 	mov	r2, #86	; 0x56
   2dbf4:	ebffdcde 	bl	24f74 <assertion_failed>
   2dbf8:	e30816fc 	movw	r1, #34556	; 0x86fc
   2dbfc:	e3401003 	movt	r1, #3
   2dc00:	e2810030 	add	r0, r1, #48	; 0x30
   2dc04:	e3a02057 	mov	r2, #87	; 0x57
   2dc08:	ebffdcd9 	bl	24f74 <assertion_failed>

0002dc0c <CDMAChannel::~CDMAChannel()>:
   2dc0c:	e5903000 	ldr	r3, [r0]
   2dc10:	e92d4010 	push	{r4, lr}
   2dc14:	e353000c 	cmp	r3, #12
   2dc18:	8a00002c 	bhi	2dcd0 <CDMAChannel::~CDMAChannel()+0xc4>
   2dc1c:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   2dc20:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   2dc24:	e2833070 	add	r3, r3, #112	; 0x70
   2dc28:	e1a04000 	mov	r4, r0
   2dc2c:	e1a03403 	lsl	r3, r3, #8
   2dc30:	e5832000 	str	r2, [r3]
   2dc34:	e5901000 	ldr	r1, [r0]
   2dc38:	e281283f 	add	r2, r1, #4128768	; 0x3f0000
   2dc3c:	e2822070 	add	r2, r2, #112	; 0x70
   2dc40:	e1a02402 	lsl	r2, r2, #8
   2dc44:	e5923000 	ldr	r3, [r2]
   2dc48:	e3530000 	cmp	r3, #0
   2dc4c:	bafffffc 	blt	2dc44 <CDMAChannel::~CDMAChannel()+0x38>
   2dc50:	e3a03a07 	mov	r3, #28672	; 0x7000
   2dc54:	e3433f00 	movt	r3, #16128	; 0x3f00
   2dc58:	e594000c 	ldr	r0, [r4, #12]
   2dc5c:	e3a0e001 	mov	lr, #1
   2dc60:	e3a0c000 	mov	ip, #0
   2dc64:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   2dc68:	e3500000 	cmp	r0, #0
   2dc6c:	e1c2211e 	bic	r2, r2, lr, lsl r1
   2dc70:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   2dc74:	e584c014 	str	ip, [r4, #20]
   2dc78:	0a000009 	beq	2dca4 <CDMAChannel::~CDMAChannel()+0x98>
   2dc7c:	e5d43010 	ldrb	r3, [r4, #16]
   2dc80:	e153000c 	cmp	r3, ip
   2dc84:	0a000004 	beq	2dc9c <CDMAChannel::~CDMAChannel()+0x90>
   2dc88:	e5941000 	ldr	r1, [r4]
   2dc8c:	e351000c 	cmp	r1, #12
   2dc90:	8a000013 	bhi	2dce4 <CDMAChannel::~CDMAChannel()+0xd8>
   2dc94:	e2811010 	add	r1, r1, #16
   2dc98:	ebfffd0f 	bl	2d0dc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2dc9c:	e3a03000 	mov	r3, #0
   2dca0:	e584300c 	str	r3, [r4, #12]
   2dca4:	ebffe544 	bl	271bc <CMachineInfo::Get()>
   2dca8:	e5941000 	ldr	r1, [r4]
   2dcac:	ebffe521 	bl	27138 <CMachineInfo::FreeDMAChannel(unsigned int)>
   2dcb0:	e5940004 	ldr	r0, [r4, #4]
   2dcb4:	e3a03000 	mov	r3, #0
   2dcb8:	e5843008 	str	r3, [r4, #8]
   2dcbc:	e1500003 	cmp	r0, r3
   2dcc0:	0a000000 	beq	2dcc8 <CDMAChannel::~CDMAChannel()+0xbc>
   2dcc4:	ebfff896 	bl	2bf24 <operator delete[](void*)>
   2dcc8:	e1a00004 	mov	r0, r4
   2dccc:	e8bd8010 	pop	{r4, pc}
   2dcd0:	e30816fc 	movw	r1, #34556	; 0x86fc
   2dcd4:	e3401003 	movt	r1, #3
   2dcd8:	e2810030 	add	r0, r1, #48	; 0x30
   2dcdc:	e3a02071 	mov	r2, #113	; 0x71
   2dce0:	ebffdca3 	bl	24f74 <assertion_failed>
   2dce4:	e30816fc 	movw	r1, #34556	; 0x86fc
   2dce8:	e3401003 	movt	r1, #3
   2dcec:	e281004c 	add	r0, r1, #76	; 0x4c
   2dcf0:	e3a02083 	mov	r2, #131	; 0x83
   2dcf4:	ebffdc9e 	bl	24f74 <assertion_failed>

0002dcf8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   2dcf8:	e92d4030 	push	{r4, r5, lr}
   2dcfc:	e1a04000 	mov	r4, r0
   2dd00:	e2515000 	subs	r5, r1, #0
   2dd04:	e24dd00c 	sub	sp, sp, #12
   2dd08:	e59dc018 	ldr	ip, [sp, #24]
   2dd0c:	e5dd001c 	ldrb	r0, [sp, #28]
   2dd10:	0a000037 	beq	2ddf4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xfc>
   2dd14:	e3520000 	cmp	r2, #0
   2dd18:	0a00003a 	beq	2de08 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x110>
   2dd1c:	e3530000 	cmp	r3, #0
   2dd20:	0a00003d 	beq	2de1c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x124>
   2dd24:	e35c000f 	cmp	ip, #15
   2dd28:	8a000040 	bhi	2de30 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x138>
   2dd2c:	e5941008 	ldr	r1, [r4, #8]
   2dd30:	e3510000 	cmp	r1, #0
   2dd34:	0a000042 	beq	2de44 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x14c>
   2dd38:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   2dd3c:	8a000045 	bhi	2de58 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x160>
   2dd40:	e594e000 	ldr	lr, [r4]
   2dd44:	e28ee83f 	add	lr, lr, #4128768	; 0x3f0000
   2dd48:	e28ee070 	add	lr, lr, #112	; 0x70
   2dd4c:	e1a0e40e 	lsl	lr, lr, #8
   2dd50:	e59ee020 	ldr	lr, [lr, #32]
   2dd54:	e22ee201 	eor	lr, lr, #268435456	; 0x10000000
   2dd58:	e7e0ee5e 	ubfx	lr, lr, #28, #1
   2dd5c:	e3530801 	cmp	r3, #65536	; 0x10000
   2dd60:	338ee001 	orrcc	lr, lr, #1
   2dd64:	e35e0000 	cmp	lr, #0
   2dd68:	0a00003f 	beq	2de6c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x174>
   2dd6c:	e1a0c60c 	lsl	ip, ip, #12
   2dd70:	e581300c 	str	r3, [r1, #12]
   2dd74:	e38cce33 	orr	ip, ip, #816	; 0x330
   2dd78:	e3500000 	cmp	r0, #0
   2dd7c:	e581c000 	str	ip, [r1]
   2dd80:	e382c103 	orr	ip, r2, #-1073741824	; 0xc0000000
   2dd84:	e581c004 	str	ip, [r1, #4]
   2dd88:	e385c103 	orr	ip, r5, #-1073741824	; 0xc0000000
   2dd8c:	e581c008 	str	ip, [r1, #8]
   2dd90:	e3a0c000 	mov	ip, #0
   2dd94:	e5c1c010 	strb	ip, [r1, #16]
   2dd98:	e5c1c011 	strb	ip, [r1, #17]
   2dd9c:	e5c1c012 	strb	ip, [r1, #18]
   2dda0:	e5c1c013 	strb	ip, [r1, #19]
   2dda4:	e5c1c014 	strb	ip, [r1, #20]
   2dda8:	e5c1c015 	strb	ip, [r1, #21]
   2ddac:	e5c1c016 	strb	ip, [r1, #22]
   2ddb0:	e5c1c017 	strb	ip, [r1, #23]
   2ddb4:	1a000002 	bne	2ddc4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xcc>
   2ddb8:	e5840020 	str	r0, [r4, #32]
   2ddbc:	e28dd00c 	add	sp, sp, #12
   2ddc0:	e8bd8030 	pop	{r4, r5, pc}
   2ddc4:	e1a00002 	mov	r0, r2
   2ddc8:	e5843024 	str	r3, [r4, #36]	; 0x24
   2ddcc:	e1a01003 	mov	r1, r3
   2ddd0:	e5845020 	str	r5, [r4, #32]
   2ddd4:	e58d3004 	str	r3, [sp, #4]
   2ddd8:	ebfff9ad 	bl	2c494 <CleanAndInvalidateDataCacheRange>
   2dddc:	e59d3004 	ldr	r3, [sp, #4]
   2dde0:	e1a00005 	mov	r0, r5
   2dde4:	e1a01003 	mov	r1, r3
   2dde8:	e28dd00c 	add	sp, sp, #12
   2ddec:	e8bd4030 	pop	{r4, r5, lr}
   2ddf0:	eafff9a7 	b	2c494 <CleanAndInvalidateDataCacheRange>
   2ddf4:	e30816fc 	movw	r1, #34556	; 0x86fc
   2ddf8:	e3401003 	movt	r1, #3
   2ddfc:	e2810060 	add	r0, r1, #96	; 0x60
   2de00:	e3a02095 	mov	r2, #149	; 0x95
   2de04:	ebffdc5a 	bl	24f74 <assertion_failed>
   2de08:	e30816fc 	movw	r1, #34556	; 0x86fc
   2de0c:	e3401003 	movt	r1, #3
   2de10:	e2810074 	add	r0, r1, #116	; 0x74
   2de14:	e3a02096 	mov	r2, #150	; 0x96
   2de18:	ebffdc55 	bl	24f74 <assertion_failed>
   2de1c:	e30816fc 	movw	r1, #34556	; 0x86fc
   2de20:	e3401003 	movt	r1, #3
   2de24:	e2810084 	add	r0, r1, #132	; 0x84
   2de28:	e3a02097 	mov	r2, #151	; 0x97
   2de2c:	ebffdc50 	bl	24f74 <assertion_failed>
   2de30:	e30816fc 	movw	r1, #34556	; 0x86fc
   2de34:	e3401003 	movt	r1, #3
   2de38:	e2810090 	add	r0, r1, #144	; 0x90
   2de3c:	e3a02098 	mov	r2, #152	; 0x98
   2de40:	ebffdc4b 	bl	24f74 <assertion_failed>
   2de44:	e30816fc 	movw	r1, #34556	; 0x86fc
   2de48:	e3401003 	movt	r1, #3
   2de4c:	e28100a4 	add	r0, r1, #164	; 0xa4
   2de50:	e3a0209a 	mov	r2, #154	; 0x9a
   2de54:	ebffdc46 	bl	24f74 <assertion_failed>
   2de58:	e30816fc 	movw	r1, #34556	; 0x86fc
   2de5c:	e3401003 	movt	r1, #3
   2de60:	e28100bc 	add	r0, r1, #188	; 0xbc
   2de64:	e3a0209b 	mov	r2, #155	; 0x9b
   2de68:	ebffdc41 	bl	24f74 <assertion_failed>
   2de6c:	e30816fc 	movw	r1, #34556	; 0x86fc
   2de70:	e3401003 	movt	r1, #3
   2de74:	e28100d4 	add	r0, r1, #212	; 0xd4
   2de78:	e3a0209d 	mov	r2, #157	; 0x9d
   2de7c:	ebffdc3c 	bl	24f74 <assertion_failed>

0002de80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   2de80:	e92d4010 	push	{r4, lr}
   2de84:	e1a0e000 	mov	lr, r0
   2de88:	e2514000 	subs	r4, r1, #0
   2de8c:	e5dd0008 	ldrb	r0, [sp, #8]
   2de90:	0a00002a 	beq	2df40 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xc0>
   2de94:	e3530000 	cmp	r3, #0
   2de98:	0a00002d 	beq	2df54 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xd4>
   2de9c:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   2dea0:	8a000030 	bhi	2df68 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xe8>
   2dea4:	e59e1000 	ldr	r1, [lr]
   2dea8:	e281183f 	add	r1, r1, #4128768	; 0x3f0000
   2deac:	e2811070 	add	r1, r1, #112	; 0x70
   2deb0:	e1a01401 	lsl	r1, r1, #8
   2deb4:	e5911020 	ldr	r1, [r1, #32]
   2deb8:	e2211201 	eor	r1, r1, #268435456	; 0x10000000
   2debc:	e7e01e51 	ubfx	r1, r1, #28, #1
   2dec0:	e3530801 	cmp	r3, #65536	; 0x10000
   2dec4:	33811001 	orrcc	r1, r1, #1
   2dec8:	e3510000 	cmp	r1, #0
   2decc:	0a000034 	beq	2dfa4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x124>
   2ded0:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   2ded4:	0a000028 	beq	2df7c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xfc>
   2ded8:	e59ec008 	ldr	ip, [lr, #8]
   2dedc:	e282247e 	add	r2, r2, #2113929216	; 0x7e000000
   2dee0:	e35c0000 	cmp	ip, #0
   2dee4:	0a000029 	beq	2df90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x110>
   2dee8:	e3001438 	movw	r1, #1080	; 0x438
   2deec:	e58c2004 	str	r2, [ip, #4]
   2def0:	e1810800 	orr	r0, r1, r0, lsl #16
   2def4:	e3842103 	orr	r2, r4, #-1073741824	; 0xc0000000
   2def8:	e58c0000 	str	r0, [ip]
   2defc:	e1a01003 	mov	r1, r3
   2df00:	e58c2008 	str	r2, [ip, #8]
   2df04:	e1a00004 	mov	r0, r4
   2df08:	e3a02000 	mov	r2, #0
   2df0c:	e58c300c 	str	r3, [ip, #12]
   2df10:	e5cc2010 	strb	r2, [ip, #16]
   2df14:	e5cc2011 	strb	r2, [ip, #17]
   2df18:	e5cc2012 	strb	r2, [ip, #18]
   2df1c:	e5cc2013 	strb	r2, [ip, #19]
   2df20:	e5cc2014 	strb	r2, [ip, #20]
   2df24:	e5cc2015 	strb	r2, [ip, #21]
   2df28:	e5cc2016 	strb	r2, [ip, #22]
   2df2c:	e5cc2017 	strb	r2, [ip, #23]
   2df30:	e58e4020 	str	r4, [lr, #32]
   2df34:	e58e3024 	str	r3, [lr, #36]	; 0x24
   2df38:	e8bd4010 	pop	{r4, lr}
   2df3c:	eafff954 	b	2c494 <CleanAndInvalidateDataCacheRange>
   2df40:	e30816fc 	movw	r1, #34556	; 0x86fc
   2df44:	e3401003 	movt	r1, #3
   2df48:	e2810060 	add	r0, r1, #96	; 0x60
   2df4c:	e3a020ba 	mov	r2, #186	; 0xba
   2df50:	ebffdc07 	bl	24f74 <assertion_failed>
   2df54:	e30816fc 	movw	r1, #34556	; 0x86fc
   2df58:	e3401003 	movt	r1, #3
   2df5c:	e2810084 	add	r0, r1, #132	; 0x84
   2df60:	e3a020bb 	mov	r2, #187	; 0xbb
   2df64:	ebffdc02 	bl	24f74 <assertion_failed>
   2df68:	e30816fc 	movw	r1, #34556	; 0x86fc
   2df6c:	e3401003 	movt	r1, #3
   2df70:	e28100bc 	add	r0, r1, #188	; 0xbc
   2df74:	e3a020bc 	mov	r2, #188	; 0xbc
   2df78:	ebffdbfd 	bl	24f74 <assertion_failed>
   2df7c:	e30816fc 	movw	r1, #34556	; 0x86fc
   2df80:	e3401003 	movt	r1, #3
   2df84:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2df88:	e3a020c1 	mov	r2, #193	; 0xc1
   2df8c:	ebffdbf8 	bl	24f74 <assertion_failed>
   2df90:	e30816fc 	movw	r1, #34556	; 0x86fc
   2df94:	e3401003 	movt	r1, #3
   2df98:	e28100a4 	add	r0, r1, #164	; 0xa4
   2df9c:	e3a020c4 	mov	r2, #196	; 0xc4
   2dfa0:	ebffdbf3 	bl	24f74 <assertion_failed>
   2dfa4:	e30816fc 	movw	r1, #34556	; 0x86fc
   2dfa8:	e3401003 	movt	r1, #3
   2dfac:	e28100d4 	add	r0, r1, #212	; 0xd4
   2dfb0:	e3a020be 	mov	r2, #190	; 0xbe
   2dfb4:	ebffdbee 	bl	24f74 <assertion_failed>

0002dfb8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   2dfb8:	e92d4010 	push	{r4, lr}
   2dfbc:	e1a0e000 	mov	lr, r0
   2dfc0:	e2520000 	subs	r0, r2, #0
   2dfc4:	e5dd2008 	ldrb	r2, [sp, #8]
   2dfc8:	0a000028 	beq	2e070 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xb8>
   2dfcc:	e3530000 	cmp	r3, #0
   2dfd0:	0a00002b 	beq	2e084 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xcc>
   2dfd4:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   2dfd8:	8a00002e 	bhi	2e098 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xe0>
   2dfdc:	e59ec000 	ldr	ip, [lr]
   2dfe0:	e28cc83f 	add	ip, ip, #4128768	; 0x3f0000
   2dfe4:	e28cc070 	add	ip, ip, #112	; 0x70
   2dfe8:	e1a0c40c 	lsl	ip, ip, #8
   2dfec:	e59cc020 	ldr	ip, [ip, #32]
   2dff0:	e22cc201 	eor	ip, ip, #268435456	; 0x10000000
   2dff4:	e7e0ce5c 	ubfx	ip, ip, #28, #1
   2dff8:	e3530801 	cmp	r3, #65536	; 0x10000
   2dffc:	338cc001 	orrcc	ip, ip, #1
   2e000:	e35c0000 	cmp	ip, #0
   2e004:	0a000032 	beq	2e0d4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x11c>
   2e008:	e3d144ff 	bics	r4, r1, #-16777216	; 0xff000000
   2e00c:	0a000026 	beq	2e0ac <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xf4>
   2e010:	e59ec008 	ldr	ip, [lr, #8]
   2e014:	e284147e 	add	r1, r4, #2113929216	; 0x7e000000
   2e018:	e35c0000 	cmp	ip, #0
   2e01c:	0a000027 	beq	2e0c0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x108>
   2e020:	e1a02802 	lsl	r2, r2, #16
   2e024:	e58c1008 	str	r1, [ip, #8]
   2e028:	e58c300c 	str	r3, [ip, #12]
   2e02c:	e3822fd2 	orr	r2, r2, #840	; 0x348
   2e030:	e1a01003 	mov	r1, r3
   2e034:	e58c2000 	str	r2, [ip]
   2e038:	e3803103 	orr	r3, r0, #-1073741824	; 0xc0000000
   2e03c:	e58c3004 	str	r3, [ip, #4]
   2e040:	e3a03000 	mov	r3, #0
   2e044:	e5cc3010 	strb	r3, [ip, #16]
   2e048:	e5cc3011 	strb	r3, [ip, #17]
   2e04c:	e5cc3012 	strb	r3, [ip, #18]
   2e050:	e5cc3013 	strb	r3, [ip, #19]
   2e054:	e5cc3014 	strb	r3, [ip, #20]
   2e058:	e5cc3015 	strb	r3, [ip, #21]
   2e05c:	e5cc3016 	strb	r3, [ip, #22]
   2e060:	e5cc3017 	strb	r3, [ip, #23]
   2e064:	e58e3020 	str	r3, [lr, #32]
   2e068:	e8bd4010 	pop	{r4, lr}
   2e06c:	eafff908 	b	2c494 <CleanAndInvalidateDataCacheRange>
   2e070:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e074:	e3401003 	movt	r1, #3
   2e078:	e2810074 	add	r0, r1, #116	; 0x74
   2e07c:	e3a020d9 	mov	r2, #217	; 0xd9
   2e080:	ebffdbbb 	bl	24f74 <assertion_failed>
   2e084:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e088:	e3401003 	movt	r1, #3
   2e08c:	e2810084 	add	r0, r1, #132	; 0x84
   2e090:	e3a020da 	mov	r2, #218	; 0xda
   2e094:	ebffdbb6 	bl	24f74 <assertion_failed>
   2e098:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e09c:	e3401003 	movt	r1, #3
   2e0a0:	e28100bc 	add	r0, r1, #188	; 0xbc
   2e0a4:	e3a020db 	mov	r2, #219	; 0xdb
   2e0a8:	ebffdbb1 	bl	24f74 <assertion_failed>
   2e0ac:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e0b0:	e3401003 	movt	r1, #3
   2e0b4:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2e0b8:	e3a020e0 	mov	r2, #224	; 0xe0
   2e0bc:	ebffdbac 	bl	24f74 <assertion_failed>
   2e0c0:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e0c4:	e3401003 	movt	r1, #3
   2e0c8:	e28100a4 	add	r0, r1, #164	; 0xa4
   2e0cc:	e3a020e3 	mov	r2, #227	; 0xe3
   2e0d0:	ebffdba7 	bl	24f74 <assertion_failed>
   2e0d4:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e0d8:	e3401003 	movt	r1, #3
   2e0dc:	e28100d4 	add	r0, r1, #212	; 0xd4
   2e0e0:	e3a020dd 	mov	r2, #221	; 0xdd
   2e0e4:	ebffdba2 	bl	24f74 <assertion_failed>

0002e0e8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   2e0e8:	e92d4070 	push	{r4, r5, r6, lr}
   2e0ec:	e3510000 	cmp	r1, #0
   2e0f0:	e1a04000 	mov	r4, r0
   2e0f4:	e59de010 	ldr	lr, [sp, #16]
   2e0f8:	e59d0014 	ldr	r0, [sp, #20]
   2e0fc:	e59d5018 	ldr	r5, [sp, #24]
   2e100:	0a000032 	beq	2e1d0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   2e104:	e3520000 	cmp	r2, #0
   2e108:	0a000035 	beq	2e1e4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   2e10c:	e3530000 	cmp	r3, #0
   2e110:	0a000038 	beq	2e1f8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   2e114:	e3530801 	cmp	r3, #65536	; 0x10000
   2e118:	2a00003b 	bcs	2e20c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x124>
   2e11c:	e35e0000 	cmp	lr, #0
   2e120:	0a00003e 	beq	2e220 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   2e124:	e35e0901 	cmp	lr, #16384	; 0x4000
   2e128:	2a000041 	bcs	2e234 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x14c>
   2e12c:	e3500801 	cmp	r0, #65536	; 0x10000
   2e130:	2a000021 	bcs	2e1bc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
   2e134:	e355000f 	cmp	r5, #15
   2e138:	8a000042 	bhi	2e248 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x160>
   2e13c:	e594c000 	ldr	ip, [r4]
   2e140:	e28cc83f 	add	ip, ip, #4128768	; 0x3f0000
   2e144:	e28cc070 	add	ip, ip, #112	; 0x70
   2e148:	e1a0c40c 	lsl	ip, ip, #8
   2e14c:	e59cc020 	ldr	ip, [ip, #32]
   2e150:	e31c0201 	tst	ip, #268435456	; 0x10000000
   2e154:	1a000040 	bne	2e25c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x174>
   2e158:	e594c008 	ldr	ip, [r4, #8]
   2e15c:	e35c0000 	cmp	ip, #0
   2e160:	0a000042 	beq	2e270 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x188>
   2e164:	e3006332 	movw	r6, #818	; 0x332
   2e168:	e3811103 	orr	r1, r1, #-1073741824	; 0xc0000000
   2e16c:	e58c1008 	str	r1, [ip, #8]
   2e170:	e24e1001 	sub	r1, lr, #1
   2e174:	e1a00800 	lsl	r0, r0, #16
   2e178:	e1865605 	orr	r5, r6, r5, lsl #12
   2e17c:	e58c0010 	str	r0, [ip, #16]
   2e180:	e1830801 	orr	r0, r3, r1, lsl #16
   2e184:	e58c5000 	str	r5, [ip]
   2e188:	e001039e 	mul	r1, lr, r3
   2e18c:	e58c000c 	str	r0, [ip, #12]
   2e190:	e3823103 	orr	r3, r2, #-1073741824	; 0xc0000000
   2e194:	e1a00002 	mov	r0, r2
   2e198:	e58c3004 	str	r3, [ip, #4]
   2e19c:	e3a03000 	mov	r3, #0
   2e1a0:	e5cc3014 	strb	r3, [ip, #20]
   2e1a4:	e5cc3015 	strb	r3, [ip, #21]
   2e1a8:	e5cc3016 	strb	r3, [ip, #22]
   2e1ac:	e5cc3017 	strb	r3, [ip, #23]
   2e1b0:	e5843020 	str	r3, [r4, #32]
   2e1b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   2e1b8:	eafff8b5 	b	2c494 <CleanAndInvalidateDataCacheRange>
   2e1bc:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e1c0:	e3401003 	movt	r1, #3
   2e1c4:	e2810e19 	add	r0, r1, #400	; 0x190
   2e1c8:	e3a020ff 	mov	r2, #255	; 0xff
   2e1cc:	ebffdb68 	bl	24f74 <assertion_failed>
   2e1d0:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e1d4:	e3401003 	movt	r1, #3
   2e1d8:	e2810060 	add	r0, r1, #96	; 0x60
   2e1dc:	e3a020f9 	mov	r2, #249	; 0xf9
   2e1e0:	ebffdb63 	bl	24f74 <assertion_failed>
   2e1e4:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e1e8:	e3401003 	movt	r1, #3
   2e1ec:	e2810074 	add	r0, r1, #116	; 0x74
   2e1f0:	e3a020fa 	mov	r2, #250	; 0xfa
   2e1f4:	ebffdb5e 	bl	24f74 <assertion_failed>
   2e1f8:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e1fc:	e3401003 	movt	r1, #3
   2e200:	e2810f4f 	add	r0, r1, #316	; 0x13c
   2e204:	e3a020fb 	mov	r2, #251	; 0xfb
   2e208:	ebffdb59 	bl	24f74 <assertion_failed>
   2e20c:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e210:	e3401003 	movt	r1, #3
   2e214:	e2810e15 	add	r0, r1, #336	; 0x150
   2e218:	e3a020fc 	mov	r2, #252	; 0xfc
   2e21c:	ebffdb54 	bl	24f74 <assertion_failed>
   2e220:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e224:	e3401003 	movt	r1, #3
   2e228:	e2810f5a 	add	r0, r1, #360	; 0x168
   2e22c:	e3a020fd 	mov	r2, #253	; 0xfd
   2e230:	ebffdb4f 	bl	24f74 <assertion_failed>
   2e234:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e238:	e3401003 	movt	r1, #3
   2e23c:	e2810f5e 	add	r0, r1, #376	; 0x178
   2e240:	e3a020fe 	mov	r2, #254	; 0xfe
   2e244:	ebffdb4a 	bl	24f74 <assertion_failed>
   2e248:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e24c:	e3401003 	movt	r1, #3
   2e250:	e2810090 	add	r0, r1, #144	; 0x90
   2e254:	e3a02c01 	mov	r2, #256	; 0x100
   2e258:	ebffdb45 	bl	24f74 <assertion_failed>
   2e25c:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e260:	e3401003 	movt	r1, #3
   2e264:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   2e268:	e3002102 	movw	r2, #258	; 0x102
   2e26c:	ebffdb40 	bl	24f74 <assertion_failed>
   2e270:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e274:	e3401003 	movt	r1, #3
   2e278:	e28100a4 	add	r0, r1, #164	; 0xa4
   2e27c:	e3a02f41 	mov	r2, #260	; 0x104
   2e280:	ebffdb3b 	bl	24f74 <assertion_failed>

0002e284 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   2e284:	e92d4070 	push	{r4, r5, r6, lr}
   2e288:	e1a05001 	mov	r5, r1
   2e28c:	e5901000 	ldr	r1, [r0]
   2e290:	e351000c 	cmp	r1, #12
   2e294:	8a000014 	bhi	2e2ec <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   2e298:	e1a04000 	mov	r4, r0
   2e29c:	e590000c 	ldr	r0, [r0, #12]
   2e2a0:	e3500000 	cmp	r0, #0
   2e2a4:	0a000015 	beq	2e300 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   2e2a8:	e5d43010 	ldrb	r3, [r4, #16]
   2e2ac:	e1a06002 	mov	r6, r2
   2e2b0:	e3530000 	cmp	r3, #0
   2e2b4:	0a000004 	beq	2e2cc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   2e2b8:	e5845014 	str	r5, [r4, #20]
   2e2bc:	e3550000 	cmp	r5, #0
   2e2c0:	0a000013 	beq	2e314 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   2e2c4:	e5846018 	str	r6, [r4, #24]
   2e2c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e2cc:	e1a03004 	mov	r3, r4
   2e2d0:	e2811010 	add	r1, r1, #16
   2e2d4:	e30e2644 	movw	r2, #58948	; 0xe644
   2e2d8:	e3402002 	movt	r2, #2
   2e2dc:	ebfffb3f 	bl	2cfe0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2e2e0:	e3a03001 	mov	r3, #1
   2e2e4:	e5c43010 	strb	r3, [r4, #16]
   2e2e8:	eafffff2 	b	2e2b8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   2e2ec:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e2f0:	e3401003 	movt	r1, #3
   2e2f4:	e281004c 	add	r0, r1, #76	; 0x4c
   2e2f8:	e300211a 	movw	r2, #282	; 0x11a
   2e2fc:	ebffdb1c 	bl	24f74 <assertion_failed>
   2e300:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e304:	e3401003 	movt	r1, #3
   2e308:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   2e30c:	e300211b 	movw	r2, #283	; 0x11b
   2e310:	ebffdb17 	bl	24f74 <assertion_failed>
   2e314:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e318:	e3401003 	movt	r1, #3
   2e31c:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   2e320:	e3002125 	movw	r2, #293	; 0x125
   2e324:	ebffdb12 	bl	24f74 <assertion_failed>

0002e328 <CDMAChannel::Start()>:
   2e328:	e5902000 	ldr	r2, [r0]
   2e32c:	e92d4010 	push	{r4, lr}
   2e330:	e352000c 	cmp	r2, #12
   2e334:	8a00002c 	bhi	2e3ec <CDMAChannel::Start()+0xc4>
   2e338:	e1a04000 	mov	r4, r0
   2e33c:	e5900008 	ldr	r0, [r0, #8]
   2e340:	e3500000 	cmp	r0, #0
   2e344:	0a00002d 	beq	2e400 <CDMAChannel::Start()+0xd8>
   2e348:	e5943014 	ldr	r3, [r4, #20]
   2e34c:	e3530000 	cmp	r3, #0
   2e350:	0a000008 	beq	2e378 <CDMAChannel::Start()+0x50>
   2e354:	e594300c 	ldr	r3, [r4, #12]
   2e358:	e3530000 	cmp	r3, #0
   2e35c:	0a000036 	beq	2e43c <CDMAChannel::Start()+0x114>
   2e360:	e5d43010 	ldrb	r3, [r4, #16]
   2e364:	e3530000 	cmp	r3, #0
   2e368:	0a00001a 	beq	2e3d8 <CDMAChannel::Start()+0xb0>
   2e36c:	e5903000 	ldr	r3, [r0]
   2e370:	e3833001 	orr	r3, r3, #1
   2e374:	e5803000 	str	r3, [r0]
   2e378:	e282383f 	add	r3, r2, #4128768	; 0x3f0000
   2e37c:	e2833070 	add	r3, r3, #112	; 0x70
   2e380:	e1a03403 	lsl	r3, r3, #8
   2e384:	e5931000 	ldr	r1, [r3]
   2e388:	e3110004 	tst	r1, #4
   2e38c:	1a000020 	bne	2e414 <CDMAChannel::Start()+0xec>
   2e390:	e3a01a07 	mov	r1, #28672	; 0x7000
   2e394:	e3431f00 	movt	r1, #16128	; 0x3f00
   2e398:	e3a0c001 	mov	ip, #1
   2e39c:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   2e3a0:	e011221c 	ands	r2, r1, ip, lsl r2
   2e3a4:	1a00001f 	bne	2e428 <CDMAChannel::Start()+0x100>
   2e3a8:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
   2e3ac:	e3a01020 	mov	r1, #32
   2e3b0:	e5832004 	str	r2, [r3, #4]
   2e3b4:	ebfff836 	bl	2c494 <CleanAndInvalidateDataCacheRange>
   2e3b8:	e5943000 	ldr	r3, [r4]
   2e3bc:	e3a02001 	mov	r2, #1
   2e3c0:	e34120f1 	movt	r2, #4337	; 0x10f1
   2e3c4:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   2e3c8:	e2833070 	add	r3, r3, #112	; 0x70
   2e3cc:	e1a03403 	lsl	r3, r3, #8
   2e3d0:	e5832000 	str	r2, [r3]
   2e3d4:	e8bd8010 	pop	{r4, pc}
   2e3d8:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e3dc:	e3401003 	movt	r1, #3
   2e3e0:	e2810f85 	add	r0, r1, #532	; 0x214
   2e3e4:	e3002132 	movw	r2, #306	; 0x132
   2e3e8:	ebffdae1 	bl	24f74 <assertion_failed>
   2e3ec:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e3f0:	e3401003 	movt	r1, #3
   2e3f4:	e2810030 	add	r0, r1, #48	; 0x30
   2e3f8:	e3a02f4b 	mov	r2, #300	; 0x12c
   2e3fc:	ebffdadc 	bl	24f74 <assertion_failed>
   2e400:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e404:	e3401003 	movt	r1, #3
   2e408:	e28100a4 	add	r0, r1, #164	; 0xa4
   2e40c:	e300212d 	movw	r2, #301	; 0x12d
   2e410:	ebffdad7 	bl	24f74 <assertion_failed>
   2e414:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e418:	e3401003 	movt	r1, #3
   2e41c:	e2810f89 	add	r0, r1, #548	; 0x224
   2e420:	e3a02f4e 	mov	r2, #312	; 0x138
   2e424:	ebffdad2 	bl	24f74 <assertion_failed>
   2e428:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e42c:	e3401003 	movt	r1, #3
   2e430:	e2810f96 	add	r0, r1, #600	; 0x258
   2e434:	e3002139 	movw	r2, #313	; 0x139
   2e438:	ebffdacd 	bl	24f74 <assertion_failed>
   2e43c:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e440:	e3401003 	movt	r1, #3
   2e444:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   2e448:	e3002131 	movw	r2, #305	; 0x131
   2e44c:	ebffdac8 	bl	24f74 <assertion_failed>

0002e450 <CDMAChannel::Wait()>:
   2e450:	e5903000 	ldr	r3, [r0]
   2e454:	e92d4010 	push	{r4, lr}
   2e458:	e353000c 	cmp	r3, #12
   2e45c:	8a000014 	bhi	2e4b4 <CDMAChannel::Wait()+0x64>
   2e460:	e5902014 	ldr	r2, [r0, #20]
   2e464:	e1a04000 	mov	r4, r0
   2e468:	e3520000 	cmp	r2, #0
   2e46c:	0283383f 	addeq	r3, r3, #4128768	; 0x3f0000
   2e470:	02833070 	addeq	r3, r3, #112	; 0x70
   2e474:	01a03403 	lsleq	r3, r3, #8
   2e478:	1a000012 	bne	2e4c8 <CDMAChannel::Wait()+0x78>
   2e47c:	e5930000 	ldr	r0, [r3]
   2e480:	e3100001 	tst	r0, #1
   2e484:	1afffffc 	bne	2e47c <CDMAChannel::Wait()+0x2c>
   2e488:	e5942020 	ldr	r2, [r4, #32]
   2e48c:	e2203c01 	eor	r3, r0, #256	; 0x100
   2e490:	e3520000 	cmp	r2, #0
   2e494:	e7e00453 	ubfx	r0, r3, #8, #1
   2e498:	e5c4001c 	strb	r0, [r4, #28]
   2e49c:	08bd8010 	popeq	{r4, pc}
   2e4a0:	e1a00002 	mov	r0, r2
   2e4a4:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   2e4a8:	ebfff7f9 	bl	2c494 <CleanAndInvalidateDataCacheRange>
   2e4ac:	e5d4001c 	ldrb	r0, [r4, #28]
   2e4b0:	e8bd8010 	pop	{r4, pc}
   2e4b4:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e4b8:	e3401003 	movt	r1, #3
   2e4bc:	e2810030 	add	r0, r1, #48	; 0x30
   2e4c0:	e3002149 	movw	r2, #329	; 0x149
   2e4c4:	ebffdaaa 	bl	24f74 <assertion_failed>
   2e4c8:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e4cc:	e3401003 	movt	r1, #3
   2e4d0:	e2810fa3 	add	r0, r1, #652	; 0x28c
   2e4d4:	e300214a 	movw	r2, #330	; 0x14a
   2e4d8:	ebffdaa5 	bl	24f74 <assertion_failed>

0002e4dc <CDMAChannel::GetStatus()>:
   2e4dc:	e5903000 	ldr	r3, [r0]
   2e4e0:	e92d4010 	push	{r4, lr}
   2e4e4:	e353000c 	cmp	r3, #12
   2e4e8:	8a000007 	bhi	2e50c <CDMAChannel::GetStatus()+0x30>
   2e4ec:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   2e4f0:	e2833070 	add	r3, r3, #112	; 0x70
   2e4f4:	e1a03403 	lsl	r3, r3, #8
   2e4f8:	e5933000 	ldr	r3, [r3]
   2e4fc:	e3130001 	tst	r3, #1
   2e500:	1a000006 	bne	2e520 <CDMAChannel::GetStatus()+0x44>
   2e504:	e5d0001c 	ldrb	r0, [r0, #28]
   2e508:	e8bd8010 	pop	{r4, pc}
   2e50c:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e510:	e3401003 	movt	r1, #3
   2e514:	e2810030 	add	r0, r1, #48	; 0x30
   2e518:	e3002162 	movw	r2, #354	; 0x162
   2e51c:	ebffda94 	bl	24f74 <assertion_failed>
   2e520:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e524:	e3401003 	movt	r1, #3
   2e528:	e2810faa 	add	r0, r1, #680	; 0x2a8
   2e52c:	e3002163 	movw	r2, #355	; 0x163
   2e530:	ebffda8f 	bl	24f74 <assertion_failed>

0002e534 <CDMAChannel::InterruptHandler()>:
   2e534:	e92d4010 	push	{r4, lr}
   2e538:	e1a04000 	mov	r4, r0
   2e53c:	e5900020 	ldr	r0, [r0, #32]
   2e540:	e3500000 	cmp	r0, #0
   2e544:	1a000020 	bne	2e5cc <CDMAChannel::InterruptHandler()+0x98>
   2e548:	e5941000 	ldr	r1, [r4]
   2e54c:	e351000c 	cmp	r1, #12
   2e550:	8a000022 	bhi	2e5e0 <CDMAChannel::InterruptHandler()+0xac>
   2e554:	e3a02a07 	mov	r2, #28672	; 0x7000
   2e558:	e3432f00 	movt	r2, #16128	; 0x3f00
   2e55c:	e3a03001 	mov	r3, #1
   2e560:	e5920fe0 	ldr	r0, [r2, #4064]	; 0xfe0
   2e564:	e1a03113 	lsl	r3, r3, r1
   2e568:	e1130000 	tst	r3, r0
   2e56c:	0a000020 	beq	2e5f4 <CDMAChannel::InterruptHandler()+0xc0>
   2e570:	e5823fe0 	str	r3, [r2, #4064]	; 0xfe0
   2e574:	e5943000 	ldr	r3, [r4]
   2e578:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   2e57c:	e2833070 	add	r3, r3, #112	; 0x70
   2e580:	e1a03403 	lsl	r3, r3, #8
   2e584:	e5931000 	ldr	r1, [r3]
   2e588:	e3110004 	tst	r1, #4
   2e58c:	0a00001d 	beq	2e608 <CDMAChannel::InterruptHandler()+0xd4>
   2e590:	e3110001 	tst	r1, #1
   2e594:	1a000020 	bne	2e61c <CDMAChannel::InterruptHandler()+0xe8>
   2e598:	e594e014 	ldr	lr, [r4, #20]
   2e59c:	e2211c01 	eor	r1, r1, #256	; 0x100
   2e5a0:	e3a02004 	mov	r2, #4
   2e5a4:	e5832000 	str	r2, [r3]
   2e5a8:	e7e01451 	ubfx	r1, r1, #8, #1
   2e5ac:	e35e0000 	cmp	lr, #0
   2e5b0:	e5c4101c 	strb	r1, [r4, #28]
   2e5b4:	0a00001d 	beq	2e630 <CDMAChannel::InterruptHandler()+0xfc>
   2e5b8:	e5942018 	ldr	r2, [r4, #24]
   2e5bc:	e1a0300e 	mov	r3, lr
   2e5c0:	e5940000 	ldr	r0, [r4]
   2e5c4:	e8bd4010 	pop	{r4, lr}
   2e5c8:	e12fff13 	bx	r3
   2e5cc:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   2e5d0:	ebfff7af 	bl	2c494 <CleanAndInvalidateDataCacheRange>
   2e5d4:	e5941000 	ldr	r1, [r4]
   2e5d8:	e351000c 	cmp	r1, #12
   2e5dc:	9affffdc 	bls	2e554 <CDMAChannel::InterruptHandler()+0x20>
   2e5e0:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e5e4:	e3401003 	movt	r1, #3
   2e5e8:	e2810030 	add	r0, r1, #48	; 0x30
   2e5ec:	e3002171 	movw	r2, #369	; 0x171
   2e5f0:	ebffda5f 	bl	24f74 <assertion_failed>
   2e5f4:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e5f8:	e3401003 	movt	r1, #3
   2e5fc:	e2810fb7 	add	r0, r1, #732	; 0x2dc
   2e600:	e3002177 	movw	r2, #375	; 0x177
   2e604:	ebffda5a 	bl	24f74 <assertion_failed>
   2e608:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e60c:	e3401003 	movt	r1, #3
   2e610:	e2810fbd 	add	r0, r1, #756	; 0x2f4
   2e614:	e300217b 	movw	r2, #379	; 0x17b
   2e618:	ebffda55 	bl	24f74 <assertion_failed>
   2e61c:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e620:	e3401003 	movt	r1, #3
   2e624:	e2810fc1 	add	r0, r1, #772	; 0x304
   2e628:	e3a02f5f 	mov	r2, #380	; 0x17c
   2e62c:	ebffda50 	bl	24f74 <assertion_failed>
   2e630:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e634:	e3401003 	movt	r1, #3
   2e638:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   2e63c:	e3002183 	movw	r2, #387	; 0x183
   2e640:	ebffda4b 	bl	24f74 <assertion_failed>

0002e644 <CDMAChannel::InterruptStub(void*)>:
   2e644:	e3500000 	cmp	r0, #0
   2e648:	0a000000 	beq	2e650 <CDMAChannel::InterruptStub(void*)+0xc>
   2e64c:	eaffffb8 	b	2e534 <CDMAChannel::InterruptHandler()>
   2e650:	e30816fc 	movw	r1, #34556	; 0x86fc
   2e654:	e3401003 	movt	r1, #3
   2e658:	e92d4010 	push	{r4, lr}
   2e65c:	e2810fc6 	add	r0, r1, #792	; 0x318
   2e660:	e300218a 	movw	r2, #394	; 0x18a
   2e664:	ebffda42 	bl	24f74 <assertion_failed>

0002e668 <CGPIOPin::CGPIOPin()>:
   2e668:	e59f2030 	ldr	r2, [pc, #48]	; 2e6a0 <CGPIOPin::CGPIOPin()+0x38>
   2e66c:	e3a01000 	mov	r1, #0
   2e670:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2e674:	e3a0c00a 	mov	ip, #10
   2e678:	e3a0e036 	mov	lr, #54	; 0x36
   2e67c:	e5802000 	str	r2, [r0]
   2e680:	e3a02006 	mov	r2, #6
   2e684:	e580e004 	str	lr, [r0, #4]
   2e688:	e5c0c010 	strb	ip, [r0, #16]
   2e68c:	e5801018 	str	r1, [r0, #24]
   2e690:	e580101c 	str	r1, [r0, #28]
   2e694:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   2e698:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   2e69c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2e6a0:	00038a28 	.word	0x00038a28

0002e6a4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   2e6a4:	e59fc050 	ldr	ip, [pc, #80]	; 2e6fc <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x58>
   2e6a8:	e92d4070 	push	{r4, r5, r6, lr}
   2e6ac:	e1a04000 	mov	r4, r0
   2e6b0:	e1a05002 	mov	r5, r2
   2e6b4:	e580c000 	str	ip, [r0]
   2e6b8:	e3a02036 	mov	r2, #54	; 0x36
   2e6bc:	e5803018 	str	r3, [r0, #24]
   2e6c0:	e3a0300a 	mov	r3, #10
   2e6c4:	e5802004 	str	r2, [r0, #4]
   2e6c8:	e3a02000 	mov	r2, #0
   2e6cc:	e5c03010 	strb	r3, [r0, #16]
   2e6d0:	e3a03006 	mov	r3, #6
   2e6d4:	e580201c 	str	r2, [r0, #28]
   2e6d8:	e5c03025 	strb	r3, [r0, #37]	; 0x25
   2e6dc:	e5c03026 	strb	r3, [r0, #38]	; 0x26
   2e6e0:	eb00000d 	bl	2e71c <CGPIOPin::AssignPin(unsigned int)>
   2e6e4:	e1a00004 	mov	r0, r4
   2e6e8:	e1a01005 	mov	r1, r5
   2e6ec:	e3a02001 	mov	r2, #1
   2e6f0:	eb00002a 	bl	2e7a0 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2e6f4:	e1a00004 	mov	r0, r4
   2e6f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e6fc:	00038a28 	.word	0x00038a28

0002e700 <CGPIOPin::~CGPIOPin()>:
   2e700:	e12fff1e 	bx	lr

0002e704 <CGPIOPin::~CGPIOPin()>:
   2e704:	e92d4010 	push	{r4, lr}
   2e708:	e3a01028 	mov	r1, #40	; 0x28
   2e70c:	e1a04000 	mov	r4, r0
   2e710:	ebfff604 	bl	2bf28 <operator delete(void*, unsigned int)>
   2e714:	e1a00004 	mov	r0, r4
   2e718:	e8bd8010 	pop	{r4, pc}

0002e71c <CGPIOPin::AssignPin(unsigned int)>:
   2e71c:	e5903004 	ldr	r3, [r0, #4]
   2e720:	e92d4070 	push	{r4, r5, r6, lr}
   2e724:	e3530036 	cmp	r3, #54	; 0x36
   2e728:	1a000017 	bne	2e78c <CGPIOPin::AssignPin(unsigned int)+0x70>
   2e72c:	e1a05000 	mov	r5, r0
   2e730:	e1a04001 	mov	r4, r1
   2e734:	e3510035 	cmp	r1, #53	; 0x35
   2e738:	e5851004 	str	r1, [r5, #4]
   2e73c:	8a000007 	bhi	2e760 <CGPIOPin::AssignPin(unsigned int)+0x44>
   2e740:	e204201f 	and	r2, r4, #31
   2e744:	e3a03001 	mov	r3, #1
   2e748:	e1a042a4 	lsr	r4, r4, #5
   2e74c:	e1a04104 	lsl	r4, r4, #2
   2e750:	e1a03213 	lsl	r3, r3, r2
   2e754:	e5854008 	str	r4, [r5, #8]
   2e758:	e585300c 	str	r3, [r5, #12]
   2e75c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e760:	ebffe295 	bl	271bc <CMachineInfo::Get()>
   2e764:	e6ef1074 	uxtb	r1, r4
   2e768:	ebffe1ff 	bl	26f6c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   2e76c:	e1a04000 	mov	r4, r0
   2e770:	e3500035 	cmp	r0, #53	; 0x35
   2e774:	e5850004 	str	r0, [r5, #4]
   2e778:	9afffff0 	bls	2e740 <CGPIOPin::AssignPin(unsigned int)+0x24>
   2e77c:	e59f1018 	ldr	r1, [pc, #24]	; 2e79c <CGPIOPin::AssignPin(unsigned int)+0x80>
   2e780:	e3a02047 	mov	r2, #71	; 0x47
   2e784:	e2810020 	add	r0, r1, #32
   2e788:	ebffd9f9 	bl	24f74 <assertion_failed>
   2e78c:	e59f1008 	ldr	r1, [pc, #8]	; 2e79c <CGPIOPin::AssignPin(unsigned int)+0x80>
   2e790:	e3a02040 	mov	r2, #64	; 0x40
   2e794:	e281000c 	add	r0, r1, #12
   2e798:	ebffd9f5 	bl	24f74 <assertion_failed>
   2e79c:	00038a30 	.word	0x00038a30

0002e7a0 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   2e7a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e7a4:	e3510009 	cmp	r1, #9
   2e7a8:	8a000044 	bhi	2e8c0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x120>
   2e7ac:	e2413004 	sub	r3, r1, #4
   2e7b0:	e1a06002 	mov	r6, r2
   2e7b4:	e6ef2073 	uxtb	r2, r3
   2e7b8:	e1a05000 	mov	r5, r0
   2e7bc:	e5c01010 	strb	r1, [r0, #16]
   2e7c0:	e3520005 	cmp	r2, #5
   2e7c4:	9a00002c 	bls	2e87c <CGPIOPin::SetMode(TGPIOMode, bool)+0xdc>
   2e7c8:	e3510001 	cmp	r1, #1
   2e7cc:	13a01000 	movne	r1, #0
   2e7d0:	02061001 	andeq	r1, r6, #1
   2e7d4:	e3510000 	cmp	r1, #0
   2e7d8:	1a00004c 	bne	2e910 <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
   2e7dc:	e5952004 	ldr	r2, [r5, #4]
   2e7e0:	e3520035 	cmp	r2, #53	; 0x35
   2e7e4:	8a00004c 	bhi	2e91c <CGPIOPin::SetMode(TGPIOMode, bool)+0x17c>
   2e7e8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   2e7ec:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   2e7f0:	e3a0100a 	mov	r1, #10
   2e7f4:	e30974d0 	movw	r7, #38096	; 0x94d0
   2e7f8:	e3407003 	movt	r7, #3
   2e7fc:	e0843293 	umull	r3, r4, r3, r2
   2e800:	e5970000 	ldr	r0, [r7]
   2e804:	e1a041a4 	lsr	r4, r4, #3
   2e808:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
   2e80c:	e3500000 	cmp	r0, #0
   2e810:	e2833702 	add	r3, r3, #524288	; 0x80000
   2e814:	e0642491 	mls	r4, r1, r4, r2
   2e818:	e1a08103 	lsl	r8, r3, #2
   2e81c:	e0844084 	add	r4, r4, r4, lsl #1
   2e820:	1a000024 	bne	2e8b8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   2e824:	e5d52010 	ldrb	r2, [r5, #16]
   2e828:	e3a01007 	mov	r1, #7
   2e82c:	e5983000 	ldr	r3, [r8]
   2e830:	e2422001 	sub	r2, r2, #1
   2e834:	e16f2f12 	clz	r2, r2
   2e838:	e1c33411 	bic	r3, r3, r1, lsl r4
   2e83c:	e1a022a2 	lsr	r2, r2, #5
   2e840:	e1834412 	orr	r4, r3, r2, lsl r4
   2e844:	e5884000 	str	r4, [r8]
   2e848:	e5973000 	ldr	r3, [r7]
   2e84c:	e3530000 	cmp	r3, #0
   2e850:	1a000014 	bne	2e8a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x108>
   2e854:	e3560000 	cmp	r6, #0
   2e858:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2e85c:	e5d53010 	ldrb	r3, [r5, #16]
   2e860:	e3530003 	cmp	r3, #3
   2e864:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2e868:	ea00000d 	b	2e8a4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
   2e86c:	0002e8f0 	.word	0x0002e8f0
   2e870:	0002e900 	.word	0x0002e900
   2e874:	0002e8e0 	.word	0x0002e8e0
   2e878:	0002e8d0 	.word	0x0002e8d0
   2e87c:	e3560000 	cmp	r6, #0
   2e880:	0a000003 	beq	2e894 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf4>
   2e884:	e3a01000 	mov	r1, #0
   2e888:	eb0001c5 	bl	2efa4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e88c:	e5d51010 	ldrb	r1, [r5, #16]
   2e890:	e2413004 	sub	r3, r1, #4
   2e894:	e1a00005 	mov	r0, r5
   2e898:	e1a01003 	mov	r1, r3
   2e89c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e8a0:	ea0001e4 	b	2f038 <CGPIOPin::SetAlternateFunction(unsigned int)>
   2e8a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e8a8:	ebfff914 	bl	2cd00 <LeaveCritical>
   2e8ac:	e3560000 	cmp	r6, #0
   2e8b0:	1affffe9 	bne	2e85c <CGPIOPin::SetMode(TGPIOMode, bool)+0xbc>
   2e8b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e8b8:	ebfff8e3 	bl	2cc4c <EnterCritical>
   2e8bc:	eaffffd8 	b	2e824 <CGPIOPin::SetMode(TGPIOMode, bool)+0x84>
   2e8c0:	e59f1064 	ldr	r1, [pc, #100]	; 2e92c <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
   2e8c4:	e3a0204f 	mov	r2, #79	; 0x4f
   2e8c8:	e2810034 	add	r0, r1, #52	; 0x34
   2e8cc:	ebffd9a8 	bl	24f74 <assertion_failed>
   2e8d0:	e1a00005 	mov	r0, r5
   2e8d4:	e3a01001 	mov	r1, #1
   2e8d8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e8dc:	ea0001b0 	b	2efa4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e8e0:	e1a00005 	mov	r0, r5
   2e8e4:	e3a01002 	mov	r1, #2
   2e8e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e8ec:	ea0001ac 	b	2efa4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e8f0:	e1a00005 	mov	r0, r5
   2e8f4:	e3a01000 	mov	r1, #0
   2e8f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e8fc:	ea0001a8 	b	2efa4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e900:	e1a00005 	mov	r0, r5
   2e904:	e3a01000 	mov	r1, #0
   2e908:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2e90c:	ea000007 	b	2e930 <CGPIOPin::Write(unsigned int)>
   2e910:	e3a01000 	mov	r1, #0
   2e914:	eb0001a2 	bl	2efa4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2e918:	eaffffaf 	b	2e7dc <CGPIOPin::SetMode(TGPIOMode, bool)+0x3c>
   2e91c:	e59f1008 	ldr	r1, [pc, #8]	; 2e92c <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
   2e920:	e3a02068 	mov	r2, #104	; 0x68
   2e924:	e2810020 	add	r0, r1, #32
   2e928:	ebffd991 	bl	24f74 <assertion_failed>
   2e92c:	00038a30 	.word	0x00038a30

0002e930 <CGPIOPin::Write(unsigned int)>:
   2e930:	e5903004 	ldr	r3, [r0, #4]
   2e934:	e92d4010 	push	{r4, lr}
   2e938:	e3530035 	cmp	r3, #53	; 0x35
   2e93c:	8a00000f 	bhi	2e980 <CGPIOPin::Write(unsigned int)+0x50>
   2e940:	e5d03010 	ldrb	r3, [r0, #16]
   2e944:	e3530003 	cmp	r3, #3
   2e948:	8a000010 	bhi	2e990 <CGPIOPin::Write(unsigned int)+0x60>
   2e94c:	e3510001 	cmp	r1, #1
   2e950:	8a000012 	bhi	2e9a0 <CGPIOPin::Write(unsigned int)+0x70>
   2e954:	e3a02028 	mov	r2, #40	; 0x28
   2e958:	e3432f20 	movt	r2, #16160	; 0x3f20
   2e95c:	e590c008 	ldr	ip, [r0, #8]
   2e960:	e3510000 	cmp	r1, #0
   2e964:	e3a0301c 	mov	r3, #28
   2e968:	e3433f20 	movt	r3, #16160	; 0x3f20
   2e96c:	01a03002 	moveq	r3, r2
   2e970:	e590200c 	ldr	r2, [r0, #12]
   2e974:	e5801014 	str	r1, [r0, #20]
   2e978:	e783200c 	str	r2, [r3, ip]
   2e97c:	e8bd8010 	pop	{r4, pc}
   2e980:	e59f1028 	ldr	r1, [pc, #40]	; 2e9b0 <CGPIOPin::Write(unsigned int)+0x80>
   2e984:	e3a02091 	mov	r2, #145	; 0x91
   2e988:	e2810020 	add	r0, r1, #32
   2e98c:	ebffd978 	bl	24f74 <assertion_failed>
   2e990:	e59f1018 	ldr	r1, [pc, #24]	; 2e9b0 <CGPIOPin::Write(unsigned int)+0x80>
   2e994:	e3a02094 	mov	r2, #148	; 0x94
   2e998:	e281004c 	add	r0, r1, #76	; 0x4c
   2e99c:	ebffd974 	bl	24f74 <assertion_failed>
   2e9a0:	e59f1008 	ldr	r1, [pc, #8]	; 2e9b0 <CGPIOPin::Write(unsigned int)+0x80>
   2e9a4:	e3a02098 	mov	r2, #152	; 0x98
   2e9a8:	e2810070 	add	r0, r1, #112	; 0x70
   2e9ac:	ebffd970 	bl	24f74 <assertion_failed>
   2e9b0:	00038a30 	.word	0x00038a30

0002e9b4 <CGPIOPin::Read() const>:
   2e9b4:	e5903004 	ldr	r3, [r0, #4]
   2e9b8:	e92d4010 	push	{r4, lr}
   2e9bc:	e3530035 	cmp	r3, #53	; 0x35
   2e9c0:	8a00000d 	bhi	2e9fc <CGPIOPin::Read() const+0x48>
   2e9c4:	e5d03010 	ldrb	r3, [r0, #16]
   2e9c8:	e2432002 	sub	r2, r3, #2
   2e9cc:	e3530000 	cmp	r3, #0
   2e9d0:	13520001 	cmpne	r2, #1
   2e9d4:	8a00000c 	bhi	2ea0c <CGPIOPin::Read() const+0x58>
   2e9d8:	e5901008 	ldr	r1, [r0, #8]
   2e9dc:	e3a03034 	mov	r3, #52	; 0x34
   2e9e0:	e3433f20 	movt	r3, #16160	; 0x3f20
   2e9e4:	e590200c 	ldr	r2, [r0, #12]
   2e9e8:	e7913003 	ldr	r3, [r1, r3]
   2e9ec:	e1130002 	tst	r3, r2
   2e9f0:	13a00001 	movne	r0, #1
   2e9f4:	03a00000 	moveq	r0, #0
   2e9f8:	e8bd8010 	pop	{r4, pc}
   2e9fc:	e59f1018 	ldr	r1, [pc, #24]	; 2ea1c <CGPIOPin::Read() const+0x68>
   2ea00:	e3a020a4 	mov	r2, #164	; 0xa4
   2ea04:	e2810020 	add	r0, r1, #32
   2ea08:	ebffd959 	bl	24f74 <assertion_failed>
   2ea0c:	e59f1008 	ldr	r1, [pc, #8]	; 2ea1c <CGPIOPin::Read() const+0x68>
   2ea10:	e3a020a8 	mov	r2, #168	; 0xa8
   2ea14:	e2810090 	add	r0, r1, #144	; 0x90
   2ea18:	ebffd955 	bl	24f74 <assertion_failed>
   2ea1c:	00038a30 	.word	0x00038a30

0002ea20 <CGPIOPin::Invert()>:
   2ea20:	e5d02010 	ldrb	r2, [r0, #16]
   2ea24:	e3520001 	cmp	r2, #1
   2ea28:	1a000002 	bne	2ea38 <CGPIOPin::Invert()+0x18>
   2ea2c:	e5901014 	ldr	r1, [r0, #20]
   2ea30:	e2211001 	eor	r1, r1, #1
   2ea34:	eaffffbd 	b	2e930 <CGPIOPin::Write(unsigned int)>
   2ea38:	e59f100c 	ldr	r1, [pc, #12]	; 2ea4c <CGPIOPin::Invert()+0x2c>
   2ea3c:	e3a020b5 	mov	r2, #181	; 0xb5
   2ea40:	e92d4010 	push	{r4, lr}
   2ea44:	e28100ec 	add	r0, r1, #236	; 0xec
   2ea48:	ebffd949 	bl	24f74 <assertion_failed>
   2ea4c:	00038a30 	.word	0x00038a30

0002ea50 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   2ea50:	e5d0c010 	ldrb	ip, [r0, #16]
   2ea54:	e92d4010 	push	{r4, lr}
   2ea58:	e24ce002 	sub	lr, ip, #2
   2ea5c:	e35c0000 	cmp	ip, #0
   2ea60:	135e0001 	cmpne	lr, #1
   2ea64:	8a000028 	bhi	2eb0c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   2ea68:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   2ea6c:	e35c0006 	cmp	ip, #6
   2ea70:	1a000011 	bne	2eabc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   2ea74:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   2ea78:	e35c0006 	cmp	ip, #6
   2ea7c:	1a000012 	bne	2eacc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   2ea80:	e3510000 	cmp	r1, #0
   2ea84:	0a000014 	beq	2eadc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   2ea88:	e590c01c 	ldr	ip, [r0, #28]
   2ea8c:	e35c0000 	cmp	ip, #0
   2ea90:	1a000015 	bne	2eaec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   2ea94:	e590c018 	ldr	ip, [r0, #24]
   2ea98:	e580101c 	str	r1, [r0, #28]
   2ea9c:	e5802020 	str	r2, [r0, #32]
   2eaa0:	e35c0000 	cmp	ip, #0
   2eaa4:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   2eaa8:	0a000013 	beq	2eafc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   2eaac:	e1a01000 	mov	r1, r0
   2eab0:	e1a0000c 	mov	r0, ip
   2eab4:	e8bd4010 	pop	{r4, lr}
   2eab8:	ea0003a2 	b	2f948 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   2eabc:	e59f1058 	ldr	r1, [pc, #88]	; 2eb1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2eac0:	e3a020c0 	mov	r2, #192	; 0xc0
   2eac4:	e2810f42 	add	r0, r1, #264	; 0x108
   2eac8:	ebffd929 	bl	24f74 <assertion_failed>
   2eacc:	e59f1048 	ldr	r1, [pc, #72]	; 2eb1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2ead0:	e3a020c1 	mov	r2, #193	; 0xc1
   2ead4:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2ead8:	ebffd925 	bl	24f74 <assertion_failed>
   2eadc:	e59f1038 	ldr	r1, [pc, #56]	; 2eb1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2eae0:	e3a020c3 	mov	r2, #195	; 0xc3
   2eae4:	e2810f55 	add	r0, r1, #340	; 0x154
   2eae8:	ebffd921 	bl	24f74 <assertion_failed>
   2eaec:	e59f1028 	ldr	r1, [pc, #40]	; 2eb1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2eaf0:	e3a020c4 	mov	r2, #196	; 0xc4
   2eaf4:	e2810f59 	add	r0, r1, #356	; 0x164
   2eaf8:	ebffd91d 	bl	24f74 <assertion_failed>
   2eafc:	e59f1018 	ldr	r1, [pc, #24]	; 2eb1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2eb00:	e3a020cb 	mov	r2, #203	; 0xcb
   2eb04:	e2810f5d 	add	r0, r1, #372	; 0x174
   2eb08:	ebffd919 	bl	24f74 <assertion_failed>
   2eb0c:	e59f1008 	ldr	r1, [pc, #8]	; 2eb1c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2eb10:	e3a020be 	mov	r2, #190	; 0xbe
   2eb14:	e2810090 	add	r0, r1, #144	; 0x90
   2eb18:	ebffd915 	bl	24f74 <assertion_failed>
   2eb1c:	00038a30 	.word	0x00038a30

0002eb20 <CGPIOPin::DisconnectInterrupt()>:
   2eb20:	e5d03010 	ldrb	r3, [r0, #16]
   2eb24:	e92d4010 	push	{r4, lr}
   2eb28:	e2432002 	sub	r2, r3, #2
   2eb2c:	e3530000 	cmp	r3, #0
   2eb30:	13520001 	cmpne	r2, #1
   2eb34:	8a000020 	bhi	2ebbc <CGPIOPin::DisconnectInterrupt()+0x9c>
   2eb38:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2eb3c:	e1a01000 	mov	r1, r0
   2eb40:	e3530006 	cmp	r3, #6
   2eb44:	1a00000c 	bne	2eb7c <CGPIOPin::DisconnectInterrupt()+0x5c>
   2eb48:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2eb4c:	e3530006 	cmp	r3, #6
   2eb50:	1a00000d 	bne	2eb8c <CGPIOPin::DisconnectInterrupt()+0x6c>
   2eb54:	e590301c 	ldr	r3, [r0, #28]
   2eb58:	e3530000 	cmp	r3, #0
   2eb5c:	0a00000e 	beq	2eb9c <CGPIOPin::DisconnectInterrupt()+0x7c>
   2eb60:	e5900018 	ldr	r0, [r0, #24]
   2eb64:	e3a03000 	mov	r3, #0
   2eb68:	e581301c 	str	r3, [r1, #28]
   2eb6c:	e1500003 	cmp	r0, r3
   2eb70:	0a00000d 	beq	2ebac <CGPIOPin::DisconnectInterrupt()+0x8c>
   2eb74:	e8bd4010 	pop	{r4, lr}
   2eb78:	ea000399 	b	2f9e4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   2eb7c:	e59f1048 	ldr	r1, [pc, #72]	; 2ebcc <CGPIOPin::DisconnectInterrupt()+0xac>
   2eb80:	e3a020d5 	mov	r2, #213	; 0xd5
   2eb84:	e2810f42 	add	r0, r1, #264	; 0x108
   2eb88:	ebffd8f9 	bl	24f74 <assertion_failed>
   2eb8c:	e59f1038 	ldr	r1, [pc, #56]	; 2ebcc <CGPIOPin::DisconnectInterrupt()+0xac>
   2eb90:	e3a020d6 	mov	r2, #214	; 0xd6
   2eb94:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2eb98:	ebffd8f5 	bl	24f74 <assertion_failed>
   2eb9c:	e59f1028 	ldr	r1, [pc, #40]	; 2ebcc <CGPIOPin::DisconnectInterrupt()+0xac>
   2eba0:	e3a020d8 	mov	r2, #216	; 0xd8
   2eba4:	e2810f61 	add	r0, r1, #388	; 0x184
   2eba8:	ebffd8f1 	bl	24f74 <assertion_failed>
   2ebac:	e59f1018 	ldr	r1, [pc, #24]	; 2ebcc <CGPIOPin::DisconnectInterrupt()+0xac>
   2ebb0:	e3a020db 	mov	r2, #219	; 0xdb
   2ebb4:	e2810f5d 	add	r0, r1, #372	; 0x174
   2ebb8:	ebffd8ed 	bl	24f74 <assertion_failed>
   2ebbc:	e59f1008 	ldr	r1, [pc, #8]	; 2ebcc <CGPIOPin::DisconnectInterrupt()+0xac>
   2ebc0:	e3a020d3 	mov	r2, #211	; 0xd3
   2ebc4:	e2810090 	add	r0, r1, #144	; 0x90
   2ebc8:	ebffd8e9 	bl	24f74 <assertion_failed>
   2ebcc:	00038a30 	.word	0x00038a30

0002ebd0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   2ebd0:	e5d03010 	ldrb	r3, [r0, #16]
   2ebd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ebd8:	e2432002 	sub	r2, r3, #2
   2ebdc:	e3530000 	cmp	r3, #0
   2ebe0:	13520001 	cmpne	r2, #1
   2ebe4:	8a000032 	bhi	2ecb4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
   2ebe8:	e590301c 	ldr	r3, [r0, #28]
   2ebec:	e1a04000 	mov	r4, r0
   2ebf0:	e3530000 	cmp	r3, #0
   2ebf4:	0a00001e 	beq	2ec74 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
   2ebf8:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2ebfc:	e3530006 	cmp	r3, #6
   2ec00:	1a00001f 	bne	2ec84 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
   2ec04:	e3510005 	cmp	r1, #5
   2ec08:	8a000021 	bhi	2ec94 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
   2ec0c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2ec10:	e1530001 	cmp	r3, r1
   2ec14:	0a000022 	beq	2eca4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
   2ec18:	e30964d0 	movw	r6, #38096	; 0x94d0
   2ec1c:	e3406003 	movt	r6, #3
   2ec20:	e3a0700c 	mov	r7, #12
   2ec24:	e5903008 	ldr	r3, [r0, #8]
   2ec28:	e3a0504c 	mov	r5, #76	; 0x4c
   2ec2c:	e3435f20 	movt	r5, #16160	; 0x3f20
   2ec30:	e5960000 	ldr	r0, [r6]
   2ec34:	e0835005 	add	r5, r3, r5
   2ec38:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   2ec3c:	e0070197 	mul	r7, r7, r1
   2ec40:	e3500000 	cmp	r0, #0
   2ec44:	1a000008 	bne	2ec6c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   2ec48:	e594200c 	ldr	r2, [r4, #12]
   2ec4c:	e7953007 	ldr	r3, [r5, r7]
   2ec50:	e1833002 	orr	r3, r3, r2
   2ec54:	e7853007 	str	r3, [r5, r7]
   2ec58:	e5963000 	ldr	r3, [r6]
   2ec5c:	e3530000 	cmp	r3, #0
   2ec60:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2ec64:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2ec68:	eafff824 	b	2cd00 <LeaveCritical>
   2ec6c:	ebfff7f6 	bl	2cc4c <EnterCritical>
   2ec70:	eafffff4 	b	2ec48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
   2ec74:	e59f1048 	ldr	r1, [pc, #72]	; 2ecc4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2ec78:	e3a020e4 	mov	r2, #228	; 0xe4
   2ec7c:	e2810f61 	add	r0, r1, #388	; 0x184
   2ec80:	ebffd8bb 	bl	24f74 <assertion_failed>
   2ec84:	e59f1038 	ldr	r1, [pc, #56]	; 2ecc4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2ec88:	e3a020e6 	mov	r2, #230	; 0xe6
   2ec8c:	e2810f42 	add	r0, r1, #264	; 0x108
   2ec90:	ebffd8b7 	bl	24f74 <assertion_failed>
   2ec94:	e59f1028 	ldr	r1, [pc, #40]	; 2ecc4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2ec98:	e3a020e7 	mov	r2, #231	; 0xe7
   2ec9c:	e2810f65 	add	r0, r1, #404	; 0x194
   2eca0:	ebffd8b3 	bl	24f74 <assertion_failed>
   2eca4:	e59f1018 	ldr	r1, [pc, #24]	; 2ecc4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2eca8:	e3a020e8 	mov	r2, #232	; 0xe8
   2ecac:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   2ecb0:	ebffd8af 	bl	24f74 <assertion_failed>
   2ecb4:	e59f1008 	ldr	r1, [pc, #8]	; 2ecc4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2ecb8:	e3a020e3 	mov	r2, #227	; 0xe3
   2ecbc:	e2810090 	add	r0, r1, #144	; 0x90
   2ecc0:	ebffd8ab 	bl	24f74 <assertion_failed>
   2ecc4:	00038a30 	.word	0x00038a30

0002ecc8 <CGPIOPin::DisableInterrupt()>:
   2ecc8:	e5d03010 	ldrb	r3, [r0, #16]
   2eccc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ecd0:	e2432002 	sub	r2, r3, #2
   2ecd4:	e3530000 	cmp	r3, #0
   2ecd8:	13520001 	cmpne	r2, #1
   2ecdc:	8a00001f 	bhi	2ed60 <CGPIOPin::DisableInterrupt()+0x98>
   2ece0:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2ece4:	e1a04000 	mov	r4, r0
   2ece8:	e3530005 	cmp	r3, #5
   2ecec:	8a000017 	bhi	2ed50 <CGPIOPin::DisableInterrupt()+0x88>
   2ecf0:	e30964d0 	movw	r6, #38096	; 0x94d0
   2ecf4:	e3406003 	movt	r6, #3
   2ecf8:	e3a0700c 	mov	r7, #12
   2ecfc:	e5902008 	ldr	r2, [r0, #8]
   2ed00:	e3a0504c 	mov	r5, #76	; 0x4c
   2ed04:	e3435f20 	movt	r5, #16160	; 0x3f20
   2ed08:	e5960000 	ldr	r0, [r6]
   2ed0c:	e0825005 	add	r5, r2, r5
   2ed10:	e0070397 	mul	r7, r7, r3
   2ed14:	e3500000 	cmp	r0, #0
   2ed18:	1a00000a 	bne	2ed48 <CGPIOPin::DisableInterrupt()+0x80>
   2ed1c:	e7953007 	ldr	r3, [r5, r7]
   2ed20:	e594200c 	ldr	r2, [r4, #12]
   2ed24:	e1c33002 	bic	r3, r3, r2
   2ed28:	e7853007 	str	r3, [r5, r7]
   2ed2c:	e5963000 	ldr	r3, [r6]
   2ed30:	e3530000 	cmp	r3, #0
   2ed34:	0a000000 	beq	2ed3c <CGPIOPin::DisableInterrupt()+0x74>
   2ed38:	ebfff7f0 	bl	2cd00 <LeaveCritical>
   2ed3c:	e3a03006 	mov	r3, #6
   2ed40:	e5c43025 	strb	r3, [r4, #37]	; 0x25
   2ed44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ed48:	ebfff7bf 	bl	2cc4c <EnterCritical>
   2ed4c:	eafffff2 	b	2ed1c <CGPIOPin::DisableInterrupt()+0x54>
   2ed50:	e59f1018 	ldr	r1, [pc, #24]	; 2ed70 <CGPIOPin::DisableInterrupt()+0xa8>
   2ed54:	e3a020fb 	mov	r2, #251	; 0xfb
   2ed58:	e2810f75 	add	r0, r1, #468	; 0x1d4
   2ed5c:	ebffd884 	bl	24f74 <assertion_failed>
   2ed60:	e59f1008 	ldr	r1, [pc, #8]	; 2ed70 <CGPIOPin::DisableInterrupt()+0xa8>
   2ed64:	e3a020f9 	mov	r2, #249	; 0xf9
   2ed68:	e2810090 	add	r0, r1, #144	; 0x90
   2ed6c:	ebffd880 	bl	24f74 <assertion_failed>
   2ed70:	00038a30 	.word	0x00038a30

0002ed74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   2ed74:	e5d03010 	ldrb	r3, [r0, #16]
   2ed78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ed7c:	e2432002 	sub	r2, r3, #2
   2ed80:	e3530000 	cmp	r3, #0
   2ed84:	13520001 	cmpne	r2, #1
   2ed88:	8a000032 	bhi	2ee58 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
   2ed8c:	e590301c 	ldr	r3, [r0, #28]
   2ed90:	e1a04000 	mov	r4, r0
   2ed94:	e3530000 	cmp	r3, #0
   2ed98:	0a00001e 	beq	2ee18 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
   2ed9c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2eda0:	e3530006 	cmp	r3, #6
   2eda4:	1a00001f 	bne	2ee28 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
   2eda8:	e3510005 	cmp	r1, #5
   2edac:	8a000021 	bhi	2ee38 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
   2edb0:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2edb4:	e1530001 	cmp	r3, r1
   2edb8:	0a000022 	beq	2ee48 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
   2edbc:	e30964d0 	movw	r6, #38096	; 0x94d0
   2edc0:	e3406003 	movt	r6, #3
   2edc4:	e3a0700c 	mov	r7, #12
   2edc8:	e5903008 	ldr	r3, [r0, #8]
   2edcc:	e3a0504c 	mov	r5, #76	; 0x4c
   2edd0:	e3435f20 	movt	r5, #16160	; 0x3f20
   2edd4:	e5960000 	ldr	r0, [r6]
   2edd8:	e0835005 	add	r5, r3, r5
   2eddc:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   2ede0:	e0070197 	mul	r7, r7, r1
   2ede4:	e3500000 	cmp	r0, #0
   2ede8:	1a000008 	bne	2ee10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   2edec:	e594200c 	ldr	r2, [r4, #12]
   2edf0:	e7953007 	ldr	r3, [r5, r7]
   2edf4:	e1833002 	orr	r3, r3, r2
   2edf8:	e7853007 	str	r3, [r5, r7]
   2edfc:	e5963000 	ldr	r3, [r6]
   2ee00:	e3530000 	cmp	r3, #0
   2ee04:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2ee08:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2ee0c:	eafff7bb 	b	2cd00 <LeaveCritical>
   2ee10:	ebfff78d 	bl	2cc4c <EnterCritical>
   2ee14:	eafffff4 	b	2edec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
   2ee18:	e59f1048 	ldr	r1, [pc, #72]	; 2ee68 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2ee1c:	e300210d 	movw	r2, #269	; 0x10d
   2ee20:	e2810f61 	add	r0, r1, #388	; 0x184
   2ee24:	ebffd852 	bl	24f74 <assertion_failed>
   2ee28:	e59f1038 	ldr	r1, [pc, #56]	; 2ee68 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2ee2c:	e300210f 	movw	r2, #271	; 0x10f
   2ee30:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2ee34:	ebffd84e 	bl	24f74 <assertion_failed>
   2ee38:	e59f1028 	ldr	r1, [pc, #40]	; 2ee68 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2ee3c:	e3a02e11 	mov	r2, #272	; 0x110
   2ee40:	e2810f65 	add	r0, r1, #404	; 0x194
   2ee44:	ebffd84a 	bl	24f74 <assertion_failed>
   2ee48:	e59f1018 	ldr	r1, [pc, #24]	; 2ee68 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2ee4c:	e3002111 	movw	r2, #273	; 0x111
   2ee50:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   2ee54:	ebffd846 	bl	24f74 <assertion_failed>
   2ee58:	e59f1008 	ldr	r1, [pc, #8]	; 2ee68 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2ee5c:	e3a02f43 	mov	r2, #268	; 0x10c
   2ee60:	e2810090 	add	r0, r1, #144	; 0x90
   2ee64:	ebffd842 	bl	24f74 <assertion_failed>
   2ee68:	00038a30 	.word	0x00038a30

0002ee6c <CGPIOPin::DisableInterrupt2()>:
   2ee6c:	e5d03010 	ldrb	r3, [r0, #16]
   2ee70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ee74:	e2432002 	sub	r2, r3, #2
   2ee78:	e3530000 	cmp	r3, #0
   2ee7c:	13520001 	cmpne	r2, #1
   2ee80:	8a00001f 	bhi	2ef04 <CGPIOPin::DisableInterrupt2()+0x98>
   2ee84:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2ee88:	e1a04000 	mov	r4, r0
   2ee8c:	e3530005 	cmp	r3, #5
   2ee90:	8a000017 	bhi	2eef4 <CGPIOPin::DisableInterrupt2()+0x88>
   2ee94:	e30964d0 	movw	r6, #38096	; 0x94d0
   2ee98:	e3406003 	movt	r6, #3
   2ee9c:	e3a0700c 	mov	r7, #12
   2eea0:	e5902008 	ldr	r2, [r0, #8]
   2eea4:	e3a0504c 	mov	r5, #76	; 0x4c
   2eea8:	e3435f20 	movt	r5, #16160	; 0x3f20
   2eeac:	e5960000 	ldr	r0, [r6]
   2eeb0:	e0825005 	add	r5, r2, r5
   2eeb4:	e0070397 	mul	r7, r7, r3
   2eeb8:	e3500000 	cmp	r0, #0
   2eebc:	1a00000a 	bne	2eeec <CGPIOPin::DisableInterrupt2()+0x80>
   2eec0:	e7953007 	ldr	r3, [r5, r7]
   2eec4:	e594200c 	ldr	r2, [r4, #12]
   2eec8:	e1c33002 	bic	r3, r3, r2
   2eecc:	e7853007 	str	r3, [r5, r7]
   2eed0:	e5963000 	ldr	r3, [r6]
   2eed4:	e3530000 	cmp	r3, #0
   2eed8:	0a000000 	beq	2eee0 <CGPIOPin::DisableInterrupt2()+0x74>
   2eedc:	ebfff787 	bl	2cd00 <LeaveCritical>
   2eee0:	e3a03006 	mov	r3, #6
   2eee4:	e5c43026 	strb	r3, [r4, #38]	; 0x26
   2eee8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2eeec:	ebfff756 	bl	2cc4c <EnterCritical>
   2eef0:	eafffff2 	b	2eec0 <CGPIOPin::DisableInterrupt2()+0x54>
   2eef4:	e59f1018 	ldr	r1, [pc, #24]	; 2ef14 <CGPIOPin::DisableInterrupt2()+0xa8>
   2eef8:	e3a02f49 	mov	r2, #292	; 0x124
   2eefc:	e2810f85 	add	r0, r1, #532	; 0x214
   2ef00:	ebffd81b 	bl	24f74 <assertion_failed>
   2ef04:	e59f1008 	ldr	r1, [pc, #8]	; 2ef14 <CGPIOPin::DisableInterrupt2()+0xa8>
   2ef08:	e3002122 	movw	r2, #290	; 0x122
   2ef0c:	e2810090 	add	r0, r1, #144	; 0x90
   2ef10:	ebffd817 	bl	24f74 <assertion_failed>
   2ef14:	00038a30 	.word	0x00038a30

0002ef18 <CGPIOPin::AcknowledgeInterrupt()>:
   2ef18:	e590301c 	ldr	r3, [r0, #28]
   2ef1c:	e92d4010 	push	{r4, lr}
   2ef20:	e3530000 	cmp	r3, #0
   2ef24:	0a000008 	beq	2ef4c <CGPIOPin::AcknowledgeInterrupt()+0x34>
   2ef28:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   2ef2c:	e3530000 	cmp	r3, #0
   2ef30:	1a000009 	bne	2ef5c <CGPIOPin::AcknowledgeInterrupt()+0x44>
   2ef34:	e5902008 	ldr	r2, [r0, #8]
   2ef38:	e3a03040 	mov	r3, #64	; 0x40
   2ef3c:	e3433f20 	movt	r3, #16160	; 0x3f20
   2ef40:	e590100c 	ldr	r1, [r0, #12]
   2ef44:	e7821003 	str	r1, [r2, r3]
   2ef48:	e8bd8010 	pop	{r4, pc}
   2ef4c:	e59f1018 	ldr	r1, [pc, #24]	; 2ef6c <CGPIOPin::AcknowledgeInterrupt()+0x54>
   2ef50:	e3002133 	movw	r2, #307	; 0x133
   2ef54:	e2810f61 	add	r0, r1, #388	; 0x184
   2ef58:	ebffd805 	bl	24f74 <assertion_failed>
   2ef5c:	e59f1008 	ldr	r1, [pc, #8]	; 2ef6c <CGPIOPin::AcknowledgeInterrupt()+0x54>
   2ef60:	e3a02f4d 	mov	r2, #308	; 0x134
   2ef64:	e2810f8e 	add	r0, r1, #568	; 0x238
   2ef68:	ebffd801 	bl	24f74 <assertion_failed>
   2ef6c:	00038a30 	.word	0x00038a30

0002ef70 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   2ef70:	e1d12000 	bics	r2, r1, r0
   2ef74:	13a03000 	movne	r3, #0
   2ef78:	13433f20 	movtne	r3, #16160	; 0x3f20
   2ef7c:	15832028 	strne	r2, [r3, #40]	; 0x28
   2ef80:	e0100001 	ands	r0, r0, r1
   2ef84:	13a03000 	movne	r3, #0
   2ef88:	13433f20 	movtne	r3, #16160	; 0x3f20
   2ef8c:	1583001c 	strne	r0, [r3, #28]
   2ef90:	e12fff1e 	bx	lr

0002ef94 <CGPIOPin::ReadAll()>:
   2ef94:	e3a03000 	mov	r3, #0
   2ef98:	e3433f20 	movt	r3, #16160	; 0x3f20
   2ef9c:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   2efa0:	e12fff1e 	bx	lr

0002efa4 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   2efa4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2efa8:	e30944d0 	movw	r4, #38096	; 0x94d0
   2efac:	e3404003 	movt	r4, #3
   2efb0:	e1a07000 	mov	r7, r0
   2efb4:	e1a08001 	mov	r8, r1
   2efb8:	e5940000 	ldr	r0, [r4]
   2efbc:	e3500000 	cmp	r0, #0
   2efc0:	1a000015 	bne	2f01c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
   2efc4:	e3a05098 	mov	r5, #152	; 0x98
   2efc8:	e3435f20 	movt	r5, #16160	; 0x3f20
   2efcc:	e3580002 	cmp	r8, #2
   2efd0:	e5979008 	ldr	r9, [r7, #8]
   2efd4:	8a000012 	bhi	2f024 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x80>
   2efd8:	e3a06000 	mov	r6, #0
   2efdc:	e3436f20 	movt	r6, #16160	; 0x3f20
   2efe0:	e3a00005 	mov	r0, #5
   2efe4:	e5868094 	str	r8, [r6, #148]	; 0x94
   2efe8:	ebfff0cc 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
   2efec:	e597300c 	ldr	r3, [r7, #12]
   2eff0:	e7893005 	str	r3, [r9, r5]
   2eff4:	e3a00005 	mov	r0, #5
   2eff8:	ebfff0c8 	bl	2b320 <CTimer::SimpleusDelay(unsigned int)>
   2effc:	e3a03000 	mov	r3, #0
   2f000:	e5863094 	str	r3, [r6, #148]	; 0x94
   2f004:	e7893005 	str	r3, [r9, r5]
   2f008:	e5943000 	ldr	r3, [r4]
   2f00c:	e3530000 	cmp	r3, #0
   2f010:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f014:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f018:	eafff738 	b	2cd00 <LeaveCritical>
   2f01c:	ebfff70a 	bl	2cc4c <EnterCritical>
   2f020:	eaffffe7 	b	2efc4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
   2f024:	e59f1008 	ldr	r1, [pc, #8]	; 2f034 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   2f028:	e3002165 	movw	r2, #357	; 0x165
   2f02c:	e2810f91 	add	r0, r1, #580	; 0x244
   2f030:	ebffd7cf 	bl	24f74 <assertion_failed>
   2f034:	00038a30 	.word	0x00038a30

0002f038 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   2f038:	e5902004 	ldr	r2, [r0, #4]
   2f03c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f040:	e3520035 	cmp	r2, #53	; 0x35
   2f044:	8a000021 	bhi	2f0d0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x98>
   2f048:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   2f04c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   2f050:	e1a07001 	mov	r7, r1
   2f054:	e3a0100a 	mov	r1, #10
   2f058:	e3570005 	cmp	r7, #5
   2f05c:	e0830293 	umull	r0, r3, r3, r2
   2f060:	e1a031a3 	lsr	r3, r3, #3
   2f064:	e283053f 	add	r0, r3, #264241152	; 0xfc00000
   2f068:	e2800702 	add	r0, r0, #524288	; 0x80000
   2f06c:	e0632391 	mls	r3, r1, r3, r2
   2f070:	e1a06100 	lsl	r6, r0, #2
   2f074:	e0834083 	add	r4, r3, r3, lsl #1
   2f078:	8a000018 	bhi	2f0e0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   2f07c:	e30954d0 	movw	r5, #38096	; 0x94d0
   2f080:	e3405003 	movt	r5, #3
   2f084:	e5950000 	ldr	r0, [r5]
   2f088:	e3500000 	cmp	r0, #0
   2f08c:	1a00000d 	bne	2f0c8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x90>
   2f090:	e3083a20 	movw	r3, #35360	; 0x8a20
   2f094:	e3403003 	movt	r3, #3
   2f098:	e0831107 	add	r1, r3, r7, lsl #2
   2f09c:	e5963000 	ldr	r3, [r6]
   2f0a0:	e3a00007 	mov	r0, #7
   2f0a4:	e5912260 	ldr	r2, [r1, #608]	; 0x260
   2f0a8:	e1c33410 	bic	r3, r3, r0, lsl r4
   2f0ac:	e1833412 	orr	r3, r3, r2, lsl r4
   2f0b0:	e5863000 	str	r3, [r6]
   2f0b4:	e5953000 	ldr	r3, [r5]
   2f0b8:	e3530000 	cmp	r3, #0
   2f0bc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2f0c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2f0c4:	eafff70d 	b	2cd00 <LeaveCritical>
   2f0c8:	ebfff6df 	bl	2cc4c <EnterCritical>
   2f0cc:	eaffffef 	b	2f090 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
   2f0d0:	e59f1018 	ldr	r1, [pc, #24]	; 2f0f0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   2f0d4:	e3002181 	movw	r2, #385	; 0x181
   2f0d8:	e2810020 	add	r0, r1, #32
   2f0dc:	ebffd7a4 	bl	24f74 <assertion_failed>
   2f0e0:	e59f1008 	ldr	r1, [pc, #8]	; 2f0f0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   2f0e4:	e3002185 	movw	r2, #389	; 0x185
   2f0e8:	e2810f9a 	add	r0, r1, #616	; 0x268
   2f0ec:	ebffd7a0 	bl	24f74 <assertion_failed>
   2f0f0:	00038a30 	.word	0x00038a30

0002f0f4 <CGPIOPin::InterruptHandler()>:
   2f0f4:	e5d03010 	ldrb	r3, [r0, #16]
   2f0f8:	e92d4010 	push	{r4, lr}
   2f0fc:	e2432002 	sub	r2, r3, #2
   2f100:	e3530000 	cmp	r3, #0
   2f104:	13520001 	cmpne	r2, #1
   2f108:	8a000013 	bhi	2f15c <CGPIOPin::InterruptHandler()+0x68>
   2f10c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   2f110:	e3530005 	cmp	r3, #5
   2f114:	8a000005 	bhi	2f130 <CGPIOPin::InterruptHandler()+0x3c>
   2f118:	e590301c 	ldr	r3, [r0, #28]
   2f11c:	e3530000 	cmp	r3, #0
   2f120:	0a000009 	beq	2f14c <CGPIOPin::InterruptHandler()+0x58>
   2f124:	e5900020 	ldr	r0, [r0, #32]
   2f128:	e8bd4010 	pop	{r4, lr}
   2f12c:	e12fff13 	bx	r3
   2f130:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   2f134:	e3530005 	cmp	r3, #5
   2f138:	9afffff6 	bls	2f118 <CGPIOPin::InterruptHandler()+0x24>
   2f13c:	e59f1028 	ldr	r1, [pc, #40]	; 2f16c <CGPIOPin::InterruptHandler()+0x78>
   2f140:	e3002196 	movw	r2, #406	; 0x196
   2f144:	e2810f9e 	add	r0, r1, #632	; 0x278
   2f148:	ebffd789 	bl	24f74 <assertion_failed>
   2f14c:	e59f1018 	ldr	r1, [pc, #24]	; 2f16c <CGPIOPin::InterruptHandler()+0x78>
   2f150:	e3a02f66 	mov	r2, #408	; 0x198
   2f154:	e2810f61 	add	r0, r1, #388	; 0x184
   2f158:	ebffd785 	bl	24f74 <assertion_failed>
   2f15c:	e59f1008 	ldr	r1, [pc, #8]	; 2f16c <CGPIOPin::InterruptHandler()+0x78>
   2f160:	e3a02f65 	mov	r2, #404	; 0x194
   2f164:	e2810090 	add	r0, r1, #144	; 0x90
   2f168:	ebffd781 	bl	24f74 <assertion_failed>
   2f16c:	00038a30 	.word	0x00038a30

0002f170 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   2f170:	e92d4070 	push	{r4, r5, r6, lr}
   2f174:	e3500035 	cmp	r0, #53	; 0x35
   2f178:	8a00001b 	bhi	2f1ec <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
   2f17c:	e30964d0 	movw	r6, #38096	; 0x94d0
   2f180:	e3406003 	movt	r6, #3
   2f184:	e3a04013 	mov	r4, #19
   2f188:	e3404fc8 	movt	r4, #4040	; 0xfc8
   2f18c:	e200501f 	and	r5, r0, #31
   2f190:	e3a02001 	mov	r2, #1
   2f194:	e5963000 	ldr	r3, [r6]
   2f198:	e08442a0 	add	r4, r4, r0, lsr #5
   2f19c:	e1a04104 	lsl	r4, r4, #2
   2f1a0:	e1a05512 	lsl	r5, r2, r5
   2f1a4:	e3530000 	cmp	r3, #0
   2f1a8:	1a00000c 	bne	2f1e0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   2f1ac:	e3a0108b 	mov	r1, #139	; 0x8b
   2f1b0:	e3431f20 	movt	r1, #16160	; 0x3f20
   2f1b4:	e1e02005 	mvn	r2, r5
   2f1b8:	e5943000 	ldr	r3, [r4]
   2f1bc:	e0033002 	and	r3, r3, r2
   2f1c0:	e484300c 	str	r3, [r4], #12
   2f1c4:	e1540001 	cmp	r4, r1
   2f1c8:	9afffffa 	bls	2f1b8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
   2f1cc:	e5963000 	ldr	r3, [r6]
   2f1d0:	e3530000 	cmp	r3, #0
   2f1d4:	08bd8070 	popeq	{r4, r5, r6, pc}
   2f1d8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f1dc:	eafff6c7 	b	2cd00 <LeaveCritical>
   2f1e0:	e1a00003 	mov	r0, r3
   2f1e4:	ebfff698 	bl	2cc4c <EnterCritical>
   2f1e8:	eaffffef 	b	2f1ac <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   2f1ec:	e59f1008 	ldr	r1, [pc, #8]	; 2f1fc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   2f1f0:	e300219e 	movw	r2, #414	; 0x19e
   2f1f4:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   2f1f8:	ebffd75d 	bl	24f74 <assertion_failed>
   2f1fc:	00038a30 	.word	0x00038a30

0002f200 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   2f200:	e30934d0 	movw	r3, #38096	; 0x94d0
   2f204:	e3403003 	movt	r3, #3
   2f208:	e3a02001 	mov	r2, #1
   2f20c:	e5832000 	str	r2, [r3]
   2f210:	e12fff1e 	bx	lr

0002f214 <CPtrList::CPtrList()>:
   2f214:	e3a02000 	mov	r2, #0
   2f218:	e5802000 	str	r2, [r0]
   2f21c:	e12fff1e 	bx	lr

0002f220 <CPtrList::~CPtrList()>:
   2f220:	e5903000 	ldr	r3, [r0]
   2f224:	e3530000 	cmp	r3, #0
   2f228:	012fff1e 	bxeq	lr
   2f22c:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f230:	e3401003 	movt	r1, #3
   2f234:	e3080d14 	movw	r0, #36116	; 0x8d14
   2f238:	e3400003 	movt	r0, #3
   2f23c:	e92d4010 	push	{r4, lr}
   2f240:	e3a0202a 	mov	r2, #42	; 0x2a
   2f244:	ebffd74a 	bl	24f74 <assertion_failed>

0002f248 <CPtrList::GetFirst()>:
   2f248:	e5900000 	ldr	r0, [r0]
   2f24c:	e12fff1e 	bx	lr

0002f250 <CPtrList::GetNext(TPtrListElement*)>:
   2f250:	e92d4010 	push	{r4, lr}
   2f254:	e3510000 	cmp	r1, #0
   2f258:	0a000006 	beq	2f278 <CPtrList::GetNext(TPtrListElement*)+0x28>
   2f25c:	e5912000 	ldr	r2, [r1]
   2f260:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f264:	e345304c 	movt	r3, #20556	; 0x504c
   2f268:	e1520003 	cmp	r2, r3
   2f26c:	1a000007 	bne	2f290 <CPtrList::GetNext(TPtrListElement*)+0x40>
   2f270:	e5910008 	ldr	r0, [r1, #8]
   2f274:	e8bd8010 	pop	{r4, pc}
   2f278:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f27c:	e3401003 	movt	r1, #3
   2f280:	e3080d24 	movw	r0, #36132	; 0x8d24
   2f284:	e3400003 	movt	r0, #3
   2f288:	e3a02034 	mov	r2, #52	; 0x34
   2f28c:	ebffd738 	bl	24f74 <assertion_failed>
   2f290:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f294:	e3401003 	movt	r1, #3
   2f298:	e3080d34 	movw	r0, #36148	; 0x8d34
   2f29c:	e3400003 	movt	r0, #3
   2f2a0:	e3a02035 	mov	r2, #53	; 0x35
   2f2a4:	ebffd732 	bl	24f74 <assertion_failed>

0002f2a8 <CPtrList::GetPtr(TPtrListElement*)>:
   2f2a8:	e92d4010 	push	{r4, lr}
   2f2ac:	e3510000 	cmp	r1, #0
   2f2b0:	0a000006 	beq	2f2d0 <CPtrList::GetPtr(TPtrListElement*)+0x28>
   2f2b4:	e5912000 	ldr	r2, [r1]
   2f2b8:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f2bc:	e345304c 	movt	r3, #20556	; 0x504c
   2f2c0:	e1520003 	cmp	r2, r3
   2f2c4:	1a000007 	bne	2f2e8 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   2f2c8:	e591000c 	ldr	r0, [r1, #12]
   2f2cc:	e8bd8010 	pop	{r4, pc}
   2f2d0:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f2d4:	e3401003 	movt	r1, #3
   2f2d8:	e3080d24 	movw	r0, #36132	; 0x8d24
   2f2dc:	e3400003 	movt	r0, #3
   2f2e0:	e3a0203c 	mov	r2, #60	; 0x3c
   2f2e4:	ebffd722 	bl	24f74 <assertion_failed>
   2f2e8:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f2ec:	e3401003 	movt	r1, #3
   2f2f0:	e3080d34 	movw	r0, #36148	; 0x8d34
   2f2f4:	e3400003 	movt	r0, #3
   2f2f8:	e3a0203d 	mov	r2, #61	; 0x3d
   2f2fc:	ebffd71c 	bl	24f74 <assertion_failed>

0002f300 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2f300:	e92d4070 	push	{r4, r5, r6, lr}
   2f304:	e1a05000 	mov	r5, r0
   2f308:	e3a00010 	mov	r0, #16
   2f30c:	e1a04001 	mov	r4, r1
   2f310:	e1a06002 	mov	r6, r2
   2f314:	ebfff2f5 	bl	2bef0 <operator new(unsigned int)>
   2f318:	e5951000 	ldr	r1, [r5]
   2f31c:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f320:	e345304c 	movt	r3, #20556	; 0x504c
   2f324:	e580600c 	str	r6, [r0, #12]
   2f328:	e3510000 	cmp	r1, #0
   2f32c:	e5803000 	str	r3, [r0]
   2f330:	0a000016 	beq	2f390 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   2f334:	e3540000 	cmp	r4, #0
   2f338:	0a00001a 	beq	2f3a8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   2f33c:	e5942000 	ldr	r2, [r4]
   2f340:	e1520003 	cmp	r2, r3
   2f344:	1a00001d 	bne	2f3c0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   2f348:	e1510004 	cmp	r1, r4
   2f34c:	0a000009 	beq	2f378 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2f350:	e5943004 	ldr	r3, [r4, #4]
   2f354:	e9800018 	stmib	r0, {r3, r4}
   2f358:	e3530000 	cmp	r3, #0
   2f35c:	0a000003 	beq	2f370 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2f360:	e5931000 	ldr	r1, [r3]
   2f364:	e1510002 	cmp	r1, r2
   2f368:	05830008 	streq	r0, [r3, #8]
   2f36c:	1a000019 	bne	2f3d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2f370:	e5840004 	str	r0, [r4, #4]
   2f374:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f378:	e5801008 	str	r1, [r0, #8]
   2f37c:	e3a03000 	mov	r3, #0
   2f380:	e5803004 	str	r3, [r0, #4]
   2f384:	e5810004 	str	r0, [r1, #4]
   2f388:	e5850000 	str	r0, [r5]
   2f38c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f390:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f394:	e3401003 	movt	r1, #3
   2f398:	e3080d58 	movw	r0, #36184	; 0x8d58
   2f39c:	e3400003 	movt	r0, #3
   2f3a0:	e3a0204c 	mov	r2, #76	; 0x4c
   2f3a4:	ebffd6f2 	bl	24f74 <assertion_failed>
   2f3a8:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f3ac:	e3401003 	movt	r1, #3
   2f3b0:	e3080d68 	movw	r0, #36200	; 0x8d68
   2f3b4:	e3400003 	movt	r0, #3
   2f3b8:	e3a0204d 	mov	r2, #77	; 0x4d
   2f3bc:	ebffd6ec 	bl	24f74 <assertion_failed>
   2f3c0:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f3c4:	e3401003 	movt	r1, #3
   2f3c8:	e3080d74 	movw	r0, #36212	; 0x8d74
   2f3cc:	e3400003 	movt	r0, #3
   2f3d0:	e3a0204e 	mov	r2, #78	; 0x4e
   2f3d4:	ebffd6e6 	bl	24f74 <assertion_failed>
   2f3d8:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f3dc:	e3401003 	movt	r1, #3
   2f3e0:	e3080d98 	movw	r0, #36248	; 0x8d98
   2f3e4:	e3400003 	movt	r0, #3
   2f3e8:	e3a02060 	mov	r2, #96	; 0x60
   2f3ec:	ebffd6e0 	bl	24f74 <assertion_failed>

0002f3f0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2f3f0:	e92d4070 	push	{r4, r5, r6, lr}
   2f3f4:	e1a04001 	mov	r4, r1
   2f3f8:	e1a05000 	mov	r5, r0
   2f3fc:	e3a00010 	mov	r0, #16
   2f400:	e1a06002 	mov	r6, r2
   2f404:	ebfff2b9 	bl	2bef0 <operator new(unsigned int)>
   2f408:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f40c:	e345304c 	movt	r3, #20556	; 0x504c
   2f410:	e5803000 	str	r3, [r0]
   2f414:	e3540000 	cmp	r4, #0
   2f418:	e580600c 	str	r6, [r0, #12]
   2f41c:	0a000010 	beq	2f464 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   2f420:	e5952000 	ldr	r2, [r5]
   2f424:	e3520000 	cmp	r2, #0
   2f428:	0a000014 	beq	2f480 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   2f42c:	e5942000 	ldr	r2, [r4]
   2f430:	e1520003 	cmp	r2, r3
   2f434:	1a000017 	bne	2f498 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   2f438:	e5943008 	ldr	r3, [r4, #8]
   2f43c:	e5804004 	str	r4, [r0, #4]
   2f440:	e5803008 	str	r3, [r0, #8]
   2f444:	e3530000 	cmp	r3, #0
   2f448:	0a000003 	beq	2f45c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   2f44c:	e5931000 	ldr	r1, [r3]
   2f450:	e1510002 	cmp	r1, r2
   2f454:	05830004 	streq	r0, [r3, #4]
   2f458:	1a000014 	bne	2f4b0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   2f45c:	e5840008 	str	r0, [r4, #8]
   2f460:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f464:	e5953000 	ldr	r3, [r5]
   2f468:	e3530000 	cmp	r3, #0
   2f46c:	1a000015 	bne	2f4c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2f470:	e5803004 	str	r3, [r0, #4]
   2f474:	e5803008 	str	r3, [r0, #8]
   2f478:	e5850000 	str	r0, [r5]
   2f47c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f480:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f484:	e3401003 	movt	r1, #3
   2f488:	e3080d58 	movw	r0, #36184	; 0x8d58
   2f48c:	e3400003 	movt	r0, #3
   2f490:	e3a0207d 	mov	r2, #125	; 0x7d
   2f494:	ebffd6b6 	bl	24f74 <assertion_failed>
   2f498:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f49c:	e3401003 	movt	r1, #3
   2f4a0:	e3080dc0 	movw	r0, #36288	; 0x8dc0
   2f4a4:	e3400003 	movt	r0, #3
   2f4a8:	e3a0207e 	mov	r2, #126	; 0x7e
   2f4ac:	ebffd6b0 	bl	24f74 <assertion_failed>
   2f4b0:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f4b4:	e3401003 	movt	r1, #3
   2f4b8:	e3080de4 	movw	r0, #36324	; 0x8de4
   2f4bc:	e3400003 	movt	r0, #3
   2f4c0:	e3a02085 	mov	r2, #133	; 0x85
   2f4c4:	ebffd6aa 	bl	24f74 <assertion_failed>
   2f4c8:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f4cc:	e3401003 	movt	r1, #3
   2f4d0:	e3080d14 	movw	r0, #36116	; 0x8d14
   2f4d4:	e3400003 	movt	r0, #3
   2f4d8:	e3a02074 	mov	r2, #116	; 0x74
   2f4dc:	ebffd6a4 	bl	24f74 <assertion_failed>

0002f4e0 <CPtrList::Remove(TPtrListElement*)>:
   2f4e0:	e92d4010 	push	{r4, lr}
   2f4e4:	e3510000 	cmp	r1, #0
   2f4e8:	0a000031 	beq	2f5b4 <CPtrList::Remove(TPtrListElement*)+0xd4>
   2f4ec:	e5912000 	ldr	r2, [r1]
   2f4f0:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f4f4:	e345304c 	movt	r3, #20556	; 0x504c
   2f4f8:	e1520003 	cmp	r2, r3
   2f4fc:	1a000032 	bne	2f5cc <CPtrList::Remove(TPtrListElement*)+0xec>
   2f500:	e5903000 	ldr	r3, [r0]
   2f504:	e1530001 	cmp	r3, r1
   2f508:	0a000014 	beq	2f560 <CPtrList::Remove(TPtrListElement*)+0x80>
   2f50c:	e5913004 	ldr	r3, [r1, #4]
   2f510:	e3530000 	cmp	r3, #0
   2f514:	0a000032 	beq	2f5e4 <CPtrList::Remove(TPtrListElement*)+0x104>
   2f518:	e5930000 	ldr	r0, [r3]
   2f51c:	e1500002 	cmp	r0, r2
   2f520:	1a00001d 	bne	2f59c <CPtrList::Remove(TPtrListElement*)+0xbc>
   2f524:	e5912008 	ldr	r2, [r1, #8]
   2f528:	e5832008 	str	r2, [r3, #8]
   2f52c:	e5912008 	ldr	r2, [r1, #8]
   2f530:	e3520000 	cmp	r2, #0
   2f534:	0a000003 	beq	2f548 <CPtrList::Remove(TPtrListElement*)+0x68>
   2f538:	e592c000 	ldr	ip, [r2]
   2f53c:	e15c0000 	cmp	ip, r0
   2f540:	05823004 	streq	r3, [r2, #4]
   2f544:	1a00002c 	bne	2f5fc <CPtrList::Remove(TPtrListElement*)+0x11c>
   2f548:	e3a03000 	mov	r3, #0
   2f54c:	e1a00001 	mov	r0, r1
   2f550:	e5813000 	str	r3, [r1]
   2f554:	e3a01010 	mov	r1, #16
   2f558:	e8bd4010 	pop	{r4, lr}
   2f55c:	eafff271 	b	2bf28 <operator delete(void*, unsigned int)>
   2f560:	e5933008 	ldr	r3, [r3, #8]
   2f564:	e5803000 	str	r3, [r0]
   2f568:	e3530000 	cmp	r3, #0
   2f56c:	0afffff5 	beq	2f548 <CPtrList::Remove(TPtrListElement*)+0x68>
   2f570:	e5930000 	ldr	r0, [r3]
   2f574:	e1500002 	cmp	r0, r2
   2f578:	03a02000 	moveq	r2, #0
   2f57c:	05832004 	streq	r2, [r3, #4]
   2f580:	0afffff0 	beq	2f548 <CPtrList::Remove(TPtrListElement*)+0x68>
   2f584:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f588:	e3401003 	movt	r1, #3
   2f58c:	e3080e10 	movw	r0, #36368	; 0x8e10
   2f590:	e3400003 	movt	r0, #3
   2f594:	e3a02098 	mov	r2, #152	; 0x98
   2f598:	ebffd675 	bl	24f74 <assertion_failed>
   2f59c:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f5a0:	e3401003 	movt	r1, #3
   2f5a4:	e3080e54 	movw	r0, #36436	; 0x8e54
   2f5a8:	e3400003 	movt	r0, #3
   2f5ac:	e3a0209f 	mov	r2, #159	; 0x9f
   2f5b0:	ebffd66f 	bl	24f74 <assertion_failed>
   2f5b4:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f5b8:	e3401003 	movt	r1, #3
   2f5bc:	e3080d24 	movw	r0, #36132	; 0x8d24
   2f5c0:	e3400003 	movt	r0, #3
   2f5c4:	e3a0208f 	mov	r2, #143	; 0x8f
   2f5c8:	ebffd669 	bl	24f74 <assertion_failed>
   2f5cc:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f5d0:	e3401003 	movt	r1, #3
   2f5d4:	e3080d34 	movw	r0, #36148	; 0x8d34
   2f5d8:	e3400003 	movt	r0, #3
   2f5dc:	e3a02090 	mov	r2, #144	; 0x90
   2f5e0:	ebffd663 	bl	24f74 <assertion_failed>
   2f5e4:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f5e8:	e3401003 	movt	r1, #3
   2f5ec:	e3080e3c 	movw	r0, #36412	; 0x8e3c
   2f5f0:	e3400003 	movt	r0, #3
   2f5f4:	e3a0209e 	mov	r2, #158	; 0x9e
   2f5f8:	ebffd65d 	bl	24f74 <assertion_failed>
   2f5fc:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f600:	e3401003 	movt	r1, #3
   2f604:	e3080e10 	movw	r0, #36368	; 0x8e10
   2f608:	e3400003 	movt	r0, #3
   2f60c:	e3a020a4 	mov	r2, #164	; 0xa4
   2f610:	ebffd657 	bl	24f74 <assertion_failed>

0002f614 <CPtrList::Find(void*)>:
   2f614:	e5900000 	ldr	r0, [r0]
   2f618:	e3500000 	cmp	r0, #0
   2f61c:	012fff1e 	bxeq	lr
   2f620:	e5902000 	ldr	r2, [r0]
   2f624:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f628:	e345304c 	movt	r3, #20556	; 0x504c
   2f62c:	e1520003 	cmp	r2, r3
   2f630:	1a00000c 	bne	2f668 <CPtrList::Find(void*)+0x54>
   2f634:	e590300c 	ldr	r3, [r0, #12]
   2f638:	e1510003 	cmp	r1, r3
   2f63c:	1a000003 	bne	2f650 <CPtrList::Find(void*)+0x3c>
   2f640:	e12fff1e 	bx	lr
   2f644:	e590300c 	ldr	r3, [r0, #12]
   2f648:	e1530001 	cmp	r3, r1
   2f64c:	012fff1e 	bxeq	lr
   2f650:	e5900008 	ldr	r0, [r0, #8]
   2f654:	e3500000 	cmp	r0, #0
   2f658:	012fff1e 	bxeq	lr
   2f65c:	e5903000 	ldr	r3, [r0]
   2f660:	e1530002 	cmp	r3, r2
   2f664:	0afffff6 	beq	2f644 <CPtrList::Find(void*)+0x30>
   2f668:	e3081d08 	movw	r1, #36104	; 0x8d08
   2f66c:	e3401003 	movt	r1, #3
   2f670:	e3080d34 	movw	r0, #36148	; 0x8d34
   2f674:	e3400003 	movt	r0, #3
   2f678:	e92d4010 	push	{r4, lr}
   2f67c:	e3a020b3 	mov	r2, #179	; 0xb3
   2f680:	ebffd63b 	bl	24f74 <assertion_failed>

0002f684 <CPageAllocator::CPageAllocator()>:
   2f684:	e3a02000 	mov	r2, #0
   2f688:	e3a01001 	mov	r1, #1
   2f68c:	e5802000 	str	r2, [r0]
   2f690:	e580100c 	str	r1, [r0, #12]
   2f694:	e5802004 	str	r2, [r0, #4]
   2f698:	e5802008 	str	r2, [r0, #8]
   2f69c:	e12fff1e 	bx	lr

0002f6a0 <CPageAllocator::~CPageAllocator()>:
   2f6a0:	e12fff1e 	bx	lr

0002f6a4 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2f6a4:	e2813eff 	add	r3, r1, #4080	; 0xff0
   2f6a8:	e0812002 	add	r2, r1, r2
   2f6ac:	e283300f 	add	r3, r3, #15
   2f6b0:	e3a01a0f 	mov	r1, #61440	; 0xf000
   2f6b4:	e34f1fff 	movt	r1, #65535	; 0xffff
   2f6b8:	e0033001 	and	r3, r3, r1
   2f6bc:	e0022001 	and	r2, r2, r1
   2f6c0:	e5803000 	str	r3, [r0]
   2f6c4:	e5802004 	str	r2, [r0, #4]
   2f6c8:	e12fff1e 	bx	lr

0002f6cc <CPageAllocator::GetFreeSpace() const>:
   2f6cc:	e8900005 	ldm	r0, {r0, r2}
   2f6d0:	e0420000 	sub	r0, r2, r0
   2f6d4:	e12fff1e 	bx	lr

0002f6d8 <CPageAllocator::Allocate()>:
   2f6d8:	e5903000 	ldr	r3, [r0]
   2f6dc:	e92d4070 	push	{r4, r5, r6, lr}
   2f6e0:	e3530000 	cmp	r3, #0
   2f6e4:	0a000028 	beq	2f78c <CPageAllocator::Allocate()+0xb4>
   2f6e8:	e1a04000 	mov	r4, r0
   2f6ec:	e590000c 	ldr	r0, [r0, #12]
   2f6f0:	e3500000 	cmp	r0, #0
   2f6f4:	1a000013 	bne	2f748 <CPageAllocator::Allocate()+0x70>
   2f6f8:	e5945008 	ldr	r5, [r4, #8]
   2f6fc:	e3550000 	cmp	r5, #0
   2f700:	0a000014 	beq	2f758 <CPageAllocator::Allocate()+0x80>
   2f704:	e5952000 	ldr	r2, [r5]
   2f708:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f70c:	e3453047 	movt	r3, #20551	; 0x5047
   2f710:	e1520003 	cmp	r2, r3
   2f714:	1a000022 	bne	2f7a4 <CPageAllocator::Allocate()+0xcc>
   2f718:	e5953004 	ldr	r3, [r5, #4]
   2f71c:	e3a02000 	mov	r2, #0
   2f720:	e5843008 	str	r3, [r4, #8]
   2f724:	e594300c 	ldr	r3, [r4, #12]
   2f728:	e5852000 	str	r2, [r5]
   2f72c:	e3530000 	cmp	r3, #0
   2f730:	1a000001 	bne	2f73c <CPageAllocator::Allocate()+0x64>
   2f734:	e1a00005 	mov	r0, r5
   2f738:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f73c:	ebfff56f 	bl	2cd00 <LeaveCritical>
   2f740:	e1a00005 	mov	r0, r5
   2f744:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f748:	ebfff53f 	bl	2cc4c <EnterCritical>
   2f74c:	e5945008 	ldr	r5, [r4, #8]
   2f750:	e3550000 	cmp	r5, #0
   2f754:	1affffea 	bne	2f704 <CPageAllocator::Allocate()+0x2c>
   2f758:	e5945000 	ldr	r5, [r4]
   2f75c:	e5941004 	ldr	r1, [r4, #4]
   2f760:	e2852a01 	add	r2, r5, #4096	; 0x1000
   2f764:	e594300c 	ldr	r3, [r4, #12]
   2f768:	e5842000 	str	r2, [r4]
   2f76c:	e1520001 	cmp	r2, r1
   2f770:	9affffed 	bls	2f72c <CPageAllocator::Allocate()+0x54>
   2f774:	e3530000 	cmp	r3, #0
   2f778:	01a05003 	moveq	r5, r3
   2f77c:	0affffec 	beq	2f734 <CPageAllocator::Allocate()+0x5c>
   2f780:	ebfff55e 	bl	2cd00 <LeaveCritical>
   2f784:	e3a05000 	mov	r5, #0
   2f788:	eaffffe9 	b	2f734 <CPageAllocator::Allocate()+0x5c>
   2f78c:	e3081e80 	movw	r1, #36480	; 0x8e80
   2f790:	e3401003 	movt	r1, #3
   2f794:	e3080e94 	movw	r0, #36500	; 0x8e94
   2f798:	e3400003 	movt	r0, #3
   2f79c:	e3a02036 	mov	r2, #54	; 0x36
   2f7a0:	ebffd5f3 	bl	24f74 <assertion_failed>
   2f7a4:	e3081e80 	movw	r1, #36480	; 0x8e80
   2f7a8:	e3401003 	movt	r1, #3
   2f7ac:	e3080ea4 	movw	r0, #36516	; 0x8ea4
   2f7b0:	e3400003 	movt	r0, #3
   2f7b4:	e3a02044 	mov	r2, #68	; 0x44
   2f7b8:	ebffd5ed 	bl	24f74 <assertion_failed>

0002f7bc <CPageAllocator::Free(void*)>:
   2f7bc:	e92d4070 	push	{r4, r5, r6, lr}
   2f7c0:	e2515000 	subs	r5, r1, #0
   2f7c4:	08bd8070 	popeq	{r4, r5, r6, pc}
   2f7c8:	e590300c 	ldr	r3, [r0, #12]
   2f7cc:	e3530000 	cmp	r3, #0
   2f7d0:	1a000006 	bne	2f7f0 <CPageAllocator::Free(void*)+0x34>
   2f7d4:	e5902008 	ldr	r2, [r0, #8]
   2f7d8:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f7dc:	e3453047 	movt	r3, #20551	; 0x5047
   2f7e0:	e5853000 	str	r3, [r5]
   2f7e4:	e5852004 	str	r2, [r5, #4]
   2f7e8:	e5805008 	str	r5, [r0, #8]
   2f7ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f7f0:	e1a04000 	mov	r4, r0
   2f7f4:	e1a00003 	mov	r0, r3
   2f7f8:	ebfff513 	bl	2cc4c <EnterCritical>
   2f7fc:	e3043d43 	movw	r3, #19779	; 0x4d43
   2f800:	e3453047 	movt	r3, #20551	; 0x5047
   2f804:	e594100c 	ldr	r1, [r4, #12]
   2f808:	e5942008 	ldr	r2, [r4, #8]
   2f80c:	e3510000 	cmp	r1, #0
   2f810:	e5853000 	str	r3, [r5]
   2f814:	e5852004 	str	r2, [r5, #4]
   2f818:	e5845008 	str	r5, [r4, #8]
   2f81c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2f820:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f824:	eafff535 	b	2cd00 <LeaveCritical>

0002f828 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2f828:	e1a03000 	mov	r3, r0
   2f82c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f830:	e3a0e000 	mov	lr, #0
   2f834:	e1a0c00e 	mov	ip, lr
   2f838:	e28020dc 	add	r2, r0, #220	; 0xdc
   2f83c:	e5801000 	str	r1, [r0]
   2f840:	e5e3e004 	strb	lr, [r3, #4]!
   2f844:	e5a3c004 	str	ip, [r3, #4]!
   2f848:	e1530002 	cmp	r3, r2
   2f84c:	1afffffc 	bne	2f844 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2f850:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002f854 <CGPIOManager::~CGPIOManager()>:
   2f854:	e92d4010 	push	{r4, lr}
   2f858:	e2803004 	add	r3, r0, #4
   2f85c:	e1a04000 	mov	r4, r0
   2f860:	e28010dc 	add	r1, r0, #220	; 0xdc
   2f864:	ea000001 	b	2f870 <CGPIOManager::~CGPIOManager()+0x1c>
   2f868:	e1530001 	cmp	r3, r1
   2f86c:	0a000008 	beq	2f894 <CGPIOManager::~CGPIOManager()+0x40>
   2f870:	e5b32004 	ldr	r2, [r3, #4]!
   2f874:	e3520000 	cmp	r2, #0
   2f878:	0afffffa 	beq	2f868 <CGPIOManager::~CGPIOManager()+0x14>
   2f87c:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2f880:	e3401003 	movt	r1, #3
   2f884:	e3080ed8 	movw	r0, #36568	; 0x8ed8
   2f888:	e3400003 	movt	r0, #3
   2f88c:	e3a0202c 	mov	r2, #44	; 0x2c
   2f890:	ebffd5b7 	bl	24f74 <assertion_failed>
   2f894:	e5d43004 	ldrb	r3, [r4, #4]
   2f898:	e3530000 	cmp	r3, #0
   2f89c:	0a000004 	beq	2f8b4 <CGPIOManager::~CGPIOManager()+0x60>
   2f8a0:	e5940000 	ldr	r0, [r4]
   2f8a4:	e3500000 	cmp	r0, #0
   2f8a8:	0a000003 	beq	2f8bc <CGPIOManager::~CGPIOManager()+0x68>
   2f8ac:	e3a01034 	mov	r1, #52	; 0x34
   2f8b0:	ebfff609 	bl	2d0dc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2f8b4:	e1a00004 	mov	r0, r4
   2f8b8:	e8bd8010 	pop	{r4, pc}
   2f8bc:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2f8c0:	e3401003 	movt	r1, #3
   2f8c4:	e3080eec 	movw	r0, #36588	; 0x8eec
   2f8c8:	e3400003 	movt	r0, #3
   2f8cc:	e3a02032 	mov	r2, #50	; 0x32
   2f8d0:	ebffd5a7 	bl	24f74 <assertion_failed>

0002f8d4 <CGPIOManager::Initialize()>:
   2f8d4:	e5d03004 	ldrb	r3, [r0, #4]
   2f8d8:	e92d4010 	push	{r4, lr}
   2f8dc:	e3530000 	cmp	r3, #0
   2f8e0:	1a00000c 	bne	2f918 <CGPIOManager::Initialize()+0x44>
   2f8e4:	e1a04000 	mov	r4, r0
   2f8e8:	e5900000 	ldr	r0, [r0]
   2f8ec:	e3500000 	cmp	r0, #0
   2f8f0:	0a00000e 	beq	2f930 <CGPIOManager::Initialize()+0x5c>
   2f8f4:	e1a03004 	mov	r3, r4
   2f8f8:	e3a01034 	mov	r1, #52	; 0x34
   2f8fc:	e30f2b48 	movw	r2, #64328	; 0xfb48
   2f900:	e3402002 	movt	r2, #2
   2f904:	ebfff5b5 	bl	2cfe0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2f908:	e3a03001 	mov	r3, #1
   2f90c:	e1a00003 	mov	r0, r3
   2f910:	e5c43004 	strb	r3, [r4, #4]
   2f914:	e8bd8010 	pop	{r4, pc}
   2f918:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2f91c:	e3401003 	movt	r1, #3
   2f920:	e3080f00 	movw	r0, #36608	; 0x8f00
   2f924:	e3400003 	movt	r0, #3
   2f928:	e3a0203b 	mov	r2, #59	; 0x3b
   2f92c:	ebffd590 	bl	24f74 <assertion_failed>
   2f930:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2f934:	e3401003 	movt	r1, #3
   2f938:	e3080eec 	movw	r0, #36588	; 0x8eec
   2f93c:	e3400003 	movt	r0, #3
   2f940:	e3a0203c 	mov	r2, #60	; 0x3c
   2f944:	ebffd58a 	bl	24f74 <assertion_failed>

0002f948 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2f948:	e5d03004 	ldrb	r3, [r0, #4]
   2f94c:	e92d4010 	push	{r4, lr}
   2f950:	e3530000 	cmp	r3, #0
   2f954:	0a00000a 	beq	2f984 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2f958:	e3510000 	cmp	r1, #0
   2f95c:	0a00000e 	beq	2f99c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   2f960:	e5913004 	ldr	r3, [r1, #4]
   2f964:	e3530035 	cmp	r3, #53	; 0x35
   2f968:	8a000011 	bhi	2f9b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2f96c:	e0800103 	add	r0, r0, r3, lsl #2
   2f970:	e5903008 	ldr	r3, [r0, #8]
   2f974:	e3530000 	cmp	r3, #0
   2f978:	1a000013 	bne	2f9cc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2f97c:	e5801008 	str	r1, [r0, #8]
   2f980:	e8bd8010 	pop	{r4, pc}
   2f984:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2f988:	e3401003 	movt	r1, #3
   2f98c:	e3080f14 	movw	r0, #36628	; 0x8f14
   2f990:	e3400003 	movt	r0, #3
   2f994:	e3a02045 	mov	r2, #69	; 0x45
   2f998:	ebffd575 	bl	24f74 <assertion_failed>
   2f99c:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2f9a0:	e3401003 	movt	r1, #3
   2f9a4:	e3080f24 	movw	r0, #36644	; 0x8f24
   2f9a8:	e3400003 	movt	r0, #3
   2f9ac:	e3a02047 	mov	r2, #71	; 0x47
   2f9b0:	ebffd56f 	bl	24f74 <assertion_failed>
   2f9b4:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2f9b8:	e3401003 	movt	r1, #3
   2f9bc:	e3080f30 	movw	r0, #36656	; 0x8f30
   2f9c0:	e3400003 	movt	r0, #3
   2f9c4:	e3a02049 	mov	r2, #73	; 0x49
   2f9c8:	ebffd569 	bl	24f74 <assertion_failed>
   2f9cc:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2f9d0:	e3401003 	movt	r1, #3
   2f9d4:	e3080ed8 	movw	r0, #36568	; 0x8ed8
   2f9d8:	e3400003 	movt	r0, #3
   2f9dc:	e3a0204b 	mov	r2, #75	; 0x4b
   2f9e0:	ebffd563 	bl	24f74 <assertion_failed>

0002f9e4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2f9e4:	e5d03004 	ldrb	r3, [r0, #4]
   2f9e8:	e92d4010 	push	{r4, lr}
   2f9ec:	e3530000 	cmp	r3, #0
   2f9f0:	0a00000b 	beq	2fa24 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2f9f4:	e3510000 	cmp	r1, #0
   2f9f8:	0a00000f 	beq	2fa3c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   2f9fc:	e5913004 	ldr	r3, [r1, #4]
   2fa00:	e3530035 	cmp	r3, #53	; 0x35
   2fa04:	8a000012 	bhi	2fa54 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2fa08:	e0800103 	add	r0, r0, r3, lsl #2
   2fa0c:	e5903008 	ldr	r3, [r0, #8]
   2fa10:	e3530000 	cmp	r3, #0
   2fa14:	0a000014 	beq	2fa6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2fa18:	e3a03000 	mov	r3, #0
   2fa1c:	e5803008 	str	r3, [r0, #8]
   2fa20:	e8bd8010 	pop	{r4, pc}
   2fa24:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2fa28:	e3401003 	movt	r1, #3
   2fa2c:	e3080f14 	movw	r0, #36628	; 0x8f14
   2fa30:	e3400003 	movt	r0, #3
   2fa34:	e3a02052 	mov	r2, #82	; 0x52
   2fa38:	ebffd54d 	bl	24f74 <assertion_failed>
   2fa3c:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2fa40:	e3401003 	movt	r1, #3
   2fa44:	e3080f24 	movw	r0, #36644	; 0x8f24
   2fa48:	e3400003 	movt	r0, #3
   2fa4c:	e3a02054 	mov	r2, #84	; 0x54
   2fa50:	ebffd547 	bl	24f74 <assertion_failed>
   2fa54:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2fa58:	e3401003 	movt	r1, #3
   2fa5c:	e3080f30 	movw	r0, #36656	; 0x8f30
   2fa60:	e3400003 	movt	r0, #3
   2fa64:	e3a02056 	mov	r2, #86	; 0x56
   2fa68:	ebffd541 	bl	24f74 <assertion_failed>
   2fa6c:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2fa70:	e3401003 	movt	r1, #3
   2fa74:	e3080f44 	movw	r0, #36676	; 0x8f44
   2fa78:	e3400003 	movt	r0, #3
   2fa7c:	e3a02058 	mov	r2, #88	; 0x58
   2fa80:	ebffd53b 	bl	24f74 <assertion_failed>

0002fa84 <CGPIOManager::InterruptHandler()>:
   2fa84:	e5d03004 	ldrb	r3, [r0, #4]
   2fa88:	e92d4070 	push	{r4, r5, r6, lr}
   2fa8c:	e3530000 	cmp	r3, #0
   2fa90:	0a000026 	beq	2fb30 <CGPIOManager::InterruptHandler()+0xac>
   2fa94:	e3a03000 	mov	r3, #0
   2fa98:	e3433f20 	movt	r3, #16160	; 0x3f20
   2fa9c:	e1a02003 	mov	r2, r3
   2faa0:	e3a04000 	mov	r4, #0
   2faa4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2faa8:	ea000005 	b	2fac4 <CGPIOManager::InterruptHandler()+0x40>
   2faac:	e2844001 	add	r4, r4, #1
   2fab0:	e314001f 	tst	r4, #31
   2fab4:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2fab8:	11a030a3 	lsrne	r3, r3, #1
   2fabc:	e3540036 	cmp	r4, #54	; 0x36
   2fac0:	08bd8070 	popeq	{r4, r5, r6, pc}
   2fac4:	e3130001 	tst	r3, #1
   2fac8:	0afffff7 	beq	2faac <CGPIOManager::InterruptHandler()+0x28>
   2facc:	e2843002 	add	r3, r4, #2
   2fad0:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2fad4:	e3550000 	cmp	r5, #0
   2fad8:	0a000009 	beq	2fb04 <CGPIOManager::InterruptHandler()+0x80>
   2fadc:	e1a00005 	mov	r0, r5
   2fae0:	ebfffd83 	bl	2f0f4 <CGPIOPin::InterruptHandler()>
   2fae4:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2fae8:	e3530000 	cmp	r3, #0
   2faec:	13a03040 	movne	r3, #64	; 0x40
   2faf0:	13433f20 	movtne	r3, #16160	; 0x3f20
   2faf4:	15952008 	ldrne	r2, [r5, #8]
   2faf8:	1595100c 	ldrne	r1, [r5, #12]
   2fafc:	17821003 	strne	r1, [r2, r3]
   2fb00:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fb04:	e1a00004 	mov	r0, r4
   2fb08:	ebfffd98 	bl	2f170 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2fb0c:	e3a03010 	mov	r3, #16
   2fb10:	e3403fc8 	movt	r3, #4040	; 0xfc8
   2fb14:	e08332a4 	add	r3, r3, r4, lsr #5
   2fb18:	e3a02001 	mov	r2, #1
   2fb1c:	e1a03103 	lsl	r3, r3, #2
   2fb20:	e204401f 	and	r4, r4, #31
   2fb24:	e1a04412 	lsl	r4, r2, r4
   2fb28:	e5834000 	str	r4, [r3]
   2fb2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fb30:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2fb34:	e3401003 	movt	r1, #3
   2fb38:	e3080f14 	movw	r0, #36628	; 0x8f14
   2fb3c:	e3400003 	movt	r0, #3
   2fb40:	e3a0205e 	mov	r2, #94	; 0x5e
   2fb44:	ebffd50a 	bl	24f74 <assertion_failed>

0002fb48 <CGPIOManager::InterruptStub(void*)>:
   2fb48:	e3500000 	cmp	r0, #0
   2fb4c:	0a000000 	beq	2fb54 <CGPIOManager::InterruptStub(void*)+0xc>
   2fb50:	eaffffcb 	b	2fa84 <CGPIOManager::InterruptHandler()>
   2fb54:	e3081ec8 	movw	r1, #36552	; 0x8ec8
   2fb58:	e3401003 	movt	r1, #3
   2fb5c:	e3000860 	movw	r0, #2144	; 0x860
   2fb60:	e3400003 	movt	r0, #3
   2fb64:	e92d4010 	push	{r4, lr}
   2fb68:	e3a0208e 	mov	r2, #142	; 0x8e
   2fb6c:	ebffd500 	bl	24f74 <assertion_failed>
